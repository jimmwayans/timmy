/*       */ package com.adventnet.appmanager.struts.actions;
/*       */ 
/*       */ import HTTPClient.HTTPConnection;
/*       */ import HTTPClient.HTTPResponse;
/*       */ import HTTPClient.HttpURLConnection;
/*       */ import HTTPClient.NVPair;
/*       */ import com.adventnet.appmanager.cam.jmx12.CAMJMX12Util;
/*       */ import com.adventnet.appmanager.client.resourcemanagement.AMManagedObjectCloning;
/*       */ import com.adventnet.appmanager.client.resourcemanagement.ManagedApplication;
/*       */ import com.adventnet.appmanager.db.AMConnectionPool;
/*       */ import com.adventnet.appmanager.db.DBQueryUtil;
/*       */ import com.adventnet.appmanager.dbcache.AMAttributesCache;
/*       */ import com.adventnet.appmanager.dbcache.AMCacheHandler;
/*       */ import com.adventnet.appmanager.fault.AMAttributesDependencyAdder;
/*       */ import com.adventnet.appmanager.fault.AMRCAnalyser;
/*       */ import com.adventnet.appmanager.fault.ExecuteSDPTicketAction;
/*       */ import com.adventnet.appmanager.fault.FaultUtil;
/*       */ import com.adventnet.appmanager.logging.AMLog;
/*       */ import com.adventnet.appmanager.server.dao.AMManagedObject;
/*       */ import com.adventnet.appmanager.server.dao.AMManagedObjectDao;
/*       */ import com.adventnet.appmanager.server.discovery.HostDiscoveryHandler;
/*       */ import com.adventnet.appmanager.server.discovery.NetworkDiscoveryHandler;
/*       */ import com.adventnet.appmanager.server.discovery.SeedFileParser;
/*       */ import com.adventnet.appmanager.server.framework.AMServerFramework;
/*       */ import com.adventnet.appmanager.server.framework.AMServerStartup;
/*       */ import com.adventnet.appmanager.server.framework.FreeEditionDetails;
/*       */ import com.adventnet.appmanager.server.framework.NewMonitorUtil;
/*       */ import com.adventnet.appmanager.server.framework.comm.CommJob;
/*       */ import com.adventnet.appmanager.server.framework.comm.Communication;
/*       */ import com.adventnet.appmanager.server.framework.credentialManager.CredentialManagerUtil;
/*       */ import com.adventnet.appmanager.server.framework.datacollection.AMDCInf;
/*       */ import com.adventnet.appmanager.server.framework.datacollection.AMDataCollector;
/*       */ import com.adventnet.appmanager.server.framework.datacollection.DataCollectionControllerUtil;
/*       */ import com.adventnet.appmanager.server.framework.datacollection.DataCollectionDBUtil;
/*       */ import com.adventnet.appmanager.server.framework.extprod.SDPIntegConfig;
/*       */ import com.adventnet.appmanager.server.framework.extprod.ServiceNowIntegConfig;
/*       */ import com.adventnet.appmanager.server.framework.statuspoll.Smtp;
/*       */ import com.adventnet.appmanager.server.urlmonitor.UrlCheck;
/*       */ import com.adventnet.appmanager.struts.beans.APMHDClientUtil;
/*       */ import com.adventnet.appmanager.struts.beans.ClientDBUtil;
/*       */ import com.adventnet.appmanager.struts.form.AMActionForm;
/*       */ import com.adventnet.appmanager.util.CustomExpressionUtil;
/*       */ import com.adventnet.appmanager.util.DBUtil;
/*       */ import com.adventnet.appmanager.util.DataCollectionComponent;
/*       */ import com.adventnet.appmanager.util.DiagnosticsUtil;
/*       */ import com.adventnet.appmanager.util.EnterpriseUtil;
/*       */ import com.adventnet.appmanager.util.ExtProdUtil;
/*       */ import com.adventnet.appmanager.util.FormatUtil;
/*       */ import com.adventnet.appmanager.util.MASSyncUtil;
/*       */ import com.adventnet.appmanager.util.OEMUtil;
/*       */ import com.adventnet.appmanager.util.ProxyUtil;
/*       */ import com.adventnet.appmanager.util.ReportDataUtilities;
/*       */ import com.adventnet.appmanager.util.RetreiveFeedHandler;
/*       */ import com.adventnet.appmanager.util.RssConnector;
/*       */ import com.adventnet.appmanager.util.ServiceNowIntegUtil;
/*       */ import com.adventnet.appmanager.util.SmtpEMailer;
/*       */ import com.adventnet.appmanager.utils.client.ThresholdActionsAPIUtil;
/*       */ import com.adventnet.nms.applnfw.discovery.server.ApplnDiscovery;
/*       */ import com.adventnet.nms.applnfw.discovery.server.ResourceTypeIfc;
/*       */ import com.adventnet.nms.applnfw.discovery.server.model.DiscoveryInfo;
/*       */ import com.adventnet.nms.store.relational.RelationalAPI;
/*       */ import com.adventnet.nms.topodb.Network;
/*       */ import com.adventnet.nms.topodb.TopoAPI;
/*       */ import com.adventnet.nms.util.DBParamsParser;
/*       */ import com.adventnet.nms.util.NmsUtil;
/*       */ import com.adventnet.nms.util.PureUtils;
/*       */ import com.adventnet.rss.db.DBPersistence;
/*       */ import com.adventnet.rss.reader.FeedLoginParams;
/*       */ import com.adventnet.rss.reader.FeedURL;
/*       */ import com.adventnet.tools.prevalent.CMDClass;
/*       */ import com.adventnet.tools.prevalent.LUtil;
/*       */ import com.adventnet.tools.prevalent.Validation;
/*       */ import com.adventnet.tools.prevalent.Wield;
/*       */ import com.adventnet.utilities.stringutils.StrUtil;
/*       */ import com.manageengine.appmanager.util.DelegatedUserRoleUtil;
/*       */ import com.me.apm.cmdb.APMHDSettingsUtil;
/*       */ import com.me.apm.cmdb.APMHelpDeskUtil;
/*       */ import com.me.apm.cmdb.CMDBResyncThread;
/*       */ import com.me.apm.fault.threshold.util.ThresholdUtil;
/*       */ import com.me.helpdesk.object.TicketSettings;
/*       */ import com.me.helpdesk.response.record.Record;
/*       */ import java.awt.Graphics2D;
/*       */ import java.awt.image.BufferedImage;
/*       */ import java.io.BufferedReader;
/*       */ import java.io.File;
/*       */ import java.io.FileInputStream;
/*       */ import java.io.FileNotFoundException;
/*       */ import java.io.FileOutputStream;
/*       */ import java.io.FileWriter;
/*       */ import java.io.IOException;
/*       */ import java.io.InputStream;
/*       */ import java.io.ObjectOutputStream;
/*       */ import java.io.OutputStream;
/*       */ import java.io.PrintStream;
/*       */ import java.io.PrintWriter;
/*       */ import java.lang.reflect.Method;
/*       */ import java.net.ConnectException;
/*       */ import java.net.InetAddress;
/*       */ import java.net.NoRouteToHostException;
/*       */ import java.net.Socket;
/*       */ import java.net.URL;
/*       */ import java.net.URLDecoder;
/*       */ import java.net.URLEncoder;
/*       */ import java.net.UnknownHostException;
/*       */ import java.sql.Connection;
/*       */ import java.sql.PreparedStatement;
/*       */ import java.sql.ResultSet;
/*       */ import java.sql.SQLException;
/*       */ import java.sql.Statement;
/*       */ import java.util.ArrayList;
/*       */ import java.util.Arrays;
/*       */ import java.util.Enumeration;
/*       */ import java.util.HashMap;
/*       */ import java.util.HashSet;
/*       */ import java.util.Hashtable;
/*       */ import java.util.Iterator;
/*       */ import java.util.List;
/*       */ import java.util.Map;
/*       */ import java.util.Map.Entry;
/*       */ import java.util.Properties;
/*       */ import java.util.Set;
/*       */ import java.util.StringTokenizer;
/*       */ import java.util.Vector;
/*       */ import java.util.concurrent.ConcurrentHashMap;
/*       */ import javax.servlet.ServletContext;
/*       */ import javax.servlet.http.HttpServletRequest;
/*       */ import javax.servlet.http.HttpServletResponse;
/*       */ import javax.servlet.http.HttpSession;
/*       */ import org.apache.commons.httpclient.HttpClient;
/*       */ import org.apache.commons.httpclient.methods.GetMethod;
/*       */ import org.apache.commons.httpclient.methods.PostMethod;
/*       */ import org.apache.commons.logging.Log;
/*       */ import org.apache.struts.action.ActionError;
/*       */ import org.apache.struts.action.ActionErrors;
/*       */ import org.apache.struts.action.ActionForm;
/*       */ import org.apache.struts.action.ActionForward;
/*       */ import org.apache.struts.action.ActionMapping;
/*       */ import org.apache.struts.action.ActionMessage;
/*       */ import org.apache.struts.action.ActionMessages;
/*       */ import org.apache.struts.upload.FormFile;
/*       */ import org.htmlparser.util.Translate;
/*       */ import org.jsmsengine.server.CMainThread;
/*       */ import org.json.JSONArray;
/*       */ import org.json.JSONObject;
/*       */ import org.smslib.CDeviceInfo;
/*       */ import org.smslib.CService;
/*       */ 
/*       */ public final class AdminActions extends org.apache.struts.actions.DispatchAction
/*       */ {
/*       */   private ManagedApplication mo;
/*       */   private String mibName;
/*       */   private String types;
/*   153 */   private static ArrayList native_ids = null;
/*       */   private boolean seccheck;
/*       */   private String qengineHome;
/*       */   private boolean isOPMConfigured;
/*       */   private boolean isLogATicketToBePostedToOPM;
/*       */   CredentialManagerUtil credUtil;
/*       */   com.adventnet.appmanager.server.framework.confparser.PreConfMonitorXMLParser preConfParser;
/*       */   HashMap preConfMap;
/*   161 */   private static final String APM_HOME = System.getProperty("webnms.rootdir", ".");
/*       */   private ArrayList<String> attrbIdsForSimilarResourceType;
/*       */   private org.jsmsengine.server.SMSServer jsms;
/*       */   
/*   165 */   private String getSDPCompName(String str) { if ((str != null) && (str.indexOf("_") > 0))
/*       */     {
/*   167 */       str = str.substring(str.indexOf("_") + 1);
/*       */     }
/*   169 */     return str;
/*       */   }
/*       */   
/*       */   private String getSDPCompId(String str) {
/*   173 */     if ((str != null) && (str.indexOf("_") > 0))
/*       */     {
/*   175 */       str = str.substring(0, str.indexOf("_"));
/*       */     }
/*   177 */     return str;
/*       */   }
/*       */   
/*       */   public ActionForward switchEdition(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
/*       */   {
/*   182 */     String type = request.getParameter("type");
/*   183 */     type = type.toUpperCase();
/*   184 */     AMLog.debug("type=" + type + "\t servertype=" + EnterpriseUtil.getServerType());
/*   185 */     ActionMessages messages = new ActionMessages();
/*   186 */     if (EnterpriseUtil.getServerType().equalsIgnoreCase(type))
/*       */     {
/*   188 */       return new ActionForward("/showresource.do?group=All&method=showResourceTypes&monitor_viewtype=categoryview");
/*       */     }
/*       */     try
/*       */     {
/*   192 */       updateEditionOnType(type);
/*   193 */       String m1 = FormatUtil.getString("license.migration.switchEdition.success", new String[] { FormatUtil.getString("am.webclient.edition.professional.type"), FormatUtil.getString("am.webclient.edition.cloud.type") });
/*   194 */       if (type.equalsIgnoreCase("norm"))
/*       */       {
/*   196 */         m1 = FormatUtil.getString("license.migration.switchEdition.success", new String[] { FormatUtil.getString("am.webclient.edition.cloud.type"), FormatUtil.getString("am.webclient.edition.professional.type") });
/*       */       }
/*   198 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage(m1));
/*   199 */       saveMessages(request, messages);
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/*   203 */       String m1 = FormatUtil.getString("license.migration.switchEdition.failed", new String[] { FormatUtil.getString("am.webclient.edition.professional.type"), FormatUtil.getString("am.webclient.edition.cloud.type") });
/*   204 */       if (type.equalsIgnoreCase("norm"))
/*       */       {
/*   206 */         m1 = FormatUtil.getString("license.migration.switchEdition.failed", new String[] { FormatUtil.getString("am.webclient.edition.cloud.type"), FormatUtil.getString("am.webclient.edition.professional.type") });
/*       */       }
/*   208 */       ActionErrors errors = new ActionErrors();
/*   209 */       errors.add("org.apache.struts.action.GLOBAL_ERROR", new ActionError(m1));
/*   210 */       saveErrors(request, errors);
/*       */     }
/*   212 */     return new ActionForward("/showresource.do?group=All&method=showResourceTypes&monitor_viewtype=categoryview");
/*       */   }
/*       */   
/*       */   private void updateEditionOnType(String type) throws Exception
/*       */   {
/*       */     try
/*       */     {
/*   219 */       String fileName = null;
/*   220 */       if (type.equals("CLOUD"))
/*       */       {
/*   222 */         fileName = "CloudEvaluation.xml";
/*       */       }
/*       */       else
/*       */       {
/*   226 */         fileName = "ProfessionalEvaluation.xml";
/*       */       }
/*   228 */       boolean xmlLicenseexists = new File("." + File.separator + "classes" + File.separator + fileName).exists();
/*   229 */       if (xmlLicenseexists)
/*       */       {
/*   231 */         CMDClass cmd = new CMDClass();
/*   232 */         Vector users = cmd.getUserList("." + File.separator + "classes" + File.separator + fileName);
/*   233 */         if ((users == null) || (users.size() == 0))
/*       */         {
/*   235 */           return;
/*       */         }
/*   237 */         String user = (String)users.elementAt(0);
/*   238 */         LUtil.setISMP(true);
/*   239 */         Wield w = Wield.getInstance();
/*   240 */         Validation valid = Validation.getInstance();
/*   241 */         System.setProperty("IsWeb", "true");
/*   242 */         FreeEditionDetails freeEd = FreeEditionDetails.getFreeEditionDetails();
/*   243 */         boolean success = valid.doValidation(".", user, "." + File.separator + "classes" + File.separator + fileName, false, false);
/*   244 */         if (java.util.Locale.getDefault().toString().equals("zh_CN"))
/*       */         {
/*   246 */           com.adventnet.tools.prevalent.InputFileParser parser = null;
/*       */           try
/*       */           {
/*   249 */             parser = new com.adventnet.tools.prevalent.InputFileParser("." + File.separator + "classes" + File.separator + fileName);
/*       */           }
/*       */           catch (Exception exp)
/*       */           {
/*   253 */             exp.printStackTrace();
/*       */           }
/*   255 */           com.adventnet.tools.prevalent.DataClass data = parser.getDataClass();
/*   256 */           ArrayList users1 = data.getUsers();
/*   257 */           com.adventnet.tools.prevalent.User user1 = data.getUserObject((String)users1.get(0));
/*   258 */           user1.getMacId();
/*   259 */           if ((user1.getMacId() != null) && (user1.getMacId().equals("NO")) && (EnterpriseUtil.getServerType().equals("NORM")))
/*       */           {
/*       */ 
/*   262 */             AMLog.debug("Lincense Failed");
/*       */           }
/*       */         }
/*       */         
/*   266 */         if (success)
/*       */         {
/*   268 */           valid.copyLicenseFile(".", "." + File.separator + "classes" + File.separator + fileName);
/*   269 */           com.adventnet.appmanager.filter.UriCollector.setAccess(true);
/*   270 */           AMLog.debug("The License file has been registered successfully ");
/*   271 */           AMLog.debug("Company Name    : " + w.getCompanyName());
/*   272 */           AMLog.debug("License Type    : " + w.getLicenseTypeString() + "(" + w.getLicenseType() + ")");
/*   273 */           AMLog.debug("User Name       : " + w.getUserName());
/*   274 */           AMLog.debug("Product Name    : " + w.getProductName());
/*   275 */           AMLog.debug("Product Version : " + w.getProductVersion());
/*   276 */           AMLog.debug("Product Category: " + w.getProductCategoryString());
/*   277 */           FreeEditionDetails.getFreeEditionDetails().update();
/*   278 */           AMServerFramework.toXtraMonitorsPage = true;
/*       */ 
/*       */         }
/*       */         else
/*       */         {
/*   283 */           AMLog.fatal("License migration failure error code " + LUtil.getErrorCode());
/*   284 */           AMLog.fatal("License migration failure error message " + LUtil.getErrorMessage());
/*   285 */           AMLog.fatal("License migration failure detailed error message " + LUtil.getDetailedErrorMessage());
/*       */         }
/*   287 */         this.mo.executeUpdateStmt("update AM_GLOBALCONFIG set value='" + w.getUserType() + "' where NAME='type'");
/*       */       }
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/*   292 */       throw e;
/*       */     }
/*       */   }
/*       */   
/*       */   public ActionForward createEmailAction(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
/*       */   {
/*   298 */     String type = request.getParameter("cancel");
/*   299 */     String returnpath = request.getParameter("returnpath");
/*   300 */     String popupParam = request.getParameter("popup");
/*   301 */     boolean popup = (popupParam != null) && (popupParam.equals("true"));
/*   302 */     ActionMessages messages = new ActionMessages();
/*   303 */     String isBusinessTimeToActionEnabled = request.getParameter("businessHourAssociatedToAction");
/*   304 */     if (type.equals("false"))
/*       */     {
/*   306 */       String displayname = request.getParameter("displayname");
/*   307 */       if (DBQueryUtil.getDBType().equals("mssql"))
/*       */       {
/*   309 */         displayname = displayname.replaceAll("'", "''");
/*       */       }
/*       */       else
/*       */       {
/*   313 */         displayname = displayname.replaceAll("'", "\\\\'");
/*       */       }
/*   315 */       String checkquery = "select * from AM_ACTIONPROFILE where NAME='" + displayname + "'";
/*   316 */       ArrayList list = this.mo.getRows(checkquery);
/*   317 */       if (list.size() == 0)
/*       */       {
/*   319 */         int id = -1;
/*   320 */         if ("true".equals(request.getParameter("adminAPIRequest"))) {
/*       */           try {
/*   322 */             id = Integer.parseInt(request.getParameter("actionid"));
/*       */           } catch (NumberFormatException num) {
/*   324 */             num.printStackTrace();
/*       */           }
/*       */         } else {
/*   327 */           id = DBQueryUtil.getIncrementedID("ID", "AM_ACTIONPROFILE");
/*       */         }
/*   329 */         if (id == -1) {
/*   330 */           id = DBQueryUtil.getIncrementedID("ID", "AM_ACTIONPROFILE");
/*       */         }
/*   332 */         if ((EnterpriseUtil.isAdminServer()) && (id < 10000)) {
/*   333 */           id = 10000;
/*       */         }
/*   335 */         String insertquery = "insert into AM_ACTIONPROFILE (ID,NAME, TYPE) values('" + id + "','" + displayname + "','1' ) ";
/*   336 */         this.mo.executeUpdateStmt(insertquery);
/*   337 */         DelegatedUserRoleUtil.addEntryToConfigUserTable(request, id, 2);
/*   338 */         int appendMessage = 0;
/*       */         
/*       */ 
/*       */ 
/*       */ 
/*   343 */         if (request.getParameter("appendMessage") != null)
/*       */         {
/*   345 */           appendMessage = 1;
/*       */         }
/*   347 */         PreparedStatement ps = AMConnectionPool.getConnection().prepareStatement("insert into AM_EMAILACTION (ID, FROMADDRESS, TOADDRESS, SUBJECT, MESSAGE, SMTPSERVER, SMTPPORT, MAILFORMAT, APPENDMESSAGE) values (?,?,?,?,?,?,?,?,?)");
/*       */         try
/*       */         {
/*   350 */           ps.setInt(1, id);
/*   351 */           ps.setString(2, Translate.decode(request.getParameter("fromaddress")));
/*   352 */           ps.setString(3, Translate.decode(request.getParameter("toaddress")));
/*   353 */           ps.setString(4, Translate.decode(request.getParameter("subject")));
/*   354 */           ps.setString(5, Translate.decode(request.getParameter("message")));
/*   355 */           ps.setString(6, request.getParameter("smtpserver"));
/*   356 */           ps.setInt(7, request.getParameter("smtpport") != null ? Integer.parseInt(request.getParameter("smtpport")) : 0);
/*   357 */           ps.setInt(8, request.getParameter("mailFormat") != null ? Integer.parseInt(request.getParameter("mailFormat")) : 0);
/*   358 */           ps.setInt(9, appendMessage);
/*   359 */           ps.executeUpdate();
/*       */           
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */           try
/*       */           {
/*   369 */             if (ps != null)
/*       */             {
/*   371 */               ps.close();
/*       */             }
/*       */           }
/*       */           catch (Exception ex)
/*       */           {
/*   376 */             ex.printStackTrace();
/*       */           }
/*       */           
/*   379 */           if (isBusinessTimeToActionEnabled == null) {
/*       */             break label675;
/*       */           }
/*       */         }
/*       */         catch (Exception exp)
/*       */         {
/*   363 */           exp.printStackTrace();
/*       */         }
/*       */         finally
/*       */         {
/*       */           try
/*       */           {
/*   369 */             if (ps != null)
/*       */             {
/*   371 */               ps.close();
/*       */             }
/*       */           }
/*       */           catch (Exception ex)
/*       */           {
/*   376 */             ex.printStackTrace();
/*       */           }
/*       */         }
/*       */         
/*       */ 
/*   381 */         int businessID = Integer.parseInt(request.getParameter("selectedBusinessHourID"));
/*   382 */         String businessType = request.getParameter("businessType");
/*   383 */         int executeDuringBH = businessType != null ? Integer.parseInt(businessType) : 1;
/*   384 */         boolean operResult = DBUtil.insertBusinessTimeToActionMapper(id, businessID, executeDuringBH);
/*       */         label675:
/*   386 */         if (EnterpriseUtil.isAdminServer()) {
/*   387 */           ThresholdActionsAPIUtil.synchEmailActions(request, id, false);
/*       */         }
/*   389 */         messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("emailaction.create.success"));
/*   390 */         saveMessages(request, messages);
/*   391 */         if (popup)
/*       */         {
/*   393 */           associateActions(request);
/*   394 */           messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("emailaction.createandassociate.success"));
/*       */           
/*   396 */           return new ActionForward("/jsp/ThresholdCreationForwarder.jsp" + getWizString(request));
/*       */         }
/*       */       }
/*       */       else
/*       */       {
/*   401 */         messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("emailaction.create.alreadyexists", request.getParameter("displayname")));
/*   402 */         saveMessages(request, messages);
/*   403 */         if (popup)
/*       */         {
/*   405 */           return new ActionForward("/jsp/EMailActionForm.jsp");
/*       */         }
/*   407 */         return new ActionForward("/showTile.do?TileName=.EmailActions");
/*       */       }
/*       */       
/*   410 */       if (returnpath != null)
/*       */       {
/*   412 */         request.setAttribute("showAdvancedOptions", "true");
/*   413 */         return new ActionForward(returnpath);
/*       */       }
/*       */       
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*   421 */       return mapping.findForward("success");
/*       */     }
/*       */     
/*       */ 
/*       */ 
/*   426 */     if (returnpath != null) {
/*   427 */       return new ActionForward(returnpath);
/*       */     }
/*   429 */     return mapping.findForward("success");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward copyPasteMonitor(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*   443 */     ActionMessages messages = new ActionMessages();
/*   444 */     ActionErrors errors = new ActionErrors();
/*   445 */     String network = request.getParameter("networkAddress");
/*   446 */     String subnet = request.getParameter("netmask");
/*   447 */     String name = request.getParameter("name");
/*   448 */     String resourceid = request.getParameter("resourceid");
/*   449 */     String group = request.getParameter("group");
/*   450 */     String mode = request.getParameter("mode");
/*   451 */     Properties p = new Properties();
/*   452 */     p.setProperty("hostip", network);
/*   453 */     p.setProperty("subnet", subnet);
/*   454 */     p.setProperty("group", group);
/*   455 */     AMManagedObjectCloning cl = new AMManagedObjectCloning();
/*   456 */     ArrayList ht = null;
/*   457 */     if (!DataCollectionControllerUtil.isallowed())
/*       */     {
/*       */ 
/*   460 */       return new ActionForward("/jsp/CopyMonitor.jsp?resourceid=" + resourceid + "&showmessage=true&licensefailed=true");
/*       */     }
/*   462 */     if ((group != null) && (group.equals("SYS")))
/*       */     {
/*   464 */       p.setProperty("mode", mode);
/*   465 */       ht = cl.addMonitors(resourceid, p, com.adventnet.appmanager.client.views.ViewsCreator.getServicesInHost(name));
/*       */     }
/*       */     else
/*       */     {
/*   469 */       ht = cl.addMonitors(resourceid, p, new ArrayList());
/*       */     }
/*   471 */     request.setAttribute("discoverystatus", ht);
/*       */     
/*   473 */     return new ActionForward("/jsp/CopyMonitor.jsp?resourceid=" + resourceid + "&showmessage=true");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward editEmailAction(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*   482 */     ActionMessages messages = new ActionMessages();
/*   483 */     AMActionForm amform = (AMActionForm)form;
/*   484 */     String update = request.getParameter("update");
/*   485 */     String displayname = request.getParameter("displayname");
/*   486 */     if ((amform.getId() < 10000000) && (displayname.lastIndexOf("_Admin") <= 0))
/*       */     {
/*   488 */       displayname = displayname + "_Admin";
/*       */     }
/*   490 */     if (DBQueryUtil.getDBType().equals("mssql"))
/*       */     {
/*   492 */       displayname = displayname.replaceAll("'", "''");
/*       */     }
/*       */     else
/*       */     {
/*   496 */       displayname = displayname.replaceAll("'", "\\\\'");
/*       */     }
/*   498 */     String checkquery = "select * from AM_ACTIONPROFILE where NAME='" + displayname + "' and ID!=" + amform.getId();
/*   499 */     ArrayList list = this.mo.getRows(checkquery);
/*   500 */     if (list.size() == 0)
/*       */     {
/*   502 */       String isBusinessTimeToActionEnabled = request.getParameter("businessHourAssociatedToAction");
/*   503 */       String actualBussinessID = request.getParameter("actualBussinessID");
/*   504 */       if (isBusinessTimeToActionEnabled != null)
/*       */       {
/*   506 */         String selectedBusinessHourID = request.getParameter("selectedBusinessHourID");
/*   507 */         int businessID = Integer.parseInt(selectedBusinessHourID);
/*   508 */         String businessType = request.getParameter("businessType");
/*   509 */         int executeDuringBH = businessType != null ? Integer.parseInt(businessType) : 1;
/*   510 */         if ((actualBussinessID == null) || (actualBussinessID.equals("")))
/*       */         {
/*   512 */           DBUtil.insertBusinessTimeToActionMapper(amform.getId(), businessID, executeDuringBH);
/*       */         }
/*       */         else
/*       */         {
/*   516 */           DBUtil.updateBusinessTimeToActionMapper(amform.getId(), businessID, executeDuringBH);
/*       */         }
/*       */         
/*       */ 
/*       */       }
/*   521 */       else if ((actualBussinessID != null) && (!actualBussinessID.equals("")))
/*       */       {
/*   523 */         DBUtil.deleteActionAssociatedBusinessHour(actualBussinessID, "" + amform.getId());
/*       */       }
/*       */       
/*   526 */       String updateactionquery = "update AM_ACTIONPROFILE set NAME='" + displayname + "' where ID = " + amform.getId();
/*   527 */       this.mo.executeUpdateStmt(updateactionquery);
/*       */       
/*   529 */       PreparedStatement ps = null;
/*       */       try
/*       */       {
/*   532 */         if (update == null) {
/*   533 */           int appendMessage = 0;
/*       */           
/*       */ 
/*       */ 
/*       */ 
/*   538 */           if (request.getParameter("appendMessage") != null)
/*       */           {
/*   540 */             appendMessage = 1;
/*       */           }
/*   542 */           ps = AMConnectionPool.getConnection().prepareStatement("update AM_EMAILACTION set FROMADDRESS=?,TOADDRESS=?,SUBJECT=?,MESSAGE=?,SMTPSERVER=?,SMTPPORT=?,MAILFORMAT=?,APPENDMESSAGE=? where ID =?");
/*       */           try
/*       */           {
/*   545 */             ps.setString(1, Translate.decode(amform.getFromaddress()));
/*   546 */             ps.setString(2, Translate.decode(amform.getToaddress()));
/*   547 */             ps.setString(3, Translate.decode(amform.getSubject()));
/*   548 */             ps.setString(4, Translate.decode(amform.getMessage()));
/*   549 */             ps.setString(5, amform.getSmtpserver());
/*   550 */             ps.setInt(6, amform.getSmtpport());
/*   551 */             ps.setInt(7, Integer.parseInt(amform.getMailFormat()));
/*   552 */             ps.setInt(8, appendMessage);
/*   553 */             ps.setInt(9, amform.getId());
/*   554 */             ps.executeUpdate();
/*       */           }
/*       */           catch (Exception exp)
/*       */           {
/*   558 */             exp.printStackTrace();
/*       */           }
/*       */         } else {
/*   561 */           ps = AMConnectionPool.getConnection().prepareStatement("update AM_EMAILACTION set FROMADDRESS=?,TOADDRESS=?,SUBJECT=?,MESSAGE=? where ID =?");
/*       */           try
/*       */           {
/*   564 */             ps.setString(1, Translate.decode(amform.getFromaddress()));
/*   565 */             ps.setString(2, Translate.decode(amform.getToaddress()));
/*   566 */             ps.setString(3, Translate.decode(amform.getSubject()));
/*   567 */             ps.setString(4, Translate.decode(amform.getMessage()));
/*   568 */             ps.setInt(5, amform.getId());
/*   569 */             ps.executeUpdate();
/*       */           }
/*       */           catch (Exception exp)
/*       */           {
/*   573 */             exp.printStackTrace();
/*       */           }
/*       */         }
/*   576 */         if (EnterpriseUtil.isAdminServer()) {
/*   577 */           ThresholdActionsAPIUtil.synchEmailActions(request, amform.getId(), true);
/*       */         }
/*       */         
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */         try
/*       */         {
/*   588 */           if (ps != null)
/*       */           {
/*   590 */             ps.close();
/*       */           }
/*       */         }
/*       */         catch (Exception ex)
/*       */         {
/*   595 */           ex.printStackTrace();
/*       */         }
/*       */         
/*   598 */         if (!"true".equals(request.getParameter("adminAPIRequest"))) {
/*       */           break label787;
/*       */         }
/*       */       }
/*       */       catch (Exception exp)
/*       */       {
/*   582 */         exp.printStackTrace();
/*       */       }
/*       */       finally
/*       */       {
/*       */         try
/*       */         {
/*   588 */           if (ps != null)
/*       */           {
/*   590 */             ps.close();
/*       */           }
/*       */         }
/*       */         catch (Exception ex)
/*       */         {
/*   595 */           ex.printStackTrace();
/*       */         }
/*       */       }
/*       */       
/*   599 */       return null;
/*       */       
/*       */ 
/*       */ 
/*       */ 
/*       */       label787:
/*       */       
/*       */ 
/*       */ 
/*       */ 
/*   609 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("emailaction.edit.success"));
/*       */       
/*   611 */       saveMessages(request, messages);
/*       */     }
/*       */     else
/*       */     {
/*   615 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("emailaction.create.alreadyexists", request.getParameter("displayname")));
/*   616 */       saveMessages(request, messages);
/*   617 */       if (update == null) {
/*   618 */         return new ActionForward("/adminAction.do?method=showEmailAction&actionID=" + amform.getId() + "&haid=null");
/*       */       }
/*   620 */       return new ActionForward("/showActionProfiles.do?method=getActionDetails&actionid=" + amform.getId());
/*       */     }
/*       */     
/*   623 */     if (update == null)
/*       */     {
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*   630 */       return mapping.findForward("success");
/*       */     }
/*       */     
/*   633 */     return new ActionForward("/showActionProfiles.do?method=getActionDetails&actionid=" + amform.getId());
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward editTicketAction(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*   644 */     String profileName = "";
/*   645 */     String Category = "";
/*   646 */     String Priority = "";
/*   647 */     String Technician = "";
/*   648 */     String group = "";
/*   649 */     String Subject = "";
/*   650 */     String Message = "";
/*   651 */     String subCategory = "";
/*   652 */     String item = "";
/*   653 */     String requestTemplate = "";
/*   654 */     requestTemplate = request.getParameter("reqTemplate");
/*   655 */     profileName = request.getParameter("displayname");
/*   656 */     Category = request.getParameter("category");
/*   657 */     Priority = request.getParameter("priority");
/*   658 */     Technician = request.getParameter("technician");
/*   659 */     Subject = request.getParameter("subject");
/*   660 */     Message = request.getParameter("message");
/*   661 */     subCategory = request.getParameter("subCategory") != null ? request.getParameter("subCategory") : "null";
/*   662 */     item = request.getParameter("item") != null ? request.getParameter("item") : "null";
/*   663 */     group = request.getParameter("group");
/*   664 */     String ticketingType = request.getParameter("ticketingType");
/*   665 */     if ("restapi".equals(ticketingType))
/*       */     {
/*       */ 
/*   668 */       requestTemplate = getSDPCompName(requestTemplate);
/*   669 */       Category = getSDPCompName(Category);
/*   670 */       Priority = getSDPCompName(Priority);
/*   671 */       Technician = getSDPCompName(Technician);
/*   672 */       subCategory = getSDPCompName(subCategory);
/*   673 */       item = getSDPCompName(item);
/*   674 */       group = getSDPCompName(group);
/*       */     }
/*       */     
/*       */ 
/*   678 */     ActionMessages messages = new ActionMessages();
/*   679 */     AMActionForm amform = (AMActionForm)form;
/*   680 */     AMConnectionPool pool = AMConnectionPool.getInstance();
/*       */     
/*   682 */     String toUpdate = request.getParameter("toUpdate");
/*   683 */     if (toUpdate != null)
/*       */     {
/*   685 */       String Id = request.getParameter("ID");
/*   686 */       amform.setId(Integer.parseInt(Id));
/*       */     }
/*   688 */     String updateactionquery1 = "";
/*   689 */     String displayname = request.getParameter("displayname");
/*   690 */     if (DBQueryUtil.getDBType().equals("mssql"))
/*       */     {
/*   692 */       displayname = displayname.replaceAll("'", "''");
/*       */     }
/*       */     else
/*       */     {
/*   696 */       displayname = displayname.replaceAll("'", "\\\\'");
/*       */     }
/*   698 */     String checkquery = "select * from AM_ACTIONPROFILE where NAME='" + displayname + "' and ID!=" + amform.getId();
/*   699 */     ArrayList list = this.mo.getRows(checkquery);
/*   700 */     if (list.size() == 0)
/*       */     {
/*   702 */       String updateactionquery = "update AM_ACTIONPROFILE set NAME='" + displayname + "' where ID = " + amform.getId();
/*   703 */       this.mo.executeUpdateStmt(updateactionquery);
/*       */       
/*   705 */       String toAddress = "";
/*   706 */       String fromAddress = "";
/*       */       try
/*       */       {
/*   709 */         String sdquery = "select SERVICEDESK_CONFIG.TO_EMAIL, SERVICEDESK_CONFIG.FROM_EMAIL from SERVICEDESK_CONFIG";
/*   710 */         ResultSet rs1 = AMConnectionPool.executeQueryStmt(sdquery);
/*   711 */         if (rs1.next())
/*       */         {
/*   713 */           toAddress = rs1.getString("TO_EMAIL");
/*   714 */           fromAddress = rs1.getString("FROM_EMAIL");
/*       */         }
/*   716 */         AMConnectionPool.closeStatement(rs1);
/*       */       }
/*       */       catch (Exception e)
/*       */       {
/*   720 */         e.printStackTrace();
/*       */       }
/*   722 */       PreparedStatement ps = null;
/*   723 */       PreparedStatement ps1 = null;
/*       */       try
/*       */       {
/*   726 */         if (toUpdate != null) {
/*   727 */           int appendMessage = 0;
/*   728 */           if (request.getParameter("appendMessage") != null)
/*       */           {
/*   730 */             appendMessage = 1;
/*       */           }
/*       */           
/*   733 */           ps = AMConnectionPool.getConnection().prepareStatement("update AM_EMAILACTION set SUBJECT=?,MESSAGE=?,SMTPSERVER=?,SMTPPORT=?,MAILFORMAT=?,APPENDMESSAGE=? where ID =?");
/*       */           
/*       */ 
/*       */           try
/*       */           {
/*   738 */             ps.setString(1, amform.getSubject());
/*   739 */             ps.setString(2, amform.getMessage());
/*   740 */             ps.setString(3, amform.getSmtpserver());
/*   741 */             ps.setInt(4, amform.getSmtpport());
/*   742 */             ps.setInt(5, Integer.valueOf(amform.getMailFormat()).intValue());
/*   743 */             ps.setInt(6, appendMessage);
/*   744 */             ps.setInt(7, amform.getId());
/*   745 */             ps.executeUpdate();
/*       */           }
/*       */           catch (Exception exp)
/*       */           {
/*   749 */             exp.printStackTrace();
/*       */           }
/*       */         }
/*       */         else {
/*   753 */           ps = AMConnectionPool.getConnection().prepareStatement("update AM_EMAILACTION set SUBJECT=?,MESSAGE=? where ID =?");
/*       */           
/*       */ 
/*       */           try
/*       */           {
/*   758 */             ps.setString(1, amform.getSubject());
/*   759 */             ps.setString(2, amform.getMessage());
/*   760 */             ps.setInt(3, amform.getId());
/*   761 */             ps.executeUpdate();
/*       */           }
/*       */           catch (Exception exp)
/*       */           {
/*   765 */             exp.printStackTrace();
/*       */           }
/*       */         }
/*   768 */         ps1 = AMConnectionPool.getConnection().prepareStatement("update AM_SDESK_TICKET_DETAILS set TEMPLATE=?,CATEGORY=?,PRIORITY=?,TECHNICIAN=?,TICKETGROUP=?,ITEM=?,SUBCATEGORY=?,SITE=?,CUSTOMFIELDS=? where ID =?");
/*       */         try
/*       */         {
/*   771 */           ps1.setString(1, requestTemplate == null ? "" : requestTemplate);
/*   772 */           ps1.setString(2, Category == null ? "" : Category);
/*   773 */           ps1.setString(3, Priority == null ? "" : Priority);
/*   774 */           ps1.setString(4, Technician == null ? "" : Technician);
/*   775 */           ps1.setString(5, group == null ? "" : group);
/*   776 */           ps1.setString(6, item == null ? "" : item);
/*   777 */           ps1.setString(7, subCategory == null ? "" : subCategory);
/*   778 */           ps1.setString(8, request.getParameter("site") == null ? "" : request.getParameter("site"));
/*   779 */           ps1.setString(9, request.getParameter("customHeaders") == null ? "" : request.getParameter("customHeaders"));
/*   780 */           ps1.setInt(10, amform.getId());
/*   781 */           ps1.executeUpdate();
/*       */         }
/*       */         catch (Exception exp)
/*       */         {
/*   785 */           exp.printStackTrace();
/*       */         }
/*       */         
/*       */         try
/*       */         {
/*   790 */           String qry = null;
/*   791 */           if (!amform.getReqName().equals(""))
/*       */           {
/*   793 */             boolean isTicketReqMapExists = DBUtil.isTicketReqMapExists(amform.getId());
/*   794 */             if ((EnterpriseUtil.isIt360MSPEdition()) || (APMHDSettingsUtil.isMSPDesk()))
/*       */             {
/*   796 */               String accountName = APMHDSettingsUtil.isMSPDesk() ? getSDPCompName(amform.getAccountName()) : amform.getAccountName();
/*   797 */               String siteName = APMHDSettingsUtil.isMSPDesk() ? getSDPCompName(amform.getSiteName()) : amform.getSiteName();
/*   798 */               if (isTicketReqMapExists)
/*       */               {
/*   800 */                 qry = "update TicketProfileRequesterMapping set REQUESTER='" + amform.getReqName() + "', ACCOUNT='" + accountName + "', SITE='" + siteName + "' where PROFILEID = " + amform.getId();
/*       */               }
/*       */               else
/*       */               {
/*   804 */                 qry = "insert into TicketProfileRequesterMapping (PROFILEID, REQUESTER, ACCOUNT, SITE) values (" + amform.getId() + ",'" + amform.getReqName() + "','" + accountName + "','" + siteName + "')";
/*       */               }
/*       */               
/*       */ 
/*       */             }
/*   809 */             else if (isTicketReqMapExists)
/*       */             {
/*   811 */               qry = "update TicketProfileRequesterMapping set REQUESTER='" + amform.getReqName() + "' where PROFILEID = " + amform.getId();
/*       */             }
/*       */             else
/*       */             {
/*   815 */               qry = "insert into TicketProfileRequesterMapping (PROFILEID, REQUESTER) values (" + amform.getId() + ",'" + amform.getReqName() + "')";
/*       */             }
/*       */           }
/*       */           
/*   819 */           if (qry != null)
/*       */           {
/*   821 */             AMConnectionPool.executeUpdateStmt(qry);
/*       */           }
/*       */         }
/*       */         catch (Exception ex)
/*       */         {
/*   826 */           ex.printStackTrace();
/*       */         }
/*       */         
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */         try
/*       */         {
/*   837 */           if (ps != null)
/*       */           {
/*   839 */             ps.close();
/*       */           }
/*       */         }
/*       */         catch (Exception ex)
/*       */         {
/*   844 */           ex.printStackTrace();
/*       */         }
/*       */         try
/*       */         {
/*   848 */           if (ps1 != null)
/*       */           {
/*   850 */             ps1.close();
/*       */           }
/*       */         }
/*       */         catch (Exception ex)
/*       */         {
/*   855 */           ex.printStackTrace();
/*       */         }
/*       */         
/*       */         try
/*       */         {
/*   860 */           if ((this.isOPMConfigured) && (this.isLogATicketToBePostedToOPM))
/*       */           {
/*   862 */             Map ticketMap = request.getParameterMap();
/*   863 */             Properties moreDetails = new Properties();
/*   864 */             moreDetails.setProperty("operation", "modify");
/*   865 */             moreDetails.setProperty("fromAddress", fromAddress);
/*   866 */             moreDetails.setProperty("toAddress", toAddress);
/*       */             
/*   868 */             int respCode = PostLogATickDetailsToOPM(ticketMap, moreDetails, request);
/*   869 */             AMLog.debug("PostLogATickDetailsToOPM response for editTicketAction ::: " + respCode);
/*       */           }
/*       */         }
/*       */         catch (Exception ex) {
/*   873 */           ex.printStackTrace();
/*       */         }
/*       */       }
/*       */       catch (Exception exp)
/*       */       {
/*   831 */         exp.printStackTrace();
/*       */       }
/*       */       finally
/*       */       {
/*       */         try
/*       */         {
/*   837 */           if (ps != null)
/*       */           {
/*   839 */             ps.close();
/*       */           }
/*       */         }
/*       */         catch (Exception ex)
/*       */         {
/*   844 */           ex.printStackTrace();
/*       */         }
/*       */         try
/*       */         {
/*   848 */           if (ps1 != null)
/*       */           {
/*   850 */             ps1.close();
/*       */           }
/*       */         }
/*       */         catch (Exception ex)
/*       */         {
/*   855 */           ex.printStackTrace();
/*       */         }
/*       */       }
/*       */       
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*   875 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("ticketaction.edit.success"));
/*   876 */       saveMessages(request, messages);
/*   877 */       if (toUpdate != null)
/*       */       {
/*   879 */         showActionProfiles(mapping, form, request, response);
/*   880 */         return new ActionForward("/showTile.do?TileName=.ActionProfiles");
/*       */       }
/*       */       
/*   883 */       return new ActionForward("/showActionProfiles.do?method=getActionDetails&actionid=" + amform.getId());
/*       */     }
/*       */     
/*       */ 
/*       */ 
/*   888 */     messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("ticketaction.create.alreadyexists", request.getParameter("displayname")));
/*   889 */     saveMessages(request, messages);
/*   890 */     if (toUpdate != null)
/*       */     {
/*       */ 
/*   893 */       return new ActionForward("/adminAction.do?method=showTicketAction&actionID=" + amform.getId() + "&haid=null");
/*       */     }
/*   895 */     return new ActionForward("/showActionProfiles.do?method=getActionDetails&actionid=" + amform.getId());
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   private void getActionAssociatedBusinessDetails(HttpServletRequest request, AMActionForm amform, String actionID)
/*       */     throws org.json.JSONException
/*       */   {
/*   912 */     JSONObject obj = DBUtil.getBusinessHoursDetail(actionID);
/*   913 */     String pleaseSelect = NmsUtil.GetString("am.webclient.newaction.combobox.selectBusinessHour");
/*   914 */     ArrayList businessHourNameList = new ArrayList();
/*   915 */     businessHourNameList.add(new org.apache.struts.util.LabelValueBean(pleaseSelect, ""));
/*   916 */     ArrayList list = DBUtil.getBusinessHourNameAndID();
/*   917 */     int size = list.size();
/*   918 */     for (int i = 0; i < size; i++)
/*       */     {
/*   920 */       Properties prop = (Properties)list.get(i);
/*   921 */       businessHourNameList.add(new org.apache.struts.util.LabelValueBean(prop.getProperty("name"), prop.getProperty("id")));
/*       */     }
/*   923 */     request.setAttribute("businessHourNameList", businessHourNameList);
/*   924 */     amform.setBusinessHourNames(businessHourNameList);
/*   925 */     amform.setBusinessType("1");
/*   926 */     if (obj != null)
/*       */     {
/*   928 */       amform.setBusinessHourAssociatedToAction(true);
/*   929 */       String selectedBussinessID = obj.getString("ID");
/*   930 */       amform.setBusinessType(obj.getString("type"));
/*   931 */       amform.setSelectedBusinessHourID(selectedBussinessID);
/*   932 */       request.setAttribute("selectedBussinessID", selectedBussinessID);
/*   933 */       String jsString = obj.toString();
/*   934 */       request.setAttribute("actualBusinessHourData", jsString);
/*   935 */       amform.setBusinessHoursFromJSONString(jsString);
/*       */     }
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward showEmailAction(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*   945 */     String actionID = request.getParameter("actionID");
/*   946 */     String query = "select AM_EMAILACTION.ID,NAME,FROMADDRESS, TOADDRESS, SUBJECT, MESSAGE, SMTPSERVER, SMTPPORT, MAILFORMAT, APPENDMESSAGE from AM_EMAILACTION,AM_ACTIONPROFILE where AM_EMAILACTION.ID =AM_ACTIONPROFILE.ID and  AM_ACTIONPROFILE.ID=" + actionID;
/*       */     
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*   952 */     int mailActionID = Integer.parseInt(actionID);
/*   953 */     if ((EnterpriseUtil.isManagedServer()) && (mailActionID >= 10000) && (mailActionID < 10000000)) {
/*   954 */       request.setAttribute("adminEmailAction", Boolean.valueOf(true));
/*       */     }
/*   956 */     ArrayList rows = this.mo.getRows(query);
/*   957 */     if (rows != null)
/*       */     {
/*   959 */       ArrayList row = (ArrayList)rows.get(0);
/*       */       
/*   961 */       AMActionForm amform = (AMActionForm)form;
/*   962 */       amform.setId(Integer.parseInt((String)row.get(0)));
/*   963 */       amform.setFromaddress((String)row.get(2));
/*   964 */       amform.setToaddress((String)row.get(3));
/*   965 */       amform.setSubject(Translate.decode((String)row.get(4)));
/*   966 */       amform.setMessage(Translate.decode((String)row.get(5)));
/*   967 */       amform.setSmtpserver((String)row.get(6));
/*   968 */       amform.setSmtpport(Integer.parseInt((String)row.get(7)));
/*   969 */       amform.setDisplayname((String)row.get(1));
/*   970 */       amform.setMailFormat((String)row.get(8));
/*   971 */       amform.setAppendMessage((String)row.get(9));
/*   972 */       amform.setMethod("editEmailAction");
/*   973 */       getActionAssociatedBusinessDetails(request, amform, actionID);
/*       */     }
/*       */     
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*   981 */     return mapping.findForward("emailAction");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward showTicketAction(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*   991 */     String actionID = request.getParameter("actionID");
/*   992 */     request.setAttribute("ID", actionID);
/*   993 */     String query = "select AM_EMAILACTION.ID,NAME, CATEGORY, PRIORITY, TECHNICIAN, FROMADDRESS, TOADDRESS, SUBJECT, MESSAGE, SMTPSERVER, SMTPPORT, MAILFORMAT,APPENDMESSAGE,SUBCATEGORY,ITEM,TICKETGROUP,TYPE,SITE,CUSTOMFIELDS,TEMPLATE from AM_EMAILACTION,AM_ACTIONPROFILE,AM_SDESK_TICKET_DETAILS where AM_EMAILACTION.ID =AM_ACTIONPROFILE.ID and AM_SDESK_TICKET_DETAILS.ID=AM_ACTIONPROFILE.ID and  AM_ACTIONPROFILE.ID=" + actionID;
/*   994 */     ArrayList rows = this.mo.getRows(query);
/*   995 */     ArrayList row = (ArrayList)rows.get(0);
/*   996 */     AMActionForm amform = (AMActionForm)form;
/*   997 */     amform.setId(Integer.parseInt((String)row.get(0)));
/*   998 */     amform.setCategory((String)row.get(2));
/*   999 */     amform.setSubCategory((String)row.get(13));
/*  1000 */     amform.setItem((String)row.get(14));
/*  1001 */     amform.setPriority((String)row.get(3));
/*  1002 */     amform.setTechnician((String)row.get(4));
/*  1003 */     String fromAddress = (String)row.get(5);
/*  1004 */     amform.setFromaddress(fromAddress);
/*  1005 */     amform.setToaddress((String)row.get(6));
/*  1006 */     amform.setSubject(Translate.decode((String)row.get(7)));
/*  1007 */     amform.setMessage(Translate.decode((String)row.get(8)));
/*  1008 */     amform.setSmtpserver((String)row.get(9));
/*  1009 */     amform.setSmtpport(Integer.parseInt((String)row.get(10)));
/*  1010 */     amform.setDisplayname((String)row.get(1));
/*  1011 */     amform.setMailFormat((String)row.get(11));
/*  1012 */     amform.setAppendMessage((String)row.get(12));
/*  1013 */     amform.setGroup((String)row.get(15));
/*  1014 */     amform.setReqTemplate((String)row.get(19));
/*  1015 */     Properties ticketReqDetails = DBUtil.getticketReqDetails(actionID);
/*  1016 */     String actionType = (String)row.get(16);
/*  1017 */     AMLog.debug("actionType is : " + actionType);
/*       */     
/*  1019 */     amform.setMspDesk(APMHDSettingsUtil.isMSPDesk());
/*  1020 */     if (ServiceNowIntegUtil.getInstance().isServiceNow())
/*       */     {
/*  1022 */       amform.setHelpDeskProduct("SERVICENOW");
/*       */     }
/*       */     try
/*       */     {
/*  1026 */       System.out.println(" AdminActions-(showTicketAction) : actionID :" + actionID + ", ticketReqDetails: " + ticketReqDetails);
/*  1027 */       if ((ticketReqDetails != null) && (ticketReqDetails.getProperty("requester") == null) && (fromAddress != null) && (fromAddress.indexOf("@") != -1))
/*       */       {
/*  1029 */         amform.setReqName(fromAddress.substring(0, fromAddress.indexOf("@")));
/*       */       }
/*  1031 */       if (ticketReqDetails != null)
/*       */       {
/*  1033 */         amform.setReqName(ticketReqDetails.getProperty("requester"));
/*  1034 */         if ((EnterpriseUtil.isIt360MSPEdition()) || (APMHDSettingsUtil.isMSPDesk()))
/*       */         {
/*  1036 */           if (ticketReqDetails.containsKey("account"))
/*       */           {
/*  1038 */             amform.setAccountName(ticketReqDetails.getProperty("account"));
/*  1039 */             if (ticketReqDetails.containsKey("site"))
/*       */             {
/*  1041 */               amform.setSiteName(ticketReqDetails.getProperty("site"));
/*       */             }
/*       */           }
/*       */         }
/*       */       }
/*       */     }
/*       */     catch (Exception ex)
/*       */     {
/*  1049 */       ex.printStackTrace();
/*       */     }
/*       */     
/*       */     try
/*       */     {
/*  1054 */       request.setAttribute("subCat", (String)row.get(13));
/*  1055 */       request.setAttribute("catItem", (String)row.get(14));
/*  1056 */       request.setAttribute("techni", (String)row.get(4));
/*  1057 */       request.setAttribute("site", (String)row.get(17));
/*  1058 */       request.setAttribute("customSDPfields", (String)row.get(18));
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/*  1062 */       e.printStackTrace();
/*       */     }
/*  1064 */     if (Integer.parseInt(actionType) == 6)
/*       */     {
/*  1066 */       amform.setTicketingType("credential");
/*  1067 */       RetreiveFeedHandler RFH = new RetreiveFeedHandler();
/*       */       try
/*       */       {
/*  1070 */         RssConnector rssConnector = RssConnector.getInstance();
/*  1071 */         rssConnector.fetchRss(RFH);
/*       */       } catch (Exception e) { JSONObject groups;
/*       */         JSONArray groupArray;
/*       */         String temp;
/*  1075 */         e.printStackTrace();
/*       */       } finally {
/*       */         JSONObject groups;
/*       */         JSONArray groupArray;
/*       */         String temp;
/*  1080 */         amform.setToAdd(makeArrayList(RFH.category));
/*  1081 */         amform.setPresent(makeArrayList(RFH.priority));
/*  1082 */         amform.setApplications(makeArrayList(RFH.technician));
/*  1083 */         amform.setReqNameArr(makeArrayList(RFH.techReqNames));
/*  1084 */         JSONObject groups = RFH.grpTech;
/*  1085 */         if (groups != null)
/*       */         {
/*  1087 */           JSONArray groupArray = groups.names();
/*  1088 */           String temp = groupArray.toString();
/*  1089 */           temp = temp.replaceAll("\"", "");
/*  1090 */           temp = temp.substring(1, temp.length() - 1);
/*  1091 */           amform.setToAddSG(makeArrayList(temp));
/*       */         }
/*       */         
/*  1094 */         if (EnterpriseUtil.isIt360MSPEdition())
/*       */         {
/*  1096 */           amform.setAccNamesArr(makeArrayList(RFH.accountName));
/*       */         }
/*       */       }
/*       */     }
/*  1100 */     else if (Integer.parseInt(actionType) == 19)
/*       */     {
/*  1102 */       request.setAttribute("hideFields", Boolean.valueOf(!APMHDSettingsUtil.getTicketSettingsCache().isAllowOverWriteOfReqTemplate()));
/*  1103 */       ArrayList categories = APMHelpDeskUtil.getCategories();
/*  1104 */       ArrayList techGroup = APMHelpDeskUtil.getAssignmentGroups();
/*       */       
/*  1106 */       amform.setToAdd(categories);
/*  1107 */       for (Object obj : categories)
/*       */       {
/*  1109 */         Properties props = (Properties)obj;
/*  1110 */         String value = props.getProperty("value");
/*  1111 */         if (value.endsWith(amform.getCategory()))
/*       */         {
/*  1113 */           amform.setCategory(value);
/*  1114 */           break;
/*       */         }
/*       */       }
/*  1117 */       ArrayList subCategories = APMHelpDeskUtil.getSubCategories(getSDPCompId(amform.getCategory()));
/*  1118 */       amform.setToAddSC(subCategories);
/*  1119 */       for (Object obj : subCategories)
/*       */       {
/*  1121 */         Properties props = (Properties)obj;
/*  1122 */         String value = props.getProperty("value");
/*  1123 */         if (value.endsWith(amform.getSubCategory()))
/*       */         {
/*  1125 */           amform.setSubCategory(value);
/*  1126 */           break;
/*       */         }
/*       */       }
/*  1129 */       ArrayList priority = APMHelpDeskUtil.getUrgency();
/*  1130 */       amform.setPresent(priority);
/*  1131 */       for (Object obj : priority)
/*       */       {
/*  1133 */         Properties props = (Properties)obj;
/*  1134 */         String value = props.getProperty("value");
/*  1135 */         if (value.endsWith(amform.getPriority()))
/*       */         {
/*  1137 */           amform.setPriority(value);
/*  1138 */           break;
/*       */         }
/*       */       }
/*  1141 */       amform.setToAddSG(techGroup);
/*  1142 */       for (Object obj : techGroup)
/*       */       {
/*  1144 */         Properties props = (Properties)obj;
/*  1145 */         String value = props.getProperty("value");
/*  1146 */         if (value.endsWith(amform.getGroup()))
/*       */         {
/*  1148 */           amform.setGroup(value);
/*  1149 */           break;
/*       */         }
/*       */       }
/*  1152 */       ArrayList technicians = APMHelpDeskUtil.getAssignToTechnicians(amform.getGroup());
/*       */       
/*  1154 */       amform.setApplications(technicians);
/*  1155 */       for (Object obj : technicians)
/*       */       {
/*  1157 */         Properties props = (Properties)obj;
/*  1158 */         String value = props.getProperty("value");
/*  1159 */         if (value.endsWith(amform.getTechnician()))
/*       */         {
/*  1161 */           amform.setTechnician(value);
/*  1162 */           break;
/*       */         }
/*       */         
/*       */       }
/*       */     }
/*       */     else
/*       */     {
/*  1169 */       request.setAttribute("hideFields", Boolean.valueOf(!APMHDSettingsUtil.getTicketSettingsCache().isAllowOverWriteOfReqTemplate()));
/*  1170 */       ArrayList accounts = APMHelpDeskUtil.getAccountNames();
/*       */       
/*  1172 */       ArrayList sites = APMHelpDeskUtil.getSiteNames(amform.getAccountName());
/*  1173 */       ArrayList categories = APMHDSettingsUtil.isMSPDesk() ? APMHelpDeskUtil.getCategories(amform.getAccountName()) : APMHelpDeskUtil.getCategories();
/*  1174 */       ArrayList techGroup = APMHDSettingsUtil.isMSPDesk() ? APMHelpDeskUtil.getSupportgroups(amform.getAccountName(), amform.getSiteName()) : APMHelpDeskUtil.getSupportgroups();
/*  1175 */       amform.setAccNamesArr(accounts);
/*  1176 */       amform.setSiteNameArr(sites);
/*  1177 */       for (Object obj : accounts)
/*       */       {
/*  1179 */         Properties props = (Properties)obj;
/*  1180 */         String value = props.getProperty("value");
/*  1181 */         if (value.endsWith(amform.getAccountName()))
/*       */         {
/*  1183 */           amform.setAccountName(value);
/*  1184 */           break;
/*       */         }
/*       */       }
/*  1187 */       for (Object obj : sites)
/*       */       {
/*  1189 */         Properties props = (Properties)obj;
/*  1190 */         String value = props.getProperty("value");
/*  1191 */         if (value.endsWith(amform.getSiteName()))
/*       */         {
/*  1193 */           amform.setSiteName(value);
/*  1194 */           break;
/*       */         }
/*       */       }
/*       */       
/*  1198 */       ArrayList requestTemplates = APMHelpDeskUtil.getRequestTemplates();
/*  1199 */       amform.setAvailableResources(requestTemplates);
/*  1200 */       for (Object obj : requestTemplates)
/*       */       {
/*  1202 */         Properties props = (Properties)obj;
/*  1203 */         String value = props.getProperty("value");
/*  1204 */         if (value.endsWith(amform.getReqTemplate()))
/*       */         {
/*  1206 */           amform.setReqTemplate(value);
/*  1207 */           break;
/*       */         }
/*       */       }
/*       */       
/*  1211 */       amform.setToAdd(categories);
/*  1212 */       for (Object obj : categories)
/*       */       {
/*  1214 */         Properties props = (Properties)obj;
/*  1215 */         String value = props.getProperty("value");
/*  1216 */         if (value.endsWith(amform.getCategory()))
/*       */         {
/*  1218 */           amform.setCategory(value);
/*  1219 */           break;
/*       */         }
/*       */       }
/*  1222 */       ArrayList subCategories = APMHelpDeskUtil.getSubCategories(getSDPCompId(amform.getCategory()));
/*  1223 */       amform.setToAddSC(subCategories);
/*  1224 */       for (Object obj : subCategories)
/*       */       {
/*  1226 */         Properties props = (Properties)obj;
/*  1227 */         String value = props.getProperty("value");
/*  1228 */         if (value.endsWith(amform.getSubCategory()))
/*       */         {
/*  1230 */           amform.setSubCategory(value);
/*  1231 */           break;
/*       */         }
/*       */       }
/*       */       
/*  1235 */       ArrayList items = APMHelpDeskUtil.getItems(getSDPCompId(amform.getSubCategory()));
/*  1236 */       amform.setToAddItem(items);
/*  1237 */       for (Object obj : items)
/*       */       {
/*  1239 */         Properties props = (Properties)obj;
/*  1240 */         String value = props.getProperty("value");
/*  1241 */         if (value.endsWith(amform.getItem()))
/*       */         {
/*  1243 */           amform.setItem(value);
/*  1244 */           break;
/*       */         }
/*       */       }
/*  1247 */       ArrayList priority = APMHelpDeskUtil.getPriority();
/*  1248 */       amform.setPresent(priority);
/*  1249 */       for (Object obj : priority)
/*       */       {
/*  1251 */         Properties props = (Properties)obj;
/*  1252 */         String value = props.getProperty("value");
/*  1253 */         if (value.endsWith(amform.getPriority()))
/*       */         {
/*  1255 */           amform.setPriority(value);
/*  1256 */           break;
/*       */         }
/*       */       }
/*  1259 */       amform.setToAddSG(techGroup);
/*  1260 */       for (Object obj : techGroup)
/*       */       {
/*  1262 */         Properties props = (Properties)obj;
/*  1263 */         String value = props.getProperty("value");
/*  1264 */         if (value.endsWith(amform.getGroup()))
/*       */         {
/*  1266 */           amform.setGroup(value);
/*  1267 */           break;
/*       */         }
/*       */       }
/*  1270 */       ArrayList technicians = APMHDSettingsUtil.isMSPDesk() ? APMHelpDeskUtil.getTechnicians(getSDPCompId(amform.getGroup())) : APMHelpDeskUtil.getTechnicians();
/*       */       
/*  1272 */       amform.setApplications(technicians);
/*  1273 */       for (Object obj : technicians)
/*       */       {
/*  1275 */         Properties props = (Properties)obj;
/*  1276 */         String value = props.getProperty("value");
/*  1277 */         if (value.endsWith(amform.getTechnician()))
/*       */         {
/*  1279 */           amform.setTechnician(value);
/*  1280 */           break;
/*       */         }
/*       */       }
/*       */     }
/*  1284 */     if (amform.getReqTemplate().endsWith("Choose a Value"))
/*       */     {
/*  1286 */       request.setAttribute("hideFields", "false");
/*       */     }
/*  1288 */     else if (APMHDSettingsUtil.getTicketSettingsCache().isAllowOverWriteOfReqTemplate())
/*       */     {
/*  1290 */       request.setAttribute("hideFields", "false");
/*       */     }
/*       */     else {
/*  1293 */       request.setAttribute("hideFields", "true");
/*       */     }
/*  1295 */     request.setAttribute("SdeskLogTicketConfig", "editTicketAction");
/*  1296 */     request.setAttribute("Configure", "Update");
/*  1297 */     if (APMHelpDeskUtil.isHdDown())
/*       */     {
/*  1299 */       request.setAttribute("errorMsg", FormatUtil.getString("am.webclient.admintab.ticketaction.errormessage"));
/*       */     }
/*  1301 */     return new ActionForward("/showTile.do?TileName=.TicketActions");
/*       */   }
/*       */   
/*       */   public ActionForward deleteEmailAction(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*  1307 */     String[] applications = request.getParameterValues("emailcheckbox");
/*  1308 */     StringBuilder actionids = new StringBuilder();
/*  1309 */     String messg = "";
/*  1310 */     if (applications != null)
/*       */     {
/*  1312 */       for (int i = 0; i < applications.length; i++)
/*       */       {
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*  1321 */         FaultUtil.deleteAction(applications[i]);
/*  1322 */         actionids.append(applications[i]).append(",");
/*  1323 */         DelegatedUserRoleUtil.deleteEntryFromConfigUserTable(Integer.parseInt(applications[i]), 2);
/*  1324 */         DBUtil.deleteActionFromActionTimeMapper(applications[i]);
/*       */       }
/*  1326 */       messg = "emailaction.delete.success";
/*       */     }
/*  1328 */     if (EnterpriseUtil.isAdminServer()) {
/*  1329 */       ThresholdActionsAPIUtil.deleteEmailActiotoSynch(actionids.toString());
/*       */     }
/*  1331 */     if ("true".equals(request.getParameter("adminAPIRequest"))) {
/*  1332 */       return null;
/*       */     }
/*  1334 */     ActionMessages messages = new ActionMessages();
/*  1335 */     messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage(messg));
/*  1336 */     saveMessages(request, messages);
/*  1337 */     return mapping.findForward("success");
/*       */   }
/*       */   
/*       */   public ActionForward deleteTicketAction(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*  1343 */     String[] applications = request.getParameterValues("ticketcheckbox");
/*  1344 */     String messg = "";
/*  1345 */     if (applications != null)
/*       */     {
/*  1347 */       String[] appNames = new String[applications.length];
/*  1348 */       for (int i = 0; i < applications.length; i++)
/*       */       {
/*  1350 */         String profileName = getProfileName(applications[i]);
/*  1351 */         appNames[i] = profileName;
/*  1352 */         FaultUtil.deleteAction(applications[i]);
/*       */         try
/*       */         {
/*  1355 */           AMConnectionPool.executeUpdateStmt("delete from AM_SDESK_TICKET_DETAILS where ID=" + applications[i]);
/*  1356 */           DelegatedUserRoleUtil.deleteEntryFromConfigUserTable(Integer.parseInt(applications[i]), 2);
/*       */         }
/*       */         catch (Exception e)
/*       */         {
/*  1360 */           AMLog.debug("Error in deleting action :" + applications[i]);
/*  1361 */           e.printStackTrace();
/*       */         }
/*       */       }
/*       */       
/*       */       try
/*       */       {
/*  1367 */         if ((this.isOPMConfigured) && (this.isLogATicketToBePostedToOPM))
/*       */         {
/*  1369 */           Map ticketMap = request.getParameterMap();
/*  1370 */           Properties moreDetails = new Properties();
/*  1371 */           moreDetails.setProperty("operation", "delete");
/*  1372 */           for (int k = 0; k < appNames.length; k++)
/*       */           {
/*  1374 */             moreDetails.setProperty("ticketname", appNames[k]);
/*  1375 */             int respCode = PostLogATickDetailsToOPM(ticketMap, moreDetails, request);
/*  1376 */             AMLog.debug("PostLogATickDetailsToOPM response for deleteTicketAction ::: " + respCode);
/*       */           }
/*       */         }
/*       */       }
/*       */       catch (Exception ex) {
/*  1381 */         ex.printStackTrace();
/*       */       }
/*  1383 */       messg = "ticketaction.delete.success";
/*       */     }
/*  1385 */     ActionMessages messages = new ActionMessages();
/*  1386 */     messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage(messg));
/*  1387 */     saveMessages(request, messages);
/*  1388 */     return mapping.findForward("success");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward createSMSAction(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*  1398 */     String type = request.getParameter("cancel");
/*  1399 */     String returnpath = request.getParameter("returnpath");
/*  1400 */     String popupParam = request.getParameter("popup");
/*  1401 */     boolean popup = (popupParam != null) && (popupParam.equals("true"));
/*  1402 */     AMActionForm amform = (AMActionForm)form;
/*  1403 */     String insertmailconfigquery = "";
/*  1404 */     String stype = amform.getStype();
/*  1405 */     String typeId = " ";
/*  1406 */     if (stype.equals("mail"))
/*       */     {
/*  1408 */       typeId = "2";
/*       */     }
/*       */     else
/*       */     {
/*  1412 */       typeId = "5";
/*       */     }
/*  1414 */     ActionMessages messages = new ActionMessages();
/*  1415 */     String isBusinessTimeToActionEnabled = request.getParameter("businessHourAssociatedToAction");
/*  1416 */     if (type.equals("false"))
/*       */     {
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*  1424 */       String displayname = request.getParameter("displayname");
/*  1425 */       String message = request.getParameter("message");
/*  1426 */       if (DBQueryUtil.getDBType().equals("mssql"))
/*       */       {
/*  1428 */         displayname = displayname.replaceAll("'", "''");
/*  1429 */         message = message.replaceAll("'", "''");
/*       */       }
/*       */       else
/*       */       {
/*  1433 */         displayname = displayname.replaceAll("'", "\\\\'");
/*  1434 */         message = message.replaceAll("'", "\\\\'");
/*       */       }
/*  1436 */       String checkquery = "select * from AM_ACTIONPROFILE where NAME='" + displayname + "'";
/*  1437 */       ArrayList list = this.mo.getRows(checkquery);
/*       */       
/*  1439 */       if (list.size() == 0)
/*       */       {
/*  1441 */         int id = DBQueryUtil.getIncrementedID("ID", "AM_ACTIONPROFILE");
/*  1442 */         String insertquery = "insert into AM_ACTIONPROFILE (ID,NAME, TYPE) values(" + id + ",'" + displayname + "','" + typeId + "')";
/*  1443 */         this.mo.executeUpdateStmt(insertquery);
/*  1444 */         DelegatedUserRoleUtil.addEntryToConfigUserTable(request, id, 2);
/*       */         
/*  1446 */         if (stype.equals("mail")) {
/*  1447 */           String fromAddr = Translate.decode(request.getParameter("fromaddress"));
/*  1448 */           String toAddr = Translate.decode(request.getParameter("toaddress"));
/*  1449 */           insertmailconfigquery = "insert into AM_SMSACTION (ID, FROMADDRESS, TOADDRESS, MESSAGE, SMTPSERVER, SMTPPORT) values (" + id + ",'" + fromAddr + "','" + toAddr + "','" + message + "','" + request.getParameter("smtpserver") + "'," + request.getParameter("smtpport") + ")";
/*  1450 */           messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("smsaction.create.success"));
/*       */         }
/*       */         else
/*       */         {
/*  1454 */           insertmailconfigquery = "insert into AM_SMSMODEMACTION (ID,MOBILENO, MESSAGE) values (" + id + ",'" + request.getParameter("fromaddress1") + "','" + message + "')";
/*  1455 */           messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage(FormatUtil.getString("am.webclient.createsms.successfully")));
/*       */         }
/*  1457 */         this.mo.executeUpdateStmt(insertmailconfigquery);
/*  1458 */         boolean operResult; if (isBusinessTimeToActionEnabled != null)
/*       */         {
/*  1460 */           int businessID = Integer.parseInt(request.getParameter("selectedBusinessHourID"));
/*  1461 */           String businessType = request.getParameter("businessType");
/*  1462 */           int executeDuringBH = businessType != null ? Integer.parseInt(businessType) : 1;
/*  1463 */           operResult = DBUtil.insertBusinessTimeToActionMapper(id, businessID, executeDuringBH);
/*       */         }
/*  1465 */         saveMessages(request, messages);
/*  1466 */         if (popup)
/*       */         {
/*  1468 */           associateActions(request);
/*  1469 */           messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("smsaction.createandassociate.success"));
/*       */           
/*       */ 
/*  1472 */           return new ActionForward("/jsp/ThresholdCreationForwarder.jsp" + getWizString(request));
/*       */         }
/*       */       }
/*       */       else
/*       */       {
/*  1477 */         messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("smsaction.create.alreadyexists", request.getParameter("displayname")));
/*  1478 */         saveMessages(request, messages);
/*  1479 */         if (popup)
/*       */         {
/*  1481 */           return new ActionForward("/jsp/SMSActionForm.jsp");
/*       */         }
/*  1483 */         return new ActionForward("/showTile.do?TileName=.SMSActions");
/*       */       }
/*  1485 */       if (returnpath != null)
/*       */       {
/*  1487 */         request.setAttribute("showAdvancedOptions", "true");
/*  1488 */         return new ActionForward(returnpath);
/*       */       }
/*       */       
/*  1491 */       return mapping.findForward("success");
/*       */     }
/*       */     
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*  1511 */     if (returnpath != null) {
/*  1512 */       return new ActionForward(returnpath);
/*       */     }
/*  1514 */     return mapping.findForward("success");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward editSMSAction(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*  1527 */     AMActionForm amform = (AMActionForm)form;
/*  1528 */     ActionMessages messages = new ActionMessages();
/*  1529 */     String stype = amform.getStype();
/*  1530 */     String type = "";
/*  1531 */     String insertQry = "";
/*  1532 */     String delqry = "";
/*  1533 */     String updateactionquery = "";
/*  1534 */     boolean updateqry = true;
/*       */     
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*  1546 */     String update = request.getParameter("update");
/*  1547 */     String displayname = request.getParameter("displayname");
/*  1548 */     String message = amform.getMessage();
/*  1549 */     if (DBQueryUtil.getDBType().equals("mssql"))
/*       */     {
/*  1551 */       displayname = displayname.replaceAll("'", "''");
/*  1552 */       message = message.replaceAll("'", "''");
/*       */     }
/*       */     else
/*       */     {
/*  1556 */       displayname = displayname.replaceAll("'", "\\\\'");
/*  1557 */       message = message.replaceAll("'", "\\\\'");
/*       */     }
/*  1559 */     String checkquery = "select * from AM_ACTIONPROFILE where NAME='" + displayname + "' and ID!=" + amform.getId();
/*  1560 */     ArrayList list = this.mo.getRows(checkquery);
/*       */     
/*  1562 */     if (stype.equals("sms"))
/*       */     {
/*  1564 */       type = "5";
/*       */     }
/*       */     else
/*       */     {
/*  1568 */       type = "2";
/*       */     }
/*       */     
/*  1571 */     if (list.size() == 0)
/*       */     {
/*  1573 */       String updateactionquery1 = "update AM_ACTIONPROFILE set NAME='" + displayname + "',type=" + type + " where ID = " + amform.getId();
/*       */       
/*  1575 */       if ((updateqry) || (stype.equals("mail"))) {
/*       */         try {
/*  1577 */           this.mo.executeUpdateStmt(updateactionquery1);
/*       */         }
/*       */         catch (Exception ex)
/*       */         {
/*  1581 */           ex.printStackTrace();
/*       */         }
/*       */       }
/*       */       
/*  1585 */       if (stype.equals("mail"))
/*       */       {
/*  1587 */         String chkQry = "select * from AM_SMSACTION where  ID = " + amform.getId();
/*  1588 */         ArrayList list1 = this.mo.getRows(chkQry);
/*  1589 */         if (list1.size() > 0) {
/*  1590 */           if (update == null) {
/*  1591 */             updateactionquery = "update AM_SMSACTION set FROMADDRESS='" + amform.getFromaddress() + "', TOADDRESS='" + amform.getToaddress() + "', MESSAGE='" + message + "', SMTPSERVER ='" + amform.getSmtpserver() + "', SMTPPORT =" + amform.getSmtpport() + " where ID = " + amform.getId();
/*       */           }
/*       */           else {
/*  1594 */             updateactionquery = "update AM_SMSACTION set FROMADDRESS='" + amform.getFromaddress() + "', TOADDRESS='" + amform.getToaddress() + "', MESSAGE='" + message + "' where ID = " + amform.getId();
/*       */           }
/*       */         } else {
/*  1597 */           if (update == null)
/*       */           {
/*  1599 */             insertQry = "insert into AM_SMSACTION (ID,FROMADDRESS, TOADDRESS, MESSAGE, SMTPSERVER, SMTPPORT) values(" + amform.getId() + ",'" + amform.getFromaddress() + "','" + amform.getToaddress() + "','" + message + "','" + amform.getSmtpserver() + "'," + amform.getSmtpport() + ")";
/*       */           }
/*       */           else {
/*  1602 */             insertQry = "insert into AM_SMSACTION (ID,FROMADDRESS, TOADDRESS, MESSAGE) values(" + amform.getId() + "'" + amform.getFromaddress() + "','" + amform.getToaddress() + "','" + message + "')";
/*       */           }
/*       */           
/*       */ 
/*       */ 
/*  1607 */           delqry = "delete from AM_SMSMODEMACTION where ID = " + amform.getId();
/*       */         }
/*       */         
/*       */       }
/*  1611 */       else if (stype.equals("sms"))
/*       */       {
/*  1613 */         String chkQry2 = "select * from AM_SMSMODEMACTION where  ID = " + amform.getId();
/*  1614 */         ArrayList list2 = this.mo.getRows(chkQry2);
/*  1615 */         if (list2.size() > 0)
/*       */         {
/*       */ 
/*       */ 
/*  1619 */           updateactionquery = "update AM_SMSMODEMACTION set MOBILENO='" + amform.getFromaddress1() + "', MESSAGE='" + message + "' where ID = " + amform.getId();
/*       */ 
/*       */ 
/*       */         }
/*       */         else
/*       */         {
/*       */ 
/*  1626 */           insertQry = "insert into AM_SMSMODEMACTION (ID,MOBILENO, MESSAGE) values (" + amform.getId() + ",'" + amform.getFromaddress1() + "','" + message + "')";
/*  1627 */           delqry = "delete from AM_SMSACTION where ID = " + amform.getId();
/*       */         }
/*       */       }
/*       */       
/*       */ 
/*       */ 
/*  1633 */       String isBusinessTimeToActionEnabled = request.getParameter("businessHourAssociatedToAction");
/*  1634 */       String actualBussinessID = request.getParameter("actualBussinessID");
/*  1635 */       if (isBusinessTimeToActionEnabled != null)
/*       */       {
/*  1637 */         String selectedBusinessHourID = request.getParameter("selectedBusinessHourID");
/*  1638 */         int businessID = Integer.parseInt(selectedBusinessHourID);
/*  1639 */         String businessType = request.getParameter("businessType");
/*  1640 */         int executeDuringBH = businessType != null ? Integer.parseInt(businessType) : 1;
/*  1641 */         if ((actualBussinessID == null) || (actualBussinessID.equals("")))
/*       */         {
/*  1643 */           DBUtil.insertBusinessTimeToActionMapper(amform.getId(), businessID, executeDuringBH);
/*       */         }
/*       */         else
/*       */         {
/*  1647 */           DBUtil.updateBusinessTimeToActionMapper(amform.getId(), businessID, executeDuringBH);
/*       */         }
/*       */         
/*       */ 
/*       */       }
/*  1652 */       else if ((actualBussinessID != null) && (!actualBussinessID.equals("")))
/*       */       {
/*  1654 */         DBUtil.deleteActionAssociatedBusinessHour(actualBussinessID, "" + amform.getId());
/*       */       }
/*       */       
/*  1657 */       if ((updateqry) || (stype.equals("mail"))) {
/*       */         try {
/*  1659 */           this.mo.executeUpdateStmt(updateactionquery);
/*  1660 */           this.mo.executeUpdateStmt(insertQry);
/*  1661 */           this.mo.executeUpdateStmt(delqry);
/*       */         }
/*       */         catch (Exception ex)
/*       */         {
/*  1665 */           ex.printStackTrace();
/*       */         }
/*       */         
/*  1668 */         messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("smsaction.edit.success"));
/*       */       }
/*  1670 */       saveMessages(request, messages);
/*       */     }
/*       */     else
/*       */     {
/*  1674 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("smsaction.create.alreadyexists", request.getParameter("displayname")));
/*  1675 */       saveMessages(request, messages);
/*  1676 */       if (update == null) {
/*  1677 */         return new ActionForward("/adminAction.do?method=showSMSAction&actionID=" + amform.getId() + "&haid=null");
/*       */       }
/*  1679 */       return new ActionForward("/showActionProfiles.do?method=getActionDetails&actionid=" + amform.getId());
/*       */     }
/*       */     
/*  1682 */     if (update == null) {
/*  1683 */       return mapping.findForward("success");
/*       */     }
/*  1685 */     return new ActionForward("/showActionProfiles.do?method=getActionDetails&actionid=" + amform.getId());
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward showSMSAction(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*       */     try
/*       */     {
/*  1696 */       AMActionForm amform = (AMActionForm)form;
/*  1697 */       String actionID = request.getParameter("actionID");
/*  1698 */       String query = "select AM_SMSACTION.ID,NAME,FROMADDRESS, TOADDRESS, MESSAGE, MESSAGE, SMTPSERVER, SMTPPORT from AM_SMSACTION,AM_ACTIONPROFILE where AM_SMSACTION.ID =AM_ACTIONPROFILE.ID and  AM_ACTIONPROFILE.ID=" + actionID;
/*  1699 */       ArrayList rows = this.mo.getRows(query);
/*  1700 */       if (rows.size() > 0) {
/*  1701 */         ArrayList row = (ArrayList)rows.get(0);
/*       */         
/*  1703 */         amform.setId(Integer.parseInt((String)row.get(0)));
/*  1704 */         amform.setFromaddress((String)row.get(2));
/*  1705 */         amform.setToaddress((String)row.get(3));
/*  1706 */         amform.setMessage((String)row.get(5));
/*  1707 */         amform.setSmtpserver((String)row.get(6));
/*  1708 */         amform.setSmtpport(Integer.parseInt((String)row.get(7)));
/*  1709 */         amform.setDisplayname((String)row.get(1));
/*  1710 */         amform.setMethod("editSMSAction");
/*  1711 */         amform.setStype("mail");
/*       */       }
/*       */       else
/*       */       {
/*  1715 */         query = "select AM_SMSMODEMACTION.ID,NAME,MOBILENO,MESSAGE from AM_SMSMODEMACTION,AM_ACTIONPROFILE where AM_SMSMODEMACTION.ID = AM_ACTIONPROFILE.ID and AM_ACTIONPROFILE.ID=" + actionID;
/*       */         
/*  1717 */         ArrayList rows1 = this.mo.getRows(query);
/*  1718 */         ArrayList row1 = (ArrayList)rows1.get(0);
/*  1719 */         if (row1.size() > 0)
/*       */         {
/*  1721 */           amform.setId(Integer.parseInt((String)row1.get(0)));
/*  1722 */           amform.setFromaddress1((String)row1.get(2));
/*  1723 */           amform.setMessage((String)row1.get(3));
/*  1724 */           amform.setDisplayname((String)row1.get(1));
/*  1725 */           amform.setStype("sms");
/*  1726 */           amform.setMethod("editSMSAction");
/*       */         }
/*       */       }
/*       */       
/*       */ 
/*  1731 */       getActionAssociatedBusinessDetails(request, amform, actionID);
/*       */       
/*  1733 */       request.setAttribute("stype", amform.getStype());
/*       */ 
/*       */     }
/*       */     catch (Exception ex)
/*       */     {
/*       */ 
/*  1739 */       ex.printStackTrace();
/*       */     }
/*  1741 */     return mapping.findForward("smsAction");
/*       */   }
/*       */   
/*       */   public ActionForward deleteSMSAction(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
/*       */   {
/*  1746 */     String[] applications = request.getParameterValues("smscheckbox");
/*  1747 */     String messg = "";
/*  1748 */     if (applications != null)
/*       */     {
/*  1750 */       for (int i = 0; i < applications.length; i++)
/*       */       {
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*  1759 */         FaultUtil.deleteAction(applications[i]);
/*  1760 */         DelegatedUserRoleUtil.deleteEntryFromConfigUserTable(Integer.parseInt(applications[i]), 2);
/*  1761 */         DBUtil.deleteActionFromActionTimeMapper(applications[i]);
/*       */       }
/*  1763 */       messg = "smsaction.delete.success";
/*       */     }
/*       */     
/*  1766 */     String[] applications1 = request.getParameterValues("smsmodemcheckbox");
/*  1767 */     if (applications1 != null)
/*       */     {
/*  1769 */       for (int i = 0; i < applications1.length; i++)
/*       */       {
/*  1771 */         FaultUtil.deleteAction(applications1[i]);
/*  1772 */         DBUtil.deleteActionFromActionTimeMapper(applications[i]);
/*       */       }
/*  1774 */       messg = "smsaction.delete.success";
/*       */     }
/*       */     
/*  1777 */     ActionMessages messages = new ActionMessages();
/*  1778 */     messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage(messg));
/*  1779 */     saveMessages(request, messages);
/*  1780 */     return mapping.findForward("success");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */   protected Map getKeyMethodMap()
/*       */   {
/*  1787 */     Map map = new HashMap();
/*  1788 */     map.put("createemailaction", "createEmailAction");
/*  1789 */     map.put("editemailaction", "editEmailAction");
/*  1790 */     map.put("deleteemailaction", "deleteEmailAction");
/*  1791 */     return map;
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward createExecProgAction(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*  1803 */     String type = request.getParameter("cancel");
/*  1804 */     ActionMessages messages = new ActionMessages();
/*  1805 */     String popupParam = request.getParameter("popup");
/*  1806 */     boolean popup = (popupParam != null) && (popupParam.equals("true"));
/*  1807 */     String returnpath = request.getParameter("returnpath");
/*  1808 */     String displayname = request.getParameter("displayname");
/*  1809 */     if (DBQueryUtil.getDBType().equals("mssql"))
/*       */     {
/*  1811 */       displayname = displayname.replaceAll("'", "''");
/*       */     }
/*       */     else
/*       */     {
/*  1815 */       displayname = displayname.replaceAll("'", "\\\\'");
/*       */     }
/*  1817 */     if (type.equals("false"))
/*       */     {
/*  1819 */       String checkquery = "select * from AM_ACTIONPROFILE where NAME='" + displayname + "'";
/*  1820 */       ArrayList list = this.mo.getRows(checkquery);
/*  1821 */       if (list.size() == 0)
/*       */       {
/*  1823 */         String insertquery = "insert into AM_ACTIONPROFILE (ID,NAME, TYPE) VALUES(" + DBQueryUtil.getIncrementedID("ID", "AM_ACTIONPROFILE") + ",'" + displayname + "','3' ) ";
/*  1824 */         this.mo.executeUpdateStmt(insertquery);
/*  1825 */         ArrayList result = this.mo.getRows("select max(ID) from AM_ACTIONPROFILE");
/*  1826 */         if (result.size() > 0)
/*       */         {
/*  1828 */           String id = (String)((ArrayList)result.get(0)).get(0);
/*  1829 */           if (id == null) id = "1";
/*  1830 */           int appenderror = 0;
/*  1831 */           int appendout = 0;
/*  1832 */           String command = Translate.decode(request.getParameter("command"));
/*       */           
/*  1834 */           DelegatedUserRoleUtil.addEntryToConfigUserTable(request, Integer.parseInt(id), 2);
/*  1835 */           PreparedStatement psExec = AMConnectionPool.getConnection().prepareStatement("insert into AM_SERVERCMDACTION values (?,?,?,?,?,?)");
/*       */           try
/*       */           {
/*  1838 */             psExec.setInt(1, Integer.valueOf(id).intValue());
/*  1839 */             psExec.setString(2, command);
/*  1840 */             psExec.setInt(3, appenderror);
/*  1841 */             psExec.setInt(4, appendout);
/*  1842 */             psExec.setInt(5, Integer.valueOf(request.getParameter("abortafter")).intValue());
/*  1843 */             psExec.setString(6, request.getParameter("execProgExecDir"));
/*  1844 */             psExec.executeUpdate();
/*       */             
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */             try
/*       */             {
/*  1854 */               if (psExec != null)
/*       */               {
/*  1856 */                 psExec.close();
/*       */               }
/*       */             }
/*       */             catch (Exception ex)
/*       */             {
/*  1861 */               ex.printStackTrace();
/*       */             }
/*       */             
/*  1864 */             hostid = ((AMActionForm)form).getChoosehost().trim();
/*       */           }
/*       */           catch (Exception exp)
/*       */           {
/*  1848 */             exp.printStackTrace();
/*       */           }
/*       */           finally
/*       */           {
/*       */             try
/*       */             {
/*  1854 */               if (psExec != null)
/*       */               {
/*  1856 */                 psExec.close();
/*       */               }
/*       */             }
/*       */             catch (Exception ex)
/*       */             {
/*  1861 */               ex.printStackTrace();
/*       */             }
/*       */           }
/*       */           String hostid;
/*  1865 */           String serversite = ((AMActionForm)form).getServersite();
/*  1866 */           if ((serversite != null) && (serversite.equals("remote")))
/*       */           {
/*  1868 */             if (hostid.equals("-1"))
/*       */             {
/*  1870 */               String hostname = ((AMActionForm)form).getHost();
/*  1871 */               String username = ((AMActionForm)form).getUsername();
/*  1872 */               String password = ((AMActionForm)form).getPassword();
/*  1873 */               String mode = ((AMActionForm)form).getMonitoringmode();
/*  1874 */               String passphrase = ((AMActionForm)form).getPassphrase();
/*  1875 */               String prompt = Translate.decode(((AMActionForm)form).getPrompt());
/*  1876 */               String port = ((AMActionForm)form).getPort();
/*  1877 */               String sshkey = null;
/*  1878 */               if (((AMActionForm)form).isSshkey())
/*       */               {
/*  1880 */                 sshkey = ((AMActionForm)form).getDescription();
/*  1881 */                 if (passphrase != null) {
/*  1882 */                   passphrase = Translate.decode(passphrase);
/*       */                 }
/*  1884 */                 password = passphrase;
/*       */               }
/*  1886 */               if ((mode != null) && (mode.equals("SSH")) && (sshkey != null))
/*       */               {
/*  1888 */                 String nmshome = System.getProperty("webnms.rootdir");
/*  1889 */                 mode = "SSH_KEY";
/*  1890 */                 File f = null;
/*       */                 try
/*       */                 {
/*  1893 */                   f = new File(nmshome + File.separator + "adventnet_ssh_privateKey_file.txt_" + hostname);
/*  1894 */                   if (!f.exists())
/*       */                   {
/*       */ 
/*       */ 
/*       */ 
/*  1899 */                     f = new File(nmshome + File.separator + "adventnet_ssh_privateKey_file.txt_" + hostname);
/*  1900 */                     FileWriter f1 = new FileWriter(f);
/*  1901 */                     f1.write(sshkey);
/*  1902 */                     f1.close();
/*       */                   }
/*       */                 }
/*       */                 catch (Exception e)
/*       */                 {
/*  1907 */                   e.printStackTrace();
/*       */                 }
/*       */               }
/*  1910 */               String hostdetailsentry = "insert into AM_SCRIPTHOSTDETAILS(ID,HOSTNAME,USERNAME,PASSWORD,MODE,PROMPT,PORT) values(" + DBQueryUtil.getIncrementedID("ID", "AM_SCRIPTHOSTDETAILS") + ",'" + hostname + "','" + username + "'," + DBQueryUtil.encode(password) + ",'" + mode + "','" + prompt + "'," + port + ")";
/*  1911 */               int count = this.mo.executeUpdateStmt(hostdetailsentry);
/*  1912 */               AMConnectionPool.getInstance();ResultSet rs = AMConnectionPool.executeQueryStmt("select ID from AM_SCRIPTHOSTDETAILS where HOSTNAME ='" + hostname + "'");
/*  1913 */               if (rs.next())
/*       */               {
/*  1915 */                 hostid = rs.getString("ID");
/*       */               }
/*       */               try
/*       */               {
/*  1919 */                 AMConnectionPool.closeStatement(rs);
/*       */               }
/*       */               catch (Exception exc)
/*       */               {
/*  1923 */                 exc.printStackTrace();
/*       */               }
/*       */             }
/*       */             else
/*       */             {
/*  1928 */               hostid = ((AMActionForm)form).getChoosehost();
/*       */             }
/*  1930 */             String insertactionhostquery = "insert into AM_ACTIONHOST_MAPPER values(" + id + "," + hostid + ")";
/*  1931 */             this.mo.executeUpdateStmt(insertactionhostquery);
/*       */           }
/*       */           
/*       */ 
/*       */ 
/*  1936 */           messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("execprogramaction.create.success"));
/*  1937 */           saveMessages(request, messages);
/*  1938 */           if (popup)
/*       */           {
/*  1940 */             associateActions(request);
/*  1941 */             messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("execprogramaction.createandassociate.success"));
/*       */             
/*  1943 */             return new ActionForward("/jsp/ThresholdCreationForwarder.jsp" + getWizString(request));
/*       */           }
/*       */         }
/*       */       }
/*       */       else
/*       */       {
/*  1949 */         messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("execprogramaction.create.alreadyexists", request.getParameter("displayname")));
/*  1950 */         saveMessages(request, messages);
/*  1951 */         if (popup)
/*       */         {
/*  1953 */           return new ActionForward("/jsp/ExecProgramActionForm.jsp");
/*       */         }
/*  1955 */         return new ActionForward("/showTile.do?TileName=.ExecProg");
/*       */       }
/*  1957 */       if (returnpath != null)
/*       */       {
/*  1959 */         request.setAttribute("showAdvancedOptions", "true");
/*  1960 */         return new ActionForward(returnpath);
/*       */       }
/*       */       
/*  1963 */       return mapping.findForward("success");
/*       */     }
/*       */     
/*       */ 
/*  1967 */     if (returnpath != null) {
/*  1968 */       return new ActionForward(returnpath);
/*       */     }
/*  1970 */     return mapping.findForward("success");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward editExecProgAction(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*  1980 */     AMConnectionPool cp = AMConnectionPool.getInstance();
/*  1981 */     AMActionForm amform = (AMActionForm)form;
/*  1982 */     ActionMessages messages = new ActionMessages();
/*  1983 */     String update = request.getParameter("update");
/*  1984 */     String apperr = request.getParameter("appenderror");
/*  1985 */     String command = Translate.decode(request.getParameter("command"));
/*       */     
/*  1987 */     int appenderror = 0;
/*  1988 */     int appendout = 0;
/*  1989 */     String displayname = request.getParameter("displayname");
/*  1990 */     if (DBQueryUtil.getDBType().equals("mssql"))
/*       */     {
/*  1992 */       displayname = displayname.replaceAll("'", "''");
/*       */     }
/*       */     else
/*       */     {
/*  1996 */       displayname = displayname.replaceAll("'", "\\\\'");
/*       */     }
/*  1998 */     String checkquery = "select * from AM_ACTIONPROFILE where NAME='" + displayname + "' and ID!=" + amform.getId();
/*  1999 */     ArrayList list = this.mo.getRows(checkquery);
/*  2000 */     if (list.size() == 0)
/*       */     {
/*  2002 */       String updateactionquery = "update AM_ACTIONPROFILE set NAME='" + displayname + "' where ID = " + amform.getId();
/*  2003 */       this.mo.executeUpdateStmt(updateactionquery);
/*       */       
/*       */ 
/*       */ 
/*  2007 */       PreparedStatement psEdit = AMConnectionPool.getConnection().prepareStatement("update AM_SERVERCMDACTION set COMMAND=? , APPENDERROR=? , APPENDOUT=?, ABORTAFTER=? , DIRTOEXECUTE=? where ID=" + amform.getId());
/*  2008 */       psEdit.setString(1, command);
/*  2009 */       psEdit.setInt(2, appenderror);
/*  2010 */       psEdit.setInt(3, appendout);
/*  2011 */       psEdit.setInt(4, Integer.parseInt(request.getParameter("abortafter")));
/*  2012 */       psEdit.setString(5, request.getParameter("execProgExecDir"));
/*  2013 */       psEdit.executeUpdate();
/*       */       
/*       */ 
/*       */ 
/*       */ 
/*  2018 */       String serversite = amform.getServersite();
/*  2019 */       if (serversite.equals("remote"))
/*       */       {
/*  2021 */         String choosehost = amform.getChoosehost();
/*       */         
/*  2023 */         String hostid = ((AMActionForm)form).getChoosehost();
/*       */         try
/*       */         {
/*  2026 */           count = AMConnectionPool.executeUpdateStmt("insert into AM_ACTIONHOST_MAPPER values(" + amform.getId() + "," + choosehost + ")");
/*       */         }
/*       */         catch (SQLException exc)
/*       */         {
/*       */           try {
/*       */             int count;
/*  2032 */             count = AMConnectionPool.executeUpdateStmt("update AM_ACTIONHOST_MAPPER set HOSTID=" + choosehost + " where ACTIONID=" + amform.getId());
/*       */           }
/*       */           catch (Exception exc1) {
/*       */             int count;
/*  2036 */             exc1.printStackTrace();
/*       */           }
/*       */           
/*       */         }
/*       */       }
/*       */       else
/*       */       {
/*  2043 */         String deletequery = "delete from AM_ACTIONHOST_MAPPER where ACTIONID=" + amform.getId();
/*       */         try
/*       */         {
/*  2046 */           count = AMConnectionPool.executeUpdateStmt(deletequery);
/*       */         }
/*       */         catch (Exception exc) {
/*       */           int count;
/*  2050 */           exc.printStackTrace();
/*       */         }
/*       */       }
/*  2053 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("execprogramaction.edit.success"));
/*  2054 */       saveMessages(request, messages);
/*       */     }
/*       */     else
/*       */     {
/*  2058 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("execprogramaction.create.alreadyexists", request.getParameter("displayname")));
/*  2059 */       saveMessages(request, messages);
/*  2060 */       if (update == null) {
/*  2061 */         return new ActionForward("/adminAction.do?method=showExecProgAction&actionID=" + amform.getId() + "&haid=null");
/*       */       }
/*  2063 */       return new ActionForward("/showActionProfiles.do?method=getActionDetails&actionid=" + amform.getId());
/*       */     }
/*       */     
/*  2066 */     if (update == null) {
/*  2067 */       return mapping.findForward("success");
/*       */     }
/*  2069 */     return new ActionForward("/showActionProfiles.do?method=getActionDetails&actionid=" + amform.getId());
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward showExecProgAction(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*  2079 */     String actionID = request.getParameter("actionID");
/*  2080 */     String query = "select AM_SERVERCMDACTION.ID,NAME,COMMAND, APPENDERROR, APPENDOUT, ABORTAFTER, DIRTOEXECUTE from AM_SERVERCMDACTION,AM_ACTIONPROFILE where AM_SERVERCMDACTION.ID =AM_ACTIONPROFILE.ID and  AM_ACTIONPROFILE.ID=" + actionID;
/*  2081 */     ArrayList rows = this.mo.getRows(query);
/*  2082 */     ArrayList row = (ArrayList)rows.get(0);
/*  2083 */     AMActionForm amform = (AMActionForm)form;
/*  2084 */     String hostquery = "select HOSTID from AM_ACTIONHOST_MAPPER where ACTIONID='" + actionID + "'";
/*  2085 */     request.setAttribute("remoteactionedit", "true");
/*       */     try
/*       */     {
/*  2088 */       AMConnectionPool cp = AMConnectionPool.getInstance();
/*  2089 */       ResultSet rs1 = AMConnectionPool.executeQueryStmt(hostquery);
/*  2090 */       ResultSet rs = null;
/*  2091 */       if (rs1.next())
/*       */       {
/*  2093 */         amform.setServersite("remote");
/*  2094 */         String hostdetailsquery = "select * from AM_SCRIPTHOSTDETAILS where ID=" + rs1.getString("HOSTID");
/*  2095 */         rs = AMConnectionPool.executeQueryStmt(hostdetailsquery);
/*  2096 */         amform.setChoosehost(rs1.getString("HOSTID"));
/*  2097 */         if (rs.next())
/*       */         {
/*  2099 */           amform.setHost(rs.getString("HOSTNAME"));
/*  2100 */           amform.setUsername(rs.getString("USERNAME"));
/*  2101 */           amform.setPassword(rs.getString("PASSWORD"));
/*  2102 */           amform.setPort(rs.getString("PORT"));
/*  2103 */           amform.setPrompt(Translate.decode(rs.getString("PROMPT")));
/*  2104 */           amform.setMonitoringmode(rs.getString("MODE"));
/*       */         }
/*       */         
/*  2107 */         AMConnectionPool.closeStatement(rs);
/*       */       }
/*  2109 */       AMConnectionPool.closeStatement(rs1);
/*       */     }
/*       */     catch (Exception exc)
/*       */     {
/*  2113 */       exc.printStackTrace();
/*       */     }
/*       */     
/*       */ 
/*  2117 */     amform.setId(Integer.parseInt((String)row.get(0)));
/*  2118 */     amform.setDisplayname((String)row.get(1));
/*  2119 */     amform.setCommand(Translate.decode((String)row.get(2)));
/*  2120 */     amform.setAppenderror((String)row.get(3));
/*  2121 */     amform.setAppendout((String)row.get(4));
/*  2122 */     amform.setAbortafter((String)row.get(5));
/*  2123 */     amform.setExecProgExecDir((String)row.get(6));
/*  2124 */     amform.setMethod("editExecProgAction");
/*  2125 */     return mapping.findForward("execProg");
/*       */   }
/*       */   
/*       */   public ActionForward deleteProgExecAction(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
/*       */   {
/*  2130 */     String[] applications = request.getParameterValues("progcheckbox");
/*  2131 */     String messg = "";
/*  2132 */     if (applications != null)
/*       */     {
/*  2134 */       for (int i = 0; i < applications.length; i++)
/*       */       {
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*  2143 */         FaultUtil.deleteAction(applications[i]);
/*  2144 */         DelegatedUserRoleUtil.deleteEntryFromConfigUserTable(Integer.parseInt(applications[i]), 2);
/*       */       }
/*  2146 */       messg = "execprogramaction.delete.success";
/*       */     }
/*  2148 */     ActionMessages messages = new ActionMessages();
/*  2149 */     messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage(messg));
/*  2150 */     saveMessages(request, messages);
/*  2151 */     return mapping.findForward("success");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */   public ActionForward createSendTrapAction(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*  2159 */     String isCancel = request.getParameter("cancel");
/*  2160 */     String type = request.getParameter("snmpVersionList");
/*  2161 */     String returnpath = request.getParameter("returnpath");
/*  2162 */     String popupParam = request.getParameter("popup");
/*  2163 */     boolean popup = (popupParam != null) && (popupParam.equals("true"));
/*  2164 */     ActionMessages messages = new ActionMessages();
/*  2165 */     String displayname = request.getParameter("displayname");
/*  2166 */     if (DBQueryUtil.getDBType().equals("mssql"))
/*       */     {
/*  2168 */       displayname = displayname.replaceAll("'", "''");
/*       */     }
/*       */     else
/*       */     {
/*  2172 */       displayname = displayname.replaceAll("'", "\\\\'");
/*       */     }
/*  2174 */     if (isCancel.equals("false"))
/*       */     {
/*  2176 */       String checkquery = "select * from AM_ACTIONPROFILE where NAME='" + displayname + "'";
/*  2177 */       ArrayList list = this.mo.getRows(checkquery);
/*  2178 */       if (list.size() == 0)
/*       */       {
/*  2180 */         String insertquery = "insert into AM_ACTIONPROFILE (ID,NAME, TYPE) VALUES(" + DBQueryUtil.getIncrementedID("ID", "AM_ACTIONPROFILE") + ",'" + displayname + "','" + type + "' )";
/*  2181 */         this.mo.executeUpdateStmt(insertquery);
/*  2182 */         ArrayList result = this.mo.getRows("select max(ID) from AM_ACTIONPROFILE");
/*  2183 */         if (result.size() > 0)
/*       */         {
/*  2185 */           String id = (String)((ArrayList)result.get(0)).get(0);
/*  2186 */           if (id == null)
/*       */           {
/*  2188 */             id = "1";
/*       */           }
/*  2190 */           DelegatedUserRoleUtil.addEntryToConfigUserTable(request, Integer.parseInt(id), 2);
/*  2191 */           String insertsendtrapconfigquery = "";
/*  2192 */           if (type.equals("11"))
/*       */           {
/*  2194 */             insertsendtrapconfigquery = "insert into AM_V1_TRAPACTION (ID, DESTINATIONHOST,DESTINATIONPORT,COMMUNITY,MIBNAME,VARBINDS,GENERICTYPE,SPECIFICTYPE,ENTERPRISE,OBJECTID,MESSAGEFORMAT) values (" + id + ",'" + request.getParameter("trapDestinationAddress") + "'," + request.getParameter("trapDestinationPort") + ",'" + request.getParameter("trapCommunity") + "','" + request.getParameter("mibName") + "','" + request.getParameter("trapVarbinds") + "','" + request.getParameter("v1TrapGenericType") + "','" + request.getParameter("v1TrapSpecificType") + "','" + request.getParameter("v1TrapEnterprise") + "','" + request.getParameter("objectID") + "'," + request.getParameter("messageFormat") + ")";
/*       */           }
/*  2196 */           else if (type.equals("12"))
/*       */           {
/*  2198 */             insertsendtrapconfigquery = "insert into AM_V2_TRAPACTION (ID, DESTINATIONHOST,DESTINATIONPORT,COMMUNITY,MIBNAME,VARBINDS,SNMPTRAPOID,OBJECTID,MESSAGEFORMAT) values (" + id + ",'" + request.getParameter("trapDestinationAddress") + "'," + request.getParameter("trapDestinationPort") + ",'" + request.getParameter("trapCommunity") + "','" + request.getParameter("mibName") + "','" + request.getParameter("trapVarbinds") + "','" + request.getParameter("v2SNMPTrapOID") + "','" + request.getParameter("objectID") + "'," + request.getParameter("messageFormat") + ")";
/*       */           }
/*  2200 */           else if (type.equals("13"))
/*       */           {
/*       */ 
/*  2203 */             insertsendtrapconfigquery = "insert into AM_V3_TRAPACTION (ID, DESTINATIONHOST,DESTINATIONPORT,MIBNAME,VARBINDS,SNMPTRAPOID,USERNAME, ENGINEID,OBJECTID,MESSAGEFORMAT,CONTEXTNAME) values (" + id + ",'" + request.getParameter("trapDestinationAddress") + "'," + request.getParameter("trapDestinationPort") + ",'" + request.getParameter("mibName") + "','" + request.getParameter("trapVarbinds") + "','" + request.getParameter("v3SNMPTrapOID") + "','" + request.getParameter("v3TrapUser") + "','" + request.getParameter("v3TrapEngineID") + "','" + request.getParameter("objectID") + "'," + request.getParameter("messageFormat") + ",'" + request.getParameter("v3TrapContextName") + "')";
/*       */           }
/*  2205 */           this.mo.executeUpdateStmt(insertsendtrapconfigquery);
/*       */         }
/*  2207 */         messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("sendtrapaction.create.success"));
/*  2208 */         saveMessages(request, messages);
/*  2209 */         if (popup)
/*       */         {
/*  2211 */           associateActions(request);
/*  2212 */           messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("sendtrapaction.createandassociate.success"));
/*       */           
/*  2214 */           return new ActionForward("/jsp/ThresholdCreationForwarder.jsp" + getWizString(request));
/*       */         }
/*       */       }
/*       */       else
/*       */       {
/*  2219 */         AMActionForm amform = (AMActionForm)form;
/*  2220 */         amform.setType(type);
/*  2221 */         messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("sendtrapaction.create.alreadyexists", request.getParameter("displayname")));
/*  2222 */         saveMessages(request, messages);
/*  2223 */         if (popup)
/*       */         {
/*  2225 */           return new ActionForward("/jsp/SendTrapActionForm.jsp");
/*       */         }
/*  2227 */         return new ActionForward("/showTile.do?TileName=.SendTrap");
/*       */       }
/*       */     }
/*  2230 */     if (returnpath != null)
/*       */     {
/*  2232 */       request.setAttribute("showAdvancedOptions", "true");
/*  2233 */       return new ActionForward(returnpath);
/*       */     }
/*       */     
/*  2236 */     return mapping.findForward("success");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */   public ActionForward editSendTrapAction(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*  2244 */     AMActionForm amform = (AMActionForm)form;
/*  2245 */     ActionMessages messages = new ActionMessages();
/*  2246 */     String update = request.getParameter("update");
/*  2247 */     String displayname = request.getParameter("displayname");
/*  2248 */     if (DBQueryUtil.getDBType().equals("mssql"))
/*       */     {
/*  2250 */       displayname = displayname.replaceAll("'", "''");
/*       */     }
/*       */     else
/*       */     {
/*  2254 */       displayname = displayname.replaceAll("'", "\\\\'");
/*       */     }
/*  2256 */     String checkquery = "select * from AM_ACTIONPROFILE where NAME='" + displayname + "' and ID!=" + amform.getId();
/*  2257 */     ArrayList list = this.mo.getRows(checkquery);
/*  2258 */     if (list.size() == 0)
/*       */     {
/*  2260 */       int id = amform.getId();
/*  2261 */       String type = request.getParameter("snmpVersionList");
/*       */       
/*  2263 */       String updateactionquery = "update AM_ACTIONPROFILE set NAME='" + displayname + "' where ID = " + id;
/*       */       
/*  2265 */       this.mo.executeUpdateStmt(updateactionquery);
/*       */       
/*       */ 
/*  2268 */       if (update == null)
/*       */       {
/*  2270 */         if (type.equals("11"))
/*       */         {
/*  2272 */           updateactionquery = "update AM_V1_TRAPACTION set DESTINATIONHOST='" + request.getParameter("trapDestinationAddress") + "', DESTINATIONPORT=" + request.getParameter("trapDestinationPort") + ", COMMUNITY='" + request.getParameter("trapCommunity") + "', MIBNAME='" + request.getParameter("mibName") + "',VARBINDS='" + request.getParameter("trapVarbinds") + "', GENERICTYPE='" + request.getParameter("v1TrapGenericType") + "',SPECIFICTYPE='" + request.getParameter("v1TrapSpecificType") + "', ENTERPRISE='" + request.getParameter("v1TrapEnterprise") + "', OBJECTID='" + request.getParameter("objectID") + "',MESSAGEFORMAT='" + request.getParameter("messageFormat") + "' where ID=" + id;
/*       */         }
/*  2274 */         else if (type.equals("12"))
/*       */         {
/*  2276 */           updateactionquery = "update AM_V2_TRAPACTION set DESTINATIONHOST='" + request.getParameter("trapDestinationAddress") + "', DESTINATIONPORT='" + request.getParameter("trapDestinationPort") + "', COMMUNITY='" + request.getParameter("trapCommunity") + "',MIBNAME='" + request.getParameter("mibName") + "',VARBINDS='" + request.getParameter("trapVarbinds") + "',SNMPTRAPOID='" + request.getParameter("v2SNMPTrapOID") + "', OBJECTID='" + request.getParameter("objectID") + "',MESSAGEFORMAT='" + request.getParameter("messageFormat") + "' where ID=" + id;
/*       */         }
/*  2278 */         else if (type.equals("13"))
/*       */         {
/*  2280 */           updateactionquery = "update AM_V3_TRAPACTION set DESTINATIONHOST='" + request.getParameter("trapDestinationAddress") + "', DESTINATIONPORT='" + request.getParameter("trapDestinationPort") + "', CONTEXTNAME='" + request.getParameter("v3TrapContextName") + "',MIBNAME='" + request.getParameter("mibName") + "',VARBINDS='" + request.getParameter("trapVarbinds") + "',SNMPTRAPOID='" + request.getParameter("v3SNMPTrapOID") + "',USERNAME='" + request.getParameter("v3TrapUser") + "',ENGINEID='" + request.getParameter("v3TrapEngineID") + "', OBJECTID='" + request.getParameter("objectID") + "',MESSAGEFORMAT='" + request.getParameter("messageFormat") + "' where ID=" + id;
/*       */         }
/*       */         
/*       */ 
/*       */       }
/*  2285 */       else if (type.equals("11"))
/*       */       {
/*  2287 */         updateactionquery = "update AM_V1_TRAPACTION set DESTINATIONHOST='" + request.getParameter("trapDestinationAddress") + "', DESTINATIONPORT='" + request.getParameter("trapDestinationPort") + "' where ID=" + id;
/*       */       }
/*  2289 */       else if (type.equals("12"))
/*       */       {
/*  2291 */         updateactionquery = "update AM_V2_TRAPACTION set DESTINATIONHOST='" + request.getParameter("trapDestinationAddress") + "', DESTINATIONPORT='" + request.getParameter("trapDestinationPort") + "' where ID=" + id;
/*       */       }
/*       */       
/*  2294 */       this.mo.executeUpdateStmt(updateactionquery);
/*       */       
/*  2296 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("sendtrapaction.edit.success"));
/*  2297 */       saveMessages(request, messages);
/*       */     }
/*       */     else
/*       */     {
/*  2301 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("sendtrapaction.create.alreadyexists", request.getParameter("displayname")));
/*  2302 */       saveMessages(request, messages);
/*  2303 */       if (update == null) {
/*  2304 */         return new ActionForward("/adminAction.do?method=showSendTrapAction&actionID=" + amform.getId() + "&haid=null");
/*       */       }
/*  2306 */       return new ActionForward("/showActionProfiles.do?method=getActionDetails&actionid=" + amform.getId());
/*       */     }
/*       */     
/*  2309 */     if (update == null) {
/*  2310 */       return mapping.findForward("success");
/*       */     }
/*  2312 */     return new ActionForward("/showActionProfiles.do?method=getActionDetails&actionid=" + amform.getId());
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward showSendTrapAction(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*  2322 */     String actionID = request.getParameter("actionID");
/*  2323 */     String query = "select ID,NAME,TYPE from AM_ACTIONPROFILE where AM_ACTIONPROFILE.ID=" + actionID;
/*  2324 */     ArrayList rows = this.mo.getRows(query);
/*  2325 */     ArrayList row = (ArrayList)rows.get(0);
/*  2326 */     AMActionForm amform = (AMActionForm)form;
/*  2327 */     amform.setId(Integer.parseInt((String)row.get(0)));
/*  2328 */     amform.setDisplayname((String)row.get(1));
/*  2329 */     String type = (String)row.get(2);
/*  2330 */     amform.setSnmpVersionList(type);
/*  2331 */     if (type.equals("11"))
/*       */     {
/*  2333 */       query = "select DESTINATIONHOST,DESTINATIONPORT,COMMUNITY,GENERICTYPE,SPECIFICTYPE,ENTERPRISE,MIBNAME,VARBINDS,OBJECTID,MESSAGEFORMAT from AM_V1_TRAPACTION where AM_V1_TRAPACTION.ID=" + actionID;
/*  2334 */       ArrayList v1rows = this.mo.getRows(query);
/*  2335 */       ArrayList v1row = (ArrayList)v1rows.get(0);
/*  2336 */       amform.setTrapDestinationAddress((String)v1row.get(0));
/*  2337 */       amform.setTrapDestinationPort(Integer.parseInt((String)v1row.get(1)));
/*  2338 */       amform.setTrapCommunity((String)v1row.get(2));
/*  2339 */       amform.setV1TrapGenericType((String)v1row.get(3));
/*  2340 */       amform.setV1TrapSpecificType((String)v1row.get(4));
/*  2341 */       amform.setV1TrapEnterprise((String)v1row.get(5));
/*  2342 */       amform.setMibName((String)v1row.get(6));
/*  2343 */       amform.setTrapVarbinds((String)v1row.get(7));
/*  2344 */       amform.setObjectID((String)v1row.get(8));
/*  2345 */       amform.setMessageFormat((String)v1row.get(9));
/*       */     }
/*  2347 */     else if (type.equals("12"))
/*       */     {
/*  2349 */       query = "select DESTINATIONHOST,DESTINATIONPORT,COMMUNITY,SNMPTRAPOID,MIBNAME,VARBINDS,OBJECTID,MESSAGEFORMAT from AM_V2_TRAPACTION where AM_V2_TRAPACTION.ID=" + actionID;
/*  2350 */       ArrayList v2rows = this.mo.getRows(query);
/*  2351 */       ArrayList v2row = (ArrayList)v2rows.get(0);
/*  2352 */       amform.setTrapDestinationAddress((String)v2row.get(0));
/*  2353 */       amform.setTrapDestinationPort(Integer.parseInt((String)v2row.get(1)));
/*  2354 */       amform.setTrapCommunity((String)v2row.get(2));
/*  2355 */       amform.setV2SNMPTrapOID((String)v2row.get(3));
/*  2356 */       amform.setMibName((String)v2row.get(4));
/*  2357 */       amform.setTrapVarbinds((String)v2row.get(5));
/*  2358 */       amform.setObjectID((String)v2row.get(6));
/*  2359 */       amform.setMessageFormat((String)v2row.get(7));
/*       */ 
/*       */     }
/*  2362 */     else if (type.equals("13"))
/*       */     {
/*  2364 */       query = "select DESTINATIONHOST,DESTINATIONPORT,SNMPTRAPOID,USERNAME,ENGINEID,MIBNAME,VARBINDS,OBJECTID,MESSAGEFORMAT,CONTEXTNAME from AM_V3_TRAPACTION where AM_V3_TRAPACTION.ID=" + actionID;
/*  2365 */       ArrayList v3rows = this.mo.getRows(query);
/*  2366 */       ArrayList v3row = (ArrayList)v3rows.get(0);
/*  2367 */       amform.setTrapDestinationAddress((String)v3row.get(0));
/*  2368 */       amform.setTrapDestinationPort(Integer.parseInt((String)v3row.get(1)));
/*  2369 */       amform.setV3SNMPTrapOID((String)v3row.get(2));
/*  2370 */       amform.setV3TrapUser((String)v3row.get(3));
/*       */       
/*       */ 
/*       */ 
/*  2374 */       amform.setV3TrapEngineID((String)v3row.get(4));
/*  2375 */       amform.setMibName((String)v3row.get(5));
/*  2376 */       amform.setTrapVarbinds((String)v3row.get(6));
/*  2377 */       amform.setObjectID((String)v3row.get(7));
/*  2378 */       amform.setMessageFormat((String)v3row.get(8));
/*  2379 */       amform.setV3TrapContextName((String)v3row.get(9));
/*       */     }
/*  2381 */     amform.setMethod("editSendTrapAction");
/*  2382 */     return mapping.findForward("sendTrap");
/*       */   }
/*       */   
/*       */   public ActionForward deleteSendTrapAction(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
/*       */   {
/*  2387 */     String[] applications = request.getParameterValues("sendtrapcheckbox");
/*  2388 */     String messg = "";
/*  2389 */     if (applications != null)
/*       */     {
/*  2391 */       for (int i = 0; i < applications.length; i++)
/*       */       {
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*  2404 */         FaultUtil.deleteAction(applications[i]);
/*  2405 */         DelegatedUserRoleUtil.deleteEntryFromConfigUserTable(Integer.parseInt(applications[i]), 2);
/*       */       }
/*  2407 */       messg = "trapaction.delete.success";
/*       */     }
/*  2409 */     ActionMessages messages = new ActionMessages();
/*  2410 */     messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage(messg));
/*  2411 */     saveMessages(request, messages);
/*  2412 */     return mapping.findForward("success");
/*       */   }
/*       */   
/*       */   public ActionForward reloadSendTrapActionForm(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
/*       */   {
/*  2417 */     AMActionForm amform = (AMActionForm)form;
/*  2418 */     String typefromrequest = request.getParameter("snmpVersionList");
/*  2419 */     if (typefromrequest != null)
/*       */     {
/*  2421 */       amform.setSnmpVersionList(typefromrequest);
/*       */     }
/*       */     else
/*       */     {
/*  2425 */       amform.setSnmpVersionList("11");
/*       */     }
/*  2427 */     return new ActionForward("/showTile.do?TileName=.SendTrap");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */   public ActionForward showActionProfiles(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*  2435 */     int actionId = -1;
/*  2436 */     if (request.getParameter("actionId") != null) {
/*  2437 */       actionId = Integer.parseInt(request.getParameter("actionId"));
/*       */     }
/*  2439 */     String actionName = request.getParameter("actionName");
/*       */     
/*  2441 */     String delete = request.getParameter("Delete");
/*  2442 */     ActionMessages messages = new ActionMessages();
/*  2443 */     ArrayList detailsList = new ArrayList();
/*  2444 */     if (actionId != -1) {
/*  2445 */       int userID = DelegatedUserRoleUtil.getLoginUserid(request);
/*  2446 */       boolean isPrivilegedUser = com.adventnet.appmanager.util.Constants.isPrivilegedUser(request);
/*  2447 */       detailsList = com.me.apm.fault.actions.util.ActionsUtil.getAllActions(userID, isPrivilegedUser, actionId);
/*  2448 */       if (detailsList != null) {
/*  2449 */         request.setAttribute("actionConfig", detailsList);
/*       */       }
/*       */       
/*  2452 */       request.setAttribute("actionName", actionName);
/*  2453 */       if (delete != null)
/*       */       {
/*  2455 */         request.setAttribute("savedConfiguration", "true");
/*  2456 */         messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("threshold.action.configuration.removed"));
/*  2457 */         saveMessages(request, messages);
/*       */       }
/*       */       
/*  2460 */       return new ActionForward("/jsp/ActionAttributeDetails.jsp");
/*       */     }
/*  2462 */     ClientDBUtil.getActionProfiles(request, request.getRemoteUser(), request.isUserInRole("OPERATOR"));
/*  2463 */     request.setAttribute("HelpKey", "Action Profiles");
/*  2464 */     request.setAttribute("productEdition", com.adventnet.appmanager.util.Constants.getCategorytype());
/*  2465 */     return mapping.findForward("actionprofile");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward showGlobalTrap(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*  2481 */     if (com.adventnet.appmanager.util.Constants.isPrivilegedUser(request)) {
/*  2482 */       return new ActionForward("/jsp/formpages/AccessRestricted.jsp");
/*       */     }
/*  2484 */     AMActionForm amform = (AMActionForm)form;
/*  2485 */     String type = com.adventnet.appmanager.util.Constants.getGlobalTrapVersion();
/*  2486 */     String query = "";
/*  2487 */     if (type.equals("11"))
/*       */     {
/*  2489 */       query = "select DESTINATIONHOST,DESTINATIONPORT,COMMUNITY from AM_V1_TRAPACTION where ID='-1'";
/*  2490 */       amform.setTrapStatus(com.adventnet.appmanager.util.Constants.getGlobalV1Trap());
/*  2491 */       amform.setSnmpVersionList("11");
/*       */     }
/*  2493 */     else if (type.equals("12"))
/*       */     {
/*  2495 */       query = "select DESTINATIONHOST,DESTINATIONPORT,COMMUNITY from AM_V2_TRAPACTION where ID='-1'";
/*  2496 */       amform.setTrapStatus(com.adventnet.appmanager.util.Constants.getGlobalV2Trap());
/*  2497 */       amform.setSnmpVersionList("12");
/*       */     }
/*  2499 */     else if (type.equals("13"))
/*       */     {
/*  2501 */       query = "select DESTINATIONHOST,DESTINATIONPORT,USERNAME,CONTEXTNAME,ENGINEID from AM_V3_TRAPACTION where ID='-1'";
/*  2502 */       amform.setTrapStatus(com.adventnet.appmanager.util.Constants.getGlobalV3Trap());
/*  2503 */       amform.setSnmpVersionList("13");
/*       */     }
/*  2505 */     AMConnectionPool cp = AMConnectionPool.getInstance();
/*  2506 */     ResultSet rs = null;
/*       */     try
/*       */     {
/*  2509 */       rs = AMConnectionPool.executeQueryStmt(query);
/*  2510 */       if (rs.next())
/*       */       {
/*  2512 */         amform.setGlobalTrapAddress(rs.getString("DESTINATIONHOST"));
/*  2513 */         amform.setGlobalTrapPort(Integer.parseInt(rs.getString("DESTINATIONPORT")));
/*  2514 */         if (type.equals("13"))
/*       */         {
/*  2516 */           amform.setGlobalTrapUserName(rs.getString("USERNAME"));
/*  2517 */           amform.setGlobalTrapContextName(rs.getString("CONTEXTNAME"));
/*  2518 */           amform.setGlobalTrapEngineID(rs.getString("ENGINEID"));
/*       */         }
/*       */         else
/*       */         {
/*  2522 */           amform.setGlobalTrapCommunity(rs.getString("COMMUNITY"));
/*       */         }
/*       */       }
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/*  2528 */       e.printStackTrace();
/*       */     }
/*       */     finally
/*       */     {
/*  2532 */       AMConnectionPool.closeStatement(rs);
/*       */     }
/*  2534 */     request.setAttribute("HelpKey", "Action Profiles");
/*  2535 */     return new ActionForward("/jsp/SendGlobalTrapActionForm.jsp");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public Map getGlobalTrapActionPwds(String snmpVersion)
/*       */   {
/*  2545 */     Map<String, String> passwordDetails = new HashMap();
/*  2546 */     String query = "";
/*  2547 */     if ("11".equals(snmpVersion))
/*       */     {
/*  2549 */       query = "select COMMUNITY from AM_V1_TRAPACTION where ID='-1'";
/*       */     }
/*  2551 */     else if ("12".equals(snmpVersion))
/*       */     {
/*  2553 */       query = "select COMMUNITY from AM_V2_TRAPACTION where ID='-1'";
/*       */     }
/*  2555 */     else if ("13".equals(snmpVersion))
/*       */     {
/*  2557 */       query = "select PRIVPASWORD,AUTHPROTOCOL from AM_V3_TRAPACTION where ID='-1'";
/*       */     }
/*  2559 */     AMConnectionPool cp = AMConnectionPool.getInstance();
/*  2560 */     ResultSet rs = null;
/*       */     try
/*       */     {
/*  2563 */       rs = AMConnectionPool.executeQueryStmt(query);
/*  2564 */       if (rs.next())
/*       */       {
/*  2566 */         if ("13".equals(snmpVersion))
/*       */         {
/*  2568 */           passwordDetails.put("PRIVPASWORD", rs.getString("PRIVPASWORD"));
/*  2569 */           passwordDetails.put("AUTHPROTOCOL", rs.getString("AUTHPROTOCOL"));
/*       */         }
/*       */         else
/*       */         {
/*  2573 */           passwordDetails.put("COMMUNITY", rs.getString("COMMUNITY"));
/*       */         }
/*       */       }
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/*  2579 */       e.printStackTrace();
/*       */     }
/*       */     finally
/*       */     {
/*  2583 */       AMConnectionPool.closeStatement(rs);
/*       */     }
/*       */     
/*  2586 */     return passwordDetails;
/*       */   }
/*       */   
/*       */   public ActionForward reloadGlobalSendTrapActionForm(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*  2592 */     String snmpVersion = request.getParameter("snmpVersion");
/*  2593 */     String query = "";
/*       */     
/*  2595 */     String jsonObject = "";
/*       */     
/*       */ 
/*  2598 */     if (snmpVersion != null)
/*       */     {
/*  2600 */       if (snmpVersion.equals("11"))
/*       */       {
/*  2602 */         query = "select DESTINATIONHOST,DESTINATIONPORT,COMMUNITY from AM_V1_TRAPACTION where ID='-1'";
/*       */       }
/*  2604 */       else if (snmpVersion.equals("12"))
/*       */       {
/*  2606 */         query = "select DESTINATIONHOST,DESTINATIONPORT,COMMUNITY from AM_V2_TRAPACTION where ID='-1'";
/*       */       }
/*  2608 */       else if (snmpVersion.equals("13"))
/*       */       {
/*       */ 
/*  2611 */         query = "select DESTINATIONHOST,DESTINATIONPORT,USERNAME,CONTEXTNAME,ENGINEID from AM_V3_TRAPACTION where ID='-1'";
/*       */       }
/*       */       
/*  2614 */       AMConnectionPool cp = AMConnectionPool.getInstance();
/*  2615 */       ResultSet rs = null;
/*  2616 */       String jsonObjectString = "testing ";
/*       */       try
/*       */       {
/*  2619 */         String destinationHost = "";
/*  2620 */         String destinationPort = "";
/*  2621 */         String community = "public";
/*  2622 */         String userName = "";
/*  2623 */         String contextName = "";
/*  2624 */         String engineID = "1234";
/*  2625 */         rs = AMConnectionPool.executeQueryStmt(query);
/*  2626 */         if (rs.next())
/*       */         {
/*  2628 */           destinationHost = rs.getString("DESTINATIONHOST");
/*  2629 */           destinationPort = rs.getString("DESTINATIONPORT");
/*  2630 */           community = "";
/*       */           
/*  2632 */           if (!snmpVersion.equals("13"))
/*       */           {
/*  2634 */             community = rs.getString("COMMUNITY");
/*  2635 */             jsonObjectString = "{\"DESTINATIONHOST\":\"" + destinationHost + "\",\"DESTINATIONPORT\":\"" + destinationPort + "\",\"COMMUNITY\":\"" + community + "\",\"VERSION\":\"V1V2\"}";
/*       */           }
/*       */           else
/*       */           {
/*  2639 */             userName = rs.getString("USERNAME");
/*  2640 */             contextName = rs.getString("CONTEXTNAME");
/*  2641 */             engineID = rs.getString("ENGINEID");
/*  2642 */             jsonObjectString = "{\"DESTINATIONHOST\":\"" + destinationHost + "\",\"DESTINATIONPORT\":\"" + destinationPort + "\",\"USER\":\"" + userName + "\",\"CONTEXTNAME\":\"" + contextName + "\",\"ENGINEID\":\"" + engineID + "\",\"VERSION\":\"V3\"}";
/*       */           }
/*  2644 */           response.setContentType("text/html");
/*  2645 */           PrintWriter toShow = response.getWriter();
/*  2646 */           toShow.println(jsonObjectString);
/*  2647 */           toShow.flush();
/*       */         }
/*       */         else
/*       */         {
/*  2651 */           if (!snmpVersion.equals("13"))
/*       */           {
/*  2653 */             jsonObjectString = "{\"DESTINATIONHOST\":\"" + destinationHost + "\",\"DESTINATIONPORT\":\"" + destinationPort + "\",\"COMMUNITY\":\"" + community + "\",\"VERSION\":\"V1V2\"}";
/*       */           }
/*       */           else
/*       */           {
/*  2657 */             jsonObjectString = "{\"DESTINATIONHOST\":\"" + destinationHost + "\",\"DESTINATIONPORT\":\"" + destinationPort + "\",\"USER\":\"" + userName + "\",\"CONTEXTNAME\":\"" + contextName + "\",\"VERSION\":\"V3\",\"ENGINEID\":\"" + engineID + "\"}";
/*       */           }
/*  2659 */           PrintWriter toShow = response.getWriter();
/*  2660 */           toShow.println(jsonObjectString);
/*  2661 */           toShow.flush();
/*       */         }
/*       */       }
/*       */       catch (Exception e)
/*       */       {
/*  2666 */         e.printStackTrace();
/*       */       }
/*       */       finally
/*       */       {
/*  2670 */         AMConnectionPool.closeStatement(rs);
/*       */       }
/*       */     }
/*  2673 */     return null;
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward createGlobalSendTrapAction(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*  2682 */     String isCancel = request.getParameter("cancel");
/*       */     
/*  2684 */     String type = request.getParameter("snmpVersionList");
/*  2685 */     String returnpath = request.getParameter("returnpath");
/*  2686 */     String popupParam = request.getParameter("popup");
/*  2687 */     boolean popup = (popupParam != null) && (popupParam.equals("true"));
/*  2688 */     String community = "";
/*  2689 */     AMConnectionPool cp = AMConnectionPool.getInstance();
/*  2690 */     ActionMessages messages = new ActionMessages();
/*       */     try
/*       */     {
/*  2693 */       if (isCancel.equals("false"))
/*       */       {
/*  2695 */         Map<String, String> passwordDetails = getGlobalTrapActionPwds(type);
/*  2696 */         String globalTrapAddress = request.getParameter("globalTrapAddress");
/*  2697 */         String updateSendTrapconfigquery = "";
/*  2698 */         String updateGlobalConfig1 = "";
/*  2699 */         String updateGlobalConfig2 = "";
/*  2700 */         if (("11".equals(type.trim())) || ("12".equals(type.trim()))) {
/*  2701 */           community = request.getParameter("globalTrapCommunity");
/*  2702 */           if ((community == null) || ("null".equals(community))) {
/*  2703 */             community = (String)passwordDetails.get("COMMUNITY");
/*       */           }
/*       */         }
/*  2706 */         if (type.trim().equals("11"))
/*       */         {
/*  2708 */           String trapV1SizeCheckQuery = "select DESTINATIONHOST from AM_V1_TRAPACTION where id=-1";
/*  2709 */           if (this.mo.getRows(trapV1SizeCheckQuery).size() > 0)
/*       */           {
/*  2711 */             updateSendTrapconfigquery = "update AM_V1_TRAPACTION set DESTINATIONHOST='" + globalTrapAddress + "' ,DESTINATIONPORT='" + request.getParameter("globalTrapPort") + "', COMMUNITY='" + community + "' where ID=-1";
/*       */ 
/*       */           }
/*       */           else
/*       */           {
/*       */ 
/*  2717 */             updateSendTrapconfigquery = "insert into AM_V1_TRAPACTION (ID,DESTINATIONHOST,DESTINATIONPORT,COMMUNITY,MIBNAME,GENERICTYPE,SPECIFICTYPE,ENTERPRISE,VARBINDS,OBJECTID,MESSAGEFORMAT) values (-1,'" + globalTrapAddress + "'," + request.getParameter("globalTrapPort") + ",'" + community + "','./mibs/APPLICATION-MANAGER-MIB ./mibs/RFC1213-MIB','0','0','.1.3.6.1.4.1.2162','$RCAMESSAGE','1.5.0','1')";
/*       */           }
/*       */           
/*  2720 */           updateGlobalConfig1 = "update AM_GLOBALCONFIG set VALUE='" + request.getParameter("trapStatus") + "' where NAME='globalv1trap'";
/*  2721 */           updateGlobalConfig2 = "update AM_GLOBALCONFIG set VALUE='disable' where NAME in ('globalv2trap','globalv3trap')";
/*  2722 */           com.adventnet.appmanager.util.Constants.setGlobalV1Trap(request.getParameter("trapStatus"));
/*  2723 */           com.adventnet.appmanager.util.Constants.setGlobalV2Trap("disable");
/*  2724 */           com.adventnet.appmanager.util.Constants.setGlobalV3Trap("disable");
/*  2725 */           com.adventnet.appmanager.util.Constants.setGlobalTrapVersion("11");
/*       */         }
/*  2727 */         else if (type.trim().equals("12"))
/*       */         {
/*  2729 */           String trapV2SizeCheckQuery = "select DESTINATIONHOST from AM_V2_TRAPACTION where id=-1";
/*  2730 */           if (this.mo.getRows(trapV2SizeCheckQuery).size() > 0)
/*       */           {
/*  2732 */             updateSendTrapconfigquery = "update AM_V2_TRAPACTION set DESTINATIONHOST='" + globalTrapAddress + "',DESTINATIONPORT='" + request.getParameter("globalTrapPort") + "', COMMUNITY='" + community + "' where id=-1";
/*       */ 
/*       */           }
/*       */           else
/*       */           {
/*  2737 */             updateSendTrapconfigquery = "insert into AM_V2_TRAPACTION (ID,DESTINATIONHOST,DESTINATIONPORT,COMMUNITY,MIBNAME,SNMPTRAPOID,VARBINDS,OBJECTID,MESSAGEFORMAT) values (-1,'" + globalTrapAddress + "'," + request.getParameter("globalTrapPort") + ",'" + community + "','./mibs/APPLICATION-MANAGER-MIB ./mibs/RFC1213-MIB','.1.3.6.1.4.1.2162','$RCAMESSAGE','1.5.0','1')";
/*       */           }
/*  2739 */           updateGlobalConfig1 = "update AM_GLOBALCONFIG set VALUE='" + request.getParameter("trapStatus") + "' where NAME='globalv2trap'";
/*  2740 */           updateGlobalConfig2 = "update AM_GLOBALCONFIG set VALUE='disable' where NAME in ('globalv1trap','globalv3trap')";
/*  2741 */           com.adventnet.appmanager.util.Constants.setGlobalV2Trap(request.getParameter("trapStatus"));
/*  2742 */           com.adventnet.appmanager.util.Constants.setGlobalV1Trap("disable");
/*  2743 */           com.adventnet.appmanager.util.Constants.setGlobalV3Trap("disable");
/*  2744 */           com.adventnet.appmanager.util.Constants.setGlobalTrapVersion("12");
/*       */         }
/*  2746 */         else if (type.trim().equalsIgnoreCase("13"))
/*       */         {
/*  2748 */           String globalV3TrapUserName = request.getParameter("globalTrapUserName");
/*  2749 */           String globalV3TrapContextName = request.getParameter("globalTrapContextName");
/*  2750 */           String globalV3TrapAuthPassword = request.getParameter("globalTrapAuthPassword");
/*  2751 */           String globalV3TrapPrivPassword = request.getParameter("globalTrapPrivPassword");
/*       */           
/*       */ 
/*       */ 
/*  2755 */           if ((globalV3TrapAuthPassword == null) || ("null".equals(globalV3TrapAuthPassword))) {
/*  2756 */             globalV3TrapAuthPassword = (String)passwordDetails.get("AUTHPROTOCOL");
/*       */           }
/*  2758 */           if ((globalV3TrapPrivPassword == null) || ("null".equals(globalV3TrapPrivPassword))) {
/*  2759 */             globalV3TrapPrivPassword = (String)passwordDetails.get("PRIVPASWORD");
/*       */           }
/*  2761 */           String globalV3TrapEngineID = request.getParameter("globalTrapEngineID");
/*  2762 */           String trapV3SizeCheckQuery = "select DESTINATIONHOST from AM_V3_TRAPACTION where id=-1";
/*       */           
/*  2764 */           if (this.mo.getRows(trapV3SizeCheckQuery).size() > 0)
/*       */           {
/*  2766 */             updateSendTrapconfigquery = "update AM_V3_TRAPACTION set DESTINATIONHOST='" + globalTrapAddress + "',DESTINATIONPORT=" + request.getParameter("DESTINATIONPORT") + ",USERNAME='" + globalV3TrapUserName + "',CONTEXTNAME='" + globalV3TrapContextName + "',ENGINEID='" + globalV3TrapEngineID + "'";
/*       */           }
/*       */           else
/*       */           {
/*  2770 */             updateSendTrapconfigquery = "insert into AM_V3_TRAPACTION(ID,DESTINATIONHOST,DESTINATIONPORT,MIBNAME,SNMPTRAPOID,USERNAME,ENGINEID,VARBINDS,OBJECTID,MESSAGEFORMAT,CONTEXTNAME) values (-1,'" + globalTrapAddress + "'," + request.getParameter("globalTrapPort") + ",'./mibs/APPLICATION-MANAGER-MIB ./mibs/RFC1213-MIB','.1.3.6.1.4.1.2162','" + globalV3TrapUserName + "','" + globalV3TrapEngineID + "','$RCAMESSAGE','.1.5.0',1,'" + globalV3TrapContextName + "')";
/*       */           }
/*  2772 */           updateGlobalConfig1 = "update AM_GLOBALCONFIG set VALUE='" + request.getParameter("trapStatus") + "' where NAME='globalv3trap'";
/*  2773 */           updateGlobalConfig2 = "update AM_GLOBALCONFIG set VALUE='disable' where NAME in ('globalv1trap','globalv2trap')";
/*  2774 */           com.adventnet.appmanager.util.Constants.setGlobalV1Trap("disable");
/*  2775 */           com.adventnet.appmanager.util.Constants.setGlobalV2Trap("disable");
/*  2776 */           com.adventnet.appmanager.util.Constants.setGlobalTrapVersion("13");
/*       */         }
/*       */         try
/*       */         {
/*  2780 */           AMConnectionPool.executeUpdateStmt(updateSendTrapconfigquery);
/*  2781 */           AMConnectionPool.executeUpdateStmt(updateGlobalConfig1);
/*  2782 */           AMConnectionPool.executeUpdateStmt(updateGlobalConfig2);
/*       */         }
/*       */         catch (Exception e)
/*       */         {
/*  2786 */           e.printStackTrace();
/*       */         }
/*  2788 */         DelegatedUserRoleUtil.addEntryToConfigUserTable(request, -1, 2);
/*       */       }
/*       */     }
/*       */     catch (Exception ex)
/*       */     {
/*  2793 */       ex.printStackTrace();
/*       */     }
/*  2795 */     messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage(FormatUtil.getString("am.webclient.globaltrap.success.msg", new String[] { request.getParameter("globalTrapAddress"), request.getParameter("globalTrapPort") })));
/*  2796 */     saveMessages(request, messages);
/*  2797 */     if (returnpath != null)
/*       */     {
/*  2799 */       request.setAttribute("showAdvancedOptions", "true");
/*       */     }
/*       */     
/*  2802 */     return new ActionForward("/jsp/SendGlobalTrapActionForm.jsp");
/*       */   }
/*       */   
/*       */ 
/*       */   public static String updateThresholdProfileinCache()
/*       */   {
/*  2808 */     String thresholdVal = "-1";
/*  2809 */     ResultSet rs = null;
/*       */     try {
/*       */       try {
/*  2812 */         rs = AMConnectionPool.executeQueryStmt("select max(ID) from AM_THRESHOLDCONFIG");
/*  2813 */         if (rs.next()) {
/*  2814 */           thresholdVal = rs.getString(1);
/*       */         }
/*       */       }
/*       */       catch (Exception e) {
/*  2818 */         AMLog.fatal("#--# Exception occured while getting threshold id:" + e.getMessage());
/*       */       }
/*       */       finally {
/*  2821 */         AMConnectionPool.closeStatement(rs);
/*       */       }
/*  2823 */       AMCacheHandler.setThresholdProfileinCache(thresholdVal);
/*       */     }
/*       */     catch (Exception e) {
/*  2826 */       e.printStackTrace();
/*       */     }
/*  2828 */     return thresholdVal;
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward createThresholdAction(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*  2837 */     ActionMessages messages = new ActionMessages();
/*       */     
/*  2839 */     String type = request.getParameter("cancel");
/*  2840 */     String returnpath = request.getParameter("returnpath");
/*       */     
/*  2842 */     request.setAttribute("displayName1", request.getParameter("displayname"));
/*  2843 */     String displayname = request.getParameter("displayname");
/*  2844 */     if (DBQueryUtil.getDBType().equals("mssql"))
/*       */     {
/*  2846 */       displayname = displayname.replaceAll("'", "''");
/*       */     }
/*       */     else
/*       */     {
/*  2850 */       displayname = displayname.replaceAll("'", "\\\\'");
/*       */     }
/*  2852 */     if (type.equals("false"))
/*       */     {
/*  2854 */       String checkquery = "select * from AM_THRESHOLDCONFIG where NAME='" + displayname + "'";
/*  2855 */       ArrayList list = this.mo.getRows(checkquery);
/*  2856 */       if (list.size() == 0)
/*       */       {
/*  2858 */         insertThreshold(request, false, false);
/*  2859 */         String thresholdID = null;
/*  2860 */         if ("true".equals(request.getParameter("adminAPIRequest"))) {
/*  2861 */           thresholdID = request.getParameter("thresholdid");
/*  2862 */           AMCacheHandler.setThresholdProfileinCache(thresholdID);
/*       */         } else {
/*  2864 */           thresholdID = updateThresholdProfileinCache();
/*       */         }
/*  2866 */         messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("thresholdprofile.create.success.message1"));
/*  2867 */         messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("thresholdprofile.create.success.message2"));
/*  2868 */         saveMessages(request, messages);
/*  2869 */         DelegatedUserRoleUtil.addEntryToConfigUserTable(request, Integer.parseInt(thresholdID), 1);
/*  2870 */         if (EnterpriseUtil.isAdminServer()) {
/*  2871 */           ThresholdActionsAPIUtil.addThresholdProfiletoSynch(request, thresholdID, "1", false);
/*       */         }
/*       */       }
/*       */       else
/*       */       {
/*  2876 */         messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("thresholdprofile.create.alreadyexists", request.getParameter("displayname")));
/*  2877 */         saveMessages(request, messages);
/*  2878 */         return new ActionForward("/showTile.do?TileName=.ThresholdConf");
/*       */       }
/*       */       
/*  2881 */       if (returnpath != null) {
/*  2882 */         return new ActionForward(returnpath);
/*       */       }
/*  2884 */       return mapping.findForward("thresholdlist");
/*       */     }
/*       */     
/*       */ 
/*  2888 */     if (returnpath != null)
/*       */     {
/*  2890 */       return new ActionForward(returnpath);
/*       */     }
/*       */     
/*  2893 */     return mapping.findForward("thresholdlist");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward editThresholdAction(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*  2903 */     AMActionForm amform = (AMActionForm)form;
/*  2904 */     ActionMessages messages = new ActionMessages();
/*  2905 */     String update = request.getParameter("update");
/*  2906 */     int thresholdID = amform.getId();
/*  2907 */     Vector updateStatus = ThresholdUtil.updateOnEditNumericalThreshold(thresholdID, request.getParameterMap());
/*       */     
/*  2909 */     if ("Success".equals(updateStatus.get(0).toString()))
/*       */     {
/*  2911 */       AMCacheHandler.setThresholdProfileinCache(String.valueOf(amform.getId()));
/*  2912 */       if (EnterpriseUtil.isAdminServer()) {
/*  2913 */         ThresholdActionsAPIUtil.addThresholdProfiletoSynch(request, amform.getId() + "", "1", true);
/*       */       }
/*  2915 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("thresholdprofile.edit.success"));
/*  2916 */       saveMessages(request, messages);
/*       */     }
/*       */     else
/*       */     {
/*  2920 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage(updateStatus.get(1) != null ? updateStatus.get(1).toString() : FormatUtil.getString("thresholdprofile.create.alreadyexists", new String[] { request.getParameter("displayname") })));
/*       */       
/*  2922 */       saveMessages(request, messages);
/*  2923 */       if (update == null) {
/*  2924 */         return new ActionForward("/adminAction.do?method=showThresholdAction&thresholdID=" + amform.getId() + "&haid=null");
/*       */       }
/*  2926 */       if (request.getParameter("popupNewThreshold") == null)
/*       */       {
/*  2928 */         return new ActionForward("/showActionProfiles.do?method=getThresholdDetails&thresholdid=" + amform.getId());
/*       */       }
/*  2930 */       return new ActionForward("/showActionProfiles.do?method=getThresholdDetails&popupNewThreshold=failed&thresholdid=" + amform.getId());
/*       */     }
/*       */     
/*       */ 
/*  2934 */     if ("true".equals(request.getParameter("apirequest"))) {
/*  2935 */       return null;
/*       */     }
/*  2937 */     if (update == null) {
/*  2938 */       return mapping.findForward("thresholdlist");
/*       */     }
/*  2940 */     if (request.getParameter("popupNewThreshold") == null)
/*       */     {
/*  2942 */       return new ActionForward("/showActionProfiles.do?method=getThresholdDetails&thresholdid=" + amform.getId());
/*       */     }
/*  2944 */     return new ActionForward("/showActionProfiles.do?method=getThresholdDetails&popupNewThreshold=true&thresholdid=" + amform.getId());
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward showThresholdAction(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*  2955 */     int thresholdID = Integer.parseInt(request.getParameter("thresholdID"));
/*  2956 */     String thresholdType = request.getParameter("type") != null ? request.getParameter("type") : "";
/*  2957 */     ArrayList rows = ThresholdUtil.getDetailsofNumericalThreshold(thresholdID, thresholdType);
/*  2958 */     ArrayList row = (ArrayList)rows.get(0);
/*       */     
/*  2960 */     AMActionForm amform = (AMActionForm)form;
/*  2961 */     amform.setId(thresholdID);
/*  2962 */     amform.setDisplayname(FormatUtil.getString((String)row.get(0)));
/*       */     
/*  2964 */     amform.setDescription(FormatUtil.getString((String)row.get(1)));
/*       */     
/*  2966 */     String criticalThcondition = (String)row.get(2);
/*  2967 */     String criticalThValue = (String)row.get(3);
/*  2968 */     ThresholdActionsAPIUtil.checkAndPopulateThresholdForm(criticalThcondition, criticalThValue, amform, 1);
/*       */     
/*  2970 */     amform.setCriticalthresholdmessage(FormatUtil.getString((String)row.get(4)));
/*       */     
/*  2972 */     criticalThcondition = (String)row.get(5);
/*  2973 */     criticalThValue = (String)row.get(6);
/*       */     
/*  2975 */     ThresholdActionsAPIUtil.checkAndPopulateThresholdForm(criticalThcondition, criticalThValue, amform, 4);
/*  2976 */     amform.setWarningthresholdmessage(FormatUtil.getString((String)row.get(7)));
/*       */     
/*  2978 */     criticalThcondition = (String)row.get(8);
/*  2979 */     criticalThValue = (String)row.get(9);
/*  2980 */     ThresholdActionsAPIUtil.checkAndPopulateThresholdForm(criticalThcondition, criticalThValue, amform, 5);
/*  2981 */     amform.setInfothresholdmessage(FormatUtil.getString((String)row.get(10)));
/*  2982 */     amform.setMethod("editThresholdAction");
/*  2983 */     String critical_polls = String.valueOf(row.get(11)).equals("0") ? FormatUtil.getString("am.webclient.threshold.critcal.text") : (String)row.get(11);
/*  2984 */     String warning_polls = String.valueOf(row.get(12)).equals("0") ? FormatUtil.getString("am.webclient.threshold.critcal.text") : (String)row.get(12);
/*  2985 */     String clear_polls = String.valueOf(row.get(13)).equals("0") ? FormatUtil.getString("am.webclient.threshold.critcal.text") : (String)row.get(13);
/*  2986 */     String min_critical_polls = String.valueOf(row.get(14)).equals("0") ? FormatUtil.getString("am.webclient.threshold.critcal.text") : (String)row.get(14);
/*  2987 */     String min_warning_polls = String.valueOf(row.get(15)).equals("0") ? FormatUtil.getString("am.webclient.threshold.critcal.text") : (String)row.get(15);
/*  2988 */     String min_clear_polls = String.valueOf(row.get(16)).equals("0") ? FormatUtil.getString("am.webclient.threshold.critcal.text") : (String)row.get(16);
/*  2989 */     amform.setConsecutive_criticalpolls(critical_polls);
/*  2990 */     amform.setConsecutive_warningpolls(warning_polls);
/*  2991 */     amform.setConsecutive_clearpolls(clear_polls);
/*  2992 */     amform.setConsecutive_mincriticalpolls(min_critical_polls);
/*  2993 */     amform.setConsecutive_minwarningpolls(min_warning_polls);
/*  2994 */     amform.setConsecutive_minclearpolls(min_clear_polls);
/*  2995 */     if ((EnterpriseUtil.isManagedServer()) && (thresholdID >= 10000) && (thresholdID < 10000000)) {
/*  2996 */       request.setAttribute("adminThresholdConfig", Boolean.valueOf(true));
/*       */     }
/*       */     
/*  2999 */     amform.setIsEditAllowed(DelegatedUserRoleUtil.isOwnedByDelegatedUser(thresholdID, DelegatedUserRoleUtil.getLoginUserid(request), 1));
/*  3000 */     return mapping.findForward("ThresholdForm");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward showThresholds(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*  3011 */     String thresholdconfigid = request.getParameter("thresholdconfigid");
/*  3012 */     String delete = request.getParameter("Delete");
/*  3013 */     String queryNew = null;
/*  3014 */     ActionMessages messages = new ActionMessages();
/*  3015 */     ActionErrors errors = new ActionErrors();
/*  3016 */     int userID = DelegatedUserRoleUtil.getLoginUserid(request);
/*  3017 */     boolean isPrivileged = com.adventnet.appmanager.util.Constants.isPrivilegedUser(request);
/*       */     
/*  3019 */     boolean isPrivilegedUser = com.adventnet.appmanager.util.Constants.isPrivilegedUser(request);
/*  3020 */     Hashtable<String, ArrayList> detailsList = ThresholdUtil.getAllThresholds(userID, isPrivilegedUser, thresholdconfigid);
/*  3021 */     if ((detailsList != null) && (((ArrayList)detailsList.get("ThresholdConfig")).size() > 0))
/*       */     {
/*       */ 
/*  3024 */       request.setAttribute("ThresholdConfig", detailsList.get("ThresholdConfig"));
/*  3025 */       request.setAttribute("ThresholdDetails", detailsList.get("ThresholdDetails"));
/*       */     }
/*       */     
/*  3028 */     setMonitorGroupsInRequest(request);
/*       */     
/*  3030 */     Hashtable anomalyProfileDetails = ThresholdUtil.getAllAnomalyProfiles(userID, isPrivilegedUser);
/*  3031 */     if (anomalyProfileDetails.get("anomalyprofiles") != null)
/*       */     {
/*  3033 */       request.setAttribute("anomalyprofiles", anomalyProfileDetails.get("anomalyprofiles"));
/*       */     }
/*  3035 */     if (anomalyProfileDetails.get("anomalyexpressionprofiles") != null)
/*       */     {
/*  3037 */       request.setAttribute("anomalyexpressionprofiles", anomalyProfileDetails.get("anomalyexpressionprofiles"));
/*       */     }
/*       */     
/*  3040 */     if (thresholdconfigid != null)
/*       */     {
/*  3042 */       if (delete == null)
/*       */       {
/*  3044 */         return new ActionForward("/jsp/ThresholdAttributeDetails.jsp");
/*       */       }
/*       */       
/*       */ 
/*  3048 */       request.setAttribute("savedConfiguration", "true");
/*  3049 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("threshold.action.configuration.removed"));
/*  3050 */       saveMessages(request, messages);
/*  3051 */       return new ActionForward("/jsp/ThresholdAttributeDetails.jsp");
/*       */     }
/*       */     
/*       */ 
/*       */ 
/*  3056 */     request.setAttribute("HelpKey", "New Threshold Profile");
/*  3057 */     return mapping.findForward("thresholdprofile");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */   private void setMonitorGroupsInRequest(HttpServletRequest request)
/*       */   {
/*  3064 */     java.util.Collection mgIdVsDisp = new ArrayList();
/*  3065 */     HashMap mgHash = DBUtil.monitorGroupList(false, request);
/*  3066 */     Iterator<String> grpIdItr = mgHash.keySet().iterator();
/*  3067 */     while (grpIdItr.hasNext())
/*       */     {
/*  3069 */       String dispName = (String)grpIdItr.next();
/*  3070 */       String groupId = (String)mgHash.get(dispName);
/*  3071 */       mgIdVsDisp.add(new org.apache.struts.util.LabelValueBean(groupId, dispName));
/*       */     }
/*  3073 */     request.setAttribute("mgIdVsDisp", mgIdVsDisp);
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */   public ActionForward deleteThresholds(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*  3081 */     String[] applications = request.getParameterValues("checkbox");
/*  3082 */     AMConnectionPool cp = AMConnectionPool.getInstance();
/*  3083 */     StringBuilder thresholdids = new StringBuilder();
/*  3084 */     int userID = DelegatedUserRoleUtil.getLoginUserid(request);
/*  3085 */     int deleteCount = 0;
/*  3086 */     int nonAuthCount = 0;
/*  3087 */     if (applications != null)
/*       */     {
/*  3089 */       for (int i = 0; i < applications.length; i++)
/*       */       {
/*  3091 */         int eachThreshID = applications[i] != null ? Integer.parseInt(applications[i]) : -1;
/*  3092 */         if (DelegatedUserRoleUtil.isOwnedByDelegatedUser(eachThreshID, userID, 1))
/*       */         {
/*  3094 */           FaultUtil.deleteThresholds(applications[i]);
/*  3095 */           ReportDataUtilities.deleteThresholdMapping(applications[i]);
/*  3096 */           DelegatedUserRoleUtil.deleteEntryFromConfigUserTable(Integer.parseInt(applications[i]), 1);
/*  3097 */           thresholdids.append(applications[i]).append(",");
/*  3098 */           deleteCount++;
/*       */         }
/*       */         else
/*       */         {
/*  3102 */           nonAuthCount++;
/*       */         }
/*       */       }
/*       */     }
/*  3106 */     if (EnterpriseUtil.isAdminServer()) {
/*  3107 */       ThresholdActionsAPIUtil.deleteThresholdProfiletoSynch(thresholdids.toString());
/*       */     }
/*  3109 */     if ("true".equals(request.getParameter("apirequest"))) {
/*  3110 */       return null;
/*       */     }
/*  3112 */     ActionMessages messages = new ActionMessages();
/*  3113 */     if ((deleteCount > 0) && (nonAuthCount == 0))
/*       */     {
/*  3115 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("thresholdprofile.delete.success"));
/*       */     }
/*  3117 */     else if ((deleteCount > 0) && (nonAuthCount > 0))
/*       */     {
/*  3119 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("am.webclient.configuration.delete.unauthorisedalso.success.message"));
/*       */     }
/*  3121 */     else if ((deleteCount == 0) && (nonAuthCount > 0))
/*       */     {
/*  3123 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("am.webclient.configuration.delete.unauthorised.message"));
/*       */     }
/*       */     else
/*       */     {
/*  3127 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("am.webclient.configuration.delete.error.message"));
/*       */     }
/*  3129 */     saveMessages(request, messages);
/*  3130 */     return mapping.findForward("thresholdlist");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   private String getCondition(String str)
/*       */   {
/*  3138 */     return ThresholdUtil.getThresholdCondition(str);
/*       */   }
/*       */   
/*  3141 */   private String getConcatCondition() { return ThresholdUtil.getConcatCondition(); }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward configureresource(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*  3154 */     ActionMessages messages = new ActionMessages();
/*  3155 */     ActionErrors errors = new ActionErrors();
/*  3156 */     boolean dcsucess = false;
/*  3157 */     String type = request.getParameter("resourcetype");
/*  3158 */     String resourceid = request.getParameter("resourceid");
/*  3159 */     Properties dcprop = new Properties();
/*  3160 */     String hostportquery = "select CollectData.TARGETADDRESS , CollectData.APPLNDISCPORT from AM_ManagedObject , CollectData where AM_ManagedObject.RESOURCEID=" + resourceid + " and AM_ManagedObject.RESOURCENAME=CollectData.RESOURCENAME and AM_ManagedObject.TYPE=CollectData.RESOURCETYPE";
/*  3161 */     ArrayList hosts = this.mo.getRows(hostportquery);
/*  3162 */     if (hosts.size() != 0)
/*       */     {
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*  3168 */       ArrayList host = (ArrayList)hosts.get(0);
/*  3169 */       dcprop.setProperty("HOST", (String)host.get(0));
/*  3170 */       dcprop.setProperty("PORT", (String)host.get(1));
/*       */     }
/*  3172 */     String haid = request.getParameter("haid");
/*  3173 */     String appname = request.getParameter("applicationname");
/*  3174 */     if (request.getParameter("instance") != null) {
/*  3175 */       dcprop.setProperty("instance", request.getParameter("instance"));
/*       */     }
/*  3177 */     if (request.getParameter("os") != null) {
/*  3178 */       dcprop.setProperty("os", request.getParameter("os"));
/*       */     }
/*  3180 */     String username = request.getParameter("username");
/*  3181 */     if (username != null)
/*  3182 */       dcprop.setProperty("username", username);
/*  3183 */     String password = request.getParameter("password");
/*  3184 */     if (password != null)
/*  3185 */       dcprop.setProperty("password", password);
/*  3186 */     dcprop.setProperty("name", request.getParameter("resourcename"));
/*  3187 */     String pollinterval = request.getParameter("pollInterval");
/*       */     try
/*       */     {
/*  3190 */       int poll = Integer.parseInt(pollinterval);
/*  3191 */       poll *= 60;
/*  3192 */       pollinterval = poll + "";
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/*  3196 */       e.printStackTrace();
/*       */     }
/*  3198 */     dcprop.setProperty("pollinterval", pollinterval);
/*  3199 */     dcprop.setProperty("id", request.getParameter("resourceid"));
/*  3200 */     String soapport = request.getParameter("soapport");
/*  3201 */     if (soapport != null)
/*       */     {
/*  3203 */       dcprop.setProperty("soapport", soapport);
/*       */     }
/*  3205 */     String result = null;
/*  3206 */     Properties authresult = null;
/*  3207 */     if (type.equals("ORACLE-DB-server")) {
/*  3208 */       AMDCInf amdc = (AMDCInf)Class.forName("com.adventnet.appmanager.server.oracle.datacollection.ScheduleOracleDataCollection").newInstance();
/*  3209 */       authresult = amdc.CheckAuthentication(dcprop);
/*  3210 */       if (authresult.getProperty("authentication").equals("passed"))
/*       */       {
/*  3212 */         dcsucess = true;
/*  3213 */         amdc.ScheduleDataCollection(dcprop);
/*       */       }
/*       */       else
/*       */       {
/*  3217 */         dcsucess = false;
/*       */       }
/*       */     }
/*       */     
/*  3221 */     if (type.equals("Tomcat-server")) {
/*  3222 */       AMDCInf amdc = (AMDCInf)Class.forName("com.adventnet.appmanager.server.tomcat.datacollection.ScheduleTomcatDataCollection").newInstance();
/*  3223 */       authresult = amdc.CheckAuthentication(dcprop);
/*  3224 */       if (authresult.getProperty("authentication").equals("passed"))
/*       */       {
/*  3226 */         dcsucess = true;
/*  3227 */         amdc.ScheduleDataCollection(dcprop);
/*       */       }
/*       */       else
/*       */       {
/*  3231 */         dcsucess = false;
/*       */       }
/*       */     }
/*  3234 */     if (type.equals("MYSQL-DB-server")) {
/*  3235 */       AMDCInf amdc = (AMDCInf)Class.forName("com.adventnet.appmanager.server.mysql.datacollection.ScheduleMySqlDataCollection").newInstance();
/*  3236 */       authresult = amdc.CheckAuthentication(dcprop);
/*  3237 */       if (authresult.getProperty("authentication").equals("passed"))
/*       */       {
/*  3239 */         dcsucess = true;
/*  3240 */         amdc.ScheduleDataCollection(dcprop);
/*       */       }
/*       */       else
/*       */       {
/*  3244 */         dcsucess = false;
/*       */       }
/*       */     }
/*       */     
/*  3248 */     if ((type.equals("Node")) || (type.equals("snmp-node"))) {
/*  3249 */       AMDCInf amdc = (AMDCInf)Class.forName("com.adventnet.appmanager.server.hostresources.datacollection.ScheduleHostDataCollection").newInstance();
/*  3250 */       authresult = amdc.CheckAuthentication(dcprop);
/*  3251 */       if (authresult.getProperty("authentication").equals("passed"))
/*       */       {
/*  3253 */         dcsucess = true;
/*  3254 */         amdc.ScheduleDataCollection(dcprop);
/*       */       }
/*       */       else
/*       */       {
/*  3258 */         dcsucess = false;
/*       */       }
/*  3260 */       type = "Unknown";
/*       */     }
/*  3262 */     if ((type.equals("Windows 2000")) || (type.equals("WindowsNT")) || (type.equals("WindowsNT_Server")) || (type.equals("Windows95"))) {
/*  3263 */       AMDCInf amdc = (AMDCInf)Class.forName("com.adventnet.appmanager.server.hostresources.datacollection.ScheduleHostDataCollection").newInstance();
/*  3264 */       authresult = amdc.CheckAuthentication(dcprop);
/*  3265 */       if (authresult.getProperty("authentication").equals("passed"))
/*       */       {
/*  3267 */         dcsucess = true;
/*  3268 */         amdc.ScheduleDataCollection(dcprop);
/*       */       }
/*       */       else
/*       */       {
/*  3272 */         dcsucess = false;
/*       */       }
/*  3274 */       type = "Windows";
/*       */     }
/*  3276 */     if ((type.equals("SUN")) || (type.equals("SUN PC"))) {
/*  3277 */       AMDCInf amdc = (AMDCInf)Class.forName("com.adventnet.appmanager.server.hostresources.datacollection.ScheduleHostDataCollection").newInstance();
/*  3278 */       authresult = amdc.CheckAuthentication(dcprop);
/*  3279 */       if (authresult.getProperty("authentication").equals("passed"))
/*       */       {
/*  3281 */         dcsucess = true;
/*  3282 */         amdc.ScheduleDataCollection(dcprop);
/*       */       }
/*       */       else
/*       */       {
/*  3286 */         dcsucess = false;
/*       */       }
/*  3288 */       type = "Sun Solaris";
/*       */     }
/*  3290 */     if (type.equals("Linux")) {
/*  3291 */       AMDCInf amdc = (AMDCInf)Class.forName("com.adventnet.appmanager.server.hostresources.datacollection.ScheduleHostDataCollection").newInstance();
/*  3292 */       authresult = amdc.CheckAuthentication(dcprop);
/*  3293 */       if (authresult.getProperty("authentication").equals("passed"))
/*       */       {
/*  3295 */         dcsucess = true;
/*  3296 */         amdc.ScheduleDataCollection(dcprop);
/*       */       }
/*       */       else
/*       */       {
/*  3300 */         dcsucess = false;
/*       */       }
/*       */     }
/*  3303 */     if (type.toLowerCase().indexOf("novell") != -1) {
/*  3304 */       AMDCInf amdc = (AMDCInf)Class.forName("com.adventnet.appmanager.server.hostresources.datacollection.ScheduleHostDataCollection").newInstance();
/*  3305 */       authresult = amdc.CheckAuthentication(dcprop);
/*  3306 */       if (authresult.getProperty("authentication").equals("passed"))
/*       */       {
/*  3308 */         dcsucess = true;
/*  3309 */         amdc.ScheduleDataCollection(dcprop);
/*       */       }
/*       */       else
/*       */       {
/*  3313 */         dcsucess = false;
/*       */       }
/*       */     }
/*  3316 */     if ((type.equals("WEBLOGIC-server")) || (type.equals("JBOSS-server"))) {
/*  3317 */       AMDCInf amdc = (AMDCInf)Class.forName("com.adventnet.appmanager.server.framework.datacollection.ScheduleWebLogicDataCollection").newInstance();
/*  3318 */       authresult = amdc.CheckAuthentication(dcprop);
/*  3319 */       if (authresult.getProperty("authentication").equals("passed"))
/*       */       {
/*  3321 */         dcsucess = true;
/*  3322 */         amdc.ScheduleDataCollection(dcprop);
/*       */       }
/*       */       else
/*       */       {
/*  3326 */         dcsucess = false;
/*       */       }
/*       */     }
/*  3329 */     if (type.equals("WEB-server"))
/*       */     {
/*  3331 */       HostDiscoveryHandler.enableStatusPolling(resourceid, pollinterval);
/*  3332 */       dcsucess = true;
/*       */     }
/*  3334 */     if (type.equals("MAIL-server"))
/*       */     {
/*  3336 */       String msg = request.getParameter("mailMsg");
/*  3337 */       String user = request.getParameter("username");
/*  3338 */       String pass = request.getParameter("password");
/*  3339 */       int smtp = Integer.parseInt(request.getParameter("smtpPort"));
/*  3340 */       int pop = Integer.parseInt(request.getParameter("popPort"));
/*  3341 */       String pophost = request.getParameter("popHost");
/*  3342 */       String que = "insert into AM_MailServerConfig values(" + resourceid + "," + smtp + "," + pop + ",'" + user + "','" + pass + "','" + msg + "','" + pophost + "')";
/*       */       
/*  3344 */       AMConnectionPool cp = AMConnectionPool.getInstance();
/*  3345 */       AMConnectionPool.executeUpdateStmt(que);
/*  3346 */       HostDiscoveryHandler.enableStatusPolling(resourceid, pollinterval);
/*  3347 */       dcsucess = true;
/*       */     }
/*  3349 */     String[] resources = request.getParameterValues("resourceid");
/*  3350 */     if (dcsucess)
/*       */     {
/*  3352 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("datacollection.global.success"));
/*  3353 */       saveMessages(request, messages);
/*  3354 */       Vector forUpdate = new Vector();
/*  3355 */       this.mo.updateManagedApplicationResourcesForEnterprise(haid, "xyz", resources, forUpdate);
/*  3356 */       if (forUpdate != null)
/*       */       {
/*  3358 */         for (int i = 0; i < forUpdate.size(); i++)
/*       */         {
/*  3360 */           EnterpriseUtil.addUpdateQueryToFile(forUpdate.get(i) + "");
/*       */         }
/*       */       }
/*       */       
/*  3364 */       return new ActionForward("/showresource.do?name=" + appname + "&haid=" + haid + "&type=" + type + "&method=getMonitorForm", true);
/*       */     }
/*       */     
/*       */ 
/*  3368 */     messages.add("org.apache.struts.action.ERROR", new ActionMessage("appmanager.error", authresult.getProperty("error")));
/*  3369 */     saveMessages(request, messages);
/*  3370 */     return new ActionForward("/jsp/GlobalConfig.jsp?name=" + request.getParameter("applicationname") + "&haid=" + request.getParameter("haid") + "&resourceid=" + resourceid + "&type=" + request.getParameter("resourcetype") + "&resourcename=" + request.getParameter("resourcename") + "&displayname=" + request.getParameter("displayname") + "");
/*       */   }
/*       */   
/*       */   public ActionForward configureApache(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
/*       */   {
/*  3375 */     log.info("Inside configureApache");
/*       */     try
/*       */     {
/*  3378 */       String type = request.getParameter("type");
/*  3379 */       String resourceid = request.getParameter("resourceid");
/*  3380 */       String moname = request.getParameter("moname");
/*  3381 */       AMConnectionPool cp = AMConnectionPool.getInstance();
/*  3382 */       String sslenabled = String.valueOf(((AMActionForm)form).isSslenabled());
/*  3383 */       boolean apacheauth1 = ((AMActionForm)form).isAuthEnabled();
/*  3384 */       boolean isapacheurl1 = ((AMActionForm)form).isServerstatusurl();
/*  3385 */       String apacheusername = ((AMActionForm)form).getApacheUserName();
/*  3386 */       String apachepassword = ((AMActionForm)form).getApachepassword();
/*  3387 */       String apacheurl = ((AMActionForm)form).getApacheurl();
/*  3388 */       String apacheauth = "0";
/*  3389 */       String isapacheurl = "0";
/*  3390 */       if (apacheauth1)
/*       */       {
/*  3392 */         apacheauth = "1";
/*       */       }
/*  3394 */       if (isapacheurl1)
/*       */       {
/*  3396 */         isapacheurl = "1";
/*       */       }
/*  3398 */       PreparedStatement ps = AMConnectionPool.getConnection().prepareStatement("insert into AM_APACHE_CONFIG values(?,?,?," + DBQueryUtil.encodetoBytes("?") + ",?,?)");
/*       */       try
/*       */       {
/*  3401 */         ps.setString(1, resourceid);
/*  3402 */         ps.setString(2, apacheauth);
/*  3403 */         ps.setString(3, apacheusername);
/*  3404 */         ps.setBytes(4, apachepassword.getBytes());
/*  3405 */         ps.setString(5, isapacheurl);
/*  3406 */         ps.setString(6, apacheurl);
/*  3407 */         ps.executeUpdate();
/*       */         
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */         try
/*       */         {
/*  3449 */           if (ps != null)
/*       */           {
/*  3451 */             ps.close();
/*       */           }
/*       */         }
/*       */         catch (Exception ex)
/*       */         {
/*  3456 */           ex.printStackTrace();
/*       */         }
/*       */         
/*       */         PreparedStatement ps1;
/*       */         
/*  3461 */         set = null;
/*       */       }
/*       */       catch (SQLException sqlexc)
/*       */       {
/*  3411 */         ps1 = AMConnectionPool.getConnection().prepareStatement("update AM_APACHE_CONFIG set AUTHENTICATION=?,USERNAME=?,PASSWORD=" + DBQueryUtil.encodetoBytes("?") + ",ISURL=?,URL=? where RESID=?");
/*       */         try
/*       */         {
/*  3414 */           ps1.setString(1, apacheauth);
/*  3415 */           ps1.setString(2, apacheusername);
/*  3416 */           ps1.setBytes(3, apachepassword.getBytes());
/*  3417 */           ps1.setString(4, isapacheurl);
/*  3418 */           ps1.setString(5, apacheurl);
/*  3419 */           ps1.setString(6, resourceid);
/*  3420 */           ps1.executeUpdate();
/*       */         }
/*       */         catch (Exception e1)
/*       */         {
/*  3424 */           e1.printStackTrace();
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */         }
/*       */         finally {}
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       }
/*       */       catch (Exception exc)
/*       */       {
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*  3443 */         exc.printStackTrace();
/*       */       }
/*       */       finally
/*       */       {
/*       */         try
/*       */         {
/*  3449 */           if (ps != null)
/*       */           {
/*  3451 */             ps.close();
/*       */           }
/*       */         }
/*       */         catch (Exception ex)
/*       */         {
/*  3456 */           ex.printStackTrace();
/*       */         }
/*       */       }
/*       */       
/*       */       ResultSet set;
/*       */       
/*  3462 */       String pollinterval = request.getParameter("pollInterval");
/*       */       try
/*       */       {
/*  3465 */         int poll = Integer.parseInt(pollinterval);
/*  3466 */         poll *= 60;
/*  3467 */         pollinterval = poll + "";
/*       */       }
/*       */       catch (Exception e)
/*       */       {
/*  3471 */         e.printStackTrace();
/*       */       }
/*  3473 */       Properties dcprops = new Properties();
/*  3474 */       dcprops.setProperty("name", moname);
/*  3475 */       dcprops.setProperty("pollinterval", pollinterval);
/*  3476 */       dcprops.setProperty("id", resourceid);
/*  3477 */       Object dcConfig = new com.adventnet.appmanager.server.framework.datacollection.ScheduleApacheDataCollection();
/*  3478 */       ((AMDCInf)dcConfig).ScheduleDataCollection(dcprops);
/*  3479 */       String displayname = ((AMActionForm)form).getDisplayname();
/*  3480 */       if (DBQueryUtil.getDBType().equals("mssql"))
/*       */       {
/*  3482 */         displayname = displayname.replaceAll("'", "''");
/*       */       }
/*       */       else
/*       */       {
/*  3486 */         displayname = displayname.replaceAll("'", "\\\\'");
/*       */       }
/*  3488 */       String query = "update AM_ManagedObject set displayname='" + displayname + "' where resourceid=" + resourceid;
/*  3489 */       int count = AMConnectionPool.executeUpdateStmt(query);
/*  3490 */       EnterpriseUtil.addUpdateQueryToFile(query);
/*  3491 */       String query1 = "update CollectData set pollinterval=" + pollinterval + " where resourcename like '" + moname + "'";
/*  3492 */       int count1 = AMConnectionPool.executeUpdateStmt(query1);
/*  3493 */       String query2 = "update AM_JBOSS_AUTHINFO set sslenabled='" + sslenabled + "' where RESOURCEID=" + resourceid;
/*  3494 */       int count2 = AMConnectionPool.executeUpdateStmt(query2);
/*  3495 */       EnterpriseUtil.addUpdateQueryToFile(query + ";\n" + query1 + ";\n" + query2);
/*  3496 */       return new ActionForward("/showresource.do?method=showdetails&resourcename=" + displayname);
/*       */     }
/*       */     catch (Throwable e)
/*       */     {
/*  3500 */       e.printStackTrace(); }
/*  3501 */     return null;
/*       */   }
/*       */   
/*       */ 
/*       */   public ActionForward configureJMX(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*  3508 */     log.info("Inside configureJMX");
/*       */     try
/*       */     {
/*  3511 */       AMActionForm amform = (AMActionForm)form;
/*  3512 */       String resourceid = request.getParameter("resourceid");
/*  3513 */       AMConnectionPool cp = AMConnectionPool.getInstance();
/*  3514 */       String camname = ((AMActionForm)form).getCamname();
/*  3515 */       if (DBQueryUtil.getDBType().equals("mssql"))
/*       */       {
/*  3517 */         camname = camname.replaceAll("'", "''");
/*       */       }
/*       */       else
/*       */       {
/*  3521 */         camname = camname.replaceAll("'", "\\\\'");
/*       */       }
/*  3523 */       String camdesc = ((AMActionForm)form).getCamdesc();
/*  3524 */       String query = "update AM_ManagedObject set displayname='" + camname + "' where resourceid=" + resourceid;
/*  3525 */       int count = AMConnectionPool.executeUpdateStmt(query);
/*  3526 */       String query1 = "update AM_ManagedObject set description='" + camdesc + "' where resourceid=" + resourceid;
/*       */       
/*  3528 */       int count1 = AMConnectionPool.executeUpdateStmt(query1);
/*       */       
/*       */ 
/*       */ 
/*  3532 */       return new ActionForward("/showresource.do?method=showResourceForResourceID&resourceid=" + resourceid);
/*       */ 
/*       */ 
/*       */     }
/*       */     catch (Throwable e)
/*       */     {
/*       */ 
/*       */ 
/*  3540 */       e.printStackTrace(); }
/*  3541 */     return null;
/*       */   }
/*       */   
/*       */   public ActionForward configureIIS(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*  3547 */     log.info("Inside configureIIS");
/*       */     try
/*       */     {
/*  3550 */       String type = request.getParameter("type");
/*  3551 */       String resourceid = request.getParameter("resourceid");
/*  3552 */       String moname = request.getParameter("moname");
/*  3553 */       AMConnectionPool cp = AMConnectionPool.getInstance();
/*  3554 */       ResultSet set = null;
/*  3555 */       String pollinterval = request.getParameter("pollInterval");
/*  3556 */       String sslenabled = String.valueOf(((AMActionForm)form).isSslenabled());
/*       */       try
/*       */       {
/*  3559 */         int poll = Integer.parseInt(pollinterval);
/*  3560 */         poll *= 60;
/*  3561 */         pollinterval = poll + "";
/*       */       }
/*       */       catch (Exception e)
/*       */       {
/*  3565 */         e.printStackTrace();
/*       */       }
/*       */       try
/*       */       {
/*  3569 */         com.adventnet.nms.applnfw.datacollection.server.ApplnDataCollectionAPI api = (com.adventnet.nms.applnfw.datacollection.server.ApplnDataCollectionAPI)NmsUtil.getAPI("ApplnDataCollectionAPI");
/*  3570 */         com.adventnet.nms.applnfw.datacollection.server.model.CollectData col1 = api.getCollectData(moname, "IIS");
/*  3571 */         com.adventnet.appmanager.server.framework.datacollection.AMDataCollectionHandler.getInstance();com.adventnet.appmanager.server.framework.datacollection.AMDataCollectionHandler.scheduleDataCollection(col1, true);
/*       */       }
/*       */       catch (Exception exc)
/*       */       {
/*  3575 */         exc.printStackTrace();
/*       */       }
/*  3577 */       String displayname = ((AMActionForm)form).getDisplayname();
/*  3578 */       if (DBQueryUtil.getDBType().equals("mssql"))
/*       */       {
/*  3580 */         displayname = displayname.replaceAll("'", "''");
/*       */       }
/*       */       else
/*       */       {
/*  3584 */         displayname = displayname.replaceAll("'", "\\\\'");
/*       */       }
/*  3586 */       String query = "update AM_ManagedObject set displayname='" + displayname + "' where resourceid=" + resourceid;
/*  3587 */       int count = AMConnectionPool.executeUpdateStmt(query);
/*  3588 */       EnterpriseUtil.addUpdateQueryToFile(query);
/*  3589 */       int portNo = 80;
/*  3590 */       if ("true".equals(sslenabled))
/*       */       {
/*  3592 */         portNo = 443;
/*       */       }
/*  3594 */       String query1 = "update CollectData set pollinterval=" + pollinterval + ", APPLNDISCPORT=" + portNo + " where resourcename like '" + moname + "'";
/*  3595 */       int count1 = AMConnectionPool.executeUpdateStmt(query1);
/*  3596 */       String query2 = null;
/*  3597 */       int count2; if (type.equalsIgnoreCase("IIS-server"))
/*       */       {
/*  3599 */         query2 = "update AM_JBOSS_AUTHINFO set sslenabled='" + sslenabled + "' where RESOURCEID=" + resourceid;
/*  3600 */         count2 = AMConnectionPool.executeUpdateStmt(query2);
/*       */       }
/*  3602 */       EnterpriseUtil.addUpdateQueryToFile(query + ";\n" + query1 + (query2 != null ? ";\n" + query2 : ""));
/*  3603 */       HostDiscoveryHandler.enableStatusPolling(resourceid, pollinterval);
/*  3604 */       return new ActionForward("/showresource.do?method=showdetails&resourcename=" + displayname);
/*       */     }
/*       */     catch (Throwable e)
/*       */     {
/*  3608 */       e.printStackTrace(); }
/*  3609 */     return null;
/*       */   }
/*       */   
/*       */ 
/*       */   public ActionForward configurePHP(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*  3616 */     log.info("Inside configurePHP");
/*       */     try
/*       */     {
/*  3619 */       String type = request.getParameter("type");
/*  3620 */       String resourceid = request.getParameter("resourceid");
/*  3621 */       String moname = request.getParameter("moname");
/*  3622 */       AMConnectionPool cp = AMConnectionPool.getInstance();
/*  3623 */       ResultSet set = null;
/*  3624 */       String pollinterval = request.getParameter("pollInterval");
/*  3625 */       String phpPath = ((AMActionForm)form).getServerpath();
/*  3626 */       String sslenabled = String.valueOf(((AMActionForm)form).isSslenabled());
/*       */       try
/*       */       {
/*  3629 */         int poll = Integer.parseInt(pollinterval);
/*  3630 */         poll *= 60;
/*  3631 */         pollinterval = poll + "";
/*       */ 
/*       */       }
/*       */       catch (Exception e)
/*       */       {
/*  3636 */         e.printStackTrace();
/*       */       }
/*  3638 */       String displayname = ((AMActionForm)form).getDisplayname();
/*  3639 */       if (DBQueryUtil.getDBType().equals("mssql"))
/*       */       {
/*  3641 */         displayname = displayname.replaceAll("'", "''");
/*       */       }
/*       */       else
/*       */       {
/*  3645 */         displayname = displayname.replaceAll("'", "\\\\'");
/*       */       }
/*  3647 */       String query = "update AM_ManagedObject set displayname='" + displayname + "' where resourceid=" + resourceid;
/*  3648 */       int count = AMConnectionPool.executeUpdateStmt(query);
/*  3649 */       EnterpriseUtil.addUpdateQueryToFile(query);
/*  3650 */       String query1 = "update CollectData set pollinterval=" + pollinterval + " where resourcename like '" + moname + "'";
/*  3651 */       int count1 = AMConnectionPool.executeUpdateStmt(query1);
/*  3652 */       String query2 = "update AM_PHPPATH set PATH='" + phpPath + "' where resourceid=" + resourceid;
/*  3653 */       int count2 = AMConnectionPool.executeUpdateStmt(query2);
/*  3654 */       String query3 = "update AM_JBOSS_AUTHINFO set sslenabled='" + sslenabled + "' where RESOURCEID=" + resourceid;
/*  3655 */       int count3 = AMConnectionPool.executeUpdateStmt(query3);
/*  3656 */       EnterpriseUtil.addUpdateQueryToFile(query + ";\n" + query1 + ";\n" + query2 + ";\n" + query3);
/*  3657 */       HostDiscoveryHandler.enableStatusPolling(resourceid, pollinterval);
/*  3658 */       return new ActionForward("/showresource.do?method=showdetails&resourcename=" + displayname);
/*       */     }
/*       */     catch (Throwable e)
/*       */     {
/*  3662 */       e.printStackTrace(); }
/*  3663 */     return null;
/*       */   }
/*       */   
/*       */ 
/*       */   public ActionForward configureMailOrWeb(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*  3670 */     log.info("Inside configureMailorweb");
/*       */     try
/*       */     {
/*  3673 */       String type = request.getParameter("type");
/*  3674 */       String resourceid = request.getParameter("resourceid");
/*  3675 */       String moname = request.getParameter("moname");
/*  3676 */       AMConnectionPool cp = AMConnectionPool.getInstance();
/*  3677 */       ResultSet set = null;
/*  3678 */       set = AMConnectionPool.executeQueryStmt("select STATUSPOLLENABLED from ManagedObject where NAME='" + moname + "'");
/*  3679 */       boolean available = false;
/*  3680 */       if (set.next())
/*       */       {
/*  3682 */         if (set.getString(1).equals("true"))
/*  3683 */           available = true;
/*       */       }
/*  3685 */       AMConnectionPool.closeStatement(set);
/*  3686 */       String pollinterval = request.getParameter("pollInterval");
/*       */       try
/*       */       {
/*  3689 */         int poll = Integer.parseInt(pollinterval);
/*  3690 */         poll *= 60;
/*  3691 */         pollinterval = poll + "";
/*       */       }
/*       */       catch (Exception e)
/*       */       {
/*  3695 */         e.printStackTrace();
/*       */       }
/*  3697 */       String displayname = ((AMActionForm)form).getDisplayname();
/*  3698 */       if (DBQueryUtil.getDBType().equals("mssql"))
/*       */       {
/*  3700 */         displayname = displayname.replaceAll("'", "''");
/*       */       }
/*       */       else
/*       */       {
/*  3704 */         displayname = displayname.replaceAll("'", "\\\\'");
/*       */       }
/*  3706 */       String query = "update AM_ManagedObject set displayname='" + displayname + "' where resourceid=" + resourceid;
/*  3707 */       int count = AMConnectionPool.executeUpdateStmt(query);
/*  3708 */       EnterpriseUtil.addUpdateQueryToFile(query);
/*  3709 */       if (type.equals("WEB-server"))
/*       */       {
/*  3711 */         HostDiscoveryHandler.enableStatusPolling(resourceid, pollinterval);
/*       */       }
/*  3713 */       else if (type.equals("MAIL-server"))
/*       */       {
/*       */ 
/*  3716 */         String msg = request.getParameter("mailMsg");
/*  3717 */         String user = request.getParameter("username");
/*  3718 */         String pass = request.getParameter("password");
/*  3719 */         String popHost = request.getParameter("popHost");
/*  3720 */         int smtp = Integer.parseInt(request.getParameter("smtpPort"));
/*  3721 */         boolean popenabled = ((AMActionForm)form).ispopenabled();
/*  3722 */         int pop = 110;
/*  3723 */         if (popenabled == true)
/*       */         {
/*  3725 */           pop = Integer.parseInt(request.getParameter("popPort"));
/*       */         }
/*       */         else
/*       */         {
/*  3729 */           pop = 110;
/*       */         }
/*       */         
/*  3732 */         String emailid = request.getParameter("emailid");
/*  3733 */         String queriesForUpdate = "";
/*  3734 */         if (available)
/*       */         {
/*  3736 */           String updateQ1 = "update AM_MailServerConfig set TESTMESSAGE='" + msg + "',EMAILID='" + emailid + "' where RESID=" + resourceid;
/*  3737 */           AMConnectionPool.executeUpdateStmt(updateQ1);
/*  3738 */           queriesForUpdate = queriesForUpdate + updateQ1 + ";\n";
/*       */           
/*  3740 */           if (popenabled == true)
/*       */           {
/*  3742 */             String updateQ2 = "update AM_MailServerConfig,AM_POPServerConfig set host='" + ((AMActionForm)form).getPopHost() + "',  PORT='" + pop + "',USERNAME='" + user + "',PASSWORD=" + DBQueryUtil.encode(pass) + " where POPID=ID and RESID=" + resourceid;
/*       */             
/*  3744 */             int poprowupdated = AMConnectionPool.executeUpdateStmt(updateQ2);
/*  3745 */             queriesForUpdate = queriesForUpdate + updateQ2 + ";\n";
/*  3746 */             if (poprowupdated == 0)
/*       */             {
/*  3748 */               int popID = DBQueryUtil.getIncrementedID("ID", "AM_POPServerConfig");
/*  3749 */               String popinsertquery = "insert into AM_POPServerConfig (id,host,port,username,password) VALUES(" + popID + ",'" + ((AMActionForm)form).getPopHost() + "'," + pop + ",'" + user + "'," + DBQueryUtil.encode(pass) + " )";
/*  3750 */               Connection con = AMConnectionPool.getConnection();
/*  3751 */               Statement stmt = con.createStatement();
/*  3752 */               stmt.executeUpdate(popinsertquery);
/*  3753 */               Statement stmt2 = con.createStatement();
/*  3754 */               String popupdateQ = "update AM_MailServerConfig set POPID=" + popID + " where RESID=" + resourceid;
/*  3755 */               stmt2.executeUpdate(popupdateQ);
/*  3756 */               queriesForUpdate = queriesForUpdate + popupdateQ + ";\n";
/*  3757 */               stmt2.close();
/*  3758 */               stmt.close();
/*       */             }
/*       */             
/*       */ 
/*       */           }
/*       */           else
/*       */           {
/*       */ 
/*  3766 */             AMConnectionPool.executeUpdateStmt("delete AM_POPServerConfig from AM_POPServerConfig,AM_MailServerConfig where POPID=ID and RESID=" + resourceid);
/*  3767 */             String updateQ = "update AM_MailServerConfig set POPID=-1 where RESID=" + resourceid;
/*  3768 */             AMConnectionPool.executeUpdateStmt(updateQ);
/*       */           }
/*       */           
/*  3771 */           if (((AMActionForm)form).isSmtpauthenabled())
/*       */           {
/*  3773 */             String smtpAuthUpdateQ = null;
/*  3774 */             if (DBQueryUtil.getDBType().equals("mssql")) {
/*  3775 */               smtpAuthUpdateQ = "update AM_SMTPServerConfig set  PORT='" + smtp + "',username='" + ((AMActionForm)form).getSmtpUserName() + "',password=" + DBQueryUtil.encode(((AMActionForm)form).getSmtpPassword()) + " from AM_MailServerConfig where SMTPID=ID and RESID=" + resourceid;
/*       */             } else {
/*  3777 */               smtpAuthUpdateQ = "update AM_MailServerConfig,AM_SMTPServerConfig set  PORT='" + smtp + "',username='" + ((AMActionForm)form).getSmtpUserName() + "',password=" + DBQueryUtil.encode(((AMActionForm)form).getSmtpPassword()) + " where SMTPID=ID and RESID=" + resourceid;
/*       */             }
/*       */             
/*  3780 */             AMConnectionPool.executeUpdateStmt(smtpAuthUpdateQ);
/*  3781 */             queriesForUpdate = queriesForUpdate + smtpAuthUpdateQ + ";\n";
/*       */           }
/*       */           else
/*       */           {
/*  3785 */             String smtpupdateQ = null;
/*  3786 */             if (DBQueryUtil.getDBType().equals("mssql")) {
/*  3787 */               smtpupdateQ = "update AM_SMTPServerConfig set  PORT='" + smtp + "',username='', password=''  from AM_MailServerConfig where SMTPID=ID and RESID=" + resourceid;
/*       */             } else {
/*  3789 */               smtpupdateQ = "update AM_MailServerConfig,AM_SMTPServerConfig set  PORT='" + smtp + "',username=NULL, password=NULL  where SMTPID=ID and RESID=" + resourceid;
/*       */             }
/*       */             
/*  3792 */             AMConnectionPool.executeUpdateStmt(smtpupdateQ);
/*  3793 */             queriesForUpdate = queriesForUpdate + smtpupdateQ + ";\n";
/*       */           }
/*  3795 */           EnterpriseUtil.addUpdateQueryToFile(queriesForUpdate);
/*       */         }
/*       */         else
/*       */         {
/*  3799 */           String que = "insert into AM_MailServerConfig values(" + resourceid + "," + smtp + "," + pop + ",'" + user + "','" + pass + "','" + msg + "','" + popHost + "')";
/*  3800 */           log.info("configuremailorweb " + que);
/*  3801 */           AMConnectionPool.executeUpdateStmt(que);
/*       */         }
/*  3803 */         HostDiscoveryHandler.enableStatusPolling(resourceid, pollinterval);
/*       */       }
/*       */       
/*  3806 */       return new ActionForward("/showresource.do?method=showResourceForResourceID&resourceid=" + resourceid, true);
/*       */     }
/*       */     catch (Throwable e) {
/*  3809 */       e.printStackTrace(); }
/*  3810 */     return null;
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */   public ActionForward configureWTA(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*       */     try
/*       */     {
/*  3820 */       String type = request.getParameter("type");
/*  3821 */       String resourceid = request.getParameter("resourceid");
/*  3822 */       String moname = request.getParameter("moname");
/*       */       
/*  3824 */       int instenabled = ((AMActionForm)form).isInstrumentationEnabled() ? 1 : 0;
/*  3825 */       int sf = ((AMActionForm)form).getSamplingFactor();
/*  3826 */       int maxurls = ((AMActionForm)form).getMaxURL();
/*  3827 */       int maxchildren = ((AMActionForm)form).getMaxChildren();
/*  3828 */       int maxdepth = ((AMActionForm)form).getMaxDepth();
/*  3829 */       int traceenabled = ((AMActionForm)form).isTracingEnabled() ? 1 : 0;
/*  3830 */       int fulltracecount = ((AMActionForm)form).getFullTraceCount();
/*  3831 */       int packageinclude = ((AMActionForm)form).isPackageInclude() ? 1 : 0;
/*  3832 */       String packageList = ((AMActionForm)form).getPackageList();
/*       */       
/*  3834 */       String pollinterval = request.getParameter("pollInterval");
/*       */       try
/*       */       {
/*  3837 */         int poll = Integer.parseInt(pollinterval);
/*  3838 */         poll *= 60;
/*  3839 */         pollinterval = poll + "";
/*       */       }
/*       */       catch (Exception e)
/*       */       {
/*  3843 */         e.printStackTrace();
/*       */       }
/*  3845 */       String displayname = ((AMActionForm)form).getDisplayname();
/*  3846 */       if (DBQueryUtil.getDBType().equals("mssql"))
/*       */       {
/*  3848 */         displayname = displayname.replaceAll("'", "''");
/*       */       }
/*       */       else
/*       */       {
/*  3852 */         displayname = displayname.replaceAll("'", "\\\\'");
/*       */       }
/*  3854 */       String query = "update AM_ManagedObject set displayname='" + displayname + "' where resourceid=" + resourceid;
/*       */       
/*       */ 
/*       */ 
/*       */ 
/*  3859 */       AMConnectionPool.executeUpdateStmt(query);
/*  3860 */       EnterpriseUtil.addUpdateQueryToFile(query);
/*  3861 */       String query1 = "update CollectData set pollinterval=" + pollinterval + " where resourcename like '" + moname + "'";
/*  3862 */       AMConnectionPool.executeUpdateStmt(query1);
/*  3863 */       String query2 = "update AM_WTA_Config set enabled=" + instenabled + ",samplingfactor=" + sf + ",maxurl=" + maxurls + ",maxchildren=" + maxchildren + ",maxdepth=" + maxdepth + ",fulltracecount=" + fulltracecount + ",traceenabled=" + traceenabled + ",packageinclude=" + packageinclude + " where resourceid=" + resourceid;
/*  3864 */       AMConnectionPool.executeUpdateStmt(query2);
/*       */       
/*  3866 */       ArrayList fullpackages = new ArrayList();
/*  3867 */       if (!packageList.equals("")) {
/*  3868 */         StringTokenizer tokenizer = new StringTokenizer(packageList, ",");
/*  3869 */         ArrayList packages = new ArrayList();
/*       */         
/*  3871 */         while (tokenizer.hasMoreTokens())
/*       */         {
/*  3873 */           String packageStr = tokenizer.nextToken();
/*  3874 */           packages.add(packageStr);
/*  3875 */           fullpackages.add(packageStr);
/*       */         }
/*       */         
/*  3878 */         HostDiscoveryHandler.updateWTAConfig(resourceid, packages);
/*       */       }
/*       */       
/*       */ 
/*  3882 */       String target = "";
/*  3883 */       int port = 55555;
/*       */       
/*  3885 */       ResultSet source = AMConnectionPool.executeQueryStmt("select InetService.TARGETNAME,InetService.PORTNO from InetService,AM_ManagedObject where AM_ManagedObject.RESOURCEID=" + resourceid + " and AM_ManagedObject.RESOURCENAME=InetService.NAME");
/*       */       
/*  3887 */       if (source.next())
/*       */       {
/*  3889 */         target = source.getString("TARGETNAME");
/*  3890 */         port = source.getInt("PORTNO");
/*       */       }
/*  3892 */       AMConnectionPool.closeStatement(source);
/*  3893 */       Hashtable configProps = new Hashtable();
/*  3894 */       configProps.put("tmenabled", String.valueOf(((AMActionForm)form).isInstrumentationEnabled()));
/*  3895 */       configProps.put("samplingFactor", String.valueOf(sf));
/*  3896 */       configProps.put("maxurl", String.valueOf(maxurls));
/*  3897 */       configProps.put("maxchildren", String.valueOf(maxchildren));
/*  3898 */       configProps.put("maxdepth", String.valueOf(maxdepth));
/*  3899 */       configProps.put("fulltracecount", String.valueOf(fulltracecount));
/*  3900 */       configProps.put("traceenabled", String.valueOf(((AMActionForm)form).isTracingEnabled()));
/*  3901 */       configProps.put("packageInclude", String.valueOf(((AMActionForm)form).isPackageInclude()));
/*  3902 */       configProps.put("packageList", fullpackages);
/*  3903 */       configProps.put("command", "updateConfig");
/*  3904 */       Socket soc = null;
/*       */       try {
/*  3906 */         soc = new Socket(target, port);
/*  3907 */         ObjectOutputStream oos = new ObjectOutputStream(new java.io.BufferedOutputStream(soc.getOutputStream()));
/*  3908 */         oos.writeObject(configProps);
/*  3909 */         oos.flush();
/*  3910 */         oos.close();
/*       */       }
/*       */       catch (Exception e) {
/*  3913 */         e.printStackTrace();
/*       */       }
/*  3915 */       return new ActionForward("/showresource.do?method=showdetails&resourcename=" + displayname);
/*       */     }
/*       */     catch (Throwable e)
/*       */     {
/*  3919 */       e.printStackTrace(); }
/*  3920 */     return null;
/*       */   }
/*       */   
/*       */ 
/*       */   public ActionForward configureOracleAS(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*  3927 */     String resourceid = request.getParameter("resourceid");
/*  3928 */     String moname = request.getParameter("moname");
/*  3929 */     String pollinterval = request.getParameter("pollInterval");
/*  3930 */     int poll = Integer.parseInt(pollinterval);
/*  3931 */     poll *= 60;
/*  3932 */     pollinterval = poll + "";
/*       */     
/*  3934 */     String displayname = ((AMActionForm)form).getDisplayname();
/*  3935 */     if (DBQueryUtil.getDBType().equals("mssql"))
/*       */     {
/*  3937 */       displayname = displayname.replaceAll("'", "''");
/*       */     }
/*       */     else
/*       */     {
/*  3941 */       displayname = displayname.replaceAll("'", "\\\\'");
/*       */     }
/*  3943 */     String query = "update AM_ManagedObject set displayname='" + displayname + "' where resourceid=" + resourceid;
/*  3944 */     EnterpriseUtil.addUpdateQueryToFile(query);
/*  3945 */     AMConnectionPool.executeUpdateStmt(query);
/*  3946 */     query = "update CollectData set pollinterval=" + pollinterval + " where resourcename like '" + moname + "'";
/*  3947 */     AMConnectionPool.executeUpdateStmt(query);
/*       */     
/*  3949 */     return new ActionForward("/showresource.do?method=showResourceForResourceID&resourceid=" + resourceid);
/*       */   }
/*       */   
/*       */   public ActionForward showMonitorTemplates(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
/*       */   {
/*  3954 */     ShowResourceDetails details = new ShowResourceDetails();
/*  3955 */     ActionForward forward = details.showResourceTypes(mapping, form, request, response);
/*       */     
/*  3957 */     return new ActionForward("/showresource.do?method=showResourceTypes");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward configureHostDiscovery(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*  3970 */     String hideFieldsForIT360 = request.getParameter("hideFieldsForIT360");
/*  3971 */     request.setAttribute("hideFieldsForIT360", hideFieldsForIT360);
/*  3972 */     ActionMessages messages = new ActionMessages();
/*  3973 */     boolean isCredentialManager = false;
/*  3974 */     ActionErrors errors = new ActionErrors();
/*  3975 */     String add = null;
/*  3976 */     String credentialManager = request.getParameter("CredentialDetails");
/*  3977 */     String cmValue = "";
/*  3978 */     long credentialID = -1L;
/*  3979 */     String modeSelected = request.getParameter("mode");
/*  3980 */     Properties credentialSelectedProperties = new Properties();
/*  3981 */     if (EnterpriseUtil.isAdminServer())
/*       */     {
/*  3983 */       String resourcetype = ((AMActionForm)form).getType();
/*  3984 */       Properties argsprops = new Properties();
/*  3985 */       argsprops.setProperty("monitorType", resourcetype);
/*  3986 */       for (Enumeration e = request.getParameterNames(); e.hasMoreElements();)
/*       */       {
/*  3988 */         String param = (String)e.nextElement();
/*  3989 */         if (!argsprops.containsKey(param))
/*       */         {
/*  3991 */           argsprops.setProperty(param, request.getParameter(param));
/*       */         }
/*  3993 */         if (param.equals("haid"))
/*       */         {
/*  3995 */           String[] multiVal = request.getParameterValues(param);
/*  3996 */           if ((multiVal != null) && (multiVal.length > 0)) {
/*  3997 */             String val = Arrays.asList(multiVal).toString().replaceAll(", ", ",");
/*  3998 */             val = val.substring(1, val.length() - 1);
/*  3999 */             argsprops.setProperty(param, val);
/*       */           }
/*       */         }
/*       */       }
/*       */       try
/*       */       {
/*  4005 */         HashMap<String, String> responseMap = com.manageengine.appmanager.server.framework.AAMMonitorAdder.addMonitor(argsprops);
/*  4006 */         ArrayList<String> al1 = new ArrayList();
/*  4007 */         String displayname = request.getParameter("displayname");
/*  4008 */         if ((displayname == null) || (displayname.trim().length() == 0)) {
/*  4009 */           displayname = request.getParameter("displayName");
/*       */         }
/*  4011 */         String status = "Success";
/*  4012 */         String message = "/showresource.do?resourceid=" + (String)responseMap.get("resourceId") + "&method=showResourceForResourceID";
/*  4013 */         String masDisplayName = (String)responseMap.get("managedServerDispName");
/*  4014 */         if (((String)responseMap.get("addStatus")).equals("false")) {
/*  4015 */           status = "Failed";
/*  4016 */           message = (String)responseMap.get("message");
/*       */         }
/*  4018 */         al1.add(displayname);
/*  4019 */         al1.add(status);
/*  4020 */         al1.add(message);
/*  4021 */         al1.add(masDisplayName);
/*  4022 */         request.setAttribute("discoverystatus", al1);
/*  4023 */         request.setAttribute("type", resourcetype);
/*  4024 */         request.setAttribute("basetype", "Script Monitor");
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       }
/*       */       catch (Exception e)
/*       */       {
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*  4043 */         e.printStackTrace();
/*       */       }
/*  4045 */       return reloadHostDiscoveryForm(mapping, form, request, response);
/*       */     }
/*  4047 */     if ((modeSelected != null) && (!modeSelected.equals("")))
/*       */     {
/*  4049 */       if (modeSelected.equalsIgnoreCase("telnet"))
/*       */       {
/*  4051 */         String telnetCredentialDetails = request.getParameter("TelnetCredentialDetails");
/*  4052 */         if ((telnetCredentialDetails != null) && (telnetCredentialDetails.equalsIgnoreCase("cmtelnet")))
/*       */         {
/*  4054 */           cmValue = request.getParameter("cmTelnetValue");
/*       */         }
/*       */       }
/*  4057 */       if (modeSelected.equalsIgnoreCase("ssh"))
/*       */       {
/*  4059 */         String sshCredentialDetails = request.getParameter("SSHCredentialDetails");
/*  4060 */         if ((sshCredentialDetails != null) && (sshCredentialDetails.equalsIgnoreCase("cmssh")))
/*       */         {
/*  4062 */           cmValue = request.getParameter("cmSSHValue");
/*       */         }
/*       */       }
/*  4065 */       if (modeSelected.equalsIgnoreCase("snmp"))
/*       */       {
/*  4067 */         String snmpCredentialDetails = request.getParameter("SNMPCredentialDetails");
/*  4068 */         if ((snmpCredentialDetails != null) && (snmpCredentialDetails.equalsIgnoreCase("cmsnmp")))
/*       */         {
/*  4070 */           cmValue = request.getParameter("cmSNMPValue");
/*       */         }
/*       */       }
/*  4073 */       if (modeSelected.equalsIgnoreCase("wmi"))
/*       */       {
/*  4075 */         String wmiCredentialDetails = request.getParameter("WMICredentialDetails");
/*  4076 */         if ((wmiCredentialDetails != null) && (wmiCredentialDetails.equalsIgnoreCase("cmwmi")))
/*       */         {
/*  4078 */           cmValue = request.getParameter("cmWMIValue");
/*       */         }
/*       */         
/*       */       }
/*       */       
/*       */     }
/*  4084 */     else if ((credentialManager != null) && (credentialManager.equalsIgnoreCase("cm")))
/*       */     {
/*  4086 */       cmValue = request.getParameter("cmValue");
/*       */     }
/*       */     
/*  4089 */     if ((cmValue != null) && (!cmValue.equals("")))
/*       */     {
/*  4091 */       isCredentialManager = true;
/*  4092 */       credentialID = new Long(cmValue).longValue();
/*  4093 */       credentialSelectedProperties = this.credUtil.rowNameVsValue(credentialID);
/*       */     }
/*       */     
/*       */ 
/*       */     try
/*       */     {
/*  4099 */       add = InetAddress.getLocalHost().getHostName();
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/*  4103 */       e.printStackTrace();
/*       */     }
/*       */     
/*       */ 
/*       */ 
/*       */     try
/*       */     {
/*  4110 */       String resourcetype = ((AMActionForm)form).getType().substring(0, ((AMActionForm)form).getType().indexOf(":"));
/*  4111 */       request.setAttribute("typeToCheck", resourcetype);
/*  4112 */       String workingdir = null;
/*  4113 */       if (request.getParameter("oldTypeToCheck") != null)
/*       */       {
/*  4115 */         String oldTypeToCheck = request.getParameter("oldTypeToCheck");
/*  4116 */         if (oldTypeToCheck.equals(resourcetype))
/*       */         {
/*  4118 */           request.setAttribute("showSupportMessage", "true");
/*       */         }
/*       */       }
/*  4121 */       if (resourcetype.equals("WLI"))
/*       */       {
/*  4123 */         if ((System.getProperty("os.name").startsWith("Windows")) || (System.getProperty("os.name").startsWith("windows")))
/*       */         {
/*  4125 */           workingdir = new File(NmsUtil.getAIM_ROOT()).getAbsoluteFile().getParentFile().getAbsolutePath();
/*       */         }
/*       */         else
/*       */         {
/*  4129 */           workingdir = new File(NmsUtil.getAIM_ROOT()).getAbsoluteFile().getParentFile().getAbsolutePath();
/*       */         }
/*  4131 */         if ((!new File("./classes/weblogicclient8_1_jmx.jar").exists()) && (!new File("./classes/weblogic/version8/weblogic.jar").exists()))
/*       */         {
/*  4133 */           return reloadHostDiscoveryForm(mapping, form, request, response);
/*       */         }
/*       */       }
/*       */       
/*  4137 */       if (resourcetype.equals("WEBLOGIC"))
/*       */       {
/*  4139 */         String version1 = ((AMActionForm)form).getVersion();
/*  4140 */         System.out.println("Weblogic version is " + version1);
/*       */         
/*  4142 */         if ((System.getProperty("os.name").startsWith("Windows")) || (System.getProperty("os.name").startsWith("windows")))
/*       */         {
/*  4144 */           workingdir = new File(NmsUtil.getAIM_ROOT()).getAbsoluteFile().getParentFile().getAbsolutePath();
/*       */ 
/*       */         }
/*       */         else
/*       */         {
/*  4149 */           workingdir = new File(NmsUtil.getAIM_ROOT()).getAbsoluteFile().getParentFile().getAbsolutePath();
/*       */         }
/*       */         
/*  4152 */         if (version1.equals("WLS_10_0"))
/*       */         {
/*  4154 */           if ((!new File("./classes/weblogicclient9.jar").exists()) && (!new File("./classes/weblogic/version9/weblogic.jar").exists()) && ((!new File("./classes/weblogic/version10/weblogic.jar").exists()) || (!new File("./classes/weblogic/version10/wlclient.jar").exists()) || (!new File("./classes/weblogic/version10/wljmsclient.jar").exists()) || (!new File("./classes/weblogic/version10/wlthint3client.jar").exists())))
/*       */           {
/*  4156 */             errors.add("org.apache.struts.action.ERROR", new ActionError("weblogicclient10.jar.missing"));
/*  4157 */             errors.add("org.apache.struts.action.ERROR", new ActionError("weblogicclient10.jar.missing1", workingdir + File.separator + "working" + File.separator + "classes" + File.separator + "weblogic" + File.separator + "version10", add));
/*  4158 */             saveErrors(request, errors);
/*  4159 */             return reloadHostDiscoveryForm(mapping, form, request, response);
/*       */           }
/*       */         }
/*  4162 */         if (version1.equals("WLS_9_0"))
/*       */         {
/*  4164 */           if ((!new File("./classes/weblogicclient9.jar").exists()) && (!new File("./classes/weblogic/version9/weblogic.jar").exists()))
/*       */           {
/*  4166 */             errors.add("org.apache.struts.action.ERROR", new ActionError("weblogicclient9.jar.missing"));
/*  4167 */             errors.add("org.apache.struts.action.ERROR", new ActionError("weblogicclient9.jar.missing1", workingdir + File.separator + "working" + File.separator + "classes" + File.separator + "weblogic" + File.separator + "version9", add));
/*  4168 */             saveErrors(request, errors);
/*  4169 */             return reloadHostDiscoveryForm(mapping, form, request, response);
/*       */           }
/*       */         }
/*  4172 */         if (version1.equals("WLS_8_1"))
/*       */         {
/*  4174 */           if ((!new File("./classes/weblogicclient8_1_jmx.jar").exists()) && (!new File("./classes/weblogic/version8/weblogic.jar").exists()))
/*       */           {
/*  4176 */             errors.add("org.apache.struts.action.ERROR", new ActionError("weblogicclient8.jar.missing"));
/*  4177 */             errors.add("org.apache.struts.action.ERROR", new ActionError("weblogicclient8.jar.missing1", workingdir + File.separator + "working" + File.separator + "classes" + File.separator + "weblogic" + File.separator + "version8", add));
/*  4178 */             saveErrors(request, errors);
/*  4179 */             return reloadHostDiscoveryForm(mapping, form, request, response);
/*       */           }
/*       */         }
/*  4182 */         if (version1.equals("WLS_7_0"))
/*       */         {
/*  4184 */           if ((!new File("./classes/weblogicclient7_0_jmx.jar").exists()) && (!new File("./classes/weblogic/version7/weblogic.jar").exists()))
/*       */           {
/*       */ 
/*  4187 */             errors.add("org.apache.struts.action.ERROR", new ActionError("weblogicclient7.jar.missing"));
/*  4188 */             errors.add("org.apache.struts.action.ERROR", new ActionError("weblogicclient7.jar.missing1", workingdir + File.separator + "working" + File.separator + "classes" + File.separator + "weblogic" + File.separator + "version7", add));
/*  4189 */             saveErrors(request, errors);
/*  4190 */             return reloadHostDiscoveryForm(mapping, form, request, response);
/*       */           }
/*       */         }
/*  4193 */         if (version1.equals("WLS_6_1"))
/*       */         {
/*  4195 */           if ((!new File("./classes/weblogicclient6_1.jar").exists()) && (!new File("./classes/weblogic/version6/weblogic.jar").exists()))
/*       */           {
/*       */ 
/*  4198 */             errors.add("org.apache.struts.action.ERROR", new ActionError("weblogicclient6.jar.missing"));
/*  4199 */             errors.add("org.apache.struts.action.ERROR", new ActionError("weblogicclient6.jar.missing1", workingdir + File.separator + "working" + File.separator + "classes" + File.separator + "weblogic" + File.separator + "version6", add));
/*  4200 */             saveErrors(request, errors);
/*  4201 */             return reloadHostDiscoveryForm(mapping, form, request, response);
/*       */           }
/*       */         }
/*       */       }
/*       */       
/*       */ 
/*  4207 */       if (resourcetype.equals("ORACLEAS"))
/*       */       {
/*  4209 */         String version1 = ((AMActionForm)form).getVersion();
/*  4210 */         System.out.println("version is " + version1);
/*       */       }
/*  4212 */       if ((resourcetype.equals("JBoss")) || (resourcetype.equals("JBOSS-server")))
/*       */       {
/*  4214 */         String version = ((AMActionForm)form).getVersion();
/*  4215 */         if (version.equals("JBOSS_HTTP40"))
/*       */         {
/*       */ 
/*  4218 */           if (!new File("./classes/jboss/40/jbossall-client.jar").exists())
/*       */           {
/*       */ 
/*  4221 */             errors.add("org.apache.struts.action.ERROR", new ActionError("jboss.401.jar.missing"));
/*       */             
/*  4223 */             if ((System.getProperty("os.name").startsWith("Windows")) || (System.getProperty("os.name").startsWith("windows")))
/*       */             {
/*  4225 */               workingdir = new File(NmsUtil.getAIM_ROOT()).getAbsoluteFile().getParentFile().getAbsolutePath();
/*       */             }
/*       */             else
/*       */             {
/*  4229 */               workingdir = new File(NmsUtil.getAIM_ROOT()).getAbsoluteFile().getParentFile().getAbsolutePath();
/*       */             }
/*  4231 */             errors.add("org.apache.struts.action.ERROR", new ActionError("jboss.401.jar.missing.1", workingdir + File.separator + "working" + File.separator + "classes" + File.separator + "jboss" + File.separator + "40"));
/*  4232 */             saveErrors(request, errors);
/*       */           }
/*       */         }
/*       */         
/*       */ 
/*  4237 */         if ((version.equals("JBOSS_HTTP7")) || (resourcetype.equals("JBoss")) || (resourcetype.equals("JBOSS-server"))) {
/*  4238 */           AMLog.info("In Configure host discovery---->" + version + request.getParameter("displayname") + "&pollinterval=" + request.getParameter("pollInterval") + "&montype=" + request.getParameter("montype"));
/*       */           
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*  4246 */           return new ActionForward("/manageConfMons.do?method=createMonitor&pollinterval=" + request.getParameter("pollInterval") + "&montype=JBOSS-server", false);
/*       */         }
/*       */       }
/*       */     }
/*       */     catch (Exception e) {}
/*       */     
/*       */ 
/*       */ 
/*       */ 
/*  4255 */     HostDiscoveryHandler addhostfordiscovery = new HostDiscoveryHandler();
/*       */     
/*  4257 */     boolean successful = false;
/*  4258 */     String message = "";
/*  4259 */     Hashtable configuredList = new Hashtable();
/*  4260 */     Hashtable hostInformation = new Hashtable();
/*       */     
/*  4262 */     String givenHost = ((AMActionForm)form).getHost().trim();
/*  4263 */     String serverTypeWithPort = ((AMActionForm)form).getType();
/*  4264 */     String serverType = serverTypeWithPort.substring(0, serverTypeWithPort.indexOf(":") == -1 ? serverTypeWithPort.length() : serverTypeWithPort.indexOf(":"));
/*  4265 */     String subnet = ((AMActionForm)form).getnetmask();
/*  4266 */     String temp = request.getParameter("istestavailability");
/*  4267 */     boolean isTestAvailability = "true".equals(temp);
/*       */     
/*  4269 */     StringTokenizer tokenizehosts = new StringTokenizer(givenHost, ",");
/*  4270 */     String addtoapplication = request.getParameter("addtoha");
/*  4271 */     String internaltype = null;
/*  4272 */     Set failedHostNames = new HashSet();
/*  4273 */     ArrayList list = new ArrayList();
/*  4274 */     boolean stopdiscovering = false;
/*  4275 */     FreeEditionDetails free = FreeEditionDetails.getFreeEditionDetails();
/*  4276 */     int maxallowed = free.getNumberOfMonitorsPermitted((String)getTypes().get(serverType));
/*  4277 */     String usrtype = free.getUserType();
/*  4278 */     if ((EnterpriseUtil.isManagedServer()) && (usrtype.equals("R")))
/*       */     {
/*       */ 
/*  4281 */       int currentTotalInAdminServer = EnterpriseUtil.getAdminServerMonitorsCountForManagedServerValidation();
/*  4282 */       if (currentTotalInAdminServer == -1)
/*       */       {
/*       */ 
/*  4285 */         int totalLocalMonitors = com.adventnet.appmanager.util.Constants.getNoofMonitors_withoutnatives();
/*  4286 */         int allowedMonitors = free.getNumberOfMonitorsPermitted();
/*       */         
/*  4288 */         if ((allowedMonitors != -1) && (totalLocalMonitors > allowedMonitors))
/*       */         {
/*  4290 */           String m1 = FormatUtil.getString("monitor.present.creation.exceedslimit.managedserverlicensed", new String[] { String.valueOf(allowedMonitors), String.valueOf(totalLocalMonitors), OEMUtil.getOEMString("product.sales.mailid"), OEMUtil.getOEMString("product.talkback.mailid") });
/*  4291 */           messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage(m1));
/*  4292 */           saveMessages(request, messages);
/*  4293 */           return getReturnPage(mapping, form, request, response);
/*       */         }
/*       */       }
/*  4296 */       else if ((maxallowed != -1) && (currentTotalInAdminServer >= maxallowed))
/*       */       {
/*  4298 */         messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("registered.monitor.enterprise.restriction1", String.valueOf(maxallowed)));
/*  4299 */         messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("registered.monitor.enterprise.restriction2", new String[] { OEMUtil.getOEMString("company.troubleshoot.link") }));
/*  4300 */         saveMessages(request, messages);
/*  4301 */         return getReturnPage(mapping, form, request, response);
/*       */       }
/*       */     }
/*       */     
/*  4305 */     if (!DataCollectionControllerUtil.isallowed())
/*       */     {
/*  4307 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("registered.monitor.restriction1", String.valueOf(FreeEditionDetails.getFreeEditionDetails().getNumberOfMonitorsPermitted())));
/*  4308 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("registered.monitor.restriction2"));
/*  4309 */       saveMessages(request, messages);
/*  4310 */       return getReturnPage(mapping, form, request, response);
/*       */     }
/*  4312 */     boolean issappresent = FreeEditionDetails.getFreeEditionDetails().isSAPAddOnPresent();
/*       */     
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*  4320 */     boolean onehostfailed = false;
/*  4321 */     while (tokenizehosts.hasMoreTokens())
/*       */     {
/*       */ 
/*  4324 */       String hostIp = tokenizehosts.nextToken().trim();
/*  4325 */       String givenhost = hostIp.trim();
/*       */       
/*       */ 
/*       */ 
/*       */       try
/*       */       {
/*  4331 */         if (hostIp.equals("localhost"))
/*       */         {
/*  4333 */           hostIp = AMServerStartup.ipaddress;
/*       */         }
/*  4335 */         hostIp = InetAddress.getByName(hostIp).getHostAddress();
/*  4336 */         if (InetAddress.getByName(hostIp).isLoopbackAddress())
/*       */         {
/*  4338 */           hostIp = AMServerStartup.ipaddress;
/*       */ 
/*       */         }
/*       */         
/*       */ 
/*       */       }
/*       */       catch (Exception e)
/*       */       {
/*       */ 
/*  4347 */         failedHostNames.add(givenhost);
/*  4348 */         ArrayList row = new ArrayList();
/*  4349 */         row.add(givenhost);
/*  4350 */         row.add("-");
/*  4351 */         row.add(FormatUtil.getString("Failed"));
/*  4352 */         row.add(FormatUtil.getString("am.webclient.hostdiscovery.invalidhost"));
/*  4353 */         onehostfailed = true;
/*  4354 */         list.add(row);
/*       */       }
/*       */       
/*  4357 */       continue;
/*       */       
/*  4359 */       String port = ((AMActionForm)form).getPort();
/*  4360 */       String popPort = ((AMActionForm)form).getPopPort();
/*  4361 */       String monDisplayname = ((AMActionForm)form).getDisplayname();
/*  4362 */       boolean sslenabled = ((AMActionForm)form).isSslenabled();
/*  4363 */       String mailMsg = ((AMActionForm)form).getMailMsg();
/*  4364 */       String phpPath = ((AMActionForm)form).getServerpath();
/*  4365 */       boolean apacheauth = ((AMActionForm)form).isAuthEnabled();
/*  4366 */       boolean isapacheurl = ((AMActionForm)form).isServerstatusurl();
/*  4367 */       String apacheusername = ((AMActionForm)form).getApacheUserName();
/*  4368 */       String apachepassword = ((AMActionForm)form).getApachepassword();
/*  4369 */       String apacheurl = ((AMActionForm)form).getApacheurl();
/*  4370 */       String tomcatmanagerurl = ((AMActionForm)form).getTomcatmanagerurl();
/*  4371 */       if ((port == null) || (port.equals("null")) || (port.trim().length() == 0))
/*  4372 */         port = "1008";
/*  4373 */       if (serverType.equals("All"))
/*       */       {
/*  4375 */         ArrayList row = new ArrayList();
/*  4376 */         row.add(givenhost);
/*  4377 */         int status = new com.adventnet.nms.appln.services.server.PingTest().ping(hostIp);
/*  4378 */         if (status < 0)
/*       */         {
/*  4380 */           failedHostNames.add(givenhost);
/*  4381 */           row.add("All Services");
/*  4382 */           row.add("Failed");
/*  4383 */           row.add(FormatUtil.getString("am.webclient.hostdiscovery.systemdown"));
/*  4384 */           onehostfailed = true;
/*  4385 */           list.add(row);
/*       */ 
/*       */         }
/*       */         else
/*       */         {
/*  4390 */           row.add("All Services");
/*  4391 */           row.add("Success");
/*  4392 */           row.add(FormatUtil.getString("am.webclient.monitorgroupdetails.iniatedimagetip.text"));
/*  4393 */           list.add(row);
/*       */           
/*       */ 
/*  4396 */           TopoAPI tapi = (TopoAPI)NmsUtil.getAPI("TopoAPI");
/*  4397 */           com.adventnet.nms.topodb.IpAddress interfacename = null;
/*  4398 */           String checkalreadyexists = null;
/*  4399 */           checkalreadyexists = tapi.getNodeNameByIP(hostIp);
/*  4400 */           if (checkalreadyexists != null)
/*       */           {
/*  4402 */             interfacename = tapi.getInterface(hostIp);
/*  4403 */             if (interfacename != null)
/*       */             {
/*  4405 */               ApplnDiscovery.getInstance().performApplnDiscovery("Added", interfacename);
/*       */ 
/*       */             }
/*       */             
/*       */ 
/*       */ 
/*       */           }
/*       */           else
/*       */           {
/*       */ 
/*       */ 
/*  4416 */             com.adventnet.nms.topodb.Node node = new com.adventnet.nms.topodb.Node(hostIp, subnet);
/*  4417 */             tapi.addNode(node, false, false, false);
/*       */             
/*       */ 
/*       */             try
/*       */             {
/*  4422 */               interfacename = tapi.getInterface(hostIp);
/*  4423 */               if (interfacename != null)
/*       */               {
/*  4425 */                 ApplnDiscovery.getInstance().performApplnDiscovery("Added", interfacename);
/*       */               }
/*       */             }
/*       */             catch (Exception exc)
/*       */             {
/*  4430 */               exc.printStackTrace();
/*       */             }
/*       */           }
/*       */         }
/*       */       } else {
/*  4435 */         Properties dcprop = new Properties();
/*  4436 */         dcprop.setProperty("DISPLAYNAME", monDisplayname);
/*  4437 */         if ((addtoapplication != null) && (addtoapplication.equalsIgnoreCase("true")))
/*       */         {
/*  4439 */           dcprop.setProperty("addtoapplication", "true");
/*  4440 */           dcprop.setProperty("haid", request.getParameter("haid"));
/*       */         } else {
/*  4442 */           dcprop.setProperty("addtoapplication", "false");
/*       */         }
/*  4444 */         String username = request.getParameter("username");
/*  4445 */         String password = request.getParameter("password");
/*  4446 */         if ((request.getParameter("authEnabled") != null) && (!request.getParameter("authEnabled").equals("")))
/*       */         {
/*  4448 */           dcprop.setProperty("authEnabled", request.getParameter("authEnabled"));
/*       */         }
/*  4450 */         if (password != null) {
/*  4451 */           password = Translate.decode(password);
/*       */         }
/*  4453 */         String passphrase = request.getParameter("passphrase");
/*  4454 */         if (passphrase != null) {
/*  4455 */           passphrase = Translate.decode(passphrase);
/*       */         }
/*  4457 */         String privateKey = request.getParameter("description");
/*  4458 */         String sshPKAuthChecked = null;
/*  4459 */         if ((serverType.equals("SYSTEM")) && ("SSH".equals(request.getParameter("mode"))) && (request.getParameter("sshPKAuth") != null) && (!request.getParameter("sshPKAuth").equalsIgnoreCase("false")))
/*       */         {
/*  4461 */           if (request.getParameter("sshPKAuth") != null)
/*       */           {
/*       */ 
/*  4464 */             sshPKAuthChecked = "checked";
/*       */           }
/*       */         }
/*  4467 */         String soapport = request.getParameter("soapport");
/*  4468 */         String pollinterval = request.getParameter("pollInterval");
/*  4469 */         pollinterval = pollinterval == null ? request.getParameter("pollinterval") : pollinterval;
/*  4470 */         String mode = request.getParameter("mode");
/*  4471 */         String addasip = String.valueOf(((AMActionForm)form).isResolveDNS());
/*  4472 */         AMLog.debug("AdminActions: Do not resolve hostname flag checked: " + addasip);
/*  4473 */         String eventlog_status = String.valueOf(((AMActionForm)form).isEventlog_status());
/*       */         
/*  4475 */         String AppServers = request.getParameter("AppServers");
/*  4476 */         if ((AppServers != null) && (!AppServers.trim().equals("")))
/*       */         {
/*  4478 */           dcprop.put("AppServers", AppServers);
/*       */         }
/*  4480 */         if (eventlog_status != null)
/*       */         {
/*  4482 */           dcprop.put("eventlog_status", eventlog_status);
/*       */         }
/*  4484 */         String[] exchangeservice = request.getParameterValues("exchangeservice");
/*  4485 */         if (exchangeservice != null)
/*       */         {
/*  4487 */           dcprop.put("services", exchangeservice);
/*       */         }
/*       */         
/*  4490 */         if (addasip == null)
/*       */         {
/*  4492 */           dcprop.setProperty("addasip", "false");
/*       */         }
/*       */         else
/*       */         {
/*  4496 */           dcprop.setProperty("addasip", addasip);
/*       */         }
/*  4498 */         if (mode != null)
/*       */         {
/*  4500 */           dcprop.setProperty("MODE", mode);
/*  4501 */           if (mode.equals("SNMP"))
/*       */           {
/*  4503 */             String snmpPort = request.getParameter("snmpPort") == null ? request.getParameter("snmptelnetport") : request.getParameter("snmpPort");
/*  4504 */             dcprop.setProperty("HOST", hostIp);
/*  4505 */             Properties snmpProps = setSnmpValuesFromRequest(hostIp, request);
/*  4506 */             dcprop.putAll(snmpProps);
/*  4507 */             dcprop.setProperty("PORT", snmpPort);
/*  4508 */             if ((port == null) || (port.equals("1008")))
/*       */             {
/*  4510 */               port = snmpPort;
/*       */             }
/*       */           }
/*  4513 */           else if ((mode.equals("SSH")) || (mode.equals("TELNET")))
/*       */           {
/*  4515 */             String snmptelnetport = request.getParameter("snmptelnetport");
/*  4516 */             if ((port == null) || (port.equals("1008")))
/*       */             {
/*  4518 */               port = snmptelnetport;
/*       */             }
/*  4520 */             dcprop.setProperty("TELNETPORT", snmptelnetport);
/*       */           }
/*       */           else
/*       */           {
/*  4524 */             dcprop.setProperty("TELNETPORT", "23");
/*       */           }
/*       */         }
/*       */         try
/*       */         {
/*  4529 */           pollinterval = pollinterval == null ? "5" : pollinterval;
/*  4530 */           int poll = Integer.parseInt(pollinterval);
/*  4531 */           poll *= 60;
/*  4532 */           pollinterval = poll + "";
/*       */         }
/*       */         catch (Exception e)
/*       */         {
/*  4536 */           e.printStackTrace();
/*       */         }
/*       */         
/*  4539 */         if (request.getParameter("jconnect") != null)
/*       */         {
/*  4541 */           dcprop.setProperty("jconnect", request.getParameter("jconnect"));
/*       */         }
/*  4543 */         if (request.getParameter("instance") != null)
/*       */         {
/*  4545 */           dcprop.setProperty("instance", request.getParameter("instance"));
/*       */         }
/*  4547 */         if (request.getParameter("prompt") != null)
/*       */         {
/*  4549 */           dcprop.setProperty("prompt", Translate.decode(request.getParameter("prompt")));
/*       */         }
/*  4551 */         if (request.getParameter("version") != null)
/*       */         {
/*  4553 */           dcprop.setProperty("version", request.getParameter("version"));
/*       */         }
/*  4555 */         if (request.getParameter("os") != null)
/*       */         {
/*  4557 */           dcprop.setProperty("os", request.getParameter("os"));
/*       */         }
/*  4559 */         if (request.getParameter("role") != null)
/*       */         {
/*  4561 */           dcprop.setProperty("role", request.getParameter("role"));
/*       */         }
/*  4563 */         if (username != null)
/*  4564 */           dcprop.setProperty("username", username);
/*  4565 */         if (password != null)
/*  4566 */           dcprop.setProperty("password", password);
/*  4567 */         if (privateKey != null)
/*       */         {
/*  4569 */           dcprop.setProperty("privateKey", privateKey);
/*       */         }
/*  4571 */         if (sshPKAuthChecked != null)
/*       */         {
/*  4573 */           dcprop.setProperty("sshPKAuthChecked", sshPKAuthChecked);
/*  4574 */           dcprop.setProperty("password", passphrase);
/*       */         }
/*       */         
/*  4577 */         String timeout = request.getParameter("timeout");
/*  4578 */         if ((timeout == null) || (timeout.trim().length() == 0)) {
/*  4579 */           timeout = "-1";
/*       */         }
/*  4581 */         dcprop.setProperty("TIMEOUT", timeout);
/*       */         
/*       */ 
/*  4584 */         if ((!cmValue.equals("")) && (new Long(cmValue).longValue() != -1L) && (credentialSelectedProperties.getProperty("sshPKAuth", "false").equalsIgnoreCase("true")))
/*       */         {
/*  4586 */           String credName = this.credUtil.getDetailsForACredential(cmValue).getProperty("credentialName", "");
/*  4587 */           String srcFile = APM_HOME + File.separator + "credentialManager_privateKey_" + credName + ".txt";
/*  4588 */           String fileFormatAsPerCanonicalName = this.credUtil.getNameAsPerSSHFormat(givenhost);
/*  4589 */           String destFile = APM_HOME + File.separator + fileFormatAsPerCanonicalName;
/*  4590 */           this.credUtil.copyFile(srcFile, destFile);
/*  4591 */           dcprop.setProperty("sshPKAuthChecked", "checked");
/*  4592 */           dcprop.setProperty("sshPKFileName", srcFile);
/*  4593 */           String passwordPassPhrase = credentialSelectedProperties.getProperty("passphrase", "");
/*  4594 */           credentialSelectedProperties.setProperty("password", passwordPassPhrase);
/*  4595 */           dcprop.setProperty("password", passwordPassPhrase);
/*       */         }
/*       */         
/*       */ 
/*  4599 */         if (soapport != null)
/*       */         {
/*  4601 */           dcprop.setProperty("soapport", soapport);
/*       */         }
/*  4603 */         dcprop.setProperty("sslenabled", String.valueOf(sslenabled));
/*  4604 */         if (request.getParameter("command") != null)
/*  4605 */           dcprop.setProperty("command", request.getParameter("command"));
/*  4606 */         dcprop.setProperty("pollinterval", pollinterval);
/*  4607 */         if (request.getParameter("search") != null)
/*  4608 */           dcprop.setProperty("search", request.getParameter("search"));
/*  4609 */         if (serverType.equals("PHP"))
/*       */         {
/*  4611 */           dcprop.setProperty("phpPath", phpPath);
/*       */         }
/*  4613 */         if (serverType.equals("APACHE"))
/*       */         {
/*  4615 */           dcprop.setProperty("apacheauth", String.valueOf(apacheauth));
/*  4616 */           dcprop.setProperty("isapacheurl", String.valueOf(isapacheurl));
/*  4617 */           dcprop.setProperty("apacheusername", apacheusername);
/*  4618 */           dcprop.setProperty("apachepassword", apachepassword);
/*  4619 */           dcprop.setProperty("apacheurl", apacheurl);
/*       */         }
/*       */         
/*  4622 */         if ((serverType.equals("Tomcat")) && (("5".equals(request.getParameter("version"))) || ("6".equals(request.getParameter("version"))) || ("7".equals(request.getParameter("version"))))) {
/*  4623 */           dcprop.setProperty("tomcatmanagerurl", tomcatmanagerurl);
/*       */         }
/*       */         
/*  4626 */         if ((request.getParameter("ndhost") != null) && (!request.getParameter("ndhost").equals("")))
/*       */         {
/*  4628 */           dcprop.setProperty("ndhost", request.getParameter("ndhost"));
/*       */         }
/*  4630 */         if ((request.getParameter("ndport") != null) && (!request.getParameter("ndport").equals("")))
/*       */         {
/*  4632 */           dcprop.setProperty("ndport", request.getParameter("ndport"));
/*       */         }
/*  4634 */         if (serverType.equals("MAIL"))
/*       */         {
/*  4636 */           dcprop.setProperty("smtpPort", port);
/*  4637 */           dcprop.setProperty("popPort", popPort);
/*  4638 */           dcprop.setProperty("mailMsg", mailMsg);
/*  4639 */           dcprop.setProperty("popHost", request.getParameter("popHost"));
/*  4640 */           String smtpusername = request.getParameter("smtpUserName");
/*  4641 */           String smtppassword = request.getParameter("smtpPassword");
/*  4642 */           String emailId = request.getParameter("emailid");
/*  4643 */           if (smtpusername == null) {
/*  4644 */             smtpusername = "";
/*       */           }
/*  4646 */           if (smtppassword == null) {
/*  4647 */             smtppassword = "";
/*       */           }
/*  4649 */           String smtpauth = request.getParameter("smtpauth");
/*  4650 */           if (smtpauth == null) {
/*  4651 */             smtpusername = "";
/*  4652 */             smtppassword = "";
/*       */           }
/*  4654 */           dcprop.setProperty("smtpUserName", smtpusername);
/*  4655 */           dcprop.setProperty("smtpPassword", smtppassword);
/*  4656 */           dcprop.setProperty("emailid", emailId);
/*  4657 */           String popenabled = request.getParameter("popenabled");
/*  4658 */           if (popenabled != null) {
/*  4659 */             dcprop.setProperty("popenabled", "true");
/*       */           } else {
/*  4661 */             dcprop.setProperty("popenabled", "false");
/*       */           }
/*  4663 */           Properties temporary = (Properties)dcprop.clone();
/*  4664 */           temporary.remove("smtpPassword");
/*  4665 */           temporary.remove("password");
/*  4666 */           temporary.remove("SNMPCOMMUNITY");
/*       */           
/*  4668 */           System.out.println("dcprop" + temporary);
/*       */         }
/*       */         
/*       */ 
/*  4672 */         if (serverType.equals("SAP")) {
/*  4673 */           if (request.getParameter("routerString") != null) {
/*  4674 */             dcprop.setProperty("routerString", request.getParameter("routerString"));
/*       */           }
/*  4676 */           dcprop.setProperty("logonClient", request.getParameter("logonClient"));
/*  4677 */           dcprop.setProperty("language", request.getParameter("language"));
/*  4678 */           dcprop.setProperty("systemNumber", request.getParameter("port"));
/*       */         }
/*       */         
/*       */ 
/*  4682 */         if (serverType.equals("SNMP")) {
/*  4683 */           Properties snmpProperties = setSnmpValuesFromRequest(hostIp, request);
/*  4684 */           dcprop.putAll(snmpProperties);
/*  4685 */           dcprop.setProperty("timeout", request.getParameter("timeout"));
/*  4686 */           if ((port == null) || (port.equals("1008")))
/*       */           {
/*  4688 */             port = snmpProperties.getProperty("SNMPPORT");
/*       */           }
/*       */         }
/*  4691 */         if ((serverType.equals("JMX1.2-MX4J-RMI")) || (serverType.equals("JDK1.5"))) {
/*  4692 */           if (request.getParameter("jndiurl") != null) {
/*  4693 */             dcprop.setProperty("jndiurl", request.getParameter("jndiurl"));
/*       */           }
/*  4695 */           if (request.getParameter("jmxurl") != null) {
/*  4696 */             dcprop.setProperty("jmxurl", request.getParameter("jmxurl"));
/*       */           }
/*       */         }
/*  4699 */         boolean isWTEnabled = ((AMActionForm)form).isWTEnabled();
/*  4700 */         dcprop.setProperty("WTEnabled", String.valueOf(isWTEnabled));
/*  4701 */         if (isWTEnabled) {
/*  4702 */           dcprop.setProperty("useWebServerPort", String.valueOf(((AMActionForm)form).isUseWebServerPort()));
/*  4703 */           if (!((AMActionForm)form).isUseWebServerPort()) {
/*  4704 */             dcprop.setProperty("wtaport", String.valueOf(((AMActionForm)form).getWtaport()));
/*       */           }
/*       */         }
/*       */         
/*  4708 */         StringTokenizer stz = new StringTokenizer(port, ",");
/*  4709 */         if (isCredentialManager)
/*       */         {
/*  4711 */           dcprop.setProperty("isCredentialManager", "true");
/*  4712 */           dcprop.setProperty("credentialID", cmValue);
/*  4713 */           if ("snmp".equalsIgnoreCase(mode))
/*       */           {
/*  4715 */             String snmpCommunityStringInProps = credentialSelectedProperties.getProperty("snmpCommunityString");
/*  4716 */             credentialSelectedProperties.setProperty("SNMPVERSION", "V3");
/*  4717 */             if (snmpCommunityStringInProps != null)
/*       */             {
/*  4719 */               credentialSelectedProperties.setProperty("SNMPVERSION", "V1V2");
/*  4720 */               credentialSelectedProperties.setProperty("SNMPCOMMUNITY", snmpCommunityStringInProps);
/*       */             }
/*       */           }
/*  4723 */           dcprop.putAll(credentialSelectedProperties);
/*  4724 */           if ((serverType.toLowerCase().indexOf("mssql") != -1) && ("false".equalsIgnoreCase(credentialSelectedProperties.getProperty("namedInstance")))) {
/*  4725 */             dcprop.setProperty("instance", "");
/*       */           }
/*  4727 */           if ("WEBLOGIC".equals(serverType)) {
/*  4728 */             sslenabled = Boolean.valueOf(credentialSelectedProperties.getProperty("sslenabled")).booleanValue();
/*       */           }
/*       */         }
/*       */         
/*  4732 */         if ((serverType.toLowerCase().indexOf("mssql") != -1) && (("Yes".equalsIgnoreCase(request.getParameter("namedInstance"))) || ("true".equalsIgnoreCase(request.getParameter("namedInstance")))))
/*       */         {
/*  4734 */           dcprop.setProperty("instance", request.getParameter("instance"));
/*  4735 */           dcprop.setProperty("namedInstance", request.getParameter("namedInstance"));
/*       */         }
/*  4737 */         while (stz.hasMoreTokens())
/*       */         {
/*  4739 */           configuredList.clear();
/*  4740 */           hostInformation.clear();
/*  4741 */           String tempPort = stz.nextToken();
/*  4742 */           Properties tempProps = new Properties();
/*  4743 */           tempProps.setProperty("HOST_IP", hostIp);
/*  4744 */           tempProps.setProperty("SUBNET_MASK", subnet);
/*  4745 */           tempProps.setProperty("SERVER_TYPE", serverType);
/*  4746 */           tempProps.setProperty("PORT", tempPort);
/*  4747 */           tempProps.setProperty("popPort", popPort);
/*  4748 */           tempProps.setProperty("sslenabled", String.valueOf(sslenabled));
/*  4749 */           hostInformation.put(hostIp + ":" + tempPort, tempProps);
/*  4750 */           configuredList.put("HOST_CONFIG", hostInformation);
/*  4751 */           Properties discoveryProperties = new Properties();
/*  4752 */           discoveryProperties.setProperty("REDISCOVER_INTERVAL", "24");
/*  4753 */           discoveryProperties.setProperty("HOUR", "-1");
/*  4754 */           configuredList.put("DISC_DATA_PROP", discoveryProperties);
/*  4755 */           dcprop.setProperty("givenhost", givenhost);
/*  4756 */           if (dcprop.getProperty("ndhost") == null)
/*       */           {
/*  4758 */             dcprop.setProperty("ndhost", hostIp);
/*       */           }
/*  4760 */           if (dcprop.getProperty("ndport") == null)
/*       */           {
/*  4762 */             if (dcprop.getProperty("soapport") != null)
/*       */             {
/*  4764 */               dcprop.setProperty("ndport", dcprop.getProperty("soapport"));
/*       */             }
/*       */           }
/*       */           
/*  4768 */           boolean sqlmanager = com.adventnet.appmanager.util.Constants.sqlManager;
/*  4769 */           if (sqlmanager)
/*       */           {
/*       */ 
/*       */ 
/*  4773 */             String wusername = ((AMActionForm)form).getSmtpUserName();
/*  4774 */             dcprop.setProperty("wusername", wusername);
/*       */             
/*  4776 */             String wpassword = ((AMActionForm)form).getSmtpPassword();
/*  4777 */             dcprop.setProperty("wpassword", wpassword);
/*       */           }
/*       */           
/*       */ 
/*  4781 */           dcprop.setProperty("hostdiscovery", "newmonitor");
/*  4782 */           if ((request.getParameter("forceadd") != null) && (request.getParameter("forceadd").equals("true"))) {
/*  4783 */             dcprop.setProperty("forceadd", "true");
/*       */           }
/*  4785 */           if ((request.getParameter("addgivenname") != null) && (request.getParameter("addgivenname").equals("true"))) {
/*  4786 */             dcprop.setProperty("addgivenname", "true");
/*       */           }
/*       */           
/*  4789 */           successful = addhostfordiscovery.discoverHost(configuredList, dcprop, isTestAvailability);
/*       */           
/*  4791 */           if (successful)
/*       */           {
/*  4793 */             ArrayList row = new ArrayList();
/*  4794 */             row.add(givenhost);
/*       */             
/*  4796 */             if ((dcprop.getProperty("resourceType").equals("Linux")) || (dcprop.getProperty("resourceType").toLowerCase().indexOf("novell") != -1) || (dcprop.getProperty("resourceType").toLowerCase().indexOf("windows") != -1) || (dcprop.getProperty("resourceType").equals("SUN")) || (dcprop.getProperty("resourceType").equals("SUN PC")) || (dcprop.getProperty("resourceType").equals("Node")) || (dcprop.getProperty("resourceType").equals("SnmpNode")) || (dcprop.getProperty("resourceType").equals("AIX")) || (dcprop.getProperty("resourceType").equals("AS400/iSeries")) || (dcprop.getProperty("resourceType").equals("HP-UX")) || (dcprop.getProperty("resourceType").equals("HP-TRU64")) || (dcprop.getProperty("resourceType").equals(".Net")) || (dcprop.getProperty("resourceType").equals("FreeBSD / OpenBSD")) || (dcprop.getProperty("resourceType").equals("OpenBSD")) || (dcprop.getProperty("resourceType").equals("Mac OS")) || (dcprop.getProperty("resourceType").equals("SAP")))
/*       */             {
/*  4798 */               row.add("-");
/*       */             }
/*       */             else
/*       */             {
/*  4802 */               row.add(tempPort);
/*       */             }
/*  4804 */             if (isTestAvailability) {
/*  4805 */               row.add("Present");
/*  4806 */               row.add("");
/*       */             }
/*       */             else {
/*  4809 */               row.add("Success");
/*  4810 */               if (dcprop.getProperty("weborapacheoriis") != null)
/*       */               {
/*  4812 */                 if (dcprop.getProperty("weborapacheoriis").equals(dcprop.getProperty("resourceType")))
/*       */                 {
/*  4814 */                   row.add("Monitoring Initiated Succesfully");
/*       */                 }
/*       */                 else
/*       */                 {
/*  4818 */                   row.add(dcprop.getProperty("error"));
/*       */                 }
/*       */                 
/*       */               }
/*       */               else {
/*  4823 */                 row.add("Monitoring Initiated Succesfully");
/*       */               }
/*       */               
/*       */ 
/*  4827 */               String link = "";
/*  4828 */               if (dcprop.getProperty("resourceType").equals("FreeBSD"))
/*       */               {
/*  4830 */                 link = "/showresource.do?resourceid=" + dcprop.getProperty("id") + "&type=FreeBSD / OpenBSD&moname=" + dcprop.getProperty("name") + "&method=showdetails&resourcename=" + dcprop.getProperty("name");
/*       */ 
/*       */               }
/*  4833 */               else if ((dcprop.getProperty("DISPLAYNAME") != null) && (!"".equals(dcprop.getProperty("DISPLAYNAME")))) {
/*  4834 */                 link = "/showresource.do?resourceid=" + dcprop.getProperty("id") + "&type=" + dcprop.getProperty("resourceType") + "&moname=" + dcprop.getProperty("name") + "&method=showdetails&resourcename=" + dcprop.getProperty("DISPLAYNAME");
/*       */               } else {
/*  4836 */                 link = "/showresource.do?resourceid=" + dcprop.getProperty("id") + "&type=" + dcprop.getProperty("resourceType") + "&moname=" + dcprop.getProperty("name") + "&method=showdetails&resourcename=" + dcprop.getProperty("name");
/*       */               }
/*       */               
/*  4839 */               row.add(link);
/*       */             }
/*  4841 */             list.add(row);
/*       */             
/*  4843 */             String resType = dcprop.getProperty("resourceType");
/*       */             
/*  4845 */             if ((resType.equals("JBOSS-server")) || (resType.equals("Tomcat-server")))
/*       */             {
/*  4847 */               if (dcprop.getProperty("WTEnabled").equals("true")) {
/*  4848 */                 ArrayList row1 = new ArrayList();
/*  4849 */                 row1.add(givenhost);
/*  4850 */                 if (dcprop.getProperty("useWebServerPort").equals("true")) {
/*  4851 */                   row1.add(tempPort);
/*       */                 }
/*       */                 else {
/*  4854 */                   row1.add(dcprop.getProperty("wtaport"));
/*       */                 }
/*  4856 */                 if (dcprop.getProperty("wta_error") != null) {
/*  4857 */                   row1.add("Failed");
/*  4858 */                   row1.add(dcprop.getProperty("wta_error"));
/*       */                 }
/*       */                 else {
/*  4861 */                   row1.add("Success");
/*  4862 */                   row1.add("Web Transaction Monitoring Initiated Successfully");
/*  4863 */                   String link = "/showresource.do?resourceid=" + dcprop.getProperty("id") + "&type=WTA&moname=" + dcprop.getProperty("wta_name") + "&method=showdetails&resourcename=" + dcprop.getProperty("wta_name");
/*  4864 */                   row1.add(link);
/*       */                 }
/*  4866 */                 list.add(row1);
/*       */               }
/*       */               
/*       */             }
/*       */             
/*       */ 
/*       */           }
/*       */           else
/*       */           {
/*       */ 
/*  4876 */             failedHostNames.add(givenhost);
/*  4877 */             ArrayList row = new ArrayList();
/*  4878 */             row.add(givenhost);
/*       */             
/*  4880 */             String resourceType = dcprop.getProperty("resourceType");
/*  4881 */             resourceType = resourceType == null ? dcprop.getProperty("os") : resourceType;
/*  4882 */             if ((resourceType != null) && ((resourceType.equals("Linux")) || (resourceType.toLowerCase().indexOf("novell") != -1) || (resourceType.toLowerCase().indexOf("windows") != -1) || (resourceType.equals("SUN")) || (resourceType.equals("SUN PC")) || (resourceType.equals("Node")) || (resourceType.equals("SnmpNode")) || (resourceType.equals(".Net")) || (resourceType.equals("SnmpNode")) || (resourceType.equals("AIX")) || (resourceType.equals("AS400/iSeries")) || (resourceType.equals("HP-UX")) || (resourceType.equals("HP-TRU64")) || (resourceType.equals("FreeBSD / OpenBSD")) || (resourceType.equals("OpenBSD")) || (resourceType.equals("Mac OS"))))
/*       */             {
/*  4884 */               row.add("-");
/*       */             }
/*       */             else
/*       */             {
/*  4888 */               row.add(tempPort);
/*       */             }
/*  4890 */             if (isTestAvailability) {
/*  4891 */               row.add("Not Present");
/*  4892 */               row.add("");
/*       */             }
/*       */             else {
/*  4895 */               row.add("Failed");
/*  4896 */               row.add(FormatUtil.getString(dcprop.getProperty("error")));
/*       */             }
/*  4898 */             onehostfailed = true;
/*  4899 */             list.add(row);
/*       */           }
/*       */           
/*       */ 
/*       */ 
/*       */ 
/*  4905 */           if (addtoapplication.equals("true"))
/*       */           {
/*  4907 */             internaltype = dcprop.getProperty("resourceType");
/*  4908 */             if ((internaltype.equals("WindowsNT")) || (internaltype.equals("Windows 2000")))
/*  4909 */               internaltype = "Windows";
/*  4910 */             if ((internaltype.equals("SUN")) || (internaltype.equals("SUN PC")))
/*  4911 */               internaltype = "Sun Solaris";
/*  4912 */             if ((internaltype.equals("Node")) || (internaltype.equals("SnmpNode")))
/*  4913 */               internaltype = "Unknown";
/*  4914 */             if (successful)
/*       */             {
/*  4916 */               String[] resources = { dcprop.getProperty("id") };
/*  4917 */               Vector forUpdate = new Vector();
/*  4918 */               String[] selMonitorGroups = request.getParameterValues("haid");
/*  4919 */               this.mo.updateManagedApplicationResources(selMonitorGroups, "xyz", resources, null, forUpdate);
/*  4920 */               if (forUpdate != null)
/*       */               {
/*  4922 */                 for (int i = 0; i < forUpdate.size(); i++)
/*       */                 {
/*  4924 */                   EnterpriseUtil.addUpdateQueryToFile(forUpdate.get(i) + "");
/*       */                 }
/*       */               }
/*       */             }
/*       */           }
/*       */         }
/*       */         
/*  4931 */         if (dcprop.getProperty("id") != null) {
/*  4932 */           request.setAttribute("resourceid", dcprop.getProperty("id"));
/*  4933 */           if (ClientDBUtil.isPrivilegedUser(request))
/*  4934 */             com.adventnet.appmanager.util.RestrictedUsersViewUtil.insertIntoAMUserResourcesTableandsynchtoAAM(request.getRemoteUser(), Long.valueOf(dcprop.getProperty("id")).longValue());
/*       */         }
/*       */       }
/*       */     }
/*  4938 */     request.setAttribute("discoverystatus", list);
/*  4939 */     String redirectTo = request.getParameter("redirectto");
/*  4940 */     if (redirectTo != null)
/*       */     {
/*  4942 */       return new ActionForward(redirectTo);
/*       */     }
/*  4944 */     if (addtoapplication.equals("true"))
/*       */     {
/*  4946 */       if (!serverType.equals("All"))
/*       */       {
/*  4948 */         String wiz = request.getParameter("wiz");
/*  4949 */         if (wiz == null)
/*       */         {
/*  4951 */           if (onehostfailed)
/*       */           {
/*  4953 */             Iterator failedHost = failedHostNames.iterator();
/*  4954 */             String hostnames = "";
/*  4955 */             while (failedHost.hasNext())
/*       */             {
/*  4957 */               hostnames = hostnames + (String)failedHost.next() + ",";
/*       */             }
/*  4959 */             ((AMActionForm)form).setHost(hostnames.substring(0, hostnames.lastIndexOf(",")));
/*  4960 */             return reloadHostDiscoveryForm(mapping, form, request, response);
/*       */           }
/*       */           
/*       */ 
/*  4964 */           if (com.adventnet.appmanager.util.Constants.isIt360)
/*       */           {
/*  4966 */             return new ActionForward("/adminAction.do?method=reloadHostDiscoveryForm&type=SYSTEM:9999");
/*       */           }
/*       */           
/*       */ 
/*  4970 */           return new ActionForward("/showapplication.do?haid=" + request.getParameter("haid") + "&method=showApplication");
/*       */         }
/*       */         
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*  4981 */         String value = request.getParameter("value");
/*  4982 */         if (onehostfailed)
/*       */         {
/*       */ 
/*  4985 */           request.setAttribute("showwiz3", "true");
/*  4986 */           return reloadHostDiscoveryForm(mapping, form, request, response);
/*       */         }
/*  4988 */         if (value == null)
/*       */         {
/*       */ 
/*  4991 */           return mapping.findForward("associatemonitorsinwiz");
/*       */         }
/*       */         
/*       */ 
/*       */ 
/*  4996 */         return mapping.findForward("HAProfiles");
/*       */       }
/*       */     }
/*       */     
/*       */ 
/*  5001 */     if (onehostfailed)
/*       */     {
/*  5003 */       Iterator failedHost = failedHostNames.iterator();
/*  5004 */       String hostnames = "";
/*  5005 */       while (failedHost.hasNext())
/*       */       {
/*  5007 */         hostnames = hostnames + (String)failedHost.next() + ",";
/*       */       }
/*  5009 */       ((AMActionForm)form).setHost(hostnames.substring(0, hostnames.lastIndexOf(",")));
/*  5010 */       return reloadHostDiscoveryForm(mapping, form, request, response);
/*       */     }
/*       */     
/*       */ 
/*  5014 */     if (isTestAvailability) {
/*  5015 */       return reloadHostDiscoveryForm(mapping, form, request, response);
/*       */     }
/*       */     
/*  5018 */     return new ActionForward("/adminAction.do?method=reloadHostDiscoveryForm&type=" + serverTypeWithPort + "&haid=" + request.getParameter("haid"));
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */   public Properties setSnmpValuesFromRequest(String hostIP, HttpServletRequest request)
/*       */   {
/*  5025 */     Properties snmpProperties = new Properties();
/*  5026 */     String isCM = request.getParameter("SNMPCredentialDetails");
/*  5027 */     if (!"cmSNMP".equalsIgnoreCase(isCM))
/*       */     {
/*  5029 */       NewMonitorConf newMonConf = new NewMonitorConf();
/*  5030 */       Properties snmpEncodedVals = NewMonitorConf.getSNMPMonitorEncodedValsFromDB(request);
/*  5031 */       String snmpVersion = request.getParameter("snmpVersionValue");
/*  5032 */       String timeOut = request.getParameter("timeout");
/*  5033 */       snmpProperties.setProperty("HOST", hostIP);
/*  5034 */       timeOut = (timeOut == null) || (timeOut.equals("")) ? "5" : timeOut;
/*  5035 */       String snmpPort = request.getParameter("snmpPort");
/*  5036 */       snmpProperties.setProperty("timeout", timeOut);
/*  5037 */       snmpProperties.setProperty("SNMPPORT", (snmpPort != null) && (!snmpPort.equals("")) ? snmpPort : "161");
/*       */       
/*  5039 */       if ("v3".equalsIgnoreCase(snmpVersion)) {
/*  5040 */         String snmpUserName = Translate.decode(request.getParameter("snmpUserName"));
/*  5041 */         String snmpContextName = Translate.decode(request.getParameter("snmpContextName"));
/*  5042 */         String securityLevel = request.getParameter("snmpSecurityLevel");
/*  5043 */         snmpProperties.setProperty("securityLevel", securityLevel);
/*  5044 */         snmpProperties.setProperty("SNMPVERSION", "V3");
/*  5045 */         snmpProperties.setProperty("SNMPUserName", snmpUserName);
/*  5046 */         snmpProperties.setProperty("contextName", snmpContextName);
/*  5047 */         if ((securityLevel.equalsIgnoreCase("AUTHNOPRIV")) || (securityLevel.equalsIgnoreCase("AUTHPRIV"))) {
/*  5048 */           String authProtoFromForm = request.getParameter("snmpAuthProtocol");
/*  5049 */           String authProtocol = authProtoFromForm.equalsIgnoreCase("MD5") ? "MD5" : "SHA";
/*  5050 */           snmpProperties.setProperty("authProtocol", authProtocol);
/*  5051 */           String authPwdFromForm = request.getParameter("snmpAuthPassword");
/*  5052 */           if (authPwdFromForm == null) {
/*  5053 */             authPwdFromForm = (String)snmpEncodedVals.get("snmpAuthPassword");
/*       */           }
/*  5055 */           snmpProperties.setProperty("authPassword", authPwdFromForm);
/*       */         }
/*  5057 */         if (securityLevel.equalsIgnoreCase("AUTHPRIV")) {
/*  5058 */           String privPwdFromForm = request.getParameter("snmpPrivPassword");
/*  5059 */           if (privPwdFromForm == null) {
/*  5060 */             privPwdFromForm = (String)snmpEncodedVals.get("snmpPrivPassword");
/*       */           }
/*  5062 */           snmpProperties.setProperty("privPassword", privPwdFromForm);
/*       */           
/*  5064 */           String privProtocol = "DES";
/*  5065 */           snmpProperties.setProperty("privProtocol", privProtocol);
/*       */         }
/*       */       }
/*       */       else {
/*  5069 */         String communityString = request.getParameter("snmpCommunityString");
/*  5070 */         if (communityString == null) {
/*  5071 */           communityString = (String)snmpEncodedVals.get("snmpCommunityString");
/*       */         }
/*  5073 */         String snmpCommunity = Translate.decode(communityString);
/*  5074 */         snmpProperties.setProperty("SNMPVERSION", "V1V2");
/*  5075 */         snmpProperties.setProperty("SNMPCOMMUNITY", snmpCommunity);
/*       */       }
/*       */     }
/*       */     else
/*       */     {
/*  5080 */       snmpProperties = getSnmpProps(request);
/*       */     }
/*  5082 */     return snmpProperties;
/*       */   }
/*       */   
/*       */   public Properties getSnmpProps(HttpServletRequest request)
/*       */   {
/*  5087 */     return this.credUtil.getSnmpProps(request, null);
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public HttpServletRequest sendMessagesErrorsAndForward(String message, String messageProperty, String messageType, HttpServletRequest request, AMActionForm amform, String type)
/*       */   {
/*  5128 */     ActionMessages messages = new ActionMessages();
/*  5129 */     ActionErrors errors = new ActionErrors();
/*  5130 */     if (messageType.equalsIgnoreCase("error"))
/*       */     {
/*  5132 */       errors.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage(message));
/*  5133 */       saveErrors(request, errors);
/*       */     }
/*  5135 */     else if (messageType.equalsIgnoreCase("message"))
/*       */     {
/*  5137 */       messages.add(messageProperty, new ActionMessage(message));
/*  5138 */       saveMessages(request, messages);
/*       */     }
/*  5140 */     amform.setType(type);
/*  5141 */     request.setAttribute("type", type);
/*  5142 */     return request;
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward reloadHostDiscoveryForm(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*  5151 */     AdminActions classObj = new AdminActions();
/*       */     
/*       */ 
/*       */ 
/*       */ 
/*  5156 */     String haidFromreq = request.getParameter("haid");
/*  5157 */     String hideFieldsForIT360 = request.getParameter("hideFieldsForIT360");
/*  5158 */     if (hideFieldsForIT360 == null)
/*       */     {
/*  5160 */       hideFieldsForIT360 = (String)request.getAttribute("hideFieldsForIT360");
/*       */     }
/*  5162 */     request.setAttribute("hideFieldsForIT360", hideFieldsForIT360);
/*  5163 */     if (com.adventnet.appmanager.util.Constants.isIt360)
/*       */     {
/*  5165 */       request.setAttribute("oldtab", "6");
/*       */     }
/*  5167 */     String workingdir = null;
/*  5168 */     ActionMessages messages1 = new ActionMessages();
/*  5169 */     String add = null;
/*       */     try
/*       */     {
/*  5172 */       add = InetAddress.getLocalHost().getHostName();
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/*  5176 */       e.printStackTrace();
/*       */     }
/*  5178 */     if (request.getParameter("wiz") != null)
/*       */     {
/*  5180 */       ArrayList rows = this.mo.getPropertiesList("select DISPLAYNAME,TYPE from AM_ManagedObject,AM_PARENTCHILDMAPPER where childid=resourceid AND parentid=" + request.getParameter("haid"));
/*  5181 */       request.setAttribute("associatedmonitors", rows);
/*       */     }
/*  5183 */     AMActionForm amform = (AMActionForm)form;
/*  5184 */     String os = System.getProperty("os.name");
/*  5185 */     boolean isWindows = false;
/*  5186 */     if ((os.startsWith("Windows")) || (os.startsWith("windows")))
/*       */     {
/*  5188 */       amform.setAppmanageros("Windows");
/*  5189 */       isWindows = true;
/*       */     }
/*       */     else
/*       */     {
/*  5193 */       amform.setAppmanageros("NotWindows");
/*       */     }
/*  5195 */     String type = null;
/*  5196 */     String typefromrequest = request.getParameter("type");
/*  5197 */     String restypefromrequest = request.getParameter("restype");
/*  5198 */     if ((typefromrequest != null) && (typefromrequest.toLowerCase().indexOf("hp-ux") != -1))
/*       */     {
/*  5200 */       typefromrequest = "HP-UX";
/*       */     }
/*       */     try
/*       */     {
/*  5204 */       if (!DBUtil.hasGlobalConfigValue("NewMonitorAccessed"))
/*       */       {
/*  5206 */         com.adventnet.appmanager.util.AppManagerUtil.insertTimeforMetrack("NewMonitorAccessed");
/*  5207 */         DBUtil.insertIntoGlobalConfig("NewMonitorAccessed", "true");
/*       */       }
/*       */     }
/*       */     catch (Exception ex) {
/*  5211 */       ex.printStackTrace();
/*       */     }
/*       */     
/*       */ 
/*  5215 */     if ((com.adventnet.appmanager.util.Constants.isIt360) && (typefromrequest != null) && (!typefromrequest.trim().equals("")) && (!typefromrequest.equals("SYSTEM:9999")) && (!typefromrequest.equals("VCenter")))
/*       */     {
/*  5217 */       String message = ClientDBUtil.getLicenseViolationMessage(typefromrequest, "ADDITION");
/*  5218 */       if ((message != null) && (!message.trim().equals("")))
/*       */       {
/*  5220 */         request = classObj.sendMessagesErrorsAndForward(FormatUtil.getString("am.webclient.wta.freeedition.notsupported"), "org.apache.struts.action.ERROR", "error", request, amform, "SYSTEM:9999");
/*  5221 */         return mapping.findForward("HostDiscoveryForm");
/*       */       }
/*       */     }
/*       */     
/*       */ 
/*  5226 */     AMConnectionPool cp = AMConnectionPool.getInstance();
/*       */     
/*       */     try
/*       */     {
/*  5230 */       if (typefromrequest.equals("VCenter"))
/*       */       {
/*  5232 */         return new ActionForward("/jsp/CreateVMWareVI.jsp");
/*       */       }
/*       */       
/*  5235 */       String qry = "select * from AM_MONITOR_TYPES WHERE TYPENAME='" + typefromrequest + "'";
/*  5236 */       ResultSet rs = AMConnectionPool.executeQueryStmt(qry);
/*  5237 */       if ((typefromrequest.equals("SiebelEnterpriseServer")) || (typefromrequest.equals("OfficeSharePointServer")) || (typefromrequest.equals("WebsphereMQ")) || (typefromrequest.equals("WTA:55555")) || (typefromrequest.equals("OracleEBS")) || (typefromrequest.equals("VMWare ESX/ESXi")) || (typefromrequest.equals("Hyper-V-Server")))
/*       */       {
/*  5239 */         FreeEditionDetails fed = FreeEditionDetails.getFreeEditionDetails();
/*  5240 */         String usrtype = fed.getUserType();
/*  5241 */         ActionMessages messages = new ActionMessages();
/*  5242 */         if (usrtype.equals("R")) {
/*  5243 */           if (typefromrequest.equals("WTA:55555")) {
/*  5244 */             if (!fed.isWebTransaction())
/*       */             {
/*  5246 */               request = classObj.sendMessagesErrorsAndForward(FormatUtil.getString("am.webclient.wta.freeedition.notsupported"), "org.apache.struts.action.ERROR", "message", request, amform, "SYSTEM:9999");
/*  5247 */               return mapping.findForward("HostDiscoveryForm");
/*       */             }
/*  5249 */             if (fed.isWTAAddonPresent())
/*       */             {
/*  5251 */               messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage(FormatUtil.getString("am.webclient.wta.upgrade.message")));
/*  5252 */               saveMessages(request, messages);
/*       */             }
/*       */           }
/*  5255 */           if (typefromrequest.equals("OracleEBS")) {
/*  5256 */             boolean isebspresent = fed.isOracleEBSAddOnPresent();
/*  5257 */             if (!fed.isOracleEBSAllowed()) {
/*  5258 */               request = classObj.sendMessagesErrorsAndForward(FormatUtil.getString("am.webclient.OracleEBS.freeedition.notsupported"), "org.apache.struts.action.ERROR", "message", request, amform, "SYSTEM:9999");
/*  5259 */               return mapping.findForward("HostDiscoveryForm");
/*       */             }
/*       */           }
/*  5262 */           if ((typefromrequest.equals("OfficeSharePointServer")) && 
/*  5263 */             (!fed.isSharePoint())) {
/*  5264 */             request = classObj.sendMessagesErrorsAndForward(FormatUtil.getString("am.webclient.sharepoint.freeedition.notsupported"), "org.apache.struts.action.ERROR", "message", request, amform, "SYSTEM:9999");
/*  5265 */             return mapping.findForward("HostDiscoveryForm");
/*       */           }
/*       */           
/*  5268 */           if ((typefromrequest.equals("WebsphereMQ")) && 
/*  5269 */             (!fed.isMqSeries())) {
/*  5270 */             request = classObj.sendMessagesErrorsAndForward(FormatUtil.getString("am.webclient.mqseries.freeedition.notsupported"), "org.apache.struts.action.ERROR", "message", request, amform, "SYSTEM:9999");
/*  5271 */             return mapping.findForward("HostDiscoveryForm");
/*       */           }
/*       */           
/*  5274 */           if ((typefromrequest.equals("VMWare ESX/ESXi")) && 
/*  5275 */             (!fed.isVMWare()))
/*       */           {
/*  5277 */             request = classObj.sendMessagesErrorsAndForward(FormatUtil.getString("am.webclient.vmware.freeedition.notsupported"), "org.apache.struts.action.ERROR", "message", request, amform, "SYSTEM:9999");
/*  5278 */             return mapping.findForward("HostDiscoveryForm");
/*       */           }
/*       */           
/*  5281 */           if ((typefromrequest.equals("Hyper-V-Server")) && (!fed.isHyperV()))
/*       */           {
/*  5283 */             request = classObj.sendMessagesErrorsAndForward(FormatUtil.getString("am.webclient.hyperv.freeedition.notsupported"), "org.apache.struts.action.ERROR", "message", request, amform, "SYSTEM:9999");
/*  5284 */             return mapping.findForward("HostDiscoveryForm");
/*       */           }
/*       */           
/*  5287 */           if (typefromrequest.equals("Amazon"))
/*       */           {
/*  5289 */             if (!fed.isAmazon())
/*       */             {
/*  5291 */               request = classObj.sendMessagesErrorsAndForward(FormatUtil.getString("am.webclient.amazon.freeedition.notsupported"), "org.apache.struts.action.ERROR", "message", request, amform, "SYSTEM:9999");
/*  5292 */               return mapping.findForward("HostDiscoveryForm");
/*       */             }
/*       */           }
/*       */           
/*  5296 */           if ((typefromrequest.equals("SiebelEnterpriseServer")) && 
/*  5297 */             (!fed.isSiebelAllowed()))
/*       */           {
/*  5299 */             request = classObj.sendMessagesErrorsAndForward(FormatUtil.getString("am.webclient.siebel.freeedition.notsupported"), "org.apache.struts.action.ERROR", "message", request, amform, "SYSTEM:9999");
/*  5300 */             return mapping.findForward("HostDiscoveryForm");
/*       */           }
/*       */         }
/*       */       }
/*       */       
/*       */ 
/*       */ 
/*       */ 
/*  5308 */       if (typefromrequest.equals("WTA:55555"))
/*       */       {
/*  5310 */         if ((com.adventnet.appmanager.util.Constants.getUnSupportedAsList() != null) && (com.adventnet.appmanager.util.Constants.getUnSupportedAsList().size() > 0) && (com.adventnet.appmanager.util.Constants.getUnSupportedAsList().contains("WTA")))
/*       */         {
/*  5312 */           request = classObj.sendMessagesErrorsAndForward(FormatUtil.getString("am.webclient.wta.freeedition.notsupported"), "org.apache.struts.action.ERROR", "message", request, amform, "SYSTEM:9999");
/*  5313 */           return mapping.findForward("HostDiscoveryForm");
/*       */         }
/*       */       }
/*       */       
/*       */ 
/*  5318 */       if ((typefromrequest.equals("EMO")) && (request.getRequestURI().startsWith("/adminAction.do")))
/*       */       {
/*  5320 */         return new ActionForward("/extDeviceAction.do?method=addNewExtDevice&prodName=Site24x7", true);
/*       */       }
/*       */       
/*  5323 */       if ((typefromrequest.equals("APM-Insight-Instance")) || (typefromrequest.equals("APM-Insight-Application")))
/*       */       {
/*  5325 */         if ((com.adventnet.appmanager.util.Constants.getUnSupportedAsList() != null) && (com.adventnet.appmanager.util.Constants.getUnSupportedAsList().size() > 0) && ((com.adventnet.appmanager.util.Constants.getUnSupportedAsList().contains("APM-Insight-Application")) || (com.adventnet.appmanager.util.Constants.getUnSupportedAsList().contains("APM-Insight-Instance"))))
/*       */         {
/*       */ 
/*  5328 */           ActionMessages messages = new ActionMessages();
/*  5329 */           messages.add("org.apache.struts.action.ERROR", new ActionMessage(FormatUtil.getString("apminsight.freeedition.notsupported")));
/*  5330 */           saveMessages(request, messages);
/*       */         }
/*  5332 */         return new ActionForward("/apminsight/home.do?method=viewNewMonitorPage", true);
/*       */       }
/*       */       
/*       */ 
/*  5336 */       if (typefromrequest.equals(com.me.apm.cluster.windows.util.WindowsClusterUtil.getResourceTypeName()))
/*       */       {
/*  5338 */         if (!com.me.apm.cluster.windows.util.WindowsClusterUtil.getInstance().isFreeEditionSupported())
/*       */         {
/*  5340 */           request = classObj.sendMessagesErrorsAndForward(FormatUtil.getString("am.webclient.cluster.windows.freeedition.notsupported"), "org.apache.struts.action.ERROR", "message", request, amform, "SYSTEM:9999");
/*  5341 */           return mapping.findForward("HostDiscoveryForm");
/*       */         }
/*       */       }
/*       */       
/*       */ 
/*  5346 */       if ((com.adventnet.appmanager.util.Constants.getUnSupportedAsList() != null) && (com.adventnet.appmanager.util.Constants.getUnSupportedAsList().size() > 0) && ((com.adventnet.appmanager.util.Constants.getUnSupportedAsList().contains(typefromrequest)) || (com.adventnet.appmanager.util.Constants.getUnSupportedAsList().contains(restypefromrequest)))) {
/*  5347 */         ActionMessages messages = new ActionMessages();
/*  5348 */         String link = "<a style=\"font-size: 10px;\" href=\"mailto:" + FormatUtil.getString("product.talkback.mailid") + "\" class=\"new-login-email-link\"><b>" + FormatUtil.getString("product.talkback.mailid") + "</b></a> ";
/*  5349 */         messages.add("org.apache.struts.action.ERROR", new ActionMessage(FormatUtil.getString("am.webclient.monitortype.notsupported", new String[] { link })));
/*  5350 */         saveMessages(request, messages);
/*  5351 */         type = "SYSTEM:9999";
/*  5352 */         amform.setType(type);
/*  5353 */         request.setAttribute("type", type);
/*  5354 */         return mapping.findForward("HostDiscoveryForm");
/*       */       }
/*  5356 */       if (rs.next())
/*       */       {
/*  5358 */         String basetype = rs.getString(3);
/*  5359 */         String amcreated = rs.getString(6);
/*  5360 */         if ((amcreated != null) && (amcreated.equals("YES"))) {
/*  5361 */           request.setAttribute("type", typefromrequest);
/*  5362 */           String wiz1 = request.getParameter("wiz");
/*  5363 */           request.setAttribute("wiz", wiz1);
/*  5364 */           ArrayList args = NewMonitorUtil.getArgsforConfMon(typefromrequest, request);
/*  5365 */           request.setAttribute("args", args);
/*       */           
/*       */ 
/*  5368 */           if ((typefromrequest != null) && (typefromrequest.equals("ActiveDirectory")) && (!isWindows) && (!EnterpriseUtil.isAdminServer()))
/*       */           {
/*  5370 */             request = classObj.sendMessagesErrorsAndForward(FormatUtil.getString("am.webclient.newresourcetypes.activedirectory.text"), "org.apache.struts.action.ERROR", "message", request, amform, "SYSTEM:9999");
/*       */             
/*  5372 */             return new ActionForward("/adminAction.do?method=reloadHostDiscoveryForm&type=Linux&restype=Linux");
/*       */           }
/*       */           
/*       */ 
/*  5376 */           if ((typefromrequest != null) && (typefromrequest.equals("XenApp")) && (!isWindows) && (!EnterpriseUtil.isAdminServer()))
/*       */           {
/*  5378 */             request = classObj.sendMessagesErrorsAndForward(FormatUtil.getString("am.webclient.newresourcetypes.xenapp.text"), "org.apache.struts.action.ERROR", "message", request, amform, "SYSTEM:9999");
/*  5379 */             return new ActionForward("/adminAction.do?method=reloadHostDiscoveryForm&type=Linux&restype=Linux");
/*       */           }
/*       */           
/*       */ 
/*  5383 */           if ((typefromrequest != null) && (typefromrequest.equals("OfficeSharePointServer")) && (!isWindows) && (!EnterpriseUtil.isAdminServer()))
/*       */           {
/*  5385 */             request = classObj.sendMessagesErrorsAndForward(FormatUtil.getString("am.webclient.newresourcetypes.officesharepointserver.text"), "org.apache.struts.action.ERROR", "message", request, amform, "SYSTEM:9999");
/*       */             
/*  5387 */             return new ActionForward("/adminAction.do?method=reloadHostDiscoveryForm&type=Linux&restype=Linux");
/*       */           }
/*       */           
/*       */ 
/*  5391 */           if ((typefromrequest != null) && (typefromrequest.equals("BizTalkServer")) && (!isWindows) && (!EnterpriseUtil.isAdminServer()))
/*       */           {
/*  5393 */             request = classObj.sendMessagesErrorsAndForward(FormatUtil.getString("am.webclient.newresourcetypes.biztalk.text"), "org.apache.struts.action.ERROR", "message", request, amform, "SYSTEM:9999");
/*       */             
/*  5395 */             return new ActionForward("/adminAction.do?method=reloadHostDiscoveryForm&type=Linux&restype=Linux");
/*       */           }
/*       */           
/*       */ 
/*  5399 */           if ((typefromrequest != null) && (typefromrequest.equals("Exchange-server")) && (!isWindows) && (!EnterpriseUtil.isAdminServer()))
/*       */           {
/*  5401 */             request = classObj.sendMessagesErrorsAndForward(FormatUtil.getString("am.webclient.newresourcetypes.exchangeserver.text"), "org.apache.struts.action.ERROR", "message", request, amform, "SYSTEM:9999");
/*  5402 */             return new ActionForward("/adminAction.do?method=reloadHostDiscoveryForm&type=Linux&restype=Linux");
/*       */           }
/*       */           
/*       */ 
/*  5406 */           if ((typefromrequest != null) && (typefromrequest.equals("Microsoft MQ")) && (!isWindows) && (!EnterpriseUtil.isAdminServer()))
/*       */           {
/*  5408 */             request = classObj.sendMessagesErrorsAndForward(FormatUtil.getString("am.webclient.newresourcetypes.msmq.text"), "org.apache.struts.action.ERROR", "message", request, amform, "SYSTEM:9999");
/*       */             
/*  5410 */             return new ActionForward("/adminAction.do?method=reloadHostDiscoveryForm&type=Linux&restype=Linux");
/*       */           }
/*       */           
/*  5413 */           if ((typefromrequest != null) && (typefromrequest.equals("Hyper-V-Server")) && (!isWindows) && (!EnterpriseUtil.isAdminServer()))
/*       */           {
/*  5415 */             request = classObj.sendMessagesErrorsAndForward(FormatUtil.getString("am.webclient.newresourcetypes.hypervserver.text"), "org.apache.struts.action.ERROR", "message", request, amform, "SYSTEM:9999");
/*       */             
/*  5417 */             return new ActionForward("/adminAction.do?method=reloadHostDiscoveryForm&type=Linux&restype=Linux");
/*       */           }
/*       */           
/*  5420 */           if ((typefromrequest != null) && (typefromrequest.equals("ViewConnectionBroker")) && (!isWindows) && (!EnterpriseUtil.isAdminServer()))
/*       */           {
/*  5422 */             request = classObj.sendMessagesErrorsAndForward(FormatUtil.getString("am.webclient.newresourcetypes.vmware.view.broker.text"), "org.apache.struts.action.ERROR", "message", request, amform, "SYSTEM:9999");
/*       */             
/*  5424 */             return new ActionForward("/adminAction.do?method=reloadHostDiscoveryForm&type=Linux&restype=Linux");
/*       */           }
/*       */           
/*       */ 
/*  5428 */           if ((typefromrequest != null) && (typefromrequest.equals(com.me.apm.cluster.windows.util.WindowsClusterUtil.getResourceTypeName())) && (!isWindows) && (!EnterpriseUtil.isAdminServer()))
/*       */           {
/*  5430 */             request = classObj.sendMessagesErrorsAndForward(FormatUtil.getString("am.webclient.newresourcetypes.windowscluster.text"), "org.apache.struts.action.ERROR", "message", request, amform, "SYSTEM:9999");
/*  5431 */             return new ActionForward("/adminAction.do?method=reloadHostDiscoveryForm&type=Linux&restype=Linux");
/*       */           }
/*       */           
/*       */ 
/*  5435 */           if ((typefromrequest != null) && (typefromrequest.equals(com.me.apm.msdynamics.crm.util.MSDynamicsCRMUtil.getResourceTypeName())) && (!isWindows) && (!EnterpriseUtil.isAdminServer()))
/*       */           {
/*  5437 */             request = classObj.sendMessagesErrorsAndForward(FormatUtil.getString("am.webclient.newresourcetypes.msdynamicscrm.text"), "org.apache.struts.action.ERROR", "message", request, amform, "SYSTEM:9999");
/*  5438 */             return new ActionForward("/adminAction.do?method=reloadHostDiscoveryForm&type=Linux&restype=Linux");
/*       */           }
/*       */           
/*  5441 */           if ((typefromrequest != null) && (typefromrequest.equals("RBM")))
/*       */           {
/*  5443 */             amform.setType(typefromrequest);
/*  5444 */             request.setAttribute("type", typefromrequest);
/*  5445 */             String introtab = request.getParameter("showintrotab");
/*  5446 */             String dontshowintrotab = request.getParameter("donshowagain");
/*  5447 */             if ((introtab != null) || (dontshowintrotab != null))
/*       */             {
/*  5449 */               Properties argsasprops = new Properties();
/*  5450 */               argsasprops.setProperty("browserType", "3");
/*  5451 */               request.setAttribute("argsasprops", argsasprops);
/*  5452 */               return new ActionForward("/jsp/RBM.jsp");
/*       */             }
/*       */             
/*  5455 */             introtab = CustomExpressionUtil.getRBMIntroTab();
/*  5456 */             if ("true".equals(introtab)) {
/*  5457 */               dontshowintrotab = "false";
/*       */             }
/*  5459 */             request.setAttribute("donshowagain", dontshowintrotab);
/*  5460 */             request.setAttribute("showintrotab", introtab);
/*  5461 */             return new ActionForward("/jsp/RBM_Intro.jsp");
/*       */           }
/*       */           
/*  5464 */           if ((typefromrequest != null) && (request.getAttribute("argsasprops") != null) && (com.adventnet.appmanager.dbcache.ConfMonitorConfiguration.getInstance().isConfMonitor(typefromrequest))) {
/*  5465 */             Properties argsasprops = (Properties)request.getAttribute("argsasprops");
/*  5466 */             Enumeration en = argsasprops.propertyNames();
/*  5467 */             while (en.hasMoreElements())
/*       */             {
/*  5469 */               String key = (String)en.nextElement();
/*  5470 */               if (key.toLowerCase().contains("username")) {
/*  5471 */                 String val = argsasprops.getProperty(key);
/*  5472 */                 val = StrUtil.findReplace(val, "\\", "\\\\");
/*  5473 */                 argsasprops.setProperty(key, val);
/*       */               }
/*       */             }
/*  5476 */             request.setAttribute("argsasprops", argsasprops);
/*       */           }
/*       */           
/*  5479 */           return new ActionForward("/jsp/newConfType.jsp?haid=" + amform.getHaid() + "&customType=true");
/*       */         }
/*  5481 */         if (basetype != null)
/*       */         {
/*  5483 */           if (basetype.equals("Script Monitor")) {
/*  5484 */             request.setAttribute("type", typefromrequest);
/*  5485 */             String wiz1 = request.getParameter("wiz");
/*  5486 */             request.setAttribute("wiz", wiz1);
/*  5487 */             return new ActionForward("/jsp/newscript.jsp?haid=" + amform.getHaid() + "&customType=true");
/*       */           }
/*       */         }
/*       */       }
/*  5491 */       AMConnectionPool.closeStatement(rs);
/*       */     }
/*       */     catch (Exception exc)
/*       */     {
/*  5495 */       exc.printStackTrace();
/*       */     }
/*       */     
/*       */ 
/*       */ 
/*       */     try
/*       */     {
/*  5502 */       if ("SYSTEM:9999".equalsIgnoreCase(typefromrequest))
/*       */       {
/*  5504 */         typefromrequest = amform.getOs();
/*  5505 */         if ((typefromrequest != null) && (typefromrequest.toLowerCase().indexOf("window") != -1))
/*       */         {
/*  5507 */           typefromrequest = "Windows";
/*       */         }
/*       */       }
/*  5510 */       if (typefromrequest.toLowerCase().indexOf("as400") != -1)
/*       */       {
/*  5512 */         typefromrequest = "AS400";
/*       */       }
/*  5514 */       if (this.preConfMap.containsKey(typefromrequest))
/*       */       {
/*  5516 */         if (com.adventnet.appmanager.util.Constants.serverTypes.toLowerCase().indexOf(typefromrequest.toLowerCase().trim()) != -1)
/*       */         {
/*  5518 */           if (typefromrequest.toLowerCase().indexOf("freebsd") != -1)
/*       */           {
/*  5520 */             typefromrequest = "FreeBSD";
/*       */           }
/*  5522 */           amform.setType(typefromrequest);
/*  5523 */           if (typefromrequest.toLowerCase().startsWith("sun"))
/*       */           {
/*  5525 */             typefromrequest = "SUN";
/*       */           }
/*       */         }
/*  5528 */         request.setAttribute("type", typefromrequest);
/*  5529 */         String wiz1 = request.getParameter("wiz");
/*  5530 */         request.setAttribute("wiz", wiz1);
/*  5531 */         ArrayList args = NewMonitorUtil.getArgsforConfMon(typefromrequest, request);
/*  5532 */         request.setAttribute("args", args);
/*  5533 */         if (com.adventnet.appmanager.util.Constants.sqlManager) {
/*  5534 */           return mapping.findForward("HostDiscoveryForm");
/*       */         }
/*  5536 */         return new ActionForward("/jsp/newConfType.jsp?haid=" + amform.getHaid() + "&customType=true");
/*       */       }
/*       */     }
/*       */     catch (Exception ex)
/*       */     {
/*  5541 */       ex.printStackTrace();
/*       */     }
/*       */     
/*       */ 
/*       */ 
/*       */ 
/*  5547 */     if (typefromrequest != null)
/*       */     {
/*  5549 */       if (typefromrequest.equals("UrlMonitor"))
/*       */       {
/*       */ 
/*  5552 */         amform.setType(typefromrequest);
/*  5553 */         request.setAttribute("type", typefromrequest);
/*  5554 */         String wiz = request.getParameter("wiz");
/*  5555 */         if (wiz == null) {
/*  5556 */           return mapping.findForward("newurlconf");
/*       */         }
/*  5558 */         return mapping.findForward("urlconf");
/*       */       }
/*  5560 */       if (typefromrequest.equals("UrlSeq"))
/*       */       {
/*       */ 
/*  5563 */         amform.setType(typefromrequest);
/*  5564 */         request.setAttribute("type", typefromrequest);
/*       */         
/*  5566 */         String urlsequenceid = (String)request.getAttribute("sequenceid");
/*  5567 */         if (urlsequenceid != null)
/*       */         {
/*  5569 */           messages1.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("urlmonitor.success", "<a href='/showresource.do?resourceid=" + urlsequenceid + "&method=showResourceForResourceID'>" + FormatUtil.getString("am.webclient.monitorgroupdetails.monitordetails.text") + "</a>"));
/*  5570 */           saveMessages(request, messages1);
/*       */ 
/*       */         }
/*       */         else
/*       */         {
/*  5575 */           messages1.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("appmanager.error", FormatUtil.getString("am.webclient.hostdiscovery.7sp1.urlseq.message", new String[] { "/servlet/Download", "showresource.do?method=showResourceTypes&direct=true&network=UrlSeq&detailspage=true" })));
/*  5576 */           saveMessages(request, messages1);
/*       */         }
/*       */         
/*       */ 
/*  5580 */         return mapping.findForward("urlseq");
/*       */       }
/*  5582 */       if (typefromrequest.equals("Custom-Application"))
/*       */       {
/*  5584 */         amform.setType(typefromrequest);
/*  5585 */         request.setAttribute("type", typefromrequest);
/*  5586 */         return new ActionForward("/jsp/cam_newcam.jsp?haid=" + amform.getHaid());
/*       */       }
/*  5588 */       if ((typefromrequest.equals("RBM URL")) || (typefromrequest.equals("RBM")) || (typefromrequest.equals("RBMMonitor")))
/*       */       {
/*  5590 */         amform.setType(typefromrequest);
/*  5591 */         request.setAttribute("type", typefromrequest);
/*  5592 */         return new ActionForward("/jsp/RBM.jsp");
/*       */       }
/*  5594 */       if ((typefromrequest.equals("Script Monitor")) || (typefromrequest.equals("QENGINE")) || (typefromrequest.equals("file")) || (typefromrequest.equals("directory")) || (typefromrequest.equals("File System Monitor")) || (typefromrequest.equals("Ping Monitor")))
/*       */       {
/*  5596 */         amform.setType(typefromrequest);
/*  5597 */         if ((typefromrequest.equals("file")) || (typefromrequest.equals("directory")))
/*       */         {
/*  5599 */           request.setAttribute("type", "File System Monitor");
/*  5600 */           amform.setType("File System Monitor");
/*  5601 */         } else { if (typefromrequest.equals("Ping Monitor"))
/*       */           {
/*  5603 */             request.setAttribute("type", "Ping Monitor");
/*  5604 */             amform.setType("Ping Monitor");
/*  5605 */             return new ActionForward("/jsp/pingMonitor.jsp");
/*       */           }
/*       */           
/*       */ 
/*       */ 
/*  5610 */           request.setAttribute("type", typefromrequest);
/*       */         }
/*  5612 */         String wiz1 = request.getParameter("wiz");
/*  5613 */         request.setAttribute("wiz", wiz1);
/*  5614 */         if (typefromrequest.equals("QENGINE"))
/*       */         {
/*  5616 */           String qenginehome = (String)((Hashtable)request.getSession().getServletContext().getAttribute("globalconfig")).get("qenginehome");
/*  5617 */           if (qenginehome != null)
/*       */           {
/*  5619 */             amform.setQengineHome(qenginehome);
/*       */           }
/*  5621 */           return new ActionForward("/jsp/newQEnginescript.jsp");
/*       */         }
/*       */         
/*  5624 */         if ((typefromrequest.equals("file")) || (typefromrequest.equals("directory")) || (typefromrequest.equals("File System Monitor")) || (typefromrequest.equals("Script Monitor"))) {
/*  5625 */           HashMap credentialList = getCredListForFileDirAndScriptMon(typefromrequest);
/*  5626 */           request.setAttribute("credentialHash", credentialList);
/*       */         }
/*       */         
/*  5629 */         return new ActionForward("/jsp/newscript.jsp?haid=" + amform.getHaid());
/*       */       }
/*       */       
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*  5640 */       if (typefromrequest.equals("Web Service"))
/*       */       {
/*  5642 */         amform.setType(typefromrequest);
/*  5643 */         request.setAttribute("type", typefromrequest);
/*  5644 */         String wiz1 = request.getParameter("wiz");
/*  5645 */         if (wiz1 != null)
/*       */         {
/*  5647 */           request.setAttribute("wiz", wiz1);
/*       */         }
/*  5649 */         return new ActionForward("/jsp/WSM.jsp?haid=" + amform.getHaid());
/*       */       }
/*  5651 */       if (typefromrequest.equals("Generic WMI"))
/*       */       {
/*  5653 */         if ((EnterpriseUtil.isAdminServer()) || (isWindows))
/*       */         {
/*  5655 */           if (!request.getParameter("method").equals("configureHostDiscovery"))
/*       */           {
/*  5657 */             amform.setDisplayname("");
/*       */           }
/*       */           else
/*       */           {
/*  5661 */             amform.setDisplayname(request.getParameter("displayname"));
/*       */           }
/*       */           
/*  5664 */           amform.setType(typefromrequest);
/*  5665 */           return new ActionForward("/jsp/NewWMIMonitor.jsp?haid=" + amform.getHaid());
/*       */         }
/*       */         
/*       */ 
/*  5669 */         ActionMessages messages = new ActionMessages();
/*       */         
/*  5671 */         messages.add("org.apache.struts.action.ERROR", new ActionMessage("am.webclient.wmi.windowscheck.text"));
/*  5672 */         saveMessages(request, messages);
/*  5673 */         type = "SYSTEM:9999";
/*       */ 
/*       */ 
/*       */       }
/*  5677 */       else if ((typefromrequest.equals("JBOSS-server")) || (typefromrequest.equals("JBoss:8080")))
/*       */       {
/*  5679 */         type = "JBoss:8080";
/*  5680 */         if (!request.getParameter("method").equals("configureHostDiscovery"))
/*       */         {
/*  5682 */           amform.setUsername("");
/*  5683 */           amform.setPassword("");
/*       */         }
/*       */       }
/*  5686 */       else if ((typefromrequest.equals("WEBLOGIC-server")) || (typefromrequest.equals("WEBLOGIC:7001")) || (typefromrequest.equals("WLI:7001")) || (typefromrequest.equals("WEBLOGIC-Integration")))
/*       */       {
/*  5688 */         if ((typefromrequest.equals("WLI:7001")) || (typefromrequest.equals("WEBLOGIC-Integration")))
/*       */         {
/*  5690 */           type = "WLI:7001";
/*  5691 */           String versionWLI = ((AMActionForm)form).getVersion();
/*  5692 */           ActionMessages messages = new ActionMessages();
/*  5693 */           if ((System.getProperty("os.name").startsWith("Windows")) || (System.getProperty("os.name").startsWith("windows")))
/*       */           {
/*  5695 */             workingdir = new File(NmsUtil.getAIM_ROOT()).getAbsoluteFile().getParentFile().getAbsolutePath();
/*       */           }
/*       */           else
/*       */           {
/*  5699 */             workingdir = new File(NmsUtil.getAIM_ROOT()).getAbsoluteFile().getParentFile().getAbsolutePath();
/*       */           }
/*  5701 */           if ((versionWLI != null) && (!EnterpriseUtil.isAdminServer()))
/*       */           {
/*  5703 */             if ((!new File("./classes/weblogicclient8_1_jmx.jar").exists()) && (!new File("./classes/weblogic/version8/weblogic.jar").exists()))
/*       */             {
/*       */ 
/*       */ 
/*  5707 */               messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("weblogicclient8.jar.missingwli1", workingdir + File.separator + "working" + File.separator + "classes" + File.separator + "weblogic" + File.separator + "version8", add));
/*  5708 */               saveMessages(request, messages);
/*       */             }
/*       */             
/*       */           }
/*       */         }
/*       */         else
/*       */         {
/*  5715 */           type = "WEBLOGIC:7001";
/*  5716 */           ActionMessages messages = new ActionMessages();
/*  5717 */           String version = ((AMActionForm)form).getVersion();
/*  5718 */           System.out.println("version is +++" + version + "-");
/*  5719 */           Vector VersionsNotConfigured = new Vector();
/*  5720 */           if ((version != null) && (version.equals("unknown")))
/*       */           {
/*  5722 */             System.out.println("inside reload discoveryform for version unknown");
/*  5723 */             String WeblogicErrorMessage = "";
/*  5724 */             if ((!new File("./classes/weblogicclient9.jar").exists()) && ((!new File("./classes/weblogic/version10/weblogic.jar").exists()) || (!new File("./classes/weblogic/version10/wlclient.jar").exists()) || (!new File("./classes/weblogic/version10/wljmsclient.jar").exists())))
/*       */             {
/*       */ 
/*  5727 */               VersionsNotConfigured.add("10.x (11g),12c");
/*       */             }
/*       */             
/*  5730 */             if ((!new File("./classes/weblogicclient9.jar").exists()) && (!new File("./classes/weblogic/version9/weblogic.jar").exists()))
/*       */             {
/*       */ 
/*  5733 */               VersionsNotConfigured.add("9");
/*       */             }
/*       */             
/*  5736 */             if ((!new File("./classes/weblogicclient8_1_jmx.jar").exists()) && (!new File("./classes/weblogic/version8/weblogic.jar").exists()))
/*       */             {
/*  5738 */               VersionsNotConfigured.add("8");
/*       */             }
/*       */             
/*  5741 */             if ((!new File("./classes/weblogicclient7_0_jmx.jar").exists()) && (!new File("./classes/weblogic/version7/weblogic.jar").exists()))
/*       */             {
/*       */ 
/*  5744 */               VersionsNotConfigured.add("7");
/*       */             }
/*       */             
/*       */ 
/*  5748 */             if ((!new File("./classes/weblogicclient6_1.jar").exists()) && (!new File("./classes/weblogic/version6/weblogic.jar").exists()))
/*       */             {
/*  5750 */               VersionsNotConfigured.add("6");
/*       */             }
/*  5752 */             Iterator itr = VersionsNotConfigured.iterator();
/*  5753 */             for (int i = 0; itr.hasNext(); i++)
/*       */             {
/*  5755 */               if (i == 0)
/*       */               {
/*  5757 */                 WeblogicErrorMessage = WeblogicErrorMessage + " " + itr.next();
/*       */               }
/*       */               else
/*       */               {
/*  5761 */                 WeblogicErrorMessage = WeblogicErrorMessage + "," + itr.next();
/*       */               }
/*       */             }
/*       */             
/*       */ 
/*  5766 */             System.out.println("versionnoitfconfigured" + VersionsNotConfigured);
/*  5767 */             System.out.println(" WeblogicErrorMessage============" + WeblogicErrorMessage);
/*       */             
/*  5769 */             if ((WeblogicErrorMessage != null) && (!WeblogicErrorMessage.equals("")))
/*       */             {
/*  5771 */               if ((hideFieldsForIT360 != null) && (hideFieldsForIT360.equals("true")))
/*       */               {
/*  5773 */                 messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("helpfiles.weblogic.jars.missing", WeblogicErrorMessage, workingdir + File.separator + "working" + File.separator + "classes", add));
/*       */               }
/*       */               else
/*       */               {
/*  5777 */                 messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("weblogic.jars.missing", WeblogicErrorMessage, workingdir + File.separator + "working" + File.separator + "classes", add));
/*       */               }
/*  5779 */               saveMessages(request, messages);
/*       */             }
/*       */           }
/*       */         }
/*       */         
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*  5823 */         if (!request.getParameter("method").equals("configureHostDiscovery"))
/*       */         {
/*  5825 */           amform.setUsername("weblogic");
/*  5826 */           amform.setPassword("weblogic");
/*       */         }
/*       */         else
/*       */         {
/*  5830 */           amform.setUsername(request.getParameter("username"));
/*  5831 */           amform.setPassword(request.getParameter("password"));
/*       */         }
/*       */         
/*       */       }
/*  5835 */       else if ((typefromrequest.equals("Tomcat-server")) || (typefromrequest.equals("Tomcat:8080")))
/*       */       {
/*  5837 */         type = "Tomcat:8080";
/*  5838 */         if (!"configureHostDiscovery".equals(request.getParameter("method")))
/*       */         {
/*  5840 */           amform.setUsername("tomcat");
/*  5841 */           amform.setPassword("tomcat");
/*       */         }
/*       */         else
/*       */         {
/*  5845 */           amform.setUsername(request.getParameter("username"));
/*  5846 */           amform.setPassword(request.getParameter("password"));
/*       */         }
/*       */       }
/*  5849 */       else if ((typefromrequest.equals("MYSQL-DB-server")) || (typefromrequest.equals("MYSQLDB:3306")))
/*       */       {
/*  5851 */         type = "MYSQLDB:3306";
/*  5852 */         if (!request.getParameter("method").equals("configureHostDiscovery"))
/*       */         {
/*  5854 */           amform.setUsername("root");
/*  5855 */           amform.setPassword("");
/*  5856 */           amform.setInstance("mysql");
/*       */         }
/*       */         else
/*       */         {
/*  5860 */           amform.setUsername(request.getParameter("username"));
/*  5861 */           amform.setPassword(request.getParameter("password"));
/*  5862 */           amform.setInstance(request.getParameter("instance"));
/*       */         }
/*       */       }
/*  5865 */       else if ((typefromrequest.equalsIgnoreCase("ORACLE-DB-server")) || (typefromrequest.equals("ORACLEDB:1521")))
/*       */       {
/*  5867 */         type = "ORACLEDB:1521";
/*  5868 */         if (!request.getParameter("method").equals("configureHostDiscovery"))
/*       */         {
/*  5870 */           amform.setUsername("system");
/*  5871 */           amform.setPassword("manager");
/*  5872 */           amform.setInstance("orcl");
/*       */         }
/*       */         else
/*       */         {
/*  5876 */           amform.setUsername(request.getParameter("username"));
/*  5877 */           amform.setPassword(request.getParameter("password"));
/*  5878 */           amform.setInstance(request.getParameter("instance"));
/*       */         }
/*       */         
/*       */       }
/*  5882 */       else if ((typefromrequest.equals("MSSQL-DB-server")) || (typefromrequest.equals("MSSQLDB:1433")))
/*       */       {
/*  5884 */         type = "MSSQLDB:1433";
/*  5885 */         if (!request.getParameter("method").equals("configureHostDiscovery"))
/*       */         {
/*  5887 */           amform.setUsername("sa");
/*  5888 */           amform.setInstance("");
/*       */         }
/*       */         else
/*       */         {
/*  5892 */           amform.setUsername(request.getParameter("username"));
/*  5893 */           amform.setPassword(request.getParameter("password"));
/*  5894 */           amform.setInstance(request.getParameter("instance"));
/*       */         }
/*       */       }
/*  5897 */       else if ((typefromrequest.equals("SYBASE-DB-server")) || (typefromrequest.equals("SYBASEDB:5000")))
/*       */       {
/*  5899 */         type = "SYBASEDB:5000";
/*  5900 */         if (!request.getParameter("method").equals("configureHostDiscovery"))
/*       */         {
/*  5902 */           amform.setUsername("sa");
/*  5903 */           amform.setInstance("");
/*       */         }
/*       */         else
/*       */         {
/*  5907 */           amform.setUsername(request.getParameter("username"));
/*  5908 */           amform.setPassword(request.getParameter("password"));
/*  5909 */           amform.setInstance(request.getParameter("instance"));
/*       */         }
/*       */       }
/*  5912 */       else if ((typefromrequest.equals("DB2-server")) || (typefromrequest.equals("DB2:50000")))
/*       */       {
/*       */         try
/*       */         {
/*  5916 */           Class.forName("com.ibm.db2.jcc.DB2Driver").newInstance();
/*       */         }
/*       */         catch (Exception e)
/*       */         {
/*  5920 */           String error = "DB2 Driver is not present.&nbsp;<a target=\"_blank\" href=\"/help/managing-business-applications/database-server-monitor.html#db2-database-server\" class=\"staticlinks\">More Info &gt;&gt;.</a>";
/*  5921 */           ActionErrors errors = new ActionErrors();
/*  5922 */           errors.add("org.apache.struts.action.GLOBAL_ERROR", new ActionError("am.discovery.db2.drivers.notpresent"));
/*  5923 */           saveErrors(request, errors);
/*       */         }
/*  5925 */         type = "DB2:50000";
/*  5926 */         if (!request.getParameter("method").equals("configureHostDiscovery"))
/*       */         {
/*  5928 */           amform.setUsername("db2admin");
/*  5929 */           amform.setInstance("SAMPLE");
/*       */         }
/*       */         else
/*       */         {
/*  5933 */           amform.setUsername(request.getParameter("username"));
/*  5934 */           amform.setPassword(request.getParameter("password"));
/*  5935 */           amform.setInstance(request.getParameter("instance"));
/*       */         }
/*       */       }
/*  5938 */       else if (typefromrequest.equals("RMI"))
/*       */       {
/*  5940 */         type = "RMI:1099";
/*  5941 */       } else if (typefromrequest.equals("RMI:1099"))
/*       */       {
/*  5943 */         type = "SYSTEM:9999";
/*       */ 
/*       */ 
/*       */       }
/*  5947 */       else if ((typefromrequest.equals("JDK1.5")) || (typefromrequest.equals("JDK1.5:1099")))
/*       */       {
/*  5949 */         type = "JDK1.5:1099";
/*  5950 */         amform.setJndiurl("/jmxrmi");
/*       */       }
/*  5952 */       else if (typefromrequest.equals("JMX1.2-MX4J-RMI"))
/*       */       {
/*  5954 */         type = "JMX1.2-MX4J-RMI:1099";
/*       */ 
/*       */       }
/*  5957 */       else if ((typefromrequest.equals("MAIL-server")) || (typefromrequest.equals("MAIL:25")))
/*       */       {
/*  5959 */         type = "MAIL:25";
/*  5960 */         if ((request.getParameter("pop") != null) && (request.getParameter("pop").equals("true")))
/*       */         {
/*  5962 */           amform.setpopenabled(true);
/*       */         }
/*       */       }
/*  5965 */       else if (typefromrequest.equals("WEB-server"))
/*       */       {
/*  5967 */         type = "WEB:80";
/*       */       }
/*  5969 */       else if (typefromrequest.equals("Apache-server"))
/*       */       {
/*  5971 */         type = "APACHE:80";
/*       */       }
/*  5973 */       else if (typefromrequest.equals("IIS-server"))
/*       */       {
/*  5975 */         type = "IIS:80";
/*       */       }
/*  5977 */       else if ((typefromrequest.equals(".Net")) || (typefromrequest.equals(".Net:9080")))
/*       */       {
/*  5979 */         if (!isWindows)
/*       */         {
/*  5981 */           ActionMessages messages = new ActionMessages();
/*  5982 */           messages.add("org.apache.struts.action.ERROR", new ActionMessage("appmanager.error", FormatUtil.getString("am.webclient.newresourcetypes.dotnetmessageforos.text", new String[] { os })));
/*  5983 */           saveMessages(request, messages);
/*  5984 */           type = "Tomcat:8080";
/*       */         }
/*       */         else
/*       */         {
/*  5988 */           type = ".Net:9080";
/*       */         }
/*       */         
/*       */ 
/*       */       }
/*  5993 */       else if (typefromrequest.equals("PHP"))
/*       */       {
/*  5995 */         type = "PHP:80";
/*       */ 
/*       */ 
/*       */       }
/*  5999 */       else if ((typefromrequest.equals("System")) || (typefromrequest.equals("Linux")) || (typefromrequest.equals("Novell")) || (typefromrequest.equals("Sun Solaris")) || (typefromrequest.equals("Windows")) || (typefromrequest.equals("Windows 2000")) || (typefromrequest.equals("Windows 2003")) || (typefromrequest.equals("Windows XP")) || (typefromrequest.equals("Windows Vista")) || (typefromrequest.equals("Windows 2008")) || (typefromrequest.equals("Windows 7")) || (typefromrequest.equals("WindowsNT")) || (typefromrequest.equals("Unknown")) || (typefromrequest.equals("SUN")) || (typefromrequest.equals("SUN PC")) || (typefromrequest.equals("AIX")) || (typefromrequest.equals("AS400/iSeries")) || (typefromrequest.equals("HP-UX / Tru64")) || (typefromrequest.equals("HP-UX")) || (typefromrequest.equals("HP-TRU64")) || (typefromrequest.equals("FreeBSD")) || (typefromrequest.equals("OpenBSD")) || (typefromrequest.equals("FreeBSD / OpenBSD")) || (typefromrequest.equals("Mac OS")) || (typefromrequest.equals("Windows 8")) || (typefromrequest.equals("Windows 10")) || (typefromrequest.equals("Windows 2012")))
/*       */       {
/*       */ 
/*       */ 
/*  6003 */         if (typefromrequest.equals("Linux"))
/*       */         {
/*  6005 */           amform.setOs("Linux");
/*  6006 */           amform.setSnmptelnetport("161");
/*  6007 */           amform.setMode("SNMP");
/*       */         }
/*  6009 */         else if (typefromrequest.equals("Novell"))
/*       */         {
/*  6011 */           amform.setOs("Novell");
/*  6012 */           amform.setSnmptelnetport("161");
/*  6013 */           amform.setMode("SNMP");
/*       */         }
/*  6015 */         else if ((typefromrequest.equals("FreeBSD")) || (typefromrequest.equals("FreeBSD / OpenBSD")))
/*       */         {
/*  6017 */           amform.setOs("FreeBSD");
/*  6018 */           amform.setSnmptelnetport("23");
/*  6019 */           amform.setMode("Telnet");
/*       */         }
/*  6021 */         else if (typefromrequest.equals("OpenBSD"))
/*       */         {
/*  6023 */           amform.setOs("OpenBSD");
/*  6024 */           amform.setSnmptelnetport("23");
/*  6025 */           amform.setMode("Telnet");
/*       */ 
/*       */         }
/*  6028 */         else if (typefromrequest.equals("Mac OS"))
/*       */         {
/*  6030 */           amform.setOs("Mac OS");
/*  6031 */           amform.setSnmptelnetport("23");
/*  6032 */           amform.setMode("Telnet");
/*       */         }
/*  6034 */         else if (typefromrequest.startsWith("Windows"))
/*       */         {
/*  6036 */           if (typefromrequest.equals("Windows")) {
/*  6037 */             amform.setOs("Windows 2000");
/*       */           } else {
/*  6039 */             amform.setOs(typefromrequest);
/*       */           }
/*  6041 */           amform.setSnmptelnetport("161");
/*  6042 */           amform.setMode("SNMP");
/*       */         }
/*  6044 */         else if ((typefromrequest.equals("Sun Solaris")) || (typefromrequest.equals("SUN")) || (typefromrequest.equals("SUN PC")))
/*       */         {
/*  6046 */           amform.setOs("SUN");
/*  6047 */           amform.setSnmptelnetport("161");
/*  6048 */           amform.setMode("SNMP");
/*       */         }
/*  6050 */         else if (typefromrequest.equals("AIX"))
/*       */         {
/*  6052 */           amform.setOs("AIX");
/*  6053 */           amform.setSnmptelnetport("23");
/*  6054 */           amform.setMode("Telnet");
/*       */         }
/*  6056 */         else if (typefromrequest.equals("AS400/iSeries"))
/*       */         {
/*  6058 */           amform.setOs("AS400/iSeries");
/*       */           
/*  6060 */           FreeEditionDetails fed = FreeEditionDetails.getFreeEditionDetails();
/*  6061 */           String usrtype = fed.getUserType();
/*  6062 */           boolean isas400present = fed.isAS400AddOnPresent();
/*       */           
/*  6064 */           if ((usrtype != null) && ((usrtype.equals("F")) || ((usrtype.equals("R")) && (!isas400present) && (!fed.isAS400Allowed())))) {
/*  6065 */             ActionMessages messages = new ActionMessages();
/*  6066 */             messages.add("org.apache.struts.action.ERROR", new ActionMessage(FormatUtil.getString("am.webclient.as400.freeedition.notsupported")));
/*  6067 */             saveMessages(request, messages);
/*  6068 */             type = "SYSTEM:9999";
/*       */           }
/*       */           
/*       */         }
/*  6072 */         else if ((typefromrequest.equals("HP-UX")) || (typefromrequest.equals("HP-UX / Tru64")))
/*       */         {
/*       */ 
/*  6075 */           amform.setOs("HP-UX");
/*  6076 */           amform.setSnmptelnetport("23");
/*  6077 */           amform.setMode("Telnet");
/*       */         }
/*  6079 */         else if (typefromrequest.equals("HP-TRU64"))
/*       */         {
/*  6081 */           amform.setOs("HP-TRU64");
/*  6082 */           amform.setSnmptelnetport("23");
/*  6083 */           amform.setMode("Telnet");
/*       */         }
/*       */         else
/*       */         {
/*  6087 */           amform.setSnmptelnetport("161");
/*  6088 */           amform.setMode("SNMP");
/*       */         }
/*  6090 */         type = "SYSTEM:9999";
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       }
/*  6098 */       else if (typefromrequest.equals("All"))
/*       */       {
/*  6100 */         type = "All:1008";
/*       */       }
/*  6102 */       else if (typefromrequest.equals("Port-Test"))
/*       */       {
/*  6104 */         type = "SERVICE:9090";
/*       */       }
/*  6106 */       else if (typefromrequest.equals("TELNET"))
/*       */       {
/*  6108 */         type = "TELNET:23";
/*       */       }
/*  6110 */       else if (typefromrequest.equals("SNMP"))
/*       */       {
/*  6112 */         type = "SNMP:161";
/*  6113 */       } else if (typefromrequest.equals("Node"))
/*       */       {
/*  6115 */         type = "SYSTEM:9999";
/*  6116 */       } else if ((typefromrequest.equals("APP")) || (typefromrequest.equals("DBS")) || (typefromrequest.equals("SER")) || (typefromrequest.equals("SYS")) || (typefromrequest.equals("URL")) || (typefromrequest.equals("CAM")) || (typefromrequest.equals("null")) || (typefromrequest.equals("TM")) || (typefromrequest.equals("MS")))
/*       */       {
/*  6118 */         type = "SYSTEM:9999";
/*       */       }
/*  6120 */       else if ((typefromrequest.equals("WTA")) || (typefromrequest.equals("WTA:55555")))
/*       */       {
/*       */ 
/*  6123 */         type = "WTA:55555";
/*       */ 
/*       */ 
/*       */       }
/*  6127 */       else if ((typefromrequest.equals("ORACLE-APP-server")) || (typefromrequest.equals("ORACLEAS:7200")))
/*       */       {
/*       */ 
/*  6130 */         System.out.println("type from request is" + typefromrequest);
/*  6131 */         type = "ORACLEAS:7200";
/*       */       }
/*  6133 */       else if ((typefromrequest.equals("SAP")) || (typefromrequest.equals("SAP:00")))
/*       */       {
/*  6135 */         FreeEditionDetails fed = FreeEditionDetails.getFreeEditionDetails();
/*  6136 */         String usrtype = fed.getUserType();
/*  6137 */         boolean issappresent = fed.isSAPAddOnPresent();
/*       */         
/*  6139 */         if ((usrtype != null) && ((usrtype.equals("F")) || ((usrtype.equals("R")) && (!issappresent) && (!fed.isSAPAllowed())))) {
/*  6140 */           ActionMessages messages = new ActionMessages();
/*  6141 */           messages.add("org.apache.struts.action.ERROR", new ActionMessage(FormatUtil.getString("am.webclient.sap.freeedition.notsupported")));
/*  6142 */           saveMessages(request, messages);
/*  6143 */           type = "SYSTEM:9999";
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */         }
/*  6152 */         else if (EnterpriseUtil.isAdminServer()) {
/*  6153 */           ActionMessages messages = new ActionMessages();
/*  6154 */           messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("am.webclient.sap.disc.error4"));
/*  6155 */           saveMessages(request, messages);
/*  6156 */           type = "SAP:00";
/*       */         }
/*       */         else {
/*       */           try {
/*  6160 */             if (new File(APM_HOME + File.separator + "lib" + File.separator + "sapjco3.jar").exists()) {
/*  6161 */               Class.forName("com.sap.conn.jco.JCo");
/*       */             }
/*  6163 */             else if (new File(APM_HOME + File.separator + "lib" + File.separator + "sapjco.jar").exists()) {
/*  6164 */               Class.forName("com.sap.mw.jco.JCO");
/*       */             } else {
/*  6166 */               ActionMessages messages = new ActionMessages();
/*  6167 */               messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("am.webclient.sap.disc.error1"));
/*  6168 */               saveMessages(request, messages);
/*       */             }
/*       */           }
/*       */           catch (Throwable t) {
/*  6172 */             if (!EnterpriseUtil.isAdminServer()) {
/*  6173 */               ActionMessages messages = new ActionMessages();
/*  6174 */               messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("am.webclient.sap.disc.error1"));
/*  6175 */               saveMessages(request, messages);
/*       */             }
/*       */           }
/*       */           
/*  6179 */           type = "SAP:00";
/*       */         }
/*  6181 */         if ((usrtype != null) && (usrtype.equals("R")) && (fed.isSAPAllowed()) && (FreeEditionDetails.sapMessage != null))
/*       */         {
/*  6183 */           ActionMessages messages = new ActionMessages();
/*  6184 */           messages.add("org.apache.struts.action.ERROR", new ActionMessage(FormatUtil.getString(FreeEditionDetails.sapMessage)));
/*  6185 */           saveMessages(request, messages);
/*       */         }
/*       */       }
/*  6188 */       else if ((typefromrequest.equals("SAP-CCMS")) || (typefromrequest.equals("SAP-CCMS:00")))
/*       */       {
/*  6190 */         FreeEditionDetails fed = FreeEditionDetails.getFreeEditionDetails();
/*  6191 */         String usrtype = fed.getUserType();
/*  6192 */         boolean issapccmspresent = fed.isSAPCCMSAddOnPresent();
/*       */         
/*  6194 */         if ((usrtype != null) && ((usrtype.equals("F")) || ((usrtype.equals("R")) && (!issapccmspresent) && (!fed.isSAPCCMSAllowed()))))
/*       */         {
/*  6196 */           ActionMessages messages = new ActionMessages();
/*  6197 */           messages.add("org.apache.struts.action.ERROR", new ActionMessage(FormatUtil.getString("am.webclient.sapccms.freeedition.notsupported")));
/*  6198 */           saveMessages(request, messages);
/*  6199 */           type = "SYSTEM:9999";
/*       */         } else {
/*  6201 */           if (EnterpriseUtil.isAdminServer()) {
/*  6202 */             ActionMessages messages = new ActionMessages();
/*  6203 */             messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("am.webclient.sap.disc.error4"));
/*  6204 */             saveMessages(request, messages);
/*  6205 */             return new ActionForward("/jsp/sap/newsapccms.jsp");
/*       */           }
/*       */           
/*       */ 
/*       */ 
/*       */           try
/*       */           {
/*  6212 */             if (new File(APM_HOME + File.separator + "lib" + File.separator + "sapjco3.jar").exists()) {
/*  6213 */               Class.forName("com.sap.conn.jco.JCo");
/*       */             }
/*  6215 */             else if (new File(APM_HOME + File.separator + "lib" + File.separator + "sapjco.jar").exists()) {
/*  6216 */               Class.forName("com.sap.mw.jco.JCO");
/*       */             }
/*       */             else {
/*  6219 */               ActionMessages messages = new ActionMessages();
/*  6220 */               messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("am.webclient.sap.disc.error1"));
/*  6221 */               saveMessages(request, messages);
/*       */             }
/*       */           }
/*       */           catch (Throwable t)
/*       */           {
/*  6226 */             if (!EnterpriseUtil.isAdminServer())
/*       */             {
/*  6228 */               ActionMessages messages = new ActionMessages();
/*  6229 */               messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("am.webclient.sap.disc.error1"));
/*  6230 */               saveMessages(request, messages);
/*       */             }
/*       */           }
/*  6233 */           return new ActionForward("/jsp/sap/newsapccms.jsp");
/*       */         }
/*  6235 */         if ((usrtype != null) && (usrtype.equals("R")) && (fed.isSAPCCMSAllowed()) && (FreeEditionDetails.sapccmsMessage != null))
/*       */         {
/*  6237 */           ActionMessages messages = new ActionMessages();
/*  6238 */           messages.add("org.apache.struts.action.ERROR", new ActionMessage(FormatUtil.getString(FreeEditionDetails.sapccmsMessage)));
/*  6239 */           saveMessages(request, messages);
/*  6240 */           return new ActionForward("/jsp/sap/newsapccms.jsp");
/*       */         }
/*       */         
/*       */       }
/*       */       else
/*       */       {
/*  6246 */         type = amform.getType();
/*       */       }
/*       */     }
/*       */     else
/*       */     {
/*  6251 */       type = amform.getType();
/*  6252 */       if (type != null)
/*       */       {
/*  6254 */         if (type.equals("MSSQLDB:1433"))
/*       */         {
/*  6256 */           amform.setUsername("sa");
/*  6257 */           amform.setInstance("");
/*       */         } else {
/*  6259 */           type = "SYSTEM:9999";
/*       */         }
/*       */       }
/*       */       else {
/*  6263 */         type = "SYSTEM:9999";
/*       */       }
/*       */     }
/*       */     
/*  6267 */     String port = type.substring(type.indexOf(":") + 1, type.length());
/*  6268 */     if (!"configureHostDiscovery".equals(request.getParameter("method")))
/*       */     {
/*  6270 */       amform.setPort(port);
/*       */     }
/*  6272 */     amform.setType(type);
/*  6273 */     request.setAttribute("type", type);
/*  6274 */     return mapping.findForward("HostDiscoveryForm");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward showNetworkDiscoveryForm(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*  6283 */     AMActionForm amform = (AMActionForm)form;
/*  6284 */     request.setAttribute("HelpKey", "Discover Network");
/*  6285 */     if (request.getParameter("update") != null)
/*       */     {
/*  6287 */       NetworkDiscoveryHandler addnetworkfordiscovery = new NetworkDiscoveryHandler();
/*  6288 */       Vector seedFileDetails = addnetworkfordiscovery.getSeedFileDetails();
/*  6289 */       String network = request.getParameter("network");
/*       */       
/*  6291 */       for (int i = 0; i < seedFileDetails.size(); i++)
/*       */       {
/*  6293 */         Vector rowVec = (Vector)seedFileDetails.elementAt(i);
/*  6294 */         Properties discProps = new Properties();
/*  6295 */         if (network.equals((String)rowVec.get(0)))
/*       */         {
/*  6297 */           amform.setNetworkAddress((String)rowVec.get(0));
/*  6298 */           amform.setStartingIP((String)rowVec.get(1));
/*  6299 */           amform.setEndingIP((String)rowVec.elementAt(2));
/*  6300 */           amform.setnetmask((String)rowVec.get(3));
/*       */         }
/*       */       }
/*  6303 */       return new ActionForward("/jsp/NetworkDiscoveryForm.jsp");
/*       */     }
/*       */     
/*       */ 
/*  6307 */     return new ActionForward("/jsp/NetworkDiscoveryForm.jsp");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward deleteNetwork(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*  6317 */     String[] applications = request.getParameterValues("networks");
/*  6318 */     String netmask = request.getParameter("mask");
/*  6319 */     TopoAPI tapi = (TopoAPI)NmsUtil.getAPI("TopoAPI");
/*  6320 */     NetworkDiscoveryHandler addnetworkfordiscovery = new NetworkDiscoveryHandler();
/*  6321 */     Vector seedFileDetails = addnetworkfordiscovery.getSeedFileDetails();
/*  6322 */     Hashtable update = new Hashtable();
/*  6323 */     Vector toupdate = new Vector();
/*  6324 */     for (int j = 0; j < seedFileDetails.size(); j++)
/*       */     {
/*  6326 */       Vector net = (Vector)seedFileDetails.get(j);
/*  6327 */       String networkfromseed = (String)net.get(0);
/*  6328 */       update.put(networkfromseed, net);
/*       */     }
/*  6330 */     for (int i = 0; i < applications.length; i++)
/*       */     {
/*  6332 */       String networktodelete = applications[i];
/*  6333 */       Network net1 = tapi.getNet(networktodelete);
/*  6334 */       if (net1 != null)
/*       */       {
/*  6336 */         net1.setDiscover(false);
/*       */         try
/*       */         {
/*  6339 */           tapi.updateObject(net1, false, false);
/*       */ 
/*       */         }
/*       */         catch (Exception e) {}
/*       */ 
/*       */       }
/*       */       else
/*       */       {
/*  6347 */         String networkindb = com.adventnet.nms.util.WatchUtil.getNetAddr(networktodelete, netmask);
/*  6348 */         if (networkindb != null)
/*       */         {
/*  6350 */           Network net2 = tapi.getNet(networkindb);
/*  6351 */           if (net2 != null)
/*       */           {
/*  6353 */             net2.setDiscover(false);
/*       */             try
/*       */             {
/*  6356 */               tapi.updateObject(net2, false, false);
/*       */ 
/*       */             }
/*       */             catch (Exception e) {}
/*       */ 
/*       */           }
/*       */           else
/*       */           {
/*  6364 */             AMLog.debug("getNet returns null for " + networkindb);
/*       */           }
/*       */           
/*  6367 */           update.remove(networktodelete);
/*       */         }
/*       */         else
/*       */         {
/*  6371 */           update.remove(networktodelete);
/*       */         }
/*       */       }
/*       */       
/*  6375 */       for (int j = 0; j < seedFileDetails.size(); j++)
/*       */       {
/*  6377 */         Vector net = (Vector)seedFileDetails.get(j);
/*  6378 */         String networkfromseed = (String)net.get(0);
/*       */         
/*  6380 */         if (networkfromseed.equals(networktodelete))
/*       */         {
/*  6382 */           update.remove(networkfromseed);
/*       */         }
/*       */       }
/*       */     }
/*  6386 */     for (Enumeration e = update.keys(); e.hasMoreElements();)
/*       */     {
/*  6388 */       Properties discProps = new Properties();
/*  6389 */       Vector rowVec = (Vector)update.get((String)e.nextElement());
/*  6390 */       discProps.setProperty("NETWORK_ADDR", (String)rowVec.get(0));
/*  6391 */       discProps.setProperty("START_IP", (String)rowVec.get(1));
/*  6392 */       discProps.setProperty("END_IP", (String)rowVec.elementAt(2));
/*  6393 */       discProps.setProperty("SUBNET_MASK", (String)rowVec.get(3));
/*  6394 */       toupdate.add(discProps);
/*       */     }
/*       */     
/*       */ 
/*  6398 */     SeedFileParser sfToWriteNet = new SeedFileParser();
/*  6399 */     sfToWriteNet.removeNet();
/*  6400 */     if (toupdate.size() > 0)
/*       */     {
/*  6402 */       sfToWriteNet.writeNet(toupdate);
/*       */     }
/*  6404 */     ActionMessages messages = new ActionMessages();
/*  6405 */     messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("discovery.network.delete.success"));
/*  6406 */     saveMessages(request, messages);
/*  6407 */     return mapping.findForward("NWDiscovery");
/*       */   }
/*       */   
/*       */   private static void closeResultSet(ResultSet rs)
/*       */   {
/*       */     try {
/*  6413 */       AMConnectionPool.closeStatement(rs);
/*       */     }
/*       */     catch (Exception exc) {}
/*       */   }
/*       */   
/*       */ 
/*       */   public ActionForward bulkUpdate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*  6422 */     String methodName = request.getParameter("methodName");
/*  6423 */     String networkName = request.getParameter("networkName");
/*  6424 */     String groupName = request.getParameter("groupName");
/*  6425 */     if (groupName != null)
/*       */     {
/*  6427 */       groupName = groupName.trim();
/*       */     }
/*  6429 */     if (request.getParameter("polling") != null)
/*       */     {
/*  6431 */       TopoAPI tapi = null;
/*  6432 */       int pollingInterval = ((AMActionForm)form).getTimeout();
/*  6433 */       String resids = request.getParameter("values");
/*  6434 */       StringTokenizer comma_token = new StringTokenizer(resids, ",");
/*  6435 */       ArrayList resids_array = new ArrayList();
/*       */       
/*  6437 */       while (comma_token.hasMoreTokens()) {
/*  6438 */         String resourceId = comma_token.nextToken();
/*  6439 */         AMConnectionPool.getInstance();ResultSet resType = AMConnectionPool.executeQueryStmt("select TYPE as type,RESOURCENAME as RESNAME from AM_ManagedObject where RESOURCEID=" + resourceId);
/*  6440 */         if (resType.next())
/*       */         {
/*  6442 */           String type = resType.getString("type");
/*  6443 */           AMConnectionPool.getInstance();ResultSet resType1 = AMConnectionPool.executeQueryStmt("select TYPEID from AM_MONITOR_TYPES WHERE TYPENAME like '" + type + "'");
/*  6444 */           boolean customType = false;
/*  6445 */           if (resType1.next()) {
/*  6446 */             customType = true;
/*       */           }
/*       */           
/*  6449 */           closeResultSet(resType1);
/*  6450 */           String resName = resType.getString("RESNAME");
/*  6451 */           String update = "";
/*  6452 */           if (type.equals("UrlMonitor"))
/*       */           {
/*  6454 */             update = "update AM_URL set PollInterval=" + pollingInterval * 60000 + " where URLID=" + resourceId;
/*       */           }
/*  6456 */           else if (type.equalsIgnoreCase("Web Service"))
/*       */           {
/*  6458 */             update = "update AM_WSM_Config set POLLINTERVAL=" + pollingInterval + " where RESOURCEID=" + resourceId;
/*       */           }
/*  6460 */           else if (type.equals("UrlSeq"))
/*       */           {
/*  6462 */             update = "update AM_URL,AM_PARENTCHILDMAPPER,AM_ManagedObject set AM_URL.PollInterval=" + pollingInterval * 60000 + "  where AM_URL.URLID=AM_PARENTCHILDMAPPER.CHILDID and AM_PARENTCHILDMAPPER.PARENTID=AM_ManagedObject.resourceid and AM_ManagedObject.type='UrlSeq' and AM_ManagedObject.resourceid=" + resourceId;
/*  6463 */             if ((DBQueryUtil.isPgsql()) || (DBQueryUtil.isMssql()))
/*       */             {
/*  6465 */               update = "update AM_URL set PollInterval=" + pollingInterval * 60000 + " from AM_PARENTCHILDMAPPER,AM_ManagedObject where AM_URL.URLID=AM_PARENTCHILDMAPPER.CHILDID and AM_PARENTCHILDMAPPER.PARENTID=AM_ManagedObject.RESOURCEID and AM_ManagedObject.TYPE='UrlSeq' and AM_ManagedObject.RESOURCEID=" + resourceId;
/*       */             }
/*       */             
/*       */           }
/*  6469 */           else if ((!"VirtualMachine".equals(type)) && ((type.equals("Script Monitor")) || (customType)))
/*       */           {
/*  6471 */             update = "update AM_ScriptArgs set pollinterval=" + pollingInterval * 60 + " where resourceid=" + resourceId;
/*  6472 */             NewMonitorUtil.updateEUMChildDisplayNames(resourceId, "", "" + pollingInterval * 60, "Resource");
/*       */           }
/*  6474 */           else if ((type.equals("file")) || (type.equals("directory")) || (type.equals("Files/Directories")))
/*       */           {
/*  6476 */             update = "update AM_FILEDIR set pollinterval=" + pollingInterval * 60 + " where resourceid=" + resourceId;
/*       */           }
/*  6478 */           else if (type.equals("Ping Monitor"))
/*       */           {
/*       */             try
/*       */             {
/*  6482 */               update = "update AM_PING set POLLINTERVAL=" + pollingInterval * 60 + " where resourceid=" + resourceId;
/*       */             }
/*       */             catch (Exception ex) {
/*  6485 */               ex.printStackTrace();
/*       */             }
/*       */             
/*       */           }
/*  6489 */           else if (type.equals("Generic WMI"))
/*       */           {
/*  6491 */             update = "update AM_CAM_WMI_EXT_INFO set POLLINTERVAL=" + pollingInterval * 60 + " where RESOURCEID=" + resourceId;
/*       */           }
/*  6493 */           else if ((type.equals("SAP-CCMS")) || (type.equals("SAP")))
/*       */           {
/*  6495 */             update = "update AM_SAP_Config set POLLINTERVAL=" + pollingInterval + " where RESOURCEID=" + resourceId;
/*       */           }
/*  6497 */           else if (type.equals("MAIL-server"))
/*       */           {
/*  6499 */             if (tapi == null) {
/*  6500 */               tapi = (TopoAPI)NmsUtil.getAPI("TopoAPI");
/*       */             }
/*       */             
/*  6503 */             if (tapi != null)
/*       */             {
/*       */               try
/*       */               {
/*  6507 */                 com.adventnet.nms.topodb.ManagedObject mo = tapi.getByName(resName);
/*  6508 */                 mo.setPollInterval(pollingInterval * 60);
/*  6509 */                 tapi.updateObject(mo, true, false);
/*       */               }
/*       */               catch (Exception e)
/*       */               {
/*  6513 */                 e.printStackTrace();
/*       */               }
/*       */             }
/*       */           }
/*  6517 */           else if (type.equals("HAI"))
/*       */           {
/*  6519 */             update = "update AM_VCENTER_ARGS set POLLINGINTERVAL=" + pollingInterval * 60 + " where RESID=" + resourceId;
/*       */           }
/*       */           else
/*       */           {
/*  6523 */             update = "update CollectData set POLLINTERVAL=" + pollingInterval * 60 + " where RESOURCENAME='" + resName + "'";
/*       */           }
/*  6525 */           if (update.length() > 0) {
/*  6526 */             AMConnectionPool.getInstance();AMConnectionPool.executeUpdateStmt(update);
/*       */           }
/*       */         }
/*  6529 */         AMConnectionPool.closeStatement(resType);
/*       */       }
/*  6531 */       String viewmontype = "";
/*  6532 */       String showmanage = "";
/*  6533 */       if (request.getParameter("viewmontype") != null)
/*       */       {
/*  6535 */         viewmontype = "&viewmontype=" + request.getParameter("viewmontype");
/*       */       }
/*  6537 */       if ((request.getParameter("showmanage") != null) && (!request.getParameter("showmanage").equals("All")))
/*       */       {
/*  6539 */         showmanage = "&showmanage=" + request.getParameter("showmanage");
/*       */       }
/*  6541 */       return new ActionForward("/jsp/ChangeBulkAuthentication.jsp?toclose=true&methodName=" + methodName + "&networkName=" + networkName + "&groupName=" + groupName + "&pollingInterval=pollingMessage" + viewmontype + showmanage);
/*       */     }
/*       */     
/*       */ 
/*  6545 */     String username = ((AMActionForm)form).getUsername();
/*  6546 */     String password = ((AMActionForm)form).getPassword();
/*  6547 */     String user_pass = "password='" + password + "'";
/*       */     try
/*       */     {
/*  6550 */       if ((username != null) && (!username.trim().equals("")))
/*       */       {
/*  6552 */         if (DBQueryUtil.getDBType().equals("mysql"))
/*       */         {
/*  6554 */           username = StrUtil.findReplace(username, "\\", "\\\\");
/*       */         }
/*  6556 */         user_pass = "username='" + username + "',PASSWORD=" + DBQueryUtil.encode(password);
/*       */ 
/*       */       }
/*       */       else
/*       */       {
/*  6561 */         user_pass = "PASSWORD=" + DBQueryUtil.encode(password);
/*       */       }
/*  6563 */       String resids = request.getParameter("values");
/*  6564 */       StringTokenizer comma_token = new StringTokenizer(resids, ",");
/*  6565 */       ArrayList resids_array = new ArrayList();
/*  6566 */       String resids_forquery = "(";
/*  6567 */       while (comma_token.hasMoreTokens())
/*       */       {
/*  6569 */         String temp = comma_token.nextToken();
/*       */         
/*  6571 */         resids_array.add(temp);
/*  6572 */         resids_forquery = resids_forquery + "'" + temp + "',";
/*       */       }
/*  6574 */       if (!resids_forquery.equals("("))
/*       */       {
/*  6576 */         resids_forquery = resids_forquery.substring(0, resids_forquery.length() - 1);
/*  6577 */         resids_forquery = resids_forquery + ")";
/*       */       }
/*       */       
/*  6580 */       AMConnectionPool.getInstance();ResultSet resid_type_query = AMConnectionPool.executeQueryStmt("select RESOURCEID,TYPE,RESOURCENAME from AM_ManagedObject where resourceid in " + resids_forquery);
/*  6581 */       while (resid_type_query.next())
/*       */       {
/*       */ 
/*  6584 */         String table = null;
/*  6585 */         String resid = resid_type_query.getString("RESOURCEID");
/*  6586 */         if ("MSSQL-DB-server".equalsIgnoreCase(resid_type_query.getString("TYPE"))) {
/*  6587 */           this.credUtil.checkAndUpdateInstanceNameForMSSQLMonitor(resid);
/*       */         }
/*  6589 */         this.credUtil.removeFromMapping(resid);
/*  6590 */         if (!resid_type_query.getString("TYPE").equals("HAI"))
/*       */         {
/*  6592 */           table = DataCollectionControllerUtil.getAuthenticationTableName(resid_type_query.getString("TYPE"));
/*       */         }
/*  6594 */         if (resid_type_query.getString("TYPE").equals("Generic WMI"))
/*       */         {
/*  6596 */           AMConnectionPool.getInstance();AMConnectionPool.executeUpdateStmt("update AM_SCRIPTHOSTDETAILS ,AM_CAM_WMI_EXT_INFO set " + user_pass + " where AM_SCRIPTHOSTDETAILS.ID=AM_CAM_WMI_EXT_INFO.HOSTID and AM_CAM_WMI_EXT_INFO.RESOURCEID=" + resid_type_query.getString("RESOURCEID"));
/*       */         }
/*  6598 */         if ((resid_type_query.getString("TYPE").equals("SAP-CCMS")) || (resid_type_query.getString("TYPE").equals("SAP")))
/*       */         {
/*  6600 */           AMConnectionPool.getInstance();AMConnectionPool.executeUpdateStmt("update AM_SAP_Config set " + user_pass + " where RESOURCEID=" + resid_type_query.getString("RESOURCEID"));
/*       */         }
/*  6602 */         if (resid_type_query.getString("TYPE").equals("HAI"))
/*       */         {
/*  6604 */           AMConnectionPool.getInstance();AMConnectionPool.executeUpdateStmt("update AM_VCENTER_ARGS set " + user_pass + " where RESID=" + resid_type_query.getString("RESOURCEID"));
/*       */         }
/*  6606 */         if (resid_type_query.getString("TYPE").equals("OpenStack"))
/*       */         {
/*  6608 */           com.manageengine.eum.openstack.datacollection.OpenStackEUMDataCollector.clearTokenFromCache(resid_type_query.getString("RESOURCEID"));
/*       */         }
/*  6610 */         if (table != null)
/*       */         {
/*  6612 */           String update_query = null;
/*  6613 */           if (table.equals("HostDetails"))
/*       */           {
/*  6615 */             update_query = "update HostDetails set " + user_pass + "   where resourcename ='" + resid_type_query.getString("RESOURCENAME") + "'";
/*       */ 
/*       */ 
/*       */           }
/*  6619 */           else if (table.startsWith("AM_ARGS_"))
/*       */           {
/*       */ 
/*  6622 */             ArrayList args = NewMonitorUtil.getArgsforConfMon(resid_type_query.getString("TYPE"));
/*  6623 */             Properties props = DBUtil.getCredentialColumnsForConf((ArrayList)args.get(0));
/*  6624 */             StringBuilder sb = new StringBuilder();
/*  6625 */             StringBuilder updateUserNameInAdmin = null;
/*  6626 */             String user_pass1 = "";
/*  6627 */             if ((username != null) && (!username.trim().equals("")))
/*       */             {
/*  6629 */               if (DBQueryUtil.getDBType().equals("mysql"))
/*       */               {
/*  6631 */                 username = StrUtil.findReplace(username, "\\", "\\\\");
/*       */               }
/*  6633 */               user_pass1 = DBQueryUtil.getSpecialCharToAppend() + (props.getProperty("USERNAME") != null ? props.getProperty("USERNAME") : "username") + DBQueryUtil.getSpecialCharToAppend() + "='" + username + "'," + DBQueryUtil.getSpecialCharToAppend() + (props.getProperty("PASSWORD") != null ? props.getProperty("PASSWORD") : "PASSWORD") + DBQueryUtil.getSpecialCharToAppend() + "=" + DBQueryUtil.encode(password);
/*  6634 */               if (EnterpriseUtil.isManagedServer()) {
/*  6635 */                 String enterpriseAdmindbServer = DBQueryUtil.getAdminDBType();
/*  6636 */                 String charToAppendInAdminServer = enterpriseAdmindbServer.equals("mysql") ? "`" : "\"";
/*  6637 */                 updateUserNameInAdmin = new StringBuilder();
/*  6638 */                 updateUserNameInAdmin.append(charToAppendInAdminServer).append(props.getProperty("USERNAME") != null ? props.getProperty("USERNAME") : "username").append(charToAppendInAdminServer).append("='").append(username).append("'");
/*       */               }
/*       */             }
/*       */             else
/*       */             {
/*  6643 */               user_pass1 = DBQueryUtil.getSpecialCharToAppend() + (props.getProperty("PASSWORD") != null ? props.getProperty("PASSWORD") : "PASSWORD") + DBQueryUtil.getSpecialCharToAppend() + "=" + DBQueryUtil.encode(password);
/*       */             }
/*  6645 */             update_query = "update " + table + " set " + user_pass1 + "  where RESOURCEID ='" + resid_type_query.getString("RESOURCEID") + "'";
/*  6646 */             if ((updateUserNameInAdmin != null) && (updateUserNameInAdmin.length() > 0)) {
/*  6647 */               EnterpriseUtil.addUpdateQueryToFile("update " + table + " set " + updateUserNameInAdmin.toString() + "  where RESOURCEID ='" + resid_type_query.getString("RESOURCEID") + "'");
/*       */             }
/*       */           }
/*       */           else
/*       */           {
/*  6652 */             update_query = "update AM_RESOURCECONFIG set " + user_pass + " where RESOURCEID ='" + resid_type_query.getString("RESOURCEID") + "'";
/*       */           }
/*       */           try
/*       */           {
/*  6656 */             AMConnectionPool.getInstance();AMConnectionPool.executeUpdateStmt(update_query);
/*  6657 */             if (resid_type_query.getString("TYPE").equals("ORACLE-DB-server"))
/*       */             {
/*  6659 */               AMConnectionPool.getInstance();AMConnectionPool.executeUpdateStmt("update OracleCollectData set " + user_pass + " where RESOURCENAME ='" + resid_type_query.getString("RESOURCENAME") + "'");
/*       */             }
/*       */             
/*       */           }
/*       */           catch (Exception exc)
/*       */           {
/*  6665 */             System.out.println("SOME PROBLEM IN UPDATING THE USERNAME AND THE PASSWORD");
/*  6666 */             exc.printStackTrace();
/*       */           }
/*       */         }
/*       */       }
/*       */       
/*  6671 */       AMConnectionPool.closeStatement(resid_type_query);
/*       */     }
/*       */     catch (Exception exc)
/*       */     {
/*  6675 */       System.out.println("SOME PROBLEM IN UPDATING THE AUTHENTICATION IN BULK");
/*  6676 */       exc.printStackTrace();
/*       */     }
/*       */     
/*  6679 */     String retaintree = "";
/*  6680 */     if (request.getParameter("retaintree") != null)
/*       */     {
/*  6682 */       retaintree = request.getParameter("retaintree");
/*       */     }
/*  6684 */     String viewmontype = "";
/*  6685 */     String showmanage = "";
/*  6686 */     if (request.getParameter("viewmontype") != null)
/*       */     {
/*  6688 */       viewmontype = "&viewmontype=" + request.getParameter("viewmontype");
/*       */     }
/*  6690 */     if ((request.getParameter("showmanage") != null) && (!request.getParameter("showmanage").equals("All")))
/*       */     {
/*  6692 */       showmanage = "&showmanage=" + request.getParameter("showmanage");
/*       */     }
/*  6694 */     return new ActionForward("/jsp/ChangeBulkAuthentication.jsp?toclose=true&methodName=" + methodName + "&networkName=" + networkName + "&groupName=" + groupName + "&retaintree=" + retaintree + viewmontype + showmanage);
/*       */   }
/*       */   
/*       */   public ActionForward unManageMonitors(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
/*       */   {
/*  6699 */     ArrayList<String> unmanageNodes = new ArrayList();
/*  6700 */     String[] resourceid = request.getParameterValues("select");
/*  6701 */     System.out.println("request unmanagedtype " + request.getParameter("viewmontype"));
/*       */     
/*  6703 */     if (resourceid != null)
/*       */     {
/*  6705 */       for (int i = 0; i < resourceid.length; i++)
/*       */       {
/*  6707 */         if (resourceid[i] != null)
/*       */         {
/*  6709 */           DataCollectionControllerUtil.unmanageChildNode(resourceid[i], unmanageNodes);
/*       */         }
/*       */       }
/*       */     }
/*       */     try
/*       */     {
/*  6715 */       com.adventnet.appmanager.db.AMBatchStmtExecutor.executeBatch(unmanageNodes);
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/*  6719 */       System.out.println("SOME PROBLEM IN UPDATING THE UNMANAGED NODES");
/*       */       
/*       */ 
/*  6722 */       e.printStackTrace();
/*       */     }
/*  6724 */     DataCollectionControllerUtil.setUnmanaged_nodes(DataCollectionControllerUtil.getUnManagedNodes());
/*  6725 */     DataCollectionControllerUtil.setManaged_nodes(DataCollectionControllerUtil.getManagedNodes());
/*       */     
/*  6727 */     return new ActionForward("/showresource.do?method=showResourceTypesAll&group=All", true);
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward TestSmtpServer(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*  6736 */     String message = null;
/*       */     
/*  6738 */     String smtpHost = request.getParameter("smtpHost");String smtpPort = request.getParameter("smtpPort");String emailAddress = request.getParameter("emailAddress");
/*  6739 */     String smtpUserName = request.getParameter("smtpUserName");String smtpPassword = request.getParameter("smtpPassword");
/*  6740 */     boolean tlsAuthEnabled = "true".equals(request.getParameter("smtpTlsAuth"));
/*  6741 */     boolean sslAuthEnabled = "true".equals(request.getParameter("smtpSslAuth"));
/*  6742 */     int port = 25;
/*       */     try
/*       */     {
/*       */       try
/*       */       {
/*  6747 */         port = Integer.parseInt(smtpPort);
/*       */       }
/*       */       catch (Exception e)
/*       */       {
/*  6751 */         AMLog.info("Error in TestSMTPServer :" + e.getMessage());
/*       */       }
/*  6753 */       if (!tlsAuthEnabled)
/*       */       {
/*  6755 */         if (!sslAuthEnabled) {
/*  6756 */           Smtp smtp = new Smtp();
/*  6757 */           smtp.connect(smtpHost, port);
/*       */         }
/*       */         else {
/*  6760 */           Smtp smtp = new Smtp(smtpHost, port);
/*  6761 */           smtp.connectThroughSSLFactory();
/*       */         }
/*       */       }
/*  6764 */       Properties props = new Properties();
/*       */       
/*  6766 */       props.setProperty("mail.smtp.host", smtpHost);
/*  6767 */       props.setProperty("mail.smtp.port", port + "");
/*  6768 */       if ((smtpUserName != null) && (!"".equals(smtpUserName)))
/*       */       {
/*  6770 */         props.setProperty("mail.smtp.username", smtpUserName);
/*  6771 */         props.setProperty("mail.smtp.password", smtpPassword);
/*  6772 */         props.setProperty("mail.smtp.auth", "true");
/*  6773 */         props.setProperty("mail.smtp.tlsauth", Boolean.toString(tlsAuthEnabled));
/*  6774 */         props.setProperty("mail.smtp.starttls.enable", "false");
/*       */       }
/*       */       else
/*       */       {
/*  6778 */         props.setProperty("mail.smtp.username", "");
/*  6779 */         props.setProperty("mail.smtp.password", "");
/*  6780 */         props.setProperty("mail.smtp.auth", "false");
/*       */       }
/*  6782 */       AMLog.info("smtp Props:" + props);
/*       */       
/*  6784 */       String mail_subject = FormatUtil.getString("am.fault.email.plaintext.subject", new String[] { OEMUtil.getOEMString("product.name") });
/*  6785 */       AMLog.info("mail_subject: " + mail_subject);
/*  6786 */       com.adventnet.appmanager.fault.SmtpMailer mail = new com.adventnet.appmanager.fault.SmtpMailer(props, emailAddress, emailAddress, mail_subject);
/*       */       
/*  6788 */       String content = FormatUtil.getString("am.product.testmail.content.txt");
/*  6789 */       AMLog.info("content: " + content);
/*  6790 */       String mail_message = FormatUtil.findAndReplaceAll(ClientDBUtil.getI18NedTemplate(), "~content~", content);
/*  6791 */       AMLog.info("mail_message: " + mail_message);
/*       */       
/*  6793 */       message = mail.sendMessage(mail_message, "SMTPSuccess", true, null);
/*  6794 */       if (message.equals("SMTPSuccess"))
/*       */       {
/*  6796 */         message = FormatUtil.getString("am.smptsuccess.text");
/*       */       }
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/*  6801 */       e.printStackTrace();
/*  6802 */       message = e.getMessage();
/*       */       
/*  6804 */       if ((message != null) && (message.equals("IOException : Stream interrupted")))
/*       */       {
/*  6806 */         message = FormatUtil.getString("mailserver.config.server.not.running", new String[] { smtpHost, port + "" });
/*       */       }
/*       */     }
/*  6809 */     AMLog.info("message: " + message);
/*  6810 */     ClientDBUtil.sendResponse(message, response);
/*  6811 */     return null;
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */   public ActionForward TestProxyServer(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*  6819 */     String message = FormatUtil.getString("am.webclient.proxyconfig.testproxy.response") + " : 200";String proxyMessage = null;
/*       */     
/*  6821 */     request.setAttribute("gettingStarted", "true");
/*  6822 */     request.setAttribute("testProxy", "true");
/*  6823 */     Properties proxyProps = new Properties();
/*       */     
/*       */     try
/*       */     {
/*  6827 */       proxyProps = ProxyUtil.getProxyProps(true);
/*       */       
/*  6829 */       boolean useProxy = "on".equals(request.getParameter("useproxy"));
/*       */       
/*  6831 */       Properties testProxyProps = new Properties();
/*  6832 */       testProxyProps.setProperty("useproxy", useProxy ? "true" : "false");
/*       */       
/*  6834 */       if (useProxy)
/*       */       {
/*  6836 */         testProxyProps.setProperty("host", request.getParameter("proxyHost"));
/*  6837 */         testProxyProps.setProperty("port", request.getParameter("proxyPort"));
/*  6838 */         testProxyProps.setProperty("username", request.getParameter("proxyUserName"));
/*  6839 */         testProxyProps.setProperty("password", request.getParameter("proxyPassword"));
/*  6840 */         testProxyProps.setProperty("updateCredentials", request.getParameter("updateCredentials") != null ? request.getParameter("updateCredentials") : "true");
/*       */       }
/*       */       
/*  6843 */       testProxyProps.setProperty("bypassproxy", "on".equals(request.getParameter("bypassproxy")) ? "true" : "false");
/*  6844 */       testProxyProps.setProperty("dontProxyList", request.getParameter("dontProxyList") != null ? request.getParameter("dontProxyList") : "127.0.0.1");
/*       */       
/*  6846 */       if (ProxyUtil.setProxyConfiguration(request, testProxyProps))
/*       */       {
/*       */ 
/*  6849 */         HTTPResponse rsp = null;int responseCode = 200;
/*       */         try
/*       */         {
/*  6852 */           String testurl = request.getParameter("testurl");
/*  6853 */           String url = (testurl != null) && (!"auto".equals(testurl)) ? testurl : "http://www.manageengine.com/products/applications_manager/";
/*  6854 */           String conUri = getURI(url);
/*  6855 */           HTTPClient.URI uri = new HTTPClient.URI(getHostPort(url));
/*  6856 */           HTTPConnection con = new HTTPConnection(uri);
/*  6857 */           NVPair nvpair1 = new NVPair("Pragma", "no-cache");
/*  6858 */           NVPair nvpair2 = new NVPair("Accept-Encoding", "gzip");
/*  6859 */           NVPair nvpair3 = new NVPair("Referer", conUri);
/*  6860 */           NVPair[] headers = { nvpair1, nvpair2, nvpair3 };
/*  6861 */           con.setTimeout(5000);
/*  6862 */           con.setContext(System.currentTimeMillis() + "");
/*  6863 */           rsp = con.Get(conUri, "", headers);
/*  6864 */           AMLog.info("TestProxyServer: Response Code:" + rsp.getStatusCode());
/*  6865 */           if (rsp.getStatusCode() >= 300)
/*       */           {
/*  6867 */             AMLog.info("TestProxyServer: Error:.....");
/*  6868 */             message = "Received Error: " + rsp.getReasonLine();
/*  6869 */             AMLog.info(rsp.getText());
/*       */           }
/*       */           else
/*       */           {
/*  6873 */             byte[] apiResponse = rsp.getData();
/*  6874 */             AMLog.info("TestProxyServer: Response:,.....");
/*  6875 */             message = FormatUtil.getString("am.webclient.proxyconfig.testproxy.response") + " : " + rsp.getStatusCode();
/*  6876 */             AMLog.info("Response for URL:" + url + "is \n " + new String(apiResponse));
/*       */           }
/*       */         }
/*       */         catch (IOException ioe)
/*       */         {
/*  6881 */           message = ioe.toString();
/*  6882 */           AMLog.info("TestProxyServer: error mesage:" + message);
/*       */         }
/*       */         catch (Exception e)
/*       */         {
/*  6886 */           e.printStackTrace();
/*  6887 */           message = "Error in connecting to url, Response Code:" + rsp.getStatusCode();
/*       */         }
/*       */       }
/*       */       else
/*       */       {
/*  6892 */         message = (String)request.getAttribute("proxyMessage");
/*       */       }
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/*  6897 */       e.printStackTrace();
/*       */     }
/*       */     finally
/*       */     {
/*  6901 */       ProxyUtil.setProxyConfiguration(request, proxyProps);
/*       */     }
/*       */     
/*  6904 */     ClientDBUtil.sendResponse(message, response);
/*  6905 */     return null;
/*       */   }
/*       */   
/*       */   private static String getHostPort(String url)
/*       */   {
/*  6910 */     StringTokenizer tokens = new StringTokenizer(url, "/");
/*  6911 */     String http = tokens.nextToken();
/*  6912 */     String hostport = tokens.nextToken();
/*  6913 */     return http + "//" + hostport + "/";
/*       */   }
/*       */   
/*       */ 
/*       */   private static String getURI(String url)
/*       */   {
/*  6919 */     StringTokenizer tokens = new StringTokenizer(url, "/");
/*  6920 */     StringBuffer uri = new StringBuffer();
/*  6921 */     int i = 0;
/*  6922 */     for (i = 0; tokens.hasMoreTokens(); i++)
/*       */     {
/*  6924 */       if (i < 2)
/*       */       {
/*  6926 */         tokens.nextToken();
/*       */       }
/*       */       else {
/*  6929 */         uri.append("/");
/*  6930 */         uri.append(tokens.nextToken());
/*       */       } }
/*  6932 */     if (i < 2)
/*       */     {
/*  6934 */       uri = new StringBuffer("/");
/*       */     }
/*  6936 */     return uri.toString();
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward configureNetworkDiscovery(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*  6945 */     ActionMessages messages = new ActionMessages();
/*  6946 */     ActionErrors errors = new ActionErrors();
/*  6947 */     FreeEditionDetails free = FreeEditionDetails.getFreeEditionDetails();
/*  6948 */     String usrtype = free.getUserType();
/*  6949 */     if ((usrtype == null) || (usrtype.equals("F")))
/*       */     {
/*  6951 */       String m1 = FormatUtil.getString("discovery.notallowed", new String[] { OEMUtil.getOEMString("product.name") });
/*  6952 */       errors.add("org.apache.struts.action.GLOBAL_ERROR", new ActionError(m1));
/*  6953 */       errors.add("org.apache.struts.action.GLOBAL_ERROR", new ActionError("discovery.notallowed.support"));
/*  6954 */       saveErrors(request, errors);
/*  6955 */       return new ActionForward("Tile.AdminConf");
/*       */     }
/*       */     
/*  6958 */     NetworkDiscoveryHandler addnetworkfordiscovery = new NetworkDiscoveryHandler();
/*       */     
/*  6960 */     boolean successful = false;
/*  6961 */     String message = "";
/*  6962 */     Hashtable configuredList = new Hashtable();
/*  6963 */     Vector networkInformation = new Vector();
/*  6964 */     Vector networktoupdate = new Vector();
/*  6965 */     Vector seedFileDetails = addnetworkfordiscovery.getSeedFileDetails();
/*  6966 */     String network = request.getParameter("networkAddress");
/*       */     
/*  6968 */     for (int i = 0; i < seedFileDetails.size(); i++)
/*       */     {
/*  6970 */       Vector rowVec = (Vector)seedFileDetails.elementAt(i);
/*  6971 */       Properties discProps = new Properties();
/*  6972 */       if (network.equals((String)rowVec.get(0)))
/*       */       {
/*  6974 */         if (request.getParameter("update") == null)
/*       */         {
/*       */ 
/*  6977 */           messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("discovery.network.alreadyexists", network));
/*  6978 */           saveMessages(request, messages);
/*  6979 */           return mapping.findForward("NetworkDiscoveryForm");
/*       */         }
/*       */         
/*       */ 
/*       */       }
/*       */       else
/*       */       {
/*       */ 
/*  6987 */         discProps.setProperty("NETWORK_ADDR", (String)rowVec.get(0));
/*  6988 */         discProps.setProperty("START_IP", (String)rowVec.get(1));
/*  6989 */         discProps.setProperty("END_IP", (String)rowVec.elementAt(2));
/*  6990 */         discProps.setProperty("SUBNET_MASK", (String)rowVec.get(3));
/*  6991 */         networktoupdate.add(discProps);
/*       */       }
/*       */     }
/*       */     
/*       */ 
/*  6996 */     Properties discProps = new Properties();
/*  6997 */     discProps.setProperty("NETWORK_ADDR", request.getParameter("networkAddress"));
/*  6998 */     discProps.setProperty("SUBNET_MASK", request.getParameter("netmask"));
/*  6999 */     discProps.setProperty("START_IP", request.getParameter("startingIP"));
/*  7000 */     discProps.setProperty("END_IP", request.getParameter("endingIP"));
/*  7001 */     networktoupdate.add(discProps);
/*  7002 */     networkInformation.add(discProps);
/*  7003 */     configuredList.put("NETWORK_CONFIG", networkInformation);
/*  7004 */     Properties discoveryProperties = new Properties();
/*  7005 */     discoveryProperties.setProperty("REDISCOVER_INTERVAL", "24");
/*  7006 */     discoveryProperties.setProperty("HOUR", "-1");
/*  7007 */     configuredList.put("DISC_DATA_PROP", discoveryProperties);
/*  7008 */     successful = addnetworkfordiscovery.initiateNetworkDiscovery(configuredList);
/*       */     
/*  7010 */     if (successful)
/*       */     {
/*       */ 
/*  7013 */       SeedFileParser sfToWriteNet = new SeedFileParser();
/*  7014 */       sfToWriteNet.removeNet();
/*  7015 */       sfToWriteNet.writeNet(networktoupdate);
/*  7016 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("discovery.network.success"));
/*  7017 */       saveMessages(request, messages);
/*       */ 
/*       */     }
/*       */     else
/*       */     {
/*  7022 */       errors.add("org.apache.struts.action.GLOBAL_ERROR", new ActionError("discovery.network.failed"));
/*  7023 */       saveErrors(request, errors);
/*  7024 */       return mapping.findForward("NetworkDiscoveryForm");
/*       */     }
/*  7026 */     return mapping.findForward("NWDiscovery");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward mailServerConfiguration(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*  7041 */     AMActionForm amform = (AMActionForm)form;
/*  7042 */     ActionMessages messages = new ActionMessages();
/*  7043 */     ActionErrors errors = new ActionErrors();
/*  7044 */     Properties mailProps = new Properties();
/*  7045 */     boolean smtpStatus = false;boolean secSmtpStatus = false;
/*  7046 */     String message = null;String secMessage = null;String redirecturl = request.getParameter("mailserverredirecturl");
/*  7047 */     boolean fromGettingStarted = request.getAttribute("gettingStarted") != null;
/*  7048 */     Enumeration e; if (fromGettingStarted)
/*       */     {
/*  7050 */       for (e = request.getParameterNames(); e.hasMoreElements();) {
/*  7051 */         String ParameterNames = (String)e.nextElement();
/*  7052 */         if (!ParameterNames.equalsIgnoreCase("apikey")) {
/*  7053 */           mailProps.setProperty(ParameterNames, request.getParameter(ParameterNames));
/*       */         }
/*       */         
/*       */       }
/*       */     } else {
/*  7058 */       mailProps = com.adventnet.appmanager.utils.client.PreRequisitesAPIUtil.getSmtpPropsFromActionform(amform);
/*       */     }
/*       */     
/*       */     try
/*       */     {
/*       */       try
/*       */       {
/*  7065 */         smtpStatus = com.adventnet.appmanager.utils.client.PreRequisitesAPIUtil.isValidSmtpProps(mailProps, 1);
/*       */       }
/*       */       catch (Exception e)
/*       */       {
/*  7069 */         message = e.getMessage();
/*  7070 */         if ((message != null) && (message.equals("IOException : Stream interrupted")))
/*       */         {
/*  7072 */           message = FormatUtil.getString("mailserver.config.server.not.running", new String[] { mailProps.getProperty("smtpServer"), mailProps.getProperty("smtpPort") });
/*       */         }
/*  7074 */         if (!fromGettingStarted)
/*       */         {
/*  7076 */           errors.add("org.apache.struts.action.GLOBAL_ERROR", new ActionError(message));
/*  7077 */           saveErrors(request, errors);
/*       */           
/*  7079 */           if (redirecturl != null)
/*       */           {
/*       */ 
/*  7082 */             if (redirecturl.equals("/jsp/feedback.jsp"))
/*       */             {
/*  7084 */               request.setAttribute("showerror", "true");
/*  7085 */               return new ActionForward(redirecturl);
/*       */             }
/*  7087 */             if (redirecturl.equals("/jsp/MailServerConfigUserArea.jsp"))
/*       */             {
/*  7089 */               request.setAttribute("showerror", "true");
/*  7090 */               return new ActionForward(redirecturl + "?popup='true'");
/*       */             }
/*  7092 */             if (request.getParameter("global") != null)
/*       */             {
/*  7094 */               request.setAttribute("uri", "/jsp/EMailActionForm.jsp");
/*  7095 */               request.setAttribute("showerror", "true");
/*  7096 */               return new ActionForward("/jsp/EMailActionForm.jsp?haid=" + request.getParameter("haid") + "&global=true&returnpath=" + URLEncoder.encode(request.getParameter("returnpath")));
/*       */             }
/*       */           }
/*  7099 */           return mapping.findForward("MailServerConfig");
/*       */         }
/*  7101 */         e.printStackTrace();
/*       */       }
/*  7103 */       if (smtpStatus)
/*       */       {
/*  7105 */         String checkquery = "select * from AM_MAILSETTINGS where ID=1";
/*  7106 */         ArrayList list = this.mo.getRows(checkquery);
/*  7107 */         if (list.size() != 0)
/*       */         {
/*  7109 */           SmtpEMailer.updateSmtpProperties(mailProps, 1, false);
/*       */         }
/*       */         else
/*       */         {
/*  7113 */           SmtpEMailer.updateSmtpProperties(mailProps, 1, true);
/*       */         }
/*  7115 */         com.adventnet.appmanager.server.framework.RepairFatalErrors.updateMailServerConfig(mailProps.getProperty("smtpServer"), mailProps.getProperty("smtpPort"), mailProps.getProperty("smtpUserName"), mailProps.getProperty("smtpPassword"));
/*       */       }
/*  7117 */       this.seccheck = ((mailProps.getProperty("secSmtpServer") != null) && (!"".equals(mailProps.getProperty("secSmtpServer"))));
/*  7118 */       String checkquery1 = "select * from AM_MAILSETTINGS where ID=2";
/*  7119 */       ArrayList list1 = this.mo.getRows(checkquery1);
/*       */       try
/*       */       {
/*  7122 */         if ((list1.size() != 0) && (!this.seccheck))
/*       */         {
/*  7124 */           String deleteqry = "delete from AM_MAILSETTINGS where ID=2";
/*  7125 */           AMConnectionPool.executeUpdateStmt(deleteqry);
/*       */         }
/*       */       }
/*       */       catch (Exception ex)
/*       */       {
/*  7130 */         ex.printStackTrace();
/*       */       }
/*       */       
/*  7133 */       request.setAttribute("seccheck", Boolean.valueOf(this.seccheck));
/*  7134 */       if (this.seccheck)
/*       */       {
/*       */         try
/*       */         {
/*  7138 */           secMessage = null;
/*  7139 */           secSmtpStatus = com.adventnet.appmanager.utils.client.PreRequisitesAPIUtil.isValidSmtpProps(mailProps, 2);
/*       */         }
/*       */         catch (Exception e)
/*       */         {
/*  7143 */           secMessage = e.getMessage();
/*  7144 */           if ((message != null) && (message.equals("IOException : Stream interrupted")))
/*       */           {
/*  7146 */             secMessage = FormatUtil.getString("mailserver.config.server.not.running", new String[] { mailProps.getProperty("secSmtpServer"), mailProps.getProperty("secSmtpPort") });
/*       */           }
/*  7148 */           if (!fromGettingStarted)
/*       */           {
/*  7150 */             errors.add("org.apache.struts.action.GLOBAL_ERROR", new ActionError(secMessage));
/*  7151 */             saveErrors(request, errors);
/*       */             
/*  7153 */             if (redirecturl != null)
/*       */             {
/*  7155 */               if (redirecturl.equals("/jsp/feedback.jsp"))
/*       */               {
/*  7157 */                 request.setAttribute("showerror", "true");
/*  7158 */                 return new ActionForward(redirecturl);
/*       */               }
/*  7160 */               if (redirecturl.equals("/jsp/MailServerConfigUserArea.jsp"))
/*       */               {
/*  7162 */                 request.setAttribute("showerror", "true");
/*  7163 */                 return new ActionForward(redirecturl + "?popup='true'");
/*       */               }
/*  7165 */               if (request.getParameter("global") != null)
/*       */               {
/*  7167 */                 request.setAttribute("uri", "/jsp/EMailActionForm.jsp");
/*  7168 */                 request.setAttribute("showerror", "true");
/*  7169 */                 return new ActionForward("/jsp/EMailActionForm.jsp?haid=" + request.getParameter("haid") + "&global=true&returnpath=" + URLEncoder.encode(request.getParameter("returnpath")));
/*       */               }
/*       */             }
/*  7172 */             return mapping.findForward("MailServerConfig");
/*       */           }
/*  7174 */           e.printStackTrace();
/*       */         }
/*  7176 */         if (secSmtpStatus)
/*       */         {
/*  7178 */           if (list1.size() != 0)
/*       */           {
/*  7180 */             SmtpEMailer.updateSmtpProperties(mailProps, 2, false);
/*       */           }
/*       */           else
/*       */           {
/*  7184 */             SmtpEMailer.updateSmtpProperties(mailProps, 2, true);
/*       */           }
/*       */         }
/*       */       }
/*  7188 */       AMLog.debug("Email Address has entry:" + DBUtil.hasGlobalConfigValue("GlobalEMailAddress") + "  has value:" + DBUtil.getGlobalConfigValue("GlobalEMailAddress"));
/*  7189 */       message = FormatUtil.getString("mailserver.config.Success");
/*  7190 */       if ((smtpStatus) || (secSmtpStatus)) {
/*  7191 */         ((Hashtable)request.getSession().getServletContext().getAttribute("globalconfig")).put("mailserverconfigured", "true");
/*  7192 */         com.adventnet.appmanager.util.Constants.putGlobalObject("SMTP", "true");
/*       */       }
/*  7194 */       if (!fromGettingStarted)
/*       */       {
/*  7196 */         if (request.getParameter("mailserverredirecturl") != null)
/*       */         {
/*  7198 */           amform.setMethod("createEmailAction");
/*  7199 */           if (request.getParameter("popup") == null)
/*       */           {
/*  7201 */             String check = request.getParameter("manager");
/*  7202 */             String redirectURL = request.getParameter("mailserverredirecturl") + "&returnpath=" + URLEncoder.encode(new StringBuilder().append(request.getParameter("returnpath")).append("&haid=").append(request.getParameter("haid")).toString());
/*  7203 */             if (request.getParameter("global") != null)
/*       */             {
/*  7205 */               redirectURL = redirectURL + "&global=true&PRINTER_FRIENDLY=true";
/*  7206 */               return new ActionForward(redirectURL, true);
/*       */             }
/*  7208 */             if ((check != null) && (check.equalsIgnoreCase("mail")))
/*       */             {
/*  7210 */               request.setAttribute("success", "Mail server configured sucessfully");
/*  7211 */               return new ActionForward("/jsp/MailServerConfigUserArea.jsp?popup='true'");
/*       */             }
/*  7213 */             return new ActionForward(request.getParameter("mailserverredirecturl"), true);
/*       */           }
/*       */           
/*       */ 
/*       */ 
/*  7218 */           String haidquery = request.getParameter("haid") != null ? "&haid=" + request.getParameter("haid") : "";
/*  7219 */           return new ActionForward("/jsp/EMailActionForm.jsp?popup=true" + haidquery + "&resourceid=" + request.getParameter("resourceid") + "&attributeid=" + request.getParameter("attributeid") + "&severity=" + request.getParameter("severity") + "&redirectTo=" + URLEncoder.encode(request.getParameter("redirectTo"), "UTF-8"), true);
/*       */         }
/*       */         
/*  7222 */         messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage(message));
/*  7223 */         saveMessages(request, messages);
/*  7224 */         String showSdeskConfiguration5 = request.getParameter("checkMailServer");
/*  7225 */         if (showSdeskConfiguration5 != null)
/*       */         {
/*  7227 */           return new ActionForward("/adminAction.do?method=showSdeskConfiguration");
/*       */         }
/*  7229 */         AMConnectionPool pool = AMConnectionPool.getInstance();
/*  7230 */         String showSdeskLogTicket5 = request.getParameter("checkMailForTicket");
/*  7231 */         if (showSdeskLogTicket5 != null)
/*       */         {
/*  7233 */           String query1 = "select TO_EMAIL,FROM_EMAIL from SERVICEDESK_CONFIG";
/*  7234 */           ResultSet set1 = AMConnectionPool.executeQueryStmt(query1);
/*  7235 */           if (set1.next())
/*       */           {
/*  7237 */             return new ActionForward("/adminAction.do?method=showSdeskLogTicket");
/*       */           }
/*       */           
/*       */ 
/*       */ 
/*  7242 */           messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("ticketactioncreate.before.servicedesk"));
/*  7243 */           saveMessages(request, messages);
/*  7244 */           request.setAttribute("showSdeskLogTicket6", "showSdeskLogTicket6");
/*  7245 */           amform.setTicketingType("credential");
/*  7246 */           return new ActionForward("/adminAction.do?method=showSdeskConfiguration");
/*       */         }
/*       */         
/*       */       }
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/*  7253 */       message = FormatUtil.getString("mailserver.config.Failure");
/*  7254 */       errors.add("org.apache.struts.action.GLOBAL_ERROR", new ActionError(message));
/*  7255 */       saveErrors(request, errors);
/*       */     }
/*  7257 */     if (!OEMUtil.isOEM())
/*       */     {
/*  7259 */       String adminEmailID = com.adventnet.appmanager.util.Constants.ADMIN_EMAIL_ADDRESS;
/*  7260 */       String emailId = DBUtil.getGlobalConfigValue("GlobalEMailAddress");
/*  7261 */       if ((emailId != null) && (!emailId.equals("")) && (!DBUtil.getGlobalConfigValueasBoolean("am.technicalsupportrequired")) && ("on".equalsIgnoreCase(request.getParameter("emailidfortechnicalsupport")))) {
/*  7262 */         sendMailforTechSupport(emailId, adminEmailID);
/*       */       }
/*       */     }
/*  7265 */     if ((EnterpriseUtil.isAdminServer()) && ("on".equalsIgnoreCase(request.getParameter("masMailServer")))) {
/*  7266 */       com.adventnet.appmanager.utils.client.PreRequisitesAPIUtil.synchMailSettingstoMAS(mailProps, this.seccheck);
/*       */     }
/*  7268 */     if (fromGettingStarted)
/*       */     {
/*  7270 */       message = "SmtpStatus:" + smtpStatus + ",SMTPServer:" + message + (secMessage != null ? ",SecSmtpStatus:" + secSmtpStatus + ",SMTPSecServer:" + secMessage : "") + "," + (String)request.getAttribute("message");
/*  7271 */       ClientDBUtil.sendResponse(message, response);
/*  7272 */       if (("true".equals((String)request.getAttribute("adminStatus"))) && (smtpStatus))
/*       */       {
/*  7274 */         DBUtil.updateGlobalConfigValue("hideSettingsWizard", "true");
/*       */       }
/*  7276 */       return null;
/*       */     }
/*  7278 */     return mapping.findForward("MailServerConfig");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward ServiceNowConfiguration(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*  7296 */     AMActionForm amform = (AMActionForm)form;
/*  7297 */     ActionMessages messages = new ActionMessages();
/*  7298 */     ActionErrors errors = new ActionErrors();
/*       */     
/*  7300 */     String username = amform.getServicenowUserName();
/*  7301 */     String password = amform.getServicenowPassword();
/*       */     
/*  7303 */     Properties serviceNowInfoProps = ServiceNowIntegConfig.getInstance().getServiceNowConfig();
/*  7304 */     String passwordFromDB = null;
/*  7305 */     if (serviceNowInfoProps != null)
/*       */     {
/*  7307 */       passwordFromDB = serviceNowInfoProps.getProperty("password");
/*       */     }
/*  7309 */     boolean isEditServiceNow = false;
/*  7310 */     if (((password == null) || ("".equals(password))) && (passwordFromDB != null))
/*       */     {
/*  7312 */       password = passwordFromDB;
/*       */     }
/*  7314 */     if ((passwordFromDB != null) && (!"".equals(passwordFromDB)))
/*       */     {
/*  7316 */       request.setAttribute("editServiceNow", "true");
/*       */     }
/*  7318 */     String instance = amform.getServicenowInstance();
/*       */     
/*  7320 */     String protocol = "https";
/*       */     
/*       */ 
/*  7323 */     Properties prop = new Properties();
/*  7324 */     prop.setProperty("instance", instance);
/*  7325 */     prop.setProperty("username", username);
/*  7326 */     prop.setProperty("protocol", protocol);
/*  7327 */     prop.setProperty("password", password);
/*       */     
/*  7329 */     AMLog.debug("inside ServiceNowConfiguration: instance:" + instance + " username:" + username + " protocol:" + protocol);
/*       */     try
/*       */     {
/*  7332 */       HashMap<String, String> resultMap = ExecuteSDPTicketAction.ServiceNowConfig(prop);
/*  7333 */       if (((String)resultMap.get("success")).equals("true"))
/*       */       {
/*  7335 */         APMHDClientUtil.saveAdvancedAPISettings(amform);
/*  7336 */         APMHDClientUtil.setAdvancedAPISettingsInTheForm(amform);
/*       */         
/*  7338 */         System.setProperty("cmdb.xml.path", "./conf/CMDB_ServiceNow.xml");
/*  7339 */         ServiceNowIntegUtil.getInstance().setServiceNow(true);
/*  7340 */         com.me.helpdesk.parser.HelpDeskConfParser.getHelpDesk().getHelpDeskFactory().getMediator().hdSettingsChanged();
/*       */       }
/*       */       else
/*       */       {
/*  7344 */         ServiceNowIntegUtil.getInstance().setServiceNow(false);
/*  7345 */         errors.add("org.apache.struts.action.GLOBAL_ERROR", new ActionError((String)resultMap.get("message")));
/*  7346 */         saveErrors(request, errors);
/*  7347 */         request.setAttribute("showIncludeSecondLevelCITypes", Boolean.valueOf(DBUtil.getGlobalConfigValueasBoolean("am.cmdb.settings.showAll")));
/*  7348 */         request.setAttribute("showAllSettings", "true");
/*  7349 */         return mapping.findForward("SNowConfig");
/*       */       }
/*       */       
/*  7352 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("ServiceNowConfiguration.Success"));
/*  7353 */       saveMessages(request, messages);
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/*  7357 */       ServiceNowIntegConfig.removeServiceNowConfiguration();
/*  7358 */       errors.add("org.apache.struts.action.GLOBAL_ERROR", new ActionError("ServiceNowConfiguration.Failure"));
/*  7359 */       saveErrors(request, errors);
/*       */     }
/*       */     
/*  7362 */     request.setAttribute("showIncludeSecondLevelCITypes", Boolean.valueOf(DBUtil.getGlobalConfigValueasBoolean("am.cmdb.settings.showAll")));
/*  7363 */     request.setAttribute("showAllSettings", "true");
/*  7364 */     request.setAttribute("isServiceNow", "true");
/*  7365 */     return mapping.findForward("SNowConfig");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward showServiceNowConfiguration(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*  7383 */     AMActionForm amform = (AMActionForm)form;
/*  7384 */     ActionMessages messages = new ActionMessages();
/*  7385 */     ActionErrors errors = new ActionErrors();
/*       */     
/*  7387 */     boolean editServiceNow = false;
/*  7388 */     Properties serviceNowConfig = ServiceNowIntegConfig.getInstance().getServiceNowConfig();
/*       */     
/*  7390 */     if ((serviceNowConfig != null) && (!serviceNowConfig.isEmpty()))
/*       */     {
/*  7392 */       amform.setServicenowInstance(serviceNowConfig.getProperty("instance"));
/*  7393 */       amform.setServicenowUserName(serviceNowConfig.getProperty("username"));
/*  7394 */       amform.setServicenowPassword(serviceNowConfig.getProperty("password"));
/*  7395 */       amform.setProtocol(serviceNowConfig.getProperty("protocol"));
/*  7396 */       editServiceNow = true;
/*       */     }
/*       */     
/*  7399 */     amform.setHelpDeskProduct("SERVICENOW");
/*  7400 */     APMHDClientUtil.setAdvancedAPISettingsInTheForm(amform);
/*  7401 */     request.setAttribute("showIncludeSecondLevelCITypes", Boolean.valueOf(DBUtil.getGlobalConfigValueasBoolean("am.cmdb.settings.showAll")));
/*  7402 */     request.setAttribute("showAllSettings", "true");
/*  7403 */     request.setAttribute("editServiceNow", Boolean.valueOf(editServiceNow));
/*  7404 */     request.setAttribute("isServiceNow", "true");
/*  7405 */     return mapping.findForward("SNowConfig");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward SdeskConfiguration(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*  7414 */     AMActionForm amform = (AMActionForm)form;
/*  7415 */     ActionMessages messages = new ActionMessages();
/*  7416 */     ActionErrors errors = new ActionErrors();
/*  7417 */     String host = "";
/*  7418 */     String port = "";
/*  7419 */     String protocol = "http";
/*  7420 */     String username = "";
/*  7421 */     String password = "";
/*  7422 */     String toaddress = "";
/*  7423 */     String fromaddress = "";
/*  7424 */     String loginURL = "";
/*  7425 */     String isMspDesk = "";
/*       */     
/*  7427 */     host = request.getParameter("host");
/*  7428 */     port = request.getParameter("port");
/*  7429 */     protocol = request.getParameter("protocol");
/*  7430 */     isMspDesk = request.getParameter("mspDesk");
/*       */     
/*  7432 */     Properties prop = new Properties();
/*  7433 */     if (isMspDesk != null) {
/*  7434 */       prop.setProperty("isMspDesk", isMspDesk);
/*       */     }
/*  7436 */     if (host != null)
/*       */     {
/*  7438 */       prop.setProperty("host", host);
/*       */     }
/*  7440 */     if (port != null)
/*       */     {
/*  7442 */       prop.setProperty("port", port);
/*       */     }
/*  7444 */     if (protocol != null)
/*       */     {
/*  7446 */       prop.setProperty("protocol", protocol);
/*       */     }
/*       */     
/*  7449 */     if (amform.getTicketingType().equals("credential"))
/*       */     {
/*  7451 */       username = request.getParameter("username");
/*  7452 */       password = request.getParameter("password");
/*  7453 */       toaddress = request.getParameter("toaddress");
/*  7454 */       fromaddress = request.getParameter("fromaddress");
/*       */       
/*  7456 */       if (username != null)
/*       */       {
/*  7458 */         if (DBQueryUtil.getDBType().equals("mysql"))
/*       */         {
/*  7460 */           username = StrUtil.findReplace(username, "\\", "\\\\");
/*       */         }
/*       */         
/*  7463 */         if (username.indexOf("\\") != -1)
/*       */         {
/*  7465 */           username = username.substring(0, username.indexOf("\\")).toUpperCase() + username.substring(username.indexOf("\\"));
/*  7466 */           System.out.println("The SDP username===>" + username);
/*       */         }
/*  7468 */         prop.setProperty("userName", username);
/*       */       }
/*  7470 */       if (password != null)
/*       */       {
/*  7472 */         prop.setProperty("password", password);
/*       */       }
/*  7474 */       if (toaddress != null)
/*       */       {
/*  7476 */         prop.setProperty("toaddress", toaddress);
/*       */       }
/*  7478 */       if (fromaddress != null)
/*       */       {
/*  7480 */         prop.setProperty("fromaddress", fromaddress);
/*       */       }
/*  7482 */       loginURL = protocol + "://" + host + ":" + port + "/servlet/RssFeedCreator";
/*  7483 */       prop.setProperty("loginURL", loginURL);
/*  7484 */       addFeedLoginParameters(prop);
/*       */       
/*  7486 */       HttpSession session = request.getSession();
/*  7487 */       session.setAttribute("sdLoginUrl", loginURL);
/*  7488 */       session.setAttribute("sdConfigured", "true");
/*       */       
/*  7490 */       System.out.println("Received the inputs and assigned for service desk plus:");
/*  7491 */       RetreiveFeedHandler RFH = new RetreiveFeedHandler();
/*       */       try
/*       */       {
/*  7494 */         System.out.println("Inside the try block---------->");
/*  7495 */         RssConnector rssConnector = RssConnector.getInstance();
/*  7496 */         System.out.println("After the connector ");
/*       */         
/*  7498 */         rssConnector.fetchRss(RFH);
/*  7499 */         System.out.println("After the fetchRSS ");
/*       */       }
/*       */       catch (Exception e)
/*       */       {
/*  7503 */         com.adventnet.appmanager.util.SDPIntegUtil.removeFeedConfiguration();
/*  7504 */         errors.add("org.apache.struts.action.GLOBAL_ERROR", new ActionError("ServiceDeskConfiguration.failure"));
/*  7505 */         saveErrors(request, errors);
/*  7506 */         e.printStackTrace();
/*  7507 */         return mapping.findForward("SdeskConfig");
/*       */       }
/*  7509 */       updateIntoSDeskConfig(toaddress, fromaddress);
/*  7510 */       updateSDPTicketActions(toaddress, fromaddress);
/*       */     }
/*       */     else
/*       */     {
/*  7514 */       String restApiKey = request.getParameter("restApiKey");
/*  7515 */       String technicianName = request.getParameter("technicianName");
/*  7516 */       loginURL = protocol + "://" + host + ":" + port + "/sdpapi/request/";
/*  7517 */       prop.put("restApiKey", restApiKey);
/*  7518 */       prop.put("restApiUrl", loginURL);
/*       */       
/*       */ 
/*       */ 
/*  7522 */       HashMap<String, String> resultMap = (isMspDesk != null) && (isMspDesk.equalsIgnoreCase("true")) ? ExecuteSDPTicketAction.SdeskMspConfigUsingRestApi(prop) : ExecuteSDPTicketAction.SdeskConfigUsingRestApi(prop);
/*  7523 */       if (((String)resultMap.get("success")).equals("false"))
/*       */       {
/*  7525 */         errors.add("org.apache.struts.action.GLOBAL_ERROR", new ActionError((String)resultMap.get("message")));
/*  7526 */         saveErrors(request, errors);
/*  7527 */         request.setAttribute("showIncludeSecondLevelCITypes", Boolean.valueOf(DBUtil.getGlobalConfigValueasBoolean("am.cmdb.settings.showAll")));
/*  7528 */         request.setAttribute("showAllSettings", "true");
/*  7529 */         return mapping.findForward("SdeskConfig");
/*       */       }
/*  7531 */       APMHDClientUtil.saveAdvancedAPISettings(amform);
/*  7532 */       APMHDClientUtil.setAdvancedAPISettingsInTheForm(amform);
/*       */       try {
/*  7534 */         String xmlPath = DBUtil.getGlobalConfigValueasBoolean("isMspDesk") ? "./conf/CMDB_MspDesk.xml" : "./conf/CMDB.xml";
/*  7535 */         System.setProperty("cmdb.xml.path", xmlPath);
/*  7536 */         DBUtil.insertOrUpdateServerConfigValue("cmdb.xml.path", xmlPath, 1);
/*  7537 */         com.me.helpdesk.parser.HelpDeskConfParser.getHelpDesk().getHelpDeskFactory().getMediator().hdSettingsChanged();
/*       */       } catch (Exception e2) {
/*  7539 */         e2.printStackTrace();
/*       */       }
/*       */     }
/*  7542 */     messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("ServiceDeskConfiguration.Success"));
/*  7543 */     saveMessages(request, messages);
/*       */     
/*  7545 */     SDPIntegConfig.getInstance().init();
/*       */     
/*  7547 */     if (ServiceNowIntegUtil.getInstance().isServiceNow())
/*       */     {
/*  7549 */       ServiceNowIntegConfig.removeServiceNowConfiguration();
/*       */     }
/*  7551 */     ResultSet set1 = null;
/*       */     try
/*       */     {
/*  7554 */       String productName = "ServiceDesk";
/*  7555 */       String loginURL1 = protocol + "://" + host + ":" + port + "/HomePage.do";
/*       */       
/*  7557 */       String query1 = "select LOGIN_URL from ADDONPRODUCTS_URL where PRODUCT_NAME='ServiceDesk'";
/*  7558 */       set1 = AMConnectionPool.executeQueryStmt(query1);
/*       */       
/*  7560 */       if (set1.next())
/*       */       {
/*  7562 */         String updateAddOnProducts = "update ADDONPRODUCTS_URL set HOST = '" + host + "', PORT = '" + port + "', PROTOCOL = '" + protocol + "' , LOGIN_URL='" + loginURL1 + "' where PRODUCT_NAME='ServiceDesk'";
/*  7563 */         this.mo.executeUpdateStmt(updateAddOnProducts);
/*       */       }
/*       */       else
/*       */       {
/*  7567 */         String insertAddOnProducts = "insert into ADDONPRODUCTS_URL (PRODUCT_NAME, PROTOCOL, HOST , PORT, LOGIN_URL) values ('" + productName + "','" + protocol + "','" + host + "','" + port + "','" + loginURL1 + "')";
/*  7568 */         System.out.println("the service desk plus insert query is:" + insertAddOnProducts);
/*  7569 */         this.mo.executeUpdateStmt(insertAddOnProducts);
/*       */       }
/*       */       
/*  7572 */       if (APMHelpDeskUtil.isCIsyncEnabled(request))
/*       */       {
/*  7574 */         CMDBResyncThread thread = CMDBResyncThread.getInstance();
/*  7575 */         if (thread.getSyncState() != com.me.apm.cmdb.CMDBResyncThread.SyncState.INPROGRESS)
/*       */         {
/*       */           try
/*       */           {
/*  7579 */             com.me.apm.cmdb.CMDBResyncObject reSyncObj = new com.me.apm.cmdb.CMDBResyncObject(request);
/*  7580 */             thread.setResyncObject(reSyncObj);
/*  7581 */             thread.start();
/*       */           }
/*       */           catch (Exception e)
/*       */           {
/*  7585 */             e.printStackTrace();
/*       */           }
/*       */         }
/*       */       }
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/*  7592 */       e.printStackTrace();
/*       */     }
/*       */     finally
/*       */     {
/*  7596 */       AMConnectionPool.closeStatement(set1);
/*       */     }
/*  7598 */     String showSdeskLogTicketCheck = request.getParameter("checkforSdesk");
/*  7599 */     if (showSdeskLogTicketCheck != null)
/*       */     {
/*  7601 */       return new ActionForward("/adminAction.do?method=showSdeskLogTicket");
/*       */     }
/*       */     
/*  7604 */     String configureSdesk4 = request.getParameter("toconfigureSdesk");
/*  7605 */     if (configureSdesk4 != null)
/*       */     {
/*  7607 */       return new ActionForward("/adminAction.do?method=showSdeskLogTicket");
/*       */     }
/*  7609 */     request.setAttribute("showIncludeSecondLevelCITypes", Boolean.valueOf(DBUtil.getGlobalConfigValueasBoolean("am.cmdb.settings.showAll")));
/*  7610 */     request.setAttribute("showAllSettings", "true");
/*       */     
/*  7612 */     return mapping.findForward("SdeskConfig");
/*       */   }
/*       */   
/*       */   private void updateSDPTicketActions(String toaddress, String fromaddress) {
/*  7616 */     String actionIds = null;
/*  7617 */     ResultSet rs = null;
/*       */     try
/*       */     {
/*  7620 */       rs = AMConnectionPool.executeQueryStmt("select * from AM_SDESK_TICKET_DETAILS");
/*  7621 */       while (rs.next())
/*       */       {
/*  7623 */         if (actionIds != null)
/*       */         {
/*  7625 */           actionIds = actionIds + "," + rs.getString("ID");
/*       */         }
/*       */         else
/*       */         {
/*  7629 */           actionIds = rs.getString("ID");
/*       */         }
/*       */       }
/*  7632 */       if (actionIds != null)
/*       */       {
/*  7634 */         AMConnectionPool.executeUpdateStmt("update AM_EMAILACTION set FROMADDRESS='" + fromaddress + "', TOADDRESS='" + toaddress + "' where ID in (" + actionIds + ")");
/*       */       }
/*       */       return;
/*       */     }
/*       */     catch (Exception exp) {
/*  7639 */       AMLog.debug("AdminActions: Error in updating Ticket details...");
/*       */     }
/*       */     finally
/*       */     {
/*       */       try
/*       */       {
/*  7645 */         if (rs != null)
/*       */         {
/*  7647 */           rs.close();
/*       */         }
/*       */       }
/*       */       catch (Exception ee)
/*       */       {
/*  7652 */         rs = null;
/*       */       }
/*       */     }
/*       */   }
/*       */   
/*       */   public String addFeedLoginParameters(Properties prop)
/*       */   {
/*  7659 */     Connection conn = null;
/*  7660 */     Connection conn1 = null;
/*       */     
/*       */     try
/*       */     {
/*  7664 */       String toaddress = prop.getProperty("toaddress");
/*  7665 */       String fromaddress = prop.getProperty("fromaddress");
/*  7666 */       FeedLoginParams feedLogin = new FeedLoginParams();
/*  7667 */       long feedLoginID = feedLogin.getFeedLoginId();
/*       */       
/*  7669 */       String host = prop.getProperty("host");
/*  7670 */       int port = new Integer(prop.getProperty("port")).intValue();
/*  7671 */       String userName = prop.getProperty("userName");
/*  7672 */       String password = prop.getProperty("password");
/*  7673 */       String protocol = prop.getProperty("protocol");
/*  7674 */       String loginURL = prop.getProperty("loginURL");
/*  7675 */       long proxyID = 0L;
/*  7676 */       String productName = "ServiceDeskPlus";
/*       */       
/*  7678 */       if (OEMUtil.getOEMString("product.name").equalsIgnoreCase("IT360"))
/*       */       {
/*  7680 */         protocol = prop.getProperty("protocol");
/*  7681 */         String prodNameInProp = prop.getProperty("productname");
/*  7682 */         if ((prodNameInProp != null) && (!prodNameInProp.equals("")))
/*       */         {
/*  7684 */           productName = prodNameInProp;
/*       */         }
/*  7686 */         loginURL = prop.getProperty("loginURL");
/*       */       }
/*       */       
/*  7689 */       feedLogin.setProductName(productName);
/*  7690 */       feedLogin.setRemoteHost(host);
/*  7691 */       feedLogin.setRemotePort(port);
/*  7692 */       feedLogin.setProtocol(protocol);
/*  7693 */       feedLogin.setProxyID(proxyID);
/*  7694 */       feedLogin.setUserName(userName);
/*  7695 */       feedLogin.setPassword(password);
/*       */       
/*  7697 */       String isStandaloneSDPEnabled = null;
/*  7698 */       isStandaloneSDPEnabled = DBUtil.getServerConfigValue("am.standalonesdp.enabled");
/*       */       
/*       */ 
/*  7701 */       if ((!OEMUtil.getOEMString("product.name").equalsIgnoreCase("IT360")) || ((isStandaloneSDPEnabled != null) && (isStandaloneSDPEnabled.equals("true"))))
/*       */       {
/*  7703 */         feedLogin.setContextPath("/");
/*  7704 */         feedLogin.setActionClass("/j_security_check");
/*  7705 */         feedLogin.setLabelUser("j_username");
/*  7706 */         feedLogin.setLabelPass("j_password");
/*       */       }
/*  7708 */       feedLogin.setLoginUrl(loginURL);
/*       */       
/*  7710 */       conn = NmsUtil.relapi.getConnection();
/*  7711 */       com.adventnet.rss.db.DBAdaptor dbadapt = new com.adventnet.rss.db.DBAdaptor(conn);
/*  7712 */       DBPersistence dbpers = new DBPersistence(dbadapt);
/*       */       
/*  7714 */       String feedUrlStr = protocol + "://" + host + ":" + port + "/servlet/RssFeedCreator";
/*  7715 */       FeedURL feedUrl = new FeedURL();
/*  7716 */       feedUrl.setFeedLoginID(feedLoginID);
/*  7717 */       feedUrl.setFeedUrl(feedUrlStr);
/*  7718 */       feedUrl.setFeedName("ServiceDeskPlus");
/*       */       
/*  7720 */       FeedLoginParams params = (FeedLoginParams)dbpers.getRowObject("FEED_LOGIN_PARAMS", "PRODUCT_NAME", productName);
/*       */       
/*  7722 */       if (params != null)
/*       */       {
/*  7724 */         feedLogin.setFeedLoginID(params.getFeedLoginId());
/*  7725 */         dbpers.updateFeedLoginParams(feedLogin);
/*  7726 */         feedUrl.setFeedLoginID(params.getFeedLoginId());
/*  7727 */         dbpers.updateFeedUrl(feedUrl);
/*       */       }
/*       */       else
/*       */       {
/*  7731 */         dbpers.addFeedLoginParams(feedLogin);
/*  7732 */         feedUrl.setFeedLoginID(feedLogin.getFeedLoginId());
/*  7733 */         dbpers.addFeedUrl(feedUrl);
/*       */       }
/*       */       
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/*  7739 */       e.printStackTrace();
/*       */     }
/*  7741 */     return null;
/*       */   }
/*       */   
/*       */   public void updateIntoSDeskConfig(String toemailid, String fromemailid)
/*       */   {
/*  7746 */     String query2 = "select TO_EMAIL, FROM_EMAIL from SERVICEDESK_CONFIG";
/*  7747 */     boolean update = false;
/*  7748 */     String toEmail = "";
/*  7749 */     Properties props = new Properties();
/*  7750 */     ResultSet rs = null;
/*       */     try
/*       */     {
/*  7753 */       rs = NmsUtil.relapi.executeQuery(NmsUtil.relapi.getPreparedStatement(query2));
/*  7754 */       if (rs.next())
/*       */       {
/*  7756 */         toEmail = rs.getString(1);
/*  7757 */         update = true;
/*       */       }
/*       */       
/*       */ 
/*       */ 
/*       */       return;
/*       */     }
/*       */     catch (Exception exp) {}finally
/*       */     {
/*       */       try
/*       */       {
/*  7768 */         if (rs != null)
/*  7769 */           AMConnectionPool.closeStatement(rs);
/*  7770 */         if (update)
/*       */         {
/*  7772 */           updateSDeskConfig(toemailid, fromemailid, toEmail);
/*       */         }
/*       */         else
/*       */         {
/*  7776 */           insertIntoSDeskConfig(toemailid, fromemailid);
/*       */         }
/*       */       }
/*       */       catch (Exception ee) {}
/*       */     }
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   private void insertIntoSDeskConfig(String toemailid, String fromemailid)
/*       */   {
/*  7788 */     String delimiter = ",";
/*  7789 */     String strdel = "'";
/*  7790 */     String query = "insert into SERVICEDESK_CONFIG values(";
/*  7791 */     query = query + strdel + toemailid + strdel + delimiter;
/*  7792 */     query = query + strdel + fromemailid + strdel + ");";
/*  7793 */     executeQuery(query);
/*       */   }
/*       */   
/*       */   private void updateSDeskConfig(String toemailid, String fromemailid, String currentToEmail)
/*       */   {
/*  7798 */     String delimiter = ",";
/*  7799 */     String strdel = "'";
/*  7800 */     String query = "update SERVICEDESK_CONFIG set ";
/*  7801 */     query = query + "TO_EMAIL=" + strdel + toemailid + strdel + delimiter;
/*  7802 */     query = query + "FROM_EMAIL=" + strdel + fromemailid + strdel;
/*  7803 */     query = query + " where TO_EMAIL=" + strdel + currentToEmail + strdel + ";";
/*  7804 */     executeQuery(query);
/*       */   }
/*       */   
/*       */   private void executeQuery(String query)
/*       */   {
/*  7809 */     Properties props = new Properties();
/*       */     try
/*       */     {
/*  7812 */       NmsUtil.relapi.executeUpdate(NmsUtil.relapi.getPreparedStatement(query));
/*       */     }
/*       */     catch (Exception exp) {}
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward showMailServerConfiguration(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*  7827 */     if (DBUtil.isDelegatedAdmin(request.getRemoteUser()))
/*       */     {
/*  7829 */       return new ActionForward("/jsp/formpages/AccessRestricted.jsp");
/*       */     }
/*       */     String redirectionUrl;
/*  7832 */     if ((!com.adventnet.appmanager.util.Constants.isIt360) && (!com.adventnet.appmanager.util.Constants.sqlManager))
/*       */     {
/*  7834 */       String encodeurl = "/showTile.do?TileName=Tile.AdminConf";
/*  7835 */       redirectionUrl = "/jsp/GettingStarted.jsp?tabtoselect=5&redirectTo=" + encodeurl;
/*       */     }
/*       */     
/*       */ 
/*       */ 
/*  7840 */     AMActionForm amform = (AMActionForm)form;
/*  7841 */     String query = "select HOST,PORT,USERNAME," + DBQueryUtil.decodeBytes("PASSWORD") + ",TLSEnabled,SSLEnabled from AM_MAILSETTINGS where ID=1";
/*  7842 */     ResultSet set = null;
/*       */     try
/*       */     {
/*  7845 */       set = AMConnectionPool.executeQueryStmt(query);
/*  7846 */       if (set.next())
/*       */       {
/*  7848 */         amform.setSmtpserver(set.getString(1));
/*  7849 */         amform.setSmtpport(set.getInt(2));
/*  7850 */         amform.setSMTPServerUserName(set.getString(3));
/*  7851 */         amform.setSMTPServerPassword(new String(set.getBytes(4)));
/*  7852 */         amform.setPrmTlsAuth(set.getInt(5) == 1);
/*  7853 */         amform.setPrmSSLAuth(set.getInt(6) == 1);
/*  7854 */         amform.setSeccheck(false);
/*       */       }
/*       */     }
/*       */     catch (Exception ex)
/*       */     {
/*  7859 */       ex.printStackTrace();
/*       */     }
/*       */     finally
/*       */     {
/*  7863 */       AMConnectionPool.closeStatement(set);
/*       */     }
/*       */     
/*  7866 */     query = "select HOST,PORT,USERNAME," + DBQueryUtil.decodeBytes("PASSWORD") + ",TLSEnabled,SSLEnabled from AM_MAILSETTINGS where ID=2";
/*  7867 */     ResultSet set1 = null;
/*       */     try
/*       */     {
/*  7870 */       set1 = AMConnectionPool.executeQueryStmt(query);
/*  7871 */       if (set1.next())
/*       */       {
/*  7873 */         amform.setSmtpsecserver(set1.getString(1));
/*  7874 */         amform.setSmtpsecport(set1.getInt(2));
/*  7875 */         amform.setSMTPsecServerUserName(set1.getString(3));
/*  7876 */         amform.setSMTPsecServerPassword(new String(set1.getBytes(4)));
/*  7877 */         boolean tlsAuth = false;
/*  7878 */         amform.setSecTlsAuth(set1.getInt(5) == 1);
/*  7879 */         amform.setSecSSLAuth(set1.getInt(6) == 1);
/*  7880 */         amform.setSeccheck(true);
/*       */       }
/*       */     }
/*       */     catch (Exception ex1)
/*       */     {
/*  7885 */       ex1.printStackTrace();
/*       */     }
/*       */     finally
/*       */     {
/*  7889 */       AMConnectionPool.closeStatement(set1);
/*       */     }
/*       */     
/*  7892 */     ResultSet mailadr = null;
/*       */     try
/*       */     {
/*  7895 */       mailadr = AMConnectionPool.executeQueryStmt("select VALUE from AM_GLOBALCONFIG where NAME='GlobalEMailAddress'");
/*  7896 */       if (mailadr.next())
/*       */       {
/*  7898 */         amform.setEmailAddress(mailadr.getString("VALUE"));
/*       */       }
/*       */     }
/*       */     catch (Exception ex2)
/*       */     {
/*  7903 */       ex2.printStackTrace();
/*       */     }
/*       */     finally
/*       */     {
/*  7907 */       AMConnectionPool.closeStatement(mailadr);
/*       */     }
/*       */     
/*  7910 */     ResultSet secmailadr = null;
/*       */     try
/*       */     {
/*  7913 */       secmailadr = AMConnectionPool.executeQueryStmt("select VALUE from AM_GLOBALCONFIG where NAME='SecGlobalEMailAddress'");
/*  7914 */       if (secmailadr.next())
/*       */       {
/*  7916 */         amform.setSecemailAddress(secmailadr.getString("VALUE"));
/*       */       }
/*       */     }
/*       */     catch (Exception ex3)
/*       */     {
/*  7921 */       ex3.printStackTrace();
/*       */     }
/*       */     finally
/*       */     {
/*  7925 */       AMConnectionPool.closeStatement(secmailadr);
/*       */     }
/*       */     
/*  7928 */     String showSdeskConfiguration1 = (String)request.getAttribute("showSdeskConfiguration");
/*  7929 */     if (showSdeskConfiguration1 != null)
/*       */     {
/*  7931 */       request.setAttribute("showSdeskConfiguration2", "showSdeskConfiguration2");
/*       */     }
/*  7933 */     String showSdeskLogTicket1 = (String)request.getAttribute("showSdeskLogTicket");
/*  7934 */     if (showSdeskLogTicket1 != null)
/*       */     {
/*  7936 */       request.setAttribute("showSdeskLogTicket2", "showSdeskLogTicket2");
/*       */     }
/*       */     
/*  7939 */     return mapping.findForward("MailServerConfig");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward showOpManagerConfiguration(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*  7979 */     AMActionForm amform = (AMActionForm)form;
/*  7980 */     amform.setHost("opmanager");
/*  7981 */     amform.setPort("8080");
/*  7982 */     request.setAttribute("OPMANAGER", "OPMANAGER");
/*  7983 */     return mapping.findForward("SdeskConfig");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward showSdeskConfiguration(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*  7992 */     AMActionForm amform = (AMActionForm)form;
/*  7993 */     ActionMessages messages = new ActionMessages();
/*  7994 */     AMConnectionPool pool = AMConnectionPool.getInstance();
/*       */     
/*  7996 */     String host = "";
/*  7997 */     String port = "";
/*  7998 */     String protocol = "";
/*  7999 */     String userName = "";
/*  8000 */     String toaddress = "";
/*  8001 */     String fromaddress = "";
/*  8002 */     String password = "";
/*  8003 */     String query = "select * from FEED_LOGIN_PARAMS";
/*  8004 */     ResultSet set = null;
/*       */     try
/*       */     {
/*  8007 */       set = AMConnectionPool.executeQueryStmt(query);
/*  8008 */       if (set.next())
/*       */       {
/*  8010 */         protocol = set.getString(3);
/*  8011 */         host = set.getString(4);
/*  8012 */         port = set.getString(5);
/*  8013 */         userName = set.getString(6);
/*  8014 */         password = com.adventnet.rss.utils.Utils.convertFromBase(set.getString(7));
/*  8015 */         query = "select * from SERVICEDESK_CONFIG";
/*       */         
/*  8017 */         ResultSet set1 = null;
/*       */         try
/*       */         {
/*  8020 */           set1 = AMConnectionPool.executeQueryStmt(query);
/*  8021 */           if (set1.next())
/*       */           {
/*  8023 */             toaddress = set1.getString(1);
/*  8024 */             fromaddress = set1.getString(2);
/*       */           }
/*       */         }
/*       */         catch (Exception e)
/*       */         {
/*  8029 */           e.printStackTrace();
/*       */         }
/*       */         finally {}
/*       */         
/*       */ 
/*       */ 
/*       */ 
/*  8036 */         amform.setHost(host);
/*  8037 */         amform.setProtocol(protocol);
/*  8038 */         amform.setUsername(userName);
/*  8039 */         amform.setToaddress(toaddress);
/*  8040 */         amform.setFromaddress(fromaddress);
/*       */       }
/*       */       
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/*  8046 */       e.printStackTrace();
/*       */     }
/*       */     finally
/*       */     {
/*  8050 */       AMConnectionPool.closeStatement(set);
/*       */     }
/*  8052 */     SDPIntegConfig sdpIntegConfig = SDPIntegConfig.getInstance();
/*  8053 */     if (sdpIntegConfig.isRestApiEnabled())
/*       */     {
/*  8055 */       amform.setHost(sdpIntegConfig.getSDeskInfo().getProperty("host"));
/*  8056 */       amform.setRestApiKey(sdpIntegConfig.getSdpRestApiKey());
/*  8057 */       port = sdpIntegConfig.getSDeskInfo().getProperty("port");
/*       */     }
/*  8059 */     APMHDClientUtil.setAdvancedAPISettingsInTheForm(amform);
/*  8060 */     amform.setPort(port);
/*       */     
/*  8062 */     String configureSdesk1 = (String)request.getAttribute("configureSdesk");
/*  8063 */     if (configureSdesk1 != null)
/*       */     {
/*  8065 */       request.setAttribute("configureSdesk2", "configureSdesk2");
/*       */     }
/*  8067 */     String showSdeskLogTicket7 = (String)request.getAttribute("showSdeskLogTicket6");
/*  8068 */     if (showSdeskLogTicket7 != null)
/*       */     {
/*  8070 */       request.setAttribute("showSdeskLogTicket8", "showSdeskLogTicket8");
/*       */     }
/*  8072 */     request.setAttribute("showIncludeSecondLevelCITypes", Boolean.valueOf(DBUtil.getGlobalConfigValueasBoolean("am.cmdb.settings.showAll")));
/*  8073 */     request.setAttribute("showAllSettings", "true");
/*  8074 */     request.setAttribute("SERVICEDESK", "SERVICEDESK");
/*  8075 */     return mapping.findForward("SdeskConfig");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */   public ActionForward getRequestTemplateDetails(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */   {
/*  8082 */     response.setContentType("text/html; charset=UTF-8");
/*       */     try
/*       */     {
/*  8085 */       PrintWriter out = response.getWriter();
/*  8086 */       JSONObject obj = new JSONObject();
/*  8087 */       String templateId = request.getParameter("reqTemplateId");
/*  8088 */       if ((templateId != null) && (templateId.indexOf("_") == -1))
/*       */       {
/*       */ 
/*  8091 */         obj.put("Subject", FormatUtil.getString("am.webclient.managermail.bsm.alertfrommessage.text", new String[] { OEMUtil.getOEMString("product.name") }) + "  $HOSTNAME $PORT $SEVERITY");
/*  8092 */         obj.put("Description", FormatUtil.getString("am.webclient.mail.default.message.text", new String[] { OEMUtil.getOEMString("product.name") }) + " $HOSTIP $RCAMESSAGE");
/*  8093 */         obj.put("hideFields", "false");
/*       */       }
/*       */       else
/*       */       {
/*  8097 */         StringTokenizer strtoken = new StringTokenizer(templateId, "_");
/*  8098 */         Record record = APMHelpDeskUtil.getRequestTemplateInformation(strtoken.nextToken());
/*  8099 */         if (record != null)
/*       */         {
/*  8101 */           if ((record.getAttribute("Subject") == null) || ("undefined".equalsIgnoreCase(record.getAttribute("Subject").toString())))
/*       */           {
/*  8103 */             record.setAttribute("Subject", "");
/*       */           }
/*  8105 */           if ((record.getAttribute("Description") == null) || ("undefined".equalsIgnoreCase(record.getAttribute("Description").toString())))
/*       */           {
/*  8107 */             record.setAttribute("Description", "");
/*       */           }
/*  8109 */           for (Map.Entry<String, Object> entry : record.getAttributes().entrySet())
/*       */           {
/*  8111 */             obj.put((String)entry.getKey(), entry.getValue());
/*       */           }
/*  8113 */           if (APMHDSettingsUtil.getTicketSettingsCache().isAllowOverWriteOfReqTemplate())
/*       */           {
/*  8115 */             obj.put("hideFields", "false");
/*       */           }
/*       */           else
/*       */           {
/*  8119 */             obj.put("hideFields", "true");
/*       */           }
/*       */         }
/*       */       }
/*  8123 */       out.write(obj.toString());
/*       */     }
/*       */     catch (Exception e) {}
/*       */     
/*       */ 
/*       */ 
/*  8129 */     return null;
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward getServiceNowSubCategories(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */   {
/*       */     try
/*       */     {
/*  8139 */       response.setContentType("application/json");
/*  8140 */       response.setCharacterEncoding("UTF-8");
/*  8141 */       PrintWriter out = response.getWriter();
/*  8142 */       String categoryValue = request.getParameter("category");
/*  8143 */       ArrayList subCategories = APMHelpDeskUtil.getSubCategories(categoryValue);
/*  8144 */       AMLog.debug("SERVICENOW: getServiceNowSubCategories: category:" + categoryValue + "- subCategories:" + subCategories);
/*  8145 */       JSONObject optionsObject = null;
/*  8146 */       JSONArray optionsArray = new JSONArray();
/*       */       
/*  8148 */       for (int i = 0; i < subCategories.size(); i++)
/*       */       {
/*  8150 */         optionsObject = new JSONObject();
/*  8151 */         Properties p = (Properties)subCategories.get(i);
/*  8152 */         optionsObject.put("label", p.getProperty("label"));
/*  8153 */         optionsObject.put("value", p.getProperty("value"));
/*       */         
/*  8155 */         optionsArray.put(optionsObject);
/*       */       }
/*       */       
/*  8158 */       JSONObject subCategoryObject = new JSONObject();
/*  8159 */       subCategoryObject.put("subCategories", optionsArray);
/*  8160 */       out.println(subCategoryObject.toString());
/*  8161 */       out.flush();
/*  8162 */       AMLog.debug("Processed getServiceNowSubCategories: subCategoryObject: " + subCategoryObject);
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/*  8166 */       e.printStackTrace();
/*       */     }
/*  8168 */     return null;
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward getsubCategories(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */   {
/*       */     try
/*       */     {
/*  8179 */       response.setContentType("text/plain; charset=UTF-8");
/*  8180 */       PrintWriter out = response.getWriter();
/*  8181 */       StringBuffer temp = new StringBuffer();
/*  8182 */       if ("true".equalsIgnoreCase(request.getParameter("API")))
/*       */       {
/*  8184 */         String categoryValue = request.getParameter("category");
/*  8185 */         StringTokenizer strtoken = new StringTokenizer(categoryValue, "_");
/*  8186 */         ArrayList subCategories = APMHelpDeskUtil.getSubCategories(strtoken.nextToken());
/*  8187 */         if (subCategories != null)
/*       */         {
/*       */ 
/*  8190 */           for (Object obj : subCategories)
/*       */           {
/*  8192 */             Properties props = (Properties)obj;
/*       */             
/*       */ 
/*  8195 */             temp.append(props.getProperty("value").replace(",", "_APM_COMMA_DELIMITER_")).append(",");
/*       */           }
/*       */           
/*       */         }
/*       */       }
/*       */       else
/*       */       {
/*  8202 */         String category = request.getParameter("category");
/*  8203 */         RetreiveFeedHandler RFH = new RetreiveFeedHandler();
/*       */         try
/*       */         {
/*  8206 */           RssConnector rssConnector = RssConnector.getInstance();
/*  8207 */           rssConnector.fetchRss(RFH);
/*       */         }
/*       */         catch (Exception e)
/*       */         {
/*  8211 */           e.printStackTrace();
/*       */         }
/*  8213 */         JSONObject csiObj = RFH.csiObj;
/*  8214 */         JSONArray subCategories = csiObj.getJSONArray(category);
/*  8215 */         if (subCategories != null)
/*       */         {
/*  8217 */           for (int i = 0; i < subCategories.length(); i++)
/*       */           {
/*  8219 */             JSONObject subcatItemObj = (JSONObject)subCategories.get(i);
/*  8220 */             JSONArray namesArr = subcatItemObj.names();
/*  8221 */             if (namesArr != null)
/*       */             {
/*  8223 */               for (int j = 0; j < namesArr.length(); j++)
/*       */               {
/*  8225 */                 String eachName = (String)namesArr.get(j);
/*  8226 */                 temp.append(eachName + ",");
/*       */               }
/*       */             }
/*       */           }
/*       */         }
/*       */       }
/*  8232 */       out.println(temp);
/*  8233 */       out.flush();
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/*  8237 */       e.printStackTrace();
/*       */     }
/*  8239 */     return null;
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward getItems(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*  8248 */     response.setContentType("text/plain; charset=UTF-8");
/*  8249 */     PrintWriter out = response.getWriter();
/*  8250 */     StringBuffer temp = new StringBuffer();
/*       */     
/*  8252 */     if ("true".equalsIgnoreCase(request.getParameter("API")))
/*       */     {
/*  8254 */       String subcategoryValue = request.getParameter("subcategory");
/*  8255 */       StringTokenizer strtoken = new StringTokenizer(subcategoryValue, "_");
/*  8256 */       ArrayList items = APMHelpDeskUtil.getItems(strtoken.nextToken());
/*  8257 */       if (items != null)
/*       */       {
/*       */ 
/*  8260 */         for (Object obj : items)
/*       */         {
/*  8262 */           Properties props = (Properties)obj;
/*       */           
/*       */ 
/*  8265 */           temp.append(props.getProperty("value").replace(",", "_APM_COMMA_DELIMITER_")).append(",");
/*       */         }
/*       */         
/*       */       }
/*       */       
/*       */     }
/*       */     else
/*       */     {
/*  8273 */       String category = request.getParameter("category");
/*  8274 */       String scategory = request.getParameter("subcategory");
/*  8275 */       RetreiveFeedHandler RFH = new RetreiveFeedHandler();
/*       */       try
/*       */       {
/*  8278 */         RssConnector rssConnector = RssConnector.getInstance();
/*  8279 */         rssConnector.fetchRss(RFH);
/*       */       }
/*       */       catch (Exception e)
/*       */       {
/*  8283 */         e.printStackTrace();
/*       */       }
/*  8285 */       JSONObject csiObj = RFH.csiObj;
/*  8286 */       JSONArray subCategories = csiObj.getJSONArray(category);
/*  8287 */       if (subCategories != null)
/*       */       {
/*  8289 */         for (int i = 0; i < subCategories.length(); i++)
/*       */         {
/*       */           try
/*       */           {
/*  8293 */             JSONObject items = (JSONObject)subCategories.get(i);
/*  8294 */             JSONArray itemsArray = (JSONArray)items.get(scategory);
/*  8295 */             if (itemsArray != null)
/*       */             {
/*  8297 */               for (int j = 0; j < itemsArray.length(); j++)
/*       */               {
/*  8299 */                 temp.append(itemsArray.get(j) + ",");
/*       */               }
/*       */             }
/*       */           }
/*       */           catch (Exception e) {}
/*       */         }
/*       */       }
/*       */     }
/*       */     
/*       */ 
/*       */ 
/*  8310 */     out.println(temp);
/*  8311 */     out.flush();
/*  8312 */     return null;
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward getAssignedToTechnicians(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */   {
/*       */     try
/*       */     {
/*  8322 */       AMLog.debug("Entering getAssignedToTechnicians");
/*  8323 */       response.setContentType("application/json");
/*  8324 */       response.setCharacterEncoding("UTF-8");
/*  8325 */       PrintWriter out = response.getWriter();
/*  8326 */       String groupId = request.getParameter("groupId");
/*  8327 */       ArrayList technicians = APMHelpDeskUtil.getAssignToTechnicians(groupId);
/*  8328 */       AMLog.debug("Fetched technicians - getAssignToTechnicians: " + technicians + " groupId:" + groupId);
/*  8329 */       JSONObject techniciansObject = null;
/*  8330 */       JSONArray techniciansArray = new JSONArray();
/*       */       
/*  8332 */       for (int i = 0; i < technicians.size(); i++)
/*       */       {
/*  8334 */         techniciansObject = new JSONObject();
/*  8335 */         Properties p = (Properties)technicians.get(i);
/*  8336 */         techniciansObject.put("label", p.getProperty("label"));
/*  8337 */         techniciansObject.put("value", p.getProperty("value"));
/*       */         
/*  8339 */         techniciansArray.put(techniciansObject);
/*       */       }
/*       */       
/*  8342 */       JSONObject userIdObj = new JSONObject();
/*  8343 */       userIdObj.put("technicians", techniciansArray);
/*  8344 */       out.println(userIdObj.toString());
/*  8345 */       out.flush();
/*  8346 */       AMLog.debug("Processed getAssignToTechnicians: " + userIdObj);
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/*  8350 */       e.printStackTrace();
/*       */     }
/*  8352 */     return null;
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */   public ActionForward getTechnicians(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*       */     try
/*       */     {
/*  8362 */       response.setContentType("text/plain; charset=UTF-8");
/*  8363 */       PrintWriter out = response.getWriter();
/*  8364 */       StringBuffer temp = new StringBuffer();
/*       */       
/*  8366 */       if ("true".equalsIgnoreCase(request.getParameter("API")))
/*       */       {
/*  8368 */         String supportGroupValue = request.getParameter("group");
/*  8369 */         StringTokenizer strtoken = new StringTokenizer(supportGroupValue, "_");
/*  8370 */         ArrayList technicains = APMHelpDeskUtil.getTechnicians(strtoken.nextToken());
/*  8371 */         if (technicains != null)
/*       */         {
/*  8373 */           for (Object obj : technicains)
/*       */           {
/*  8375 */             Properties props = (Properties)obj;
/*       */             
/*       */ 
/*  8378 */             temp.append(props.getProperty("value").replace(",", "_APM_COMMA_DELIMITER_")).append(",");
/*       */           }
/*       */           
/*       */         }
/*       */       }
/*       */       else
/*       */       {
/*  8385 */         String group = request.getParameter("group");
/*  8386 */         RetreiveFeedHandler RFH = new RetreiveFeedHandler();
/*       */         try
/*       */         {
/*  8389 */           RssConnector rssConnector = RssConnector.getInstance();
/*  8390 */           rssConnector.fetchRss(RFH);
/*       */         }
/*       */         catch (Exception e)
/*       */         {
/*  8394 */           e.printStackTrace();
/*       */         }
/*  8396 */         JSONObject csiObj = RFH.grpTech;
/*  8397 */         JSONArray technicians = csiObj.getJSONArray(group);
/*  8398 */         if (technicians != null)
/*       */         {
/*  8400 */           for (int i = 0; i < technicians.length(); i++)
/*       */           {
/*  8402 */             JSONObject subcatItemObj = (JSONObject)technicians.get(i);
/*  8403 */             JSONArray namesArr = new JSONArray();
/*  8404 */             namesArr = subcatItemObj.names();
/*  8405 */             if (namesArr != null)
/*       */             {
/*  8407 */               for (int j = 0; j < namesArr.length(); j++)
/*       */               {
/*  8409 */                 String eachName = (String)namesArr.get(j);
/*  8410 */                 temp.append(eachName + ",");
/*       */               }
/*       */             }
/*       */           }
/*       */         }
/*       */       }
/*  8416 */       out.println(temp);
/*  8417 */       out.flush();
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/*  8421 */       e.printStackTrace();
/*       */     }
/*  8423 */     return null;
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward deleteManagedServers(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*  8434 */     ActionMessages messages = new ActionMessages();
/*  8435 */     ActionErrors errors = new ActionErrors();
/*  8436 */     AMConnectionPool pool = AMConnectionPool.getInstance();
/*  8437 */     AMActionForm amform = new AMActionForm();
/*  8438 */     if (request.getParameter("addNewServer") != null)
/*       */     {
/*  8440 */       String displayName = request.getParameter("displayname");
/*  8441 */       String host = request.getParameter("host");
/*  8442 */       String externalHost = request.getParameter("externalhost");
/*  8443 */       String port = request.getParameter("category");
/*  8444 */       String sslport = request.getParameter("port");
/*  8445 */       int indexValue = Integer.parseInt(request.getParameter("timeout").trim());
/*  8446 */       String passWord = request.getParameter("password");
/*  8447 */       String anomalyval = request.getParameter("anomalybox");
/*  8448 */       String masGroupName = request.getParameter("masGroupName");
/*  8449 */       masGroupName = masGroupName == null ? "" : masGroupName.trim();
/*  8450 */       if (masGroupName.equals("-")) {
/*  8451 */         masGroupName = "";
/*       */       }
/*  8453 */       if (anomalyval == null) {
/*  8454 */         anomalyval = "-1";
/*       */       }
/*  8456 */       String rbmval = request.getParameter("rbmbox");
/*  8457 */       if (rbmval == null) {
/*  8458 */         rbmval = "0";
/*       */       }
/*       */       
/*  8461 */       amform.setHost(host);
/*  8462 */       amform.setExternalhost(externalHost);
/*  8463 */       amform.setCategory(port);
/*  8464 */       amform.setPort(sslport);
/*  8465 */       amform.setTimeout(indexValue);
/*  8466 */       amform.setPassword(passWord);
/*  8467 */       amform.setMasGroupName(masGroupName);
/*  8468 */       int constantRange = com.adventnet.appmanager.server.framework.comm.Constants.RANGE;
/*  8469 */       int range = indexValue * constantRange;
/*  8470 */       String checkQuery = "select PORT from AM_MAS_SERVER where ALLOTED_GLOBAL_RANGE =" + range;
/*  8471 */       ResultSet set = AMConnectionPool.executeQueryStmt(checkQuery);
/*  8472 */       if (set.next())
/*       */       {
/*  8474 */         errors.add("org.apache.struts.action.GLOBAL_ERROR", new ActionError("managedserver.serverid.failure"));
/*  8475 */         saveErrors(request, errors);
/*  8476 */         AMConnectionPool.closeStatement(set);
/*       */       }
/*       */       else
/*       */       {
/*  8480 */         AMConnectionPool.closeStatement(set);
/*  8481 */         String errorMessage = null;
/*  8482 */         String serverName = host + "_" + port;
/*  8483 */         String serverNameForErrorMessage = host + " [" + port + "/" + sslport + "]";
/*       */         try
/*       */         {
/*  8486 */           if (!com.adventnet.appmanager.util.Constants.isIt360)
/*       */           {
/*  8488 */             String urlStr = "https://" + host + ":" + sslport + "/jsp/ManagedServers.jsp";
/*  8489 */             URL url = new URL(urlStr);
/*  8490 */             HTTPConnection con = new HTTPConnection(url);
/*  8491 */             HTTPResponse rsp = con.Get(url.getFile(), "");
/*  8492 */             String responseAsString = rsp.getText();
/*  8493 */             if (responseAsString.indexOf("~#sb#~") == -1)
/*       */             {
/*       */ 
/*  8496 */               errorMessage = FormatUtil.getString("1007", new String[] { host, port, OEMUtil.getOEMString("product.name") });
/*  8497 */               request.setAttribute("errorMessage", errorMessage);
/*       */               
/*  8499 */               return new ActionForward("/showTile.do?TileName=.NewManagedServer");
/*       */             }
/*       */           }
/*       */           
/*  8503 */           Communication comm = new Communication("MAS_Compatible", System.currentTimeMillis(), host, Integer.parseInt(sslport), "TOAAM");
/*  8504 */           Map qryStr = comm.getQueryString();
/*  8505 */           qryStr.put("bn", FormatUtil.getString("product.build.number"));
/*  8506 */           qryStr.put("serverID", "" + indexValue);
/*  8507 */           com.adventnet.appmanager.server.framework.comm.HClient.sendRequest(comm);
/*  8508 */           Map responseFromServerToBeAdded = comm.getResponseMap();
/*  8509 */           if (responseFromServerToBeAdded.get("errorcode") != null)
/*       */           {
/*  8511 */             String errCode = (String)responseFromServerToBeAdded.get("errorcode");
/*  8512 */             if (errCode.equals("2010"))
/*       */             {
/*       */ 
/*  8515 */               errorMessage = FormatUtil.getString(errCode, new String[] { OEMUtil.getOEMString("product.talkback.mailid") });
/*       */             }
/*  8517 */             else if (errCode.indexOf("2007") != -1)
/*       */             {
/*  8519 */               errorMessage = FormatUtil.getString("2007");
/*       */             }
/*       */             else {
/*  8522 */               errorMessage = FormatUtil.getString("" + responseFromServerToBeAdded.get("errorcode"));
/*       */             }
/*       */             
/*       */           }
/*       */         }
/*       */         catch (ConnectException ce)
/*       */         {
/*  8529 */           errorMessage = FormatUtil.getString("1002", new String[] { serverNameForErrorMessage });
/*  8530 */           ce.printStackTrace();
/*       */         }
/*       */         catch (NoRouteToHostException ne)
/*       */         {
/*  8534 */           errorMessage = FormatUtil.getString("1003", new String[] { serverNameForErrorMessage });
/*  8535 */           ne.printStackTrace();
/*       */         }
/*       */         catch (UnknownHostException ue)
/*       */         {
/*  8539 */           errorMessage = FormatUtil.getString("1004", new String[] { serverNameForErrorMessage });
/*  8540 */           ue.printStackTrace();
/*       */         }
/*       */         catch (Exception e)
/*       */         {
/*  8544 */           errorMessage = FormatUtil.getString("1005", new String[] { serverNameForErrorMessage });
/*  8545 */           e.printStackTrace();
/*       */         }
/*  8547 */         if (errorMessage != null)
/*       */         {
/*  8549 */           request.setAttribute("errorMessage", errorMessage);
/*       */           
/*  8551 */           if (EnterpriseUtil.isIt360MSPEdition())
/*       */           {
/*       */ 
/*  8554 */             return new ActionForward("/showTile.do?TileName=.NewManagedServer&PRINTER_FRIENDLY=true");
/*       */           }
/*       */           
/*       */ 
/*  8558 */           return new ActionForward("/showTile.do?TileName=.NewManagedServer");
/*       */         }
/*       */         
/*       */ 
/*       */ 
/*       */ 
/*  8564 */         if (displayName == null)
/*       */         {
/*  8566 */           displayName = host;
/*       */         }
/*  8568 */         int state = 1;
/*  8569 */         int lastDc = -1;
/*  8570 */         String enable = "TRUE";
/*  8571 */         String licenseStatus = "FALSE";
/*  8572 */         int actionId = -1;
/*  8573 */         AMManagedObjectDao dao = AMManagedObjectDao.getAMManagedObjectDao();
/*  8574 */         AMManagedObject ammo = new AMManagedObject();
/*  8575 */         ammo.setRESOURCENAME(serverName);
/*  8576 */         ammo.setType("MAS-APPMANAGER");
/*  8577 */         ammo.setDISPLAYNAME(serverName);
/*  8578 */         ammo.setDESCRIPTION(serverName + " Range " + range);
/*  8579 */         dao.create(ammo);
/*  8580 */         int caID = ammo.getRESOURCEID();
/*  8581 */         if (caID > constantRange)
/*       */         {
/*  8583 */           String getManagerIdQuery = "select MAX(RESOURCEID) AS RESOURCEID from AM_ManagedObject where RESOURCEID <" + constantRange;
/*  8584 */           ResultSet rs = AMConnectionPool.executeQueryStmt(getManagerIdQuery);
/*  8585 */           int resId = 0;
/*  8586 */           if (rs.next())
/*       */           {
/*  8588 */             resId = rs.getInt("RESOURCEID");
/*  8589 */             resId += 1;
/*       */           }
/*  8591 */           AMConnectionPool.closeStatement(rs);
/*  8592 */           String updateQuery = "update AM_ManagedObject set RESOURCEID='" + resId + "' where RESOURCEID =" + caID;
/*  8593 */           AMConnectionPool.executeUpdateStmt(updateQuery);
/*  8594 */           caID = resId;
/*       */         }
/*       */         
/*  8597 */         String insertQry = "insert into AM_MAS_SERVER (ID, SERVERNAME, HOST, PORT, ALLOTED_GLOBAL_RANGE, STATE, POLLTOTRY, DISPLAYNAME, LASTDC, ENABLE, SSLPORT, CHECKBOX, LASTMAILSENT, LOADFACTOR, MONITORSCOUNT, LICENSESTATUS,PASSWORD,EMAILID,ANOMALYCOUNT,RBMCOUNT,EXTERNALIP,MASGROUPNAME,ACTIONID) values (" + caID + ",'" + serverName + "','" + host.trim() + "'," + port.trim() + "," + range + "," + state + "," + 300 + ",'" + displayName.trim() + "'," + lastDc + ",'" + enable + "'," + sslport.trim() + ",'" + enable + "'," + lastDc + ",'NA'," + 0 + ",'" + licenseStatus + "'," + DBQueryUtil.encode(passWord.trim()) + ",-1," + Integer.parseInt(anomalyval) + "," + Integer.parseInt(rbmval) + ",'" + externalHost.trim() + "','" + masGroupName + "'," + actionId + ")";
/*  8598 */         AMConnectionPool.executeUpdateStmt(insertQry);
/*       */         
/*  8600 */         com.adventnet.appmanager.util.SWMgmtUtil.populateMASSWDetails();
/*       */         
/*  8602 */         com.adventnet.appmanager.util.ManageScheduledTask.synchAllTasktoManagedServer(range / EnterpriseUtil.RANGE + "");
/*  8603 */         messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("managedserver.added.success"));
/*       */         try {
/*  8605 */           HashMap<String, String> params = new HashMap();
/*  8606 */           params.put("am.sso.enabled", com.adventnet.appmanager.util.Constants.ssoEnabled + "");
/*  8607 */           params.put("apicallfrom", "admin");
/*  8608 */           MASSyncUtil.addTasktoSync(params, "/AppManager/xml/ssoprops/update", range / EnterpriseUtil.RANGE + "", "POST", 9, 2);
/*       */         } catch (Exception sso) {
/*  8610 */           sso.printStackTrace();
/*       */         }
/*       */         try
/*       */         {
/*  8614 */           if (DBQueryUtil.getDBType().equals("mysql"))
/*       */           {
/*  8616 */             insertIntoMySQLUserTable(host);
/*       */           }
/*       */         }
/*       */         catch (Exception e)
/*       */         {
/*  8621 */           e.printStackTrace();
/*       */         }
/*       */         
/*  8624 */         saveMessages(request, messages);
/*       */         try
/*       */         {
/*  8627 */           boolean synReportsTable = true;
/*  8628 */           boolean newlyAdded = true;
/*  8629 */           com.adventnet.appmanager.server.framework.comm.AMDistributionProcess.serverStatus.put(String.valueOf(caID).trim(), "started");
/*  8630 */           new CommJob(caID, synReportsTable, newlyAdded).run(true);
/*       */         }
/*       */         catch (Exception e)
/*       */         {
/*  8634 */           e.printStackTrace();
/*       */         }
/*       */         
/*       */ 
/*  8638 */         if (EnterpriseUtil.isIt360MSPEdition())
/*       */         {
/*  8640 */           int probeId = caID;
/*  8641 */           int custId = -1;
/*  8642 */           int siteId = -1;
/*  8643 */           com.manageengine.it360.sp.customermanagement.CustomerManagementAPI customerAPI = com.manageengine.it360.sp.customermanagement.CustomerManagementAPI.getInstance();
/*  8644 */           if (request.getParameter("custId") != null)
/*       */           {
/*  8646 */             custId = Integer.parseInt(request.getParameter("custId").toString());
/*       */           }
/*  8648 */           if (request.getParameter("sites") != null)
/*       */           {
/*  8650 */             siteId = Integer.parseInt(request.getParameter("sites").toString());
/*       */           }
/*  8652 */           AMLog.debug("custId:" + custId);
/*  8653 */           AMLog.debug("siteId:" + siteId);
/*  8654 */           AMLog.debug("probeId:" + probeId);
/*  8655 */           customerAPI.associateProbeServer(custId, siteId, probeId);
/*       */         }
/*       */       }
/*       */       
/*  8659 */       EnterpriseUtil.setDeivceConfigured();
/*  8660 */       EnterpriseUtil.setExtDeviceTypes();
/*  8661 */       EnterpriseUtil.setAvaAndHealthKeys();
/*  8662 */       FaultUtil.applyRCAForMonitorsSnapshot();
/*       */     }
/*       */     else
/*       */     {
/*  8666 */       ArrayList list = new ArrayList();
/*  8667 */       Hashtable statusTable = new Hashtable();
/*  8668 */       statusTable = EnterpriseUtil.getMasDcProgressStatusTable();
/*  8669 */       String[] deleteManagedServers = request.getParameterValues("checkbox");
/*  8670 */       for (int j = 0; j < deleteManagedServers.length; j++)
/*       */       {
/*  8672 */         list.add(deleteManagedServers[j]);
/*       */       }
/*  8674 */       int result = 0;
/*       */       
/*  8676 */       String probeString = null;
/*       */       
/*       */ 
/*  8679 */       for (int k = 0; k < deleteManagedServers.length; k++)
/*       */       {
/*  8681 */         if (request.getParameterValues("checkbox") != null)
/*       */         {
/*       */           try
/*       */           {
/*  8685 */             String alottedRangeQuery = "select ALLOTED_GLOBAL_RANGE,ID,SERVERTYPE,SERVERNAME,HOST,SSLPORT  from AM_MAS_SERVER where ID =" + list.get(k);
/*  8686 */             ResultSet set = AMConnectionPool.executeQueryStmt(alottedRangeQuery);
/*  8687 */             String serverType = "";
/*  8688 */             int minRange = 0;
/*  8689 */             String serverNameToRemove = null;
/*  8690 */             int id = 0;
/*  8691 */             int syId = 0;
/*  8692 */             int sslPort = 8443;
/*  8693 */             String host = null;
/*  8694 */             if (set.next())
/*       */             {
/*  8696 */               minRange = set.getInt("ALLOTED_GLOBAL_RANGE");
/*  8697 */               id = set.getInt("ID");
/*  8698 */               serverType = set.getString("SERVERTYPE");
/*  8699 */               serverNameToRemove = set.getString("SERVERNAME");
/*  8700 */               host = set.getString("HOST");
/*  8701 */               sslPort = set.getInt("SSLPORT");
/*       */               try
/*       */               {
/*  8704 */                 statusTable.remove(serverNameToRemove);
/*       */               }
/*       */               catch (Exception e1) {}
/*       */             }
/*       */             
/*       */ 
/*  8710 */             AMConnectionPool.closeStatement(set);
/*  8711 */             if ((serverType != null) && (serverType.equals("PY")))
/*       */             {
/*  8713 */               syId = id + 10000;
/*       */             }
/*  8715 */             else if ((serverType != null) && (serverType.equals("SY")))
/*       */             {
/*  8717 */               syId = id - 10000;
/*       */             }
/*  8719 */             String deleteQuery = "delete from AM_ManagedObject where RESOURCEID=" + id;
/*  8720 */             AMConnectionPool.executeUpdateStmt(deleteQuery);
/*  8721 */             deleteQuery = "delete from AM_ManagedObject where RESOURCEID=" + syId;
/*  8722 */             AMConnectionPool.executeUpdateStmt(deleteQuery);
/*  8723 */             if (minRange != 0)
/*       */             {
/*  8725 */               result = com.adventnet.appmanager.server.framework.comm.CommDBUtil.deleteAllData(minRange);
/*       */               
/*  8727 */               com.adventnet.appmanager.server.framework.comm.CommDBUtil.deleteMappingData(id);
/*  8728 */               com.adventnet.appmanager.server.framework.comm.CommDBUtil.deleteMappingData(syId);
/*       */             }
/*       */             else
/*       */             {
/*  8732 */               result = 1;
/*       */             }
/*       */             
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*  8740 */             com.adventnet.appmanager.server.framework.comm.AMDistributionProcess.serverStatus.remove(String.valueOf(id).trim());
/*  8741 */             Communication comm = new Communication("UnRegister_Me_MAS", System.currentTimeMillis(), host, sslPort, "TOMAS");
/*  8742 */             Map qryStr = comm.getQueryString();
/*  8743 */             qryStr.put("bn", FormatUtil.getString("product.build.number"));
/*  8744 */             qryStr.put("unregisterMAS", "true");
/*  8745 */             com.adventnet.appmanager.server.framework.comm.HClient.sendRequest(comm);
/*       */             
/*  8747 */             probeString = ("true".equals(System.getProperty("server.secure")) ? "https://" : "http://") + host + new StringBuilder().append(":").append(sslPort).toString();
/*       */ 
/*       */           }
/*       */           catch (Exception e)
/*       */           {
/*  8752 */             e.printStackTrace();
/*       */           }
/*       */         }
/*       */       }
/*  8756 */       if (result == 1)
/*       */       {
/*       */ 
/*       */ 
/*  8760 */         if (com.adventnet.appmanager.util.Constants.isIt360) {
/*       */           try
/*       */           {
/*  8763 */             EnterpriseUtil.probeUserTickets.remove(probeString);
/*       */           }
/*       */           catch (Exception ex) {
/*  8766 */             ex.printStackTrace();
/*       */           }
/*       */         }
/*       */         
/*       */ 
/*  8771 */         System.out.println("Successfully deleted all the Monitors");
/*  8772 */         messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("managedserver.delete.success"));
/*  8773 */         saveMessages(request, messages);
/*       */       }
/*  8775 */       EnterpriseUtil.setDeivceConfigured();
/*  8776 */       EnterpriseUtil.setExtDeviceTypes();
/*  8777 */       EnterpriseUtil.setAvaAndHealthKeys();
/*  8778 */       FaultUtil.applyRCAForAdminMonitorGroup();
/*       */     }
/*  8780 */     updateManagedServerDetails(request);
/*  8781 */     return mapping.findForward("managedservers");
/*       */   }
/*       */   
/*       */   public static void insertIntoMySQLUserTable(String tempmasHostNameToInsert) throws Exception
/*       */   {
/*  8786 */     String mysqlurl = "jdbc:mysql://localhost:13326/AMDB";
/*  8787 */     String mysqlusername = "root";
/*  8788 */     String mysqlpassword = "appmanager";
/*  8789 */     DBParamsParser dbpp = new DBParamsParser();
/*  8790 */     String databaseparamasconf = System.getProperty("user.dir") + File.separator + "conf" + File.separator + "database_params.conf";
/*  8791 */     dbpp = DBParamsParser.getInstance(new File(databaseparamasconf));
/*  8792 */     mysqlurl = dbpp.getURL();
/*  8793 */     mysqlusername = dbpp.getUserName();
/*  8794 */     mysqlpassword = dbpp.getPassword();
/*  8795 */     if (mysqlusername == null)
/*       */     {
/*  8797 */       mysqlusername = "";
/*       */     }
/*  8799 */     if (mysqlpassword == null)
/*       */     {
/*  8801 */       mysqlpassword = "";
/*       */     }
/*       */     
/*  8804 */     boolean insertintodb_mashostcanonicalname = false;
/*  8805 */     boolean insertintodb_mashostname = false;
/*  8806 */     boolean insertintodb_mashostip = false;
/*       */     
/*  8808 */     InetAddress address = InetAddress.getByName(tempmasHostNameToInsert);
/*  8809 */     String masHostNameToInsert = address.getHostName();
/*  8810 */     String masHostIpToInsert = address.getHostAddress();
/*  8811 */     String masHostCanonicalHostNameToInsert = address.getCanonicalHostName();
/*       */     
/*  8813 */     ResultSet rs = AMConnectionPool.executeQueryStmt("select * from mysql.user");
/*  8814 */     if (rs.next())
/*       */     {
/*  8816 */       insertintodb_mashostcanonicalname = true;
/*  8817 */       insertintodb_mashostname = true;
/*  8818 */       insertintodb_mashostip = true;
/*       */       
/*       */       do
/*       */       {
/*  8822 */         if ((rs.getString("Host").equals(masHostCanonicalHostNameToInsert)) && (rs.getString("User").equals(mysqlusername)))
/*       */         {
/*  8824 */           insertintodb_mashostcanonicalname = false;
/*       */         }
/*  8826 */         if ((rs.getString("Host").equals(masHostNameToInsert)) && (rs.getString("User").equals(mysqlusername)))
/*       */         {
/*  8828 */           insertintodb_mashostname = false;
/*       */         }
/*  8830 */         if ((rs.getString("Host").equals(masHostIpToInsert)) && (rs.getString("User").equals(mysqlusername)))
/*       */         {
/*  8832 */           insertintodb_mashostip = false;
/*       */         }
/*       */         
/*  8835 */       } while (rs.next());
/*       */     }
/*       */     else
/*       */     {
/*  8839 */       insertintodb_mashostcanonicalname = true;
/*  8840 */       insertintodb_mashostname = true;
/*  8841 */       insertintodb_mashostip = true;
/*       */     }
/*  8843 */     AMConnectionPool.closeStatement(rs);
/*  8844 */     if (insertintodb_mashostcanonicalname)
/*       */     {
/*       */       try
/*       */       {
/*  8848 */         AMConnectionPool.executeUpdateStmt("INSERT INTO mysql.user (Host,User,Password) VALUES('" + masHostCanonicalHostNameToInsert + "','" + mysqlusername + "',PASSWORD('" + mysqlpassword + "'))");
/*  8849 */         AMConnectionPool.executeUpdateStmt("GRANT ALL PRIVILEGES ON *.* TO '" + mysqlusername + "'@'" + masHostCanonicalHostNameToInsert + "'");
/*  8850 */         System.out.println("Server Starting : Privileges for Canonical Host Name " + masHostCanonicalHostNameToInsert + " inserted into the MySQL DB");
/*       */       }
/*       */       catch (Exception exp)
/*       */       {
/*  8854 */         System.out.println("Server Starting : Error while inserting values from mysql.user in MySQL server while using the url: " + mysqlurl + " and user name : " + mysqlusername + " for the HostName : " + masHostCanonicalHostNameToInsert);
/*  8855 */         exp.printStackTrace();
/*       */       }
/*       */     }
/*  8858 */     if (insertintodb_mashostname)
/*       */     {
/*       */       try
/*       */       {
/*  8862 */         AMConnectionPool.executeUpdateStmt("INSERT INTO mysql.user (Host,User,Password) VALUES('" + masHostNameToInsert + "','" + mysqlusername + "',PASSWORD('" + mysqlpassword + "'))");
/*  8863 */         AMConnectionPool.executeUpdateStmt("GRANT ALL PRIVILEGES ON *.* TO '" + mysqlusername + "'@'" + masHostNameToInsert + "'");
/*  8864 */         System.out.println("Server Starting : Privileges for Host Name " + masHostNameToInsert + " inserted into the MySQL DB");
/*       */       }
/*       */       catch (Exception exp)
/*       */       {
/*  8868 */         System.out.println("Server Starting : Error while inserting values from mysql.user in MySQL server while using the url: " + mysqlurl + " and user name : " + mysqlusername + " for the HostName : " + masHostNameToInsert);
/*  8869 */         exp.printStackTrace();
/*       */       }
/*       */     }
/*  8872 */     if (insertintodb_mashostip)
/*       */     {
/*       */       try
/*       */       {
/*  8876 */         AMConnectionPool.executeUpdateStmt("INSERT INTO mysql.user (Host,User,Password) VALUES('" + masHostIpToInsert + "','" + mysqlusername + "',PASSWORD('" + mysqlpassword + "'))");
/*  8877 */         AMConnectionPool.executeUpdateStmt("GRANT ALL PRIVILEGES ON *.* TO '" + mysqlusername + "'@'" + masHostIpToInsert + "'");
/*  8878 */         System.out.println("Server Starting : Privileges for Host Ip " + masHostIpToInsert + " inserted into the MySQL DB");
/*       */       }
/*       */       catch (Exception exp)
/*       */       {
/*  8882 */         System.out.println("Server Starting : Error while inserting values from mysql.user in MySQL server while using the url: " + mysqlurl + " and user name : " + mysqlusername + " for the HostName : " + masHostIpToInsert);
/*  8883 */         exp.printStackTrace();
/*       */       }
/*       */     }
/*  8886 */     if ((insertintodb_mashostcanonicalname) || (insertintodb_mashostname) || (insertintodb_mashostip))
/*       */     {
/*       */       try
/*       */       {
/*  8890 */         AMConnectionPool.executeUpdateStmt("FLUSH PRIVILEGES");
/*       */       }
/*       */       catch (Exception exp)
/*       */       {
/*  8894 */         System.out.println("Server Starting : Error while executing flush privileges from mysql.user in MySQL server while using the url: " + mysqlurl + " and user name : " + mysqlusername);
/*  8895 */         exp.printStackTrace();
/*       */       }
/*       */     }
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward showManagedServers(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*  8909 */     if (DBUtil.isDelegatedAdmin(request.getRemoteUser()))
/*       */     {
/*  8911 */       return new ActionForward("/jsp/formpages/AccessRestricted.jsp");
/*       */     }
/*  8913 */     AMActionForm amform = (AMActionForm)form;
/*  8914 */     AMConnectionPool pool = AMConnectionPool.getInstance();
/*  8915 */     ActionMessages messages = new ActionMessages();
/*  8916 */     String serverType = request.getParameter("serverType");
/*  8917 */     String displayname = amform.getDisplayname();
/*  8918 */     int ran = EnterpriseUtil.getMASStartRange(amform.getFromaddress().trim());
/*  8919 */     if ((DBQueryUtil.isPgsql()) || (DBQueryUtil.isMssql()))
/*       */     {
/*  8921 */       displayname = displayname.replaceAll("'", "''");
/*       */     }
/*       */     else
/*       */     {
/*  8925 */       displayname = displayname.replaceAll("'", "\\\\'");
/*       */     }
/*  8927 */     if (request.getParameter("update") != null)
/*       */     {
/*       */       try
/*       */       {
/*  8931 */         String checkBox = "";
/*  8932 */         int sendmail = -1;
/*  8933 */         String anomalycount = "-1";
/*  8934 */         String rbmcount = "0";
/*  8935 */         if (request.getParameter("sendmail") != null) {
/*  8936 */           sendmail = Integer.parseInt(request.getParameter("sendmail"));
/*       */         }
/*  8938 */         if ("adminMail".equalsIgnoreCase(request.getParameter("sslenabled")))
/*       */         {
/*  8940 */           checkBox = "TRUE";
/*  8941 */           sendmail = -1;
/*       */         }
/*       */         else
/*       */         {
/*  8945 */           checkBox = "FALSE";
/*  8946 */           if (sendmail == -1) {
/*  8947 */             checkBox = "TRUE";
/*       */           }
/*       */         }
/*  8950 */         if (request.getParameter("anomalybox") != null)
/*       */         {
/*  8952 */           anomalycount = request.getParameter("anomalybox");
/*       */         }
/*  8954 */         if (request.getParameter("rbmbox") != null)
/*       */         {
/*  8956 */           rbmcount = request.getParameter("rbmbox");
/*       */         }
/*  8958 */         String serverName = amform.getFromaddress().trim() + "_" + amform.getCategory().trim();
/*  8959 */         String masGroupName = amform.getMasGroupName();
/*  8960 */         if ((masGroupName == null) || (masGroupName.trim().length() == 0) || (masGroupName.equals("-"))) {
/*  8961 */           masGroupName = "";
/*       */         }
/*  8963 */         String updateServerQuery = "update AM_MAS_SERVER set SERVERNAME='" + serverName + "', DISPLAYNAME='" + displayname + "', POLLTOTRY=" + 300 + " , HOST='" + amform.getFromaddress().trim() + "' , PORT ='" + amform.getCategory().trim() + "', SSLPORT ='" + amform.getPriority().trim() + "', CHECKBOX ='" + checkBox + "', PASSWORD=" + DBQueryUtil.encode(amform.getPassword().trim()) + ",ANOMALYCOUNT=" + Integer.parseInt(anomalycount) + ",RBMCOUNT=" + Integer.parseInt(rbmcount) + ",EXTERNALIP='" + amform.getExternalhost().trim() + "',MASGROUPNAME='" + masGroupName + "', ACTIONID =" + sendmail + " where ID =" + request.getParameter("serverID");
/*  8964 */         AMConnectionPool.executeUpdateStmt(updateServerQuery);
/*       */         try
/*       */         {
/*  8967 */           EnterpriseUtil.masIdsVsDispNames.put(String.valueOf(ran), displayname);
/*       */         }
/*       */         catch (Exception eex)
/*       */         {
/*  8971 */           eex.printStackTrace();
/*       */         }
/*  8973 */         EnterpriseUtil.setAdminServerEdited(true);
/*  8974 */         if (request.getParameter("failOvercheckbox") != null)
/*       */         {
/*  8976 */           int syId = 0;
/*  8977 */           if ((serverType != null) && (serverType.equals("PY")))
/*       */           {
/*  8979 */             syId = Integer.parseInt(request.getParameter("serverID")) + 10000;
/*       */           }
/*  8981 */           else if ((serverType != null) && (serverType.equals("SY")))
/*       */           {
/*  8983 */             syId = Integer.parseInt(request.getParameter("serverID")) - 10000;
/*       */           }
/*  8985 */           String sySelectQuery = "select * from AM_MAS_SERVER where ID=" + syId;
/*  8986 */           ArrayList rows = this.mo.getRows(sySelectQuery);
/*  8987 */           String failOverServerName = amform.getToaddress().trim() + "_" + amform.getTechnician().trim();
/*  8988 */           if (rows.size() > 0)
/*       */           {
/*       */ 
/*  8991 */             String updateQuery = "update AM_MAS_SERVER set SERVERNAME='" + failOverServerName + "', DISPLAYNAME='" + displayname + "' , HOST='" + amform.getToaddress().trim() + "' , PORT ='" + amform.getTechnician().trim() + "', SSLPORT ='" + amform.getInstance().trim() + "',MASGROUPNAME='" + masGroupName + "' where ID =" + syId;
/*  8992 */             AMConnectionPool.executeUpdateStmt(updateQuery);
/*       */             try
/*       */             {
/*  8995 */               EnterpriseUtil.masIdsVsDispNames.put(String.valueOf(ran), displayname);
/*       */             }
/*       */             catch (Exception eex)
/*       */             {
/*  8999 */               eex.printStackTrace();
/*       */             }
/*       */             
/*       */           }
/*       */           else
/*       */           {
/*  9005 */             String selectQuery = "select ALLOTED_GLOBAL_RANGE as RANGE, LASTDC as LASTDC, LOADFACTOR as LF, MONITORSCOUNT as MONCOUNT, LICENSESTATUS as LICENSESTATUS, EMAILID as MAILID from AM_MAS_SERVER where ID=" + request.getParameter("serverID");
/*  9006 */             ResultSet set = AMConnectionPool.executeQueryStmt(selectQuery);
/*  9007 */             if (set.next())
/*       */             {
/*  9009 */               int syRange = set.getInt("RANGE");
/*  9010 */               Long syLastdDc = Long.valueOf(set.getLong("LASTDC"));
/*  9011 */               String lf = set.getString("LF");
/*  9012 */               int monCount = set.getInt("MONCOUNT");
/*  9013 */               String insertSyQuery = "insert into AM_MAS_SERVER (ID, SERVERNAME, HOST, PORT, ALLOTED_GLOBAL_RANGE, STATE, POLLTOTRY, DISPLAYNAME, LASTDC, ENABLE, SSLPORT, CHECKBOX, LASTMAILSENT, LOADFACTOR, MONITORSCOUNT, LICENSESTATUS,PASSWORD,EMAILID,SERVERSTATUS,SERVERTYPE,MASGROUPNAME,ACTIONID) values (" + syId + ",'" + failOverServerName + "','" + amform.getToaddress().trim() + "'," + amform.getTechnician().trim() + "," + syRange + "," + 1000 + "," + 300 + ",'" + displayname + "'," + syLastdDc + ",'TRUE','" + amform.getInstance().trim() + "','" + checkBox + "',-1,'" + lf + "','" + monCount + "','FALSE'," + DBQueryUtil.encode(amform.getPassword().trim()) + ",'" + set.getString("MAILID") + "',0,'SY','" + masGroupName + "',-1)";
/*  9014 */               AMConnectionPool.executeUpdateStmt(insertSyQuery);
/*       */               try {
/*  9016 */                 HashMap<String, String> params = new HashMap();
/*  9017 */                 params.put("am.sso.enabled", com.adventnet.appmanager.util.Constants.ssoEnabled + "");
/*  9018 */                 params.put("apicallfrom", "admin");
/*  9019 */                 MASSyncUtil.addTasktoSync(params, "/AppManager/xml/ssoprops/update", syRange / EnterpriseUtil.RANGE + "", "POST", 9, 2);
/*       */               } catch (Exception sso) {
/*  9021 */                 sso.printStackTrace();
/*       */               }
/*       */               
/*  9024 */               com.adventnet.appmanager.util.SWMgmtUtil.populateMASSWDetails();
/*       */             }
/*       */             
/*  9027 */             AMConnectionPool.closeStatement(set);
/*       */           }
/*       */         }
/*       */         else
/*       */         {
/*       */           try
/*       */           {
/*  9034 */             if ((serverType != null) && (serverType.equals("PY")))
/*       */             {
/*  9036 */               int secId = Integer.parseInt(request.getParameter("serverID")) + 10000;
/*  9037 */               String delQuery = "delete from AM_MAS_SERVER where ID=" + secId;
/*  9038 */               AMConnectionPool.executeUpdateStmt(delQuery);
/*       */               
/*  9040 */               String delSWDetailsQuery = "delete from SWDetails where SERVERID=" + secId;
/*  9041 */               AMConnectionPool.executeUpdateStmt(delSWDetailsQuery);
/*       */               
/*       */               try
/*       */               {
/*  9045 */                 EnterpriseUtil.masIdsVsDispNames.remove(Integer.valueOf(ran));
/*       */               }
/*       */               catch (Exception eex)
/*       */               {
/*  9049 */                 eex.printStackTrace();
/*       */               }
/*       */             }
/*  9052 */           } catch (Exception exc) { exc.printStackTrace();
/*       */           }
/*       */         }
/*       */       }
/*       */       catch (Exception e) {
/*  9057 */         e.printStackTrace();
/*       */       }
/*  9059 */       updateManagedServerDetails(request);
/*  9060 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("managedserver.edit.success"));
/*  9061 */       saveMessages(request, messages);
/*  9062 */       return mapping.findForward("managedservers");
/*       */     }
/*       */     
/*       */ 
/*       */ 
/*  9067 */     if (request.getParameter("edit") != null)
/*       */     {
/*       */       try
/*       */       {
/*  9071 */         int syId = 0;
/*  9072 */         if ((serverType != null) && (serverType.equals("PY")))
/*       */         {
/*  9074 */           syId = Integer.parseInt(request.getParameter("serverID")) + 10000;
/*       */         }
/*  9076 */         else if ((serverType != null) && (serverType.equals("SY")))
/*       */         {
/*  9078 */           syId = Integer.parseInt(request.getParameter("serverID")) - 10000;
/*       */         }
/*  9080 */         ArrayList emailActionsList = com.me.apm.fault.actions.util.ActionsUtil.getEmailActionList();
/*  9081 */         ((AMActionForm)form).setApplications(emailActionsList);
/*  9082 */         String query = "select DISPLAYNAME, HOST, PORT , SSLPORT ," + DBQueryUtil.decode("PASSWORD") + ", CHECKBOX,ANOMALYCOUNT,RBMCOUNT,EXTERNALIP,MASGROUPNAME,ACTIONID from AM_MAS_SERVER where ID=" + request.getParameter("serverID");
/*  9083 */         ArrayList rows = this.mo.getRows(query);
/*  9084 */         if (rows.size() > 0)
/*       */         {
/*  9086 */           request.setAttribute("EditManagedServer", rows);
/*       */         }
/*  9088 */         String query1 = "select HOST as HOST, PORT as PORT, SSLPORT as SSLPORT,EXTERNALIP,MASGROUPNAME from AM_MAS_SERVER where ID=" + syId;
/*  9089 */         ResultSet set1 = AMConnectionPool.executeQueryStmt(query1);
/*  9090 */         if (set1.next())
/*       */         {
/*  9092 */           request.setAttribute("expandSyDetails", "TRUE");
/*  9093 */           amform.setToaddress(set1.getString("HOST"));
/*  9094 */           amform.setTechnician(set1.getString("PORT"));
/*  9095 */           amform.setInstance(set1.getString("SSLPORT"));
/*  9096 */           if (set1.getString("EXTERNALIP") != null) {
/*  9097 */             amform.setExternalhost(set1.getString("EXTERNALIP"));
/*       */           }
/*  9099 */           request.setAttribute("selectedDomainName", set1.getString("MASGROUPNAME"));
/*       */         }
/*  9101 */         AMConnectionPool.closeStatement(set1);
/*       */       }
/*       */       catch (Exception e)
/*       */       {
/*  9105 */         e.printStackTrace();
/*       */       }
/*  9107 */       return new ActionForward("/showTile.do?TileName=.EditManagedServer&serverID=" + request.getParameter("serverID"));
/*       */     }
/*       */     
/*       */ 
/*  9111 */     String serverID = request.getParameter("serverID");
/*  9112 */     String boolValue = request.getParameter("boolValue");
/*  9113 */     if (boolValue != null)
/*       */     {
/*  9115 */       if (boolValue.equals("TRUE"))
/*       */       {
/*  9117 */         boolValue = "FALSE";
/*       */       }
/*       */       else
/*       */       {
/*  9121 */         boolValue = "TRUE";
/*       */       }
/*  9123 */       ResultSet rs = null;
/*       */       try
/*       */       {
/*  9126 */         String masServerID = request.getParameter("serverID");
/*  9127 */         int syMasServerId = 0;
/*  9128 */         if ((serverType != null) && (serverType.equals("PY")))
/*       */         {
/*  9130 */           syMasServerId = Integer.parseInt(masServerID) + 10000;
/*       */         }
/*  9132 */         else if ((serverType != null) && (serverType.equals("SY")))
/*       */         {
/*  9134 */           syMasServerId = Integer.parseInt(masServerID) - 10000;
/*       */         }
/*  9136 */         String insertTime = "update AM_MAS_SERVER SET ENABLE ='" + boolValue + "' where ID=" + masServerID;
/*  9137 */         String insertTime1 = "update AM_MAS_SERVER SET ENABLE ='" + boolValue + "' where ID=" + syMasServerId;
/*  9138 */         AMConnectionPool.executeUpdateStmt(insertTime);
/*  9139 */         AMConnectionPool.executeUpdateStmt(insertTime1);
/*       */         
/*  9141 */         String query1 = "select HOST as HOST, PORT as PORT, SSLPORT as SSLPORT from AM_MAS_SERVER where ID=" + masServerID;
/*  9142 */         rs = AMConnectionPool.executeQueryStmt(query1);
/*  9143 */         int sslPort = 8443;
/*  9144 */         String host = null;
/*  9145 */         if (rs.next())
/*       */         {
/*  9147 */           sslPort = rs.getInt("SSLPORT");
/*  9148 */           host = rs.getString("HOST");
/*       */         }
/*  9150 */         Communication comm = new Communication("UnRegister_Me_MAS", System.currentTimeMillis(), host, sslPort, "TOMAS");
/*  9151 */         Map qryStr = comm.getQueryString();
/*  9152 */         qryStr.put("bn", FormatUtil.getString("product.build.number"));
/*  9153 */         qryStr.put("adminSyncStatus", boolValue);
/*  9154 */         com.adventnet.appmanager.server.framework.comm.HClient.sendRequest(comm);
/*       */       }
/*       */       catch (Exception e)
/*       */       {
/*  9158 */         e.printStackTrace();
/*       */       }
/*       */       finally
/*       */       {
/*  9162 */         if (rs != null)
/*       */         {
/*  9164 */           rs.close();
/*       */         }
/*       */       }
/*       */     }
/*  9168 */     updateManagedServerDetails(request);
/*       */     try
/*       */     {
/*  9171 */       String errorMessage = null;
/*  9172 */       String selectStateQuery = "select HOST,SSLPORT,STATE from AM_MAS_SERVER where STATE !=1000 AND STATE !=1008";
/*       */       
/*  9174 */       ResultSet rs = AMConnectionPool.executeQueryStmt(selectStateQuery);
/*  9175 */       while (rs.next())
/*       */       {
/*  9177 */         String tempServerName = rs.getString("HOST") + "_" + rs.getString("SSLPORT");
/*  9178 */         if (errorMessage == null)
/*       */         {
/*  9180 */           errorMessage = FormatUtil.getString("am.webclient.managedserver.down.general.message") + FormatUtil.getString(rs.getString("STATE"), new String[] { tempServerName });
/*       */         }
/*       */         else
/*       */         {
/*  9184 */           errorMessage = errorMessage + "<br>" + FormatUtil.getString("am.webclient.managedserver.down.general.message") + FormatUtil.getString(rs.getString("STATE"), new String[] { tempServerName });
/*       */         }
/*       */       }
/*  9187 */       AMConnectionPool.closeStatement(rs);
/*  9188 */       if (errorMessage != null)
/*       */       {
/*  9190 */         request.setAttribute("ErrorMessage", errorMessage);
/*       */       }
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/*  9195 */       e.printStackTrace();
/*       */     }
/*  9197 */     return mapping.findForward("managedservers");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward fetchDataNowForManagedServer(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*  9208 */     boolean fetchNow = true;
/*  9209 */     boolean quickSynch = true;
/*  9210 */     AMActionForm amform = (AMActionForm)form;
/*  9211 */     AMConnectionPool pool = AMConnectionPool.getInstance();
/*  9212 */     ActionMessages messages = new ActionMessages();
/*  9213 */     ActionErrors errors = new ActionErrors();
/*  9214 */     int totalManagedServer = 0;
/*  9215 */     int count = 0;
/*       */     
/*  9217 */     ArrayList list = new ArrayList();
/*  9218 */     String[] refreshManagedServers = request.getParameterValues("checkbox");
/*  9219 */     if (request.getParameterValues("checkbox") == null)
/*       */     {
/*  9221 */       list.add(request.getParameter("serverID"));
/*  9222 */       totalManagedServer = 1;
/*       */     }
/*       */     else
/*       */     {
/*  9226 */       totalManagedServer = refreshManagedServers.length;
/*  9227 */       for (int j = 0; j < totalManagedServer; j++)
/*       */       {
/*  9229 */         list.add(refreshManagedServers[j]);
/*       */       }
/*       */     }
/*  9232 */     int successCount = 0;
/*  9233 */     int errorCount = 0;
/*       */     
/*  9235 */     String alerts = "false";
/*       */     
/*       */ 
/*       */ 
/*       */ 
/*  9240 */     while (count < totalManagedServer)
/*       */     {
/*  9242 */       String query = "select HOST, PORT , SSLPORT, SERVERNAME from AM_MAS_SERVER where ID=" + list.get(count);
/*  9243 */       ResultSet set = AMConnectionPool.executeQueryStmt(query);
/*  9244 */       String host = null;
/*  9245 */       int port = 0;
/*  9246 */       String webServerPort = null;
/*  9247 */       Hashtable statusTable = EnterpriseUtil.getMasDcProgressStatusTable();
/*  9248 */       Hashtable quickSynchStatusTable = EnterpriseUtil.getMasQuickSynchStatusTable();
/*  9249 */       CommJob job = null;
/*  9250 */       if (set.next())
/*       */       {
/*  9252 */         host = set.getString(1);
/*  9253 */         port = set.getInt(3);
/*  9254 */         webServerPort = set.getString(2);
/*  9255 */         boolean synReportsTable = true;
/*       */         
/*  9257 */         String masServername = set.getString(4);
/*  9258 */         String masStatus = (String)statusTable.get(masServername);
/*  9259 */         String masQuickStatus = (String)quickSynchStatusTable.get(masServername);
/*       */         
/*  9261 */         if ((!statusTable.containsKey(masServername)) || ((masStatus != null) && (masStatus.equalsIgnoreCase("false")) && ((!quickSynchStatusTable.containsKey(masServername)) || ((masQuickStatus != null) && (masQuickStatus.equalsIgnoreCase("false")))))) {
/*  9262 */           job = new CommJob(Integer.parseInt((String)list.get(count)), synReportsTable, false, alerts, fetchNow, quickSynch);
/*       */           
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*  9270 */           job.run();
/*       */         } else {
/*  9272 */           errors.add("org.apache.struts.action.GLOBAL_ERROR", new ActionError("managedserver.synching.progress", masServername));
/*       */           
/*  9274 */           saveErrors(request, errors);
/*  9275 */           errorCount++;
/*  9276 */           count++;
/*  9277 */           continue;
/*       */         }
/*       */         
/*  9280 */         String errorCode = "";
/*  9281 */         String serverName = "";
/*  9282 */         query = "select STATE AS ERRORCODE,SERVERNAME as NAME from AM_MAS_SERVER where ID=" + list.get(count);
/*  9283 */         ResultSet rs = AMConnectionPool.executeQueryStmt(query);
/*       */         try {
/*  9285 */           if (rs.next())
/*       */           {
/*  9287 */             errorCode = rs.getString("ERRORCODE");
/*  9288 */             serverName = rs.getString("NAME");
/*  9289 */             serverName = host + " [" + webServerPort + "/" + port + "" + "]";
/*       */           }
/*       */         }
/*       */         catch (Exception ex) {
/*  9293 */           ex.printStackTrace();
/*       */         }
/*       */         finally {
/*  9296 */           AMConnectionPool.closeStatement(rs);
/*       */         }
/*       */         
/*  9299 */         if ((errorCode.equals("1000")) && (count == totalManagedServer - 1) && (errorCount == 0))
/*       */         {
/*  9301 */           messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("managedserver.refresh.success"));
/*       */           
/*  9303 */           saveMessages(request, messages);
/*  9304 */           successCount++;
/*       */         }
/*  9306 */         else if (!errorCode.equals("1000"))
/*       */         {
/*  9308 */           errors.add("org.apache.struts.action.GLOBAL_ERROR", new ActionError(errorCode, serverName));
/*  9309 */           saveErrors(request, errors);
/*  9310 */           errorCount++;
/*       */         }
/*       */       }
/*  9313 */       AMConnectionPool.closeStatement(set);
/*  9314 */       count++;
/*       */     }
/*       */     
/*  9317 */     EnterpriseUtil.setDeivceConfigured();
/*  9318 */     EnterpriseUtil.setExtDeviceTypes();
/*  9319 */     EnterpriseUtil.setAvaAndHealthKeys();
/*  9320 */     FaultUtil.applyRCAForMonitorsSnapshot();
/*  9321 */     FaultUtil.applyRCAForAdminMonitorGroup();
/*  9322 */     updateManagedServerDetails(request);
/*  9323 */     return mapping.findForward("managedservers");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward showServiceNowLogTicket(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */   {
/*  9331 */     AMActionForm amform = (AMActionForm)form;
/*  9332 */     String forwardUrl = "/jsp/ServiceNow.jsp";
/*  9333 */     amform.setHelpDeskProduct("SERVICENOW");
/*  9334 */     ServiceNowIntegConfig sNowIntegConfig = ServiceNowIntegConfig.getInstance();
/*  9335 */     if (sNowIntegConfig.isServiceNowConfigured())
/*       */     {
/*  9337 */       request.setAttribute("SdeskLogTicketConfig", "ServiceNowTicketConfig");
/*  9338 */       request.setAttribute("Configure", "Configure");
/*       */       
/*  9340 */       amform.setCategory("Choose a Value");
/*  9341 */       amform.setSubCategory("Choose a Value");
/*  9342 */       amform.setPriority("Choose a Value");
/*  9343 */       amform.setTechnician("Choose a Value");
/*  9344 */       amform.setGroup("Choose a Value");
/*       */       
/*  9346 */       amform.setToAdd(APMHelpDeskUtil.getCategories());
/*  9347 */       amform.setToAddSC(APMHelpDeskUtil.getSubCategories(null));
/*  9348 */       amform.setToAddSG(APMHelpDeskUtil.getAssignmentGroups());
/*  9349 */       amform.setPresent(APMHelpDeskUtil.getUrgency());
/*  9350 */       amform.setApplications(APMHelpDeskUtil.getAssignToTechnicians());
/*       */       
/*       */ 
/*  9353 */       amform.setSubject(FormatUtil.getString("am.webclient.managermail.bsm.alertfrommessage.text", new String[] { OEMUtil.getOEMString("product.name") }) + "  $HOSTNAME $PORT $SEVERITY");
/*  9354 */       amform.setMessage(FormatUtil.getString("am.webclient.mail.default.message.text", new String[] { OEMUtil.getOEMString("product.name") }) + " $HOSTIP $RCAMESSAGE");
/*       */       
/*  9356 */       if (request.getParameter("global") != null)
/*       */       {
/*  9358 */         forwardUrl = "/jsp/TicketActionForm.jsp";
/*       */       }
/*       */       else
/*       */       {
/*  9362 */         forwardUrl = "/showTile.do?TileName=.TicketActions";
/*       */       }
/*  9364 */       if (APMHelpDeskUtil.isHdDown())
/*       */       {
/*  9366 */         request.setAttribute("errorMsg", FormatUtil.getString("am.webclient.admintab.ticketaction.errormessage"));
/*       */       }
/*       */     }
/*  9369 */     return new ActionForward(forwardUrl);
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward ServiceNowTicketConfig(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*  9378 */     AMActionForm amform = (AMActionForm)form;
/*  9379 */     ActionMessages messages = new ActionMessages();
/*  9380 */     ActionErrors errors = new ActionErrors();
/*  9381 */     String forwardUrl = "/jsp/ServiceNow.jsp";
/*  9382 */     amform.setHelpDeskProduct("SERVICENOW");
/*       */     
/*  9384 */     String category = "";
/*  9385 */     String urgency = "";
/*  9386 */     String technician = "";
/*  9387 */     String group = "";
/*  9388 */     String subject = "";
/*  9389 */     String message = "";
/*  9390 */     String subCategory = "";
/*  9391 */     String site = "";
/*  9392 */     String profileName = request.getParameter("displayname");
/*  9393 */     String smtpServer = "";
/*  9394 */     int smtpPort = 0;
/*  9395 */     String toAddress = "";
/*  9396 */     String fromAddress = "";
/*       */     
/*  9398 */     String requestTemplate = request.getParameter("reqTemplate") == null ? "Choose a Value" : request.getParameter("reqTemplate");
/*  9399 */     String item = request.getParameter("item");
/*       */     
/*  9401 */     amform.setDisplayname(profileName);
/*       */     
/*  9403 */     String customServiceNowfields = request.getParameter("customHeaders");
/*  9404 */     category = request.getParameter("category") == null ? "Choose a Value" : request.getParameter("category");
/*  9405 */     urgency = request.getParameter("priority") == null ? "Choose a Value" : request.getParameter("priority");
/*       */     
/*  9407 */     subject = request.getParameter("subject") == null ? "Choose a Value" : request.getParameter("subject");
/*  9408 */     message = request.getParameter("message");
/*  9409 */     subCategory = request.getParameter("subCategory") == null ? "Choose a Value" : request.getParameter("subCategory");
/*  9410 */     technician = request.getParameter("technician") == null ? "Choose a Value" : request.getParameter("technician");
/*  9411 */     group = request.getParameter("group");
/*  9412 */     String ignoreAdditionalFields = request.getParameter("ignoreAdditionalFields");
/*       */     
/*  9414 */     if ("true".equalsIgnoreCase(ignoreAdditionalFields))
/*       */     {
/*  9416 */       category = "Choose a Value";
/*  9417 */       urgency = "Choose a Value";
/*  9418 */       technician = "Choose a Value";
/*  9419 */       subCategory = "Choose a Value";
/*  9420 */       group = "Choose a Value";
/*       */     }
/*       */     else
/*       */     {
/*  9424 */       category = getSDPCompName(category);
/*  9425 */       urgency = getSDPCompName(urgency);
/*  9426 */       subCategory = getSDPCompName(subCategory);
/*  9427 */       item = getSDPCompName(item);
/*  9428 */       group = getSDPCompName(group);
/*       */     }
/*       */     
/*       */ 
/*  9432 */     amform.setToAdd(APMHelpDeskUtil.getCategories());
/*  9433 */     amform.setPresent(APMHelpDeskUtil.getUrgency());
/*  9434 */     amform.setApplications(APMHelpDeskUtil.getAssignToTechnicians());
/*  9435 */     amform.setToAddSG(APMHelpDeskUtil.getAssignmentGroups());
/*       */     
/*  9437 */     amform.setSubCategory(subCategory);
/*  9438 */     amform.setDisplayname(profileName);
/*  9439 */     amform.setCategory(category);
/*  9440 */     amform.setPriority(urgency);
/*  9441 */     amform.setTechnician(technician);
/*  9442 */     amform.setSubject(subject);
/*  9443 */     amform.setMessage(message);
/*  9444 */     amform.setSiteName(site);
/*       */     
/*  9446 */     APMHDClientUtil.setAdvancedAPISettingsInTheForm(amform);
/*       */     
/*  9448 */     if (!ServiceNowIntegConfig.getInstance().isServiceNowConfigured())
/*       */     {
/*  9450 */       return new ActionForward(forwardUrl);
/*       */     }
/*       */     
/*  9453 */     DBQueryUtil.addEscapeSequence(profileName);
/*  9454 */     DBQueryUtil.addEscapeSequence(subject);
/*  9455 */     DBQueryUtil.addEscapeSequence(message);
/*       */     
/*  9457 */     String checkquery = "select * from AM_ACTIONPROFILE where NAME='" + profileName + "'";
/*  9458 */     ArrayList list = this.mo.getRows(checkquery);
/*       */     
/*  9460 */     if (list.size() == 0)
/*       */     {
/*  9462 */       int actionType = 19;
/*  9463 */       String insertquery = "insert into AM_ACTIONPROFILE (ID, NAME, TYPE) VALUES(" + DBQueryUtil.getIncrementedID("ID", "AM_ACTIONPROFILE") + ",'" + profileName + "','" + actionType + "' )";
/*  9464 */       this.mo.executeUpdateStmt(insertquery);
/*  9465 */       ArrayList result = this.mo.getRows("select max(ID) from AM_ACTIONPROFILE");
/*  9466 */       if (result.size() > 0)
/*       */       {
/*  9468 */         int appendMessage = 0;
/*  9469 */         if (request.getParameter("appendMessage") != null)
/*       */         {
/*  9471 */           appendMessage = 1;
/*       */         }
/*  9473 */         String id = (String)((ArrayList)result.get(0)).get(0);
/*  9474 */         if (id == null)
/*       */         {
/*  9476 */           id = "1";
/*       */         }
/*  9478 */         DelegatedUserRoleUtil.addEntryToConfigUserTable(request, Integer.parseInt(id), 2);
/*       */         
/*       */ 
/*       */ 
/*  9482 */         String insertmailconfigquery = "insert into AM_EMAILACTION (ID, FROMADDRESS, TOADDRESS, SUBJECT, MESSAGE, SMTPSERVER, SMTPPORT, MAILFORMAT, APPENDMESSAGE) values (" + id + ",'" + fromAddress + "','" + toAddress + "','" + subject + "','" + message + "','" + smtpServer + "'," + smtpPort + "," + Integer.parseInt(request.getParameter("mailFormat") != null ? request.getParameter("mailFormat") : "0") + "," + appendMessage + ")";
/*  9483 */         this.mo.executeUpdateStmt(insertmailconfigquery);
/*       */         
/*  9485 */         String insertSdeskTicket = "insert into AM_SDESK_TICKET_DETAILS (ID,TEMPLATE, CATEGORY, PRIORITY , TECHNICIAN, TICKETGROUP, ITEM, SUBCATEGORY,SITE,CUSTOMFIELDS) values (" + id + ",'" + requestTemplate + "','" + category + "','" + urgency + "','" + technician + "','" + group + "','" + item + "','" + subCategory + "','" + site + "','" + customServiceNowfields + "')";
/*  9486 */         this.mo.executeUpdateStmt(insertSdeskTicket);
/*       */         
/*       */ 
/*  9489 */         messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("ticketaction.create.sucess"));
/*  9490 */         saveMessages(request, messages);
/*       */       }
/*       */     }
/*       */     else
/*       */     {
/*  9495 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("ticketaction.create.alreadyexists", request.getParameter("displayname")));
/*  9496 */       saveMessages(request, messages);
/*       */       
/*  9498 */       request.setAttribute("SdeskLogTicketConfig", "ServiceNowTicketConfig");
/*  9499 */       request.setAttribute("Configure", "Configure");
/*  9500 */       if (request.getParameter("global") != null)
/*       */       {
/*  9502 */         return new ActionForward("/jsp/ServiceNow.jsp");
/*       */       }
/*       */       
/*       */ 
/*  9506 */       return new ActionForward("/showTile.do?TileName=.TicketActions");
/*       */     }
/*       */     
/*       */ 
/*  9510 */     showActionProfiles(mapping, form, request, response);
/*  9511 */     if (request.getParameter("global") != null)
/*       */     {
/*  9513 */       return new ActionForward(request.getParameter("returnpath"));
/*       */     }
/*       */     
/*       */ 
/*  9517 */     return new ActionForward("/showTile.do?TileName=.ActionProfiles");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward showLogTicket(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */   {
/*  9527 */     if (DBUtil.getGlobalConfigValueasBoolean("isServiceNow"))
/*       */     {
/*  9529 */       return mapping.findForward("serviceNowTicketAction");
/*       */     }
/*       */     
/*       */ 
/*  9533 */     return mapping.findForward("sDeskTicketAction");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward showSdeskLogTicket(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */   {
/*  9542 */     response.setContentType("text/html; charset=UTF-8");
/*  9543 */     String forwardUrl = "/jsp/ServiceDesk.jsp";
/*       */     try
/*       */     {
/*  9546 */       AMActionForm amform = (AMActionForm)form;
/*  9547 */       AMConnectionPool pool = AMConnectionPool.getInstance();
/*  9548 */       amform.setMspDesk(APMHDSettingsUtil.isMSPDesk());
/*  9549 */       amform.setHelpDeskProduct("SERVICEDESK");
/*  9550 */       ActionMessages messages = new ActionMessages();
/*  9551 */       SDPIntegConfig sdpIntegConfig = SDPIntegConfig.getInstance();
/*  9552 */       if (sdpIntegConfig.getSdpTicketMode().equalsIgnoreCase("mail"))
/*       */       {
/*       */         try
/*       */         {
/*  9556 */           sdpIntegConfig.setSdpTicketMode();
/*       */         }
/*       */         catch (Exception ex)
/*       */         {
/*  9560 */           ex.printStackTrace();
/*       */         }
/*       */       }
/*  9563 */       if (sdpIntegConfig.isSDPConfigured())
/*       */       {
/*  9565 */         if ((!sdpIntegConfig.isRestApiEnabled()) || (amform.getTicketingType().equals("credential")))
/*       */         {
/*  9567 */           amform.setTicketingType("credential");
/*  9568 */           ResultSet set1 = null;
/*  9569 */           String query1 = "";
/*       */           try
/*       */           {
/*  9572 */             query1 = "select HOST,PORT,USERNAME," + DBQueryUtil.decodeBytes("PASSWORD") + " from AM_MAILSETTINGS where ID=1";
/*       */             try
/*       */             {
/*  9575 */               set1 = AMConnectionPool.executeQueryStmt(query1);
/*       */             }
/*       */             catch (Exception e)
/*       */             {
/*  9579 */               e.printStackTrace();
/*       */             }
/*  9581 */             if ((set1 != null) && (set1.next()))
/*       */             {
/*       */ 
/*  9584 */               query1 = "select TO_EMAIL,FROM_EMAIL from SERVICEDESK_CONFIG";
/*  9585 */               set1 = AMConnectionPool.executeQueryStmt(query1);
/*  9586 */               if (!set1.next())
/*       */               {
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*  9593 */                 messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("ticketactioncreate.before.servicedesk"));
/*  9594 */                 saveMessages(request, messages);
/*  9595 */                 request.setAttribute("configureSdesk", "configureSdesk");
/*  9596 */                 return new ActionForward("/adminAction.do?method=showSdeskConfiguration");
/*       */               }
/*       */               
/*       */             }
/*  9600 */             else if ((!com.adventnet.appmanager.util.Constants.isIt360) || (sdpIntegConfig.getSdpTicketMode().equalsIgnoreCase("mail")))
/*       */             {
/*  9602 */               messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("mailserver.before.logticket"));
/*  9603 */               saveMessages(request, messages);
/*  9604 */               request.setAttribute("showSdeskLogTicket", "showSdeskLogTicket");
/*  9605 */               return new ActionForward("/adminAction.do?method=showMailServerConfiguration");
/*       */             }
/*       */           }
/*       */           catch (Exception ex)
/*       */           {
/*  9610 */             ex.printStackTrace();
/*       */           }
/*       */           finally
/*       */           {
/*  9614 */             AMConnectionPool.closeStatement(set1);
/*       */           }
/*  9616 */           RetreiveFeedHandler RFH = new RetreiveFeedHandler();
/*       */           try
/*       */           {
/*  9619 */             RssConnector rssConnector = RssConnector.getInstance();
/*  9620 */             rssConnector.fetchRss(RFH);
/*       */           } catch (Exception e) { JSONObject groups;
/*       */             JSONArray groupArray;
/*       */             String temp;
/*  9624 */             e.printStackTrace();
/*       */           } finally {
/*       */             JSONObject groups;
/*       */             JSONArray groupArray;
/*       */             String temp;
/*  9629 */             amform.setToAdd(makeArrayList(RFH.category));
/*  9630 */             amform.setPresent(makeArrayList(RFH.priority));
/*  9631 */             amform.setApplications(makeArrayList(RFH.technician));
/*  9632 */             amform.setReqNameArr(makeArrayList(RFH.techReqNames));
/*       */             
/*  9634 */             JSONObject groups = RFH.grpTech;
/*  9635 */             if (groups != null)
/*       */             {
/*  9637 */               JSONArray groupArray = groups.names();
/*  9638 */               String temp = groupArray.toString();
/*  9639 */               temp = temp.replaceAll("\"", "");
/*  9640 */               temp = temp.substring(1, temp.length() - 1);
/*  9641 */               amform.setToAddSG(makeArrayList(temp));
/*       */             }
/*  9643 */             if (EnterpriseUtil.isIt360MSPEdition())
/*       */             {
/*  9645 */               amform.setAccNamesArr(makeArrayList(RFH.accountName));
/*       */             }
/*       */           }
/*       */         }
/*       */         else
/*       */         {
/*  9651 */           amform.setAccNamesArr(APMHelpDeskUtil.getAccountNames());
/*  9652 */           amform.setSiteNameArr(APMHelpDeskUtil.getSiteNames(null));
/*  9653 */           amform.setToAdd(APMHelpDeskUtil.getCategories());
/*  9654 */           amform.setPresent(APMHelpDeskUtil.getPriority());
/*  9655 */           amform.setApplications(APMHelpDeskUtil.getTechnicians());
/*  9656 */           amform.setAvailableResources(APMHelpDeskUtil.getRequestTemplates());
/*       */           
/*       */ 
/*  9659 */           amform.setToAddSG(APMHelpDeskUtil.getSupportgroups());
/*  9660 */           amform.setToAddSC(APMHelpDeskUtil.getSubCategories(null));
/*  9661 */           amform.setToAddItem(APMHelpDeskUtil.getItems(null));
/*       */         }
/*       */         
/*  9664 */         if ((request.getParameter("global") != null) && (!com.adventnet.appmanager.util.Constants.isIt360))
/*       */         {
/*  9666 */           forwardUrl = "/jsp/TicketActionForm.jsp";
/*       */         }
/*       */         else
/*       */         {
/*  9670 */           forwardUrl = "/showTile.do?TileName=.TicketActions";
/*       */         }
/*       */       }
/*       */       else
/*       */       {
/*  9675 */         return new ActionForward(forwardUrl);
/*       */       }
/*       */       
/*  9678 */       amform.setSubject(FormatUtil.getString("am.webclient.managermail.bsm.alertfrommessage.text", new String[] { OEMUtil.getOEMString("product.name") }) + "  $HOSTNAME $PORT $SEVERITY");
/*  9679 */       amform.setMessage(FormatUtil.getString("am.webclient.mail.default.message.text", new String[] { OEMUtil.getOEMString("product.name") }) + " $HOSTIP $RCAMESSAGE");
/*  9680 */       request.setAttribute("SdeskLogTicketConfig", "SdeskLogTicketConfig");
/*  9681 */       request.setAttribute("Configure", "Configure");
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/*  9685 */       e.printStackTrace();
/*       */     }
/*       */     catch (Error e1)
/*       */     {
/*  9689 */       e1.printStackTrace();
/*       */     }
/*  9691 */     if (APMHelpDeskUtil.isHdDown())
/*       */     {
/*  9693 */       request.setAttribute("errorMsg", FormatUtil.getString("ServiceDeskConfiguration.failure"));
/*       */     }
/*  9695 */     return new ActionForward(forwardUrl);
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward SdeskLogTicketConfig(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*  9705 */     AMActionForm amform = (AMActionForm)form;
/*  9706 */     ActionMessages messages = new ActionMessages();
/*  9707 */     ActionErrors errors = new ActionErrors();
/*  9708 */     String requestTemplate = "";
/*  9709 */     String profileName = "";
/*  9710 */     String site_name = "";
/*  9711 */     String account_name = "";
/*  9712 */     String Category = "";
/*  9713 */     String Priority = "";
/*  9714 */     String Technician = "";
/*  9715 */     String group = "";
/*  9716 */     String Subject = "";
/*  9717 */     String Message = "";
/*  9718 */     String subCategory = "";
/*  9719 */     String item = "";
/*  9720 */     String smtpServer = "";
/*  9721 */     int smtpPort = 0;
/*  9722 */     String toAddress = "";
/*  9723 */     String fromAddress = "";
/*  9724 */     String smtpServerUserName = "";
/*  9725 */     String smtpServerPassword = "";
/*  9726 */     String requester = "";
/*  9727 */     String site = request.getParameter("site");
/*  9728 */     String customSDPfields = request.getParameter("customHeaders");
/*  9729 */     profileName = request.getParameter("displayname");
/*  9730 */     requestTemplate = request.getParameter("reqTemplate") == null ? "Choose a Value" : request.getParameter("reqTemplate");
/*  9731 */     Category = request.getParameter("category") == null ? "Choose a Value" : request.getParameter("category");
/*  9732 */     Priority = request.getParameter("priority");
/*  9733 */     Technician = request.getParameter("technician");
/*  9734 */     Subject = request.getParameter("subject");
/*  9735 */     Message = request.getParameter("message");
/*  9736 */     subCategory = request.getParameter("subCategory");
/*  9737 */     item = request.getParameter("item");
/*  9738 */     group = request.getParameter("group");
/*  9739 */     requester = request.getParameter("reqName");
/*  9740 */     String ticketingType = request.getParameter("ticketingType");
/*  9741 */     account_name = request.getParameter("accountName");
/*  9742 */     site_name = request.getParameter("siteName");
/*  9743 */     if ("restapi".equals(ticketingType))
/*       */     {
/*       */ 
/*  9746 */       String ignoreAdditionalFields = request.getParameter("ignoreAdditionalFields");
/*  9747 */       requestTemplate = getSDPCompName(requestTemplate);
/*  9748 */       if ("true".equalsIgnoreCase(ignoreAdditionalFields))
/*       */       {
/*  9750 */         Category = "Choose a Value";
/*  9751 */         Priority = "Choose a Value";
/*  9752 */         Technician = "Choose a Value";
/*  9753 */         subCategory = "Choose a Value";
/*  9754 */         item = "Choose a Value";
/*  9755 */         group = "Choose a Value";
/*       */       }
/*       */       else
/*       */       {
/*  9759 */         account_name = getSDPCompName(account_name);
/*  9760 */         site_name = getSDPCompName(site_name);
/*  9761 */         Category = getSDPCompName(Category);
/*  9762 */         Priority = getSDPCompName(Priority);
/*  9763 */         Technician = getSDPCompName(Technician);
/*  9764 */         subCategory = getSDPCompName(subCategory);
/*  9765 */         item = getSDPCompName(item);
/*  9766 */         group = getSDPCompName(group);
/*       */       }
/*  9768 */       amform.setToAdd(APMHelpDeskUtil.getCategories());
/*  9769 */       amform.setPresent(APMHelpDeskUtil.getPriority());
/*  9770 */       amform.setApplications(APMHelpDeskUtil.getTechnicians());
/*  9771 */       amform.setAvailableResources(APMHelpDeskUtil.getRequestTemplates());
/*       */       
/*       */ 
/*  9774 */       amform.setToAddSG(APMHelpDeskUtil.getSupportgroups());
/*       */     }
/*       */     
/*  9777 */     amform.setItem(item);
/*  9778 */     amform.setSubCategory(subCategory);
/*  9779 */     amform.setDisplayname(profileName);
/*  9780 */     amform.setCategory(Category);
/*  9781 */     amform.setPriority(Priority);
/*  9782 */     amform.setTechnician(Technician);
/*  9783 */     amform.setSubject(Subject);
/*  9784 */     amform.setMessage(Message);
/*  9785 */     amform.setGroup(group);
/*  9786 */     amform.setAccountName(account_name);
/*  9787 */     amform.setSiteName(site_name);
/*  9788 */     if ((requester != null) && (!requester.equals("")))
/*       */     {
/*  9790 */       amform.setReqName(requester);
/*       */     }
/*       */     
/*       */ 
/*  9794 */     if (SDPIntegConfig.getInstance().isSDPConfigured())
/*       */     {
/*  9796 */       if (amform.getTicketingType().equals("credential"))
/*       */       {
/*  9798 */         RetreiveFeedHandler RFH = new RetreiveFeedHandler();
/*       */         try
/*       */         {
/*  9801 */           RssConnector rssConnector = RssConnector.getInstance();
/*  9802 */           rssConnector.fetchRss(RFH);
/*       */         } catch (Exception e) { JSONObject groups;
/*       */           JSONArray groupArray;
/*       */           String temp;
/*  9806 */           e.printStackTrace();
/*       */         } finally {
/*       */           JSONObject groups;
/*       */           JSONArray groupArray;
/*       */           String temp;
/*  9811 */           amform.setToAdd(makeArrayList(RFH.category));
/*  9812 */           amform.setPresent(makeArrayList(RFH.priority));
/*  9813 */           amform.setApplications(makeArrayList(RFH.technician));
/*  9814 */           amform.setReqNameArr(makeArrayList(RFH.techReqNames));
/*  9815 */           JSONObject groups = RFH.grpTech;
/*  9816 */           if (groups != null)
/*       */           {
/*  9818 */             JSONArray groupArray = groups.names();
/*  9819 */             String temp = groupArray.toString();
/*  9820 */             temp = temp.replaceAll("\"", "");
/*  9821 */             temp = temp.substring(1, temp.length() - 1);
/*  9822 */             amform.setToAddSG(makeArrayList(temp));
/*       */           }
/*       */           
/*  9825 */           if (EnterpriseUtil.isIt360MSPEdition())
/*       */           {
/*  9827 */             amform.setAccNamesArr(makeArrayList(RFH.accountName));
/*       */           }
/*       */         }
/*       */         
/*       */ 
/*  9832 */         if (SDPIntegConfig.getInstance().getSdpTicketMode().equalsIgnoreCase("mail"))
/*       */         {
/*  9834 */           AMConnectionPool pool = AMConnectionPool.getInstance();
/*  9835 */           String query = "select HOST,PORT,USERNAME," + DBQueryUtil.decodeBytes("PASSWORD") + " from AM_MAILSETTINGS where ID=1";
/*  9836 */           ResultSet set = AMConnectionPool.executeQueryStmt(query);
/*  9837 */           if (set.next())
/*       */           {
/*  9839 */             smtpServer = set.getString(1);
/*  9840 */             smtpPort = set.getInt(2);
/*       */ 
/*       */ 
/*       */ 
/*       */           }
/*       */           else
/*       */           {
/*       */ 
/*       */ 
/*  9849 */             errors.add("org.apache.struts.action.GLOBAL_ERROR", new ActionError("ticketaction.mailserver.failure "));
/*  9850 */             saveErrors(request, errors);
/*  9851 */             request.setAttribute("Configure", "Configure");
/*  9852 */             if (request.getParameter("global") != null)
/*       */             {
/*  9854 */               return new ActionForward("/jsp/ServiceDesk.jsp");
/*       */             }
/*       */             
/*       */ 
/*  9858 */             return new ActionForward("/showTile.do?TileName=.TicketActions");
/*       */           }
/*       */           
/*  9861 */           String query1 = "select TO_EMAIL,FROM_EMAIL from SERVICEDESK_CONFIG";
/*  9862 */           ResultSet set1 = AMConnectionPool.executeQueryStmt(query1);
/*  9863 */           if (set1.next())
/*       */           {
/*  9865 */             toAddress = set1.getString(1);
/*  9866 */             fromAddress = set1.getString(2);
/*       */ 
/*       */ 
/*       */           }
/*       */           else
/*       */           {
/*       */ 
/*  9873 */             errors.add("org.apache.struts.action.GLOBAL_ERROR", new ActionError("ticketaction.ServiceDesk.failure"));
/*  9874 */             saveErrors(request, errors);
/*  9875 */             request.setAttribute("Configure", "Configure");
/*  9876 */             if (request.getParameter("global") != null)
/*       */             {
/*  9878 */               return new ActionForward("/jsp/ServiceDesk.jsp");
/*       */             }
/*       */             
/*       */ 
/*  9882 */             return new ActionForward("/showTile.do?TileName=.TicketActions");
/*       */           }
/*       */           
/*       */         }
/*       */         
/*       */       }
/*       */     }
/*       */     else {
/*  9890 */       return new ActionForward("/jsp/ServiceDesk.jsp");
/*       */     }
/*       */     
/*  9893 */     DBQueryUtil.addEscapeSequence(profileName);
/*  9894 */     DBQueryUtil.addEscapeSequence(Subject);
/*  9895 */     DBQueryUtil.addEscapeSequence(Message);
/*  9896 */     String checkquery = "select * from AM_ACTIONPROFILE where NAME='" + profileName + "'";
/*  9897 */     ArrayList list = this.mo.getRows(checkquery);
/*  9898 */     if (list.size() == 0)
/*       */     {
/*  9900 */       int actionType = amform.getTicketingType().equals("credential") ? 6 : 17;
/*  9901 */       String insertquery = "insert into AM_ACTIONPROFILE (ID, NAME, TYPE) VALUES(" + DBQueryUtil.getIncrementedID("ID", "AM_ACTIONPROFILE") + ",'" + profileName + "','" + actionType + "' )";
/*  9902 */       this.mo.executeUpdateStmt(insertquery);
/*  9903 */       ArrayList result = this.mo.getRows("select max(ID) from AM_ACTIONPROFILE");
/*  9904 */       if (result.size() > 0)
/*       */       {
/*  9906 */         int appendMessage = 0;
/*  9907 */         if (request.getParameter("appendMessage") != null)
/*       */         {
/*  9909 */           appendMessage = 1;
/*       */         }
/*  9911 */         String id = (String)((ArrayList)result.get(0)).get(0);
/*  9912 */         if (id == null)
/*       */         {
/*  9914 */           id = "1";
/*       */         }
/*  9916 */         DelegatedUserRoleUtil.addEntryToConfigUserTable(request, Integer.parseInt(id), 2);
/*  9917 */         String insertSdeskTicket = "insert into AM_SDESK_TICKET_DETAILS (ID,TEMPLATE, CATEGORY, PRIORITY , TECHNICIAN, TICKETGROUP, ITEM, SUBCATEGORY,SITE,CUSTOMFIELDS) values (" + id + ",'" + requestTemplate + "','" + Category + "','" + Priority + "','" + Technician + "','" + group + "','" + item + "','" + subCategory + "','" + site + "','" + customSDPfields + "')";
/*  9918 */         this.mo.executeUpdateStmt(insertSdeskTicket);
/*  9919 */         String insertmailconfigquery = "insert into AM_EMAILACTION (ID, FROMADDRESS, TOADDRESS, SUBJECT, MESSAGE, SMTPSERVER, SMTPPORT, MAILFORMAT, APPENDMESSAGE) values (" + id + ",'" + fromAddress + "','" + toAddress + "','" + Subject + "','" + Message + "','" + smtpServer + "'," + smtpPort + "," + Integer.parseInt(request.getParameter("mailFormat") != null ? request.getParameter("mailFormat") : "0") + "," + appendMessage + ")";
/*  9920 */         this.mo.executeUpdateStmt(insertmailconfigquery);
/*       */         
/*  9922 */         if ((requester != null) && (!requester.equals("")))
/*       */         {
/*       */           try
/*       */           {
/*  9926 */             int actionID = DBUtil.getActionId(profileName, actionType);
/*  9927 */             String insertTicketReqMap = "insert into TicketProfileRequesterMapping (PROFILEID, REQUESTER) values (" + actionID + ",'" + requester + "')";
/*  9928 */             if ((account_name != null) && (!account_name.equalsIgnoreCase("")) && (site_name != null) && (!site_name.equalsIgnoreCase("")))
/*       */             {
/*  9930 */               if (amform.getAccountName().equals(""))
/*       */               {
/*  9932 */                 amform.setAccountName(account_name);
/*       */               }
/*       */               
/*  9935 */               if (amform.getSiteName().equals(""))
/*       */               {
/*  9937 */                 amform.setSiteName(site_name);
/*       */               }
/*  9939 */               insertTicketReqMap = "insert into TicketProfileRequesterMapping (PROFILEID, REQUESTER, ACCOUNT, SITE) values (" + actionID + ",'" + requester + "','" + account_name + "','" + site_name + "')";
/*       */             }
/*  9941 */             this.mo.executeUpdateStmt(insertTicketReqMap);
/*       */           }
/*       */           catch (Exception ex)
/*       */           {
/*  9945 */             ex.printStackTrace();
/*       */           }
/*       */         }
/*       */         
/*       */ 
/*       */         try
/*       */         {
/*  9952 */           if ((this.isOPMConfigured) && (this.isLogATicketToBePostedToOPM)) {
/*  9953 */             Map ticketMap = request.getParameterMap();
/*  9954 */             Properties moreDetails = new Properties();
/*  9955 */             moreDetails.setProperty("operation", "add");
/*  9956 */             moreDetails.setProperty("fromAddress", fromAddress);
/*  9957 */             moreDetails.setProperty("toAddress", toAddress);
/*  9958 */             moreDetails.setProperty("smtpServer", smtpServer);
/*  9959 */             moreDetails.setProperty("smtpPort", Integer.valueOf(smtpPort).toString());
/*  9960 */             moreDetails.setProperty("smtpServerUserName", smtpServerUserName);
/*  9961 */             moreDetails.setProperty("smtpServerPassword", smtpServerPassword);
/*  9962 */             int respCode = PostLogATickDetailsToOPM(ticketMap, moreDetails, request);
/*  9963 */             AMLog.debug("PostLogATickDetailsToOPM response for sdesklogticketconfig ::: " + respCode);
/*       */           }
/*       */         }
/*       */         catch (Exception ex) {
/*  9967 */           ex.printStackTrace();
/*       */         }
/*  9969 */         messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("ticketaction.create.sucess"));
/*  9970 */         saveMessages(request, messages);
/*       */       }
/*       */     }
/*       */     else
/*       */     {
/*  9975 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("ticketaction.create.alreadyexists", request.getParameter("displayname")));
/*  9976 */       saveMessages(request, messages);
/*  9977 */       request.setAttribute("SdeskLogTicketConfig", "SdeskLogTicketConfig");
/*  9978 */       request.setAttribute("Configure", "Configure");
/*  9979 */       if (request.getParameter("global") != null)
/*       */       {
/*  9981 */         return new ActionForward("/jsp/ServiceDesk.jsp");
/*       */       }
/*       */       
/*       */ 
/*  9985 */       return new ActionForward("/showTile.do?TileName=.TicketActions");
/*       */     }
/*       */     
/*       */ 
/*       */ 
/*  9990 */     showActionProfiles(mapping, form, request, response);
/*  9991 */     if (request.getParameter("global") != null)
/*       */     {
/*  9993 */       return new ActionForward(request.getParameter("returnpath"));
/*       */     }
/*       */     
/*       */ 
/*  9997 */     return new ActionForward("/showTile.do?TileName=.ActionProfiles");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   public boolean getValueForDataCleanUp(String TName)
/*       */   {
/* 10005 */     boolean toRet = false;
/* 10006 */     ResultSet rs = null;
/* 10007 */     String query = "SELECT  SCHEDULE_INTERVAL FROM  AM_DataCleanupInfo  where TABLENAME='" + TName + "'";
/*       */     try
/*       */     {
/* 10010 */       rs = AMConnectionPool.executeQueryStmt(query);
/* 10011 */       if (rs.next())
/*       */       {
/* 10013 */         toRet = true;
/*       */       }
/*       */     }
/*       */     catch (Exception ef)
/*       */     {
/* 10018 */       ef.printStackTrace();
/*       */     }
/*       */     finally
/*       */     {
/* 10022 */       AMConnectionPool.closeStatement(rs);
/*       */     }
/* 10024 */     return toRet;
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward updateDataCleanUp(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 10034 */     ActionMessages messages = new ActionMessages();
/* 10035 */     AMActionForm amform = (AMActionForm)form;
/* 10036 */     AMConnectionPool pool = AMConnectionPool.getInstance();
/* 10037 */     com.adventnet.nms.eventdb.EventAPI eventAPI = (com.adventnet.nms.eventdb.EventAPI)NmsUtil.getAPI("EventAPI");
/*       */     try {
/* 10039 */       setReportsSettings(mapping, form, request, response);
/* 10040 */       int value = amform.getDataclean();
/* 10041 */       int dvalue = amform.getDailyclean();
/* 10042 */       int hourlyupdate = value * 24;
/* 10043 */       int dailyupdate = dvalue * 24;
/* 10044 */       int alertval = amform.getAlertclean();
/*       */       
/*       */ 
/*       */ 
/* 10048 */       String updateactionquery = null;
/* 10049 */       String updateactionquery1 = null;
/* 10050 */       String oldupdateactionquery = null;
/* 10051 */       String oldupdateactionquery1 = null;
/* 10052 */       com.adventnet.nms.eventdb.EventMgr.getFaultMgr().setAlertWindowSize(alertval);
/*       */       
/* 10054 */       String alquery = "SELECT VALUE FROM AM_GLOBALCONFIG WHERE NAME='AlertValue'";
/* 10055 */       ResultSet re = AMConnectionPool.executeQueryStmt(alquery);
/*       */       
/* 10057 */       if (re.next())
/*       */       {
/* 10059 */         String alertupdatequery = "UPDATE AM_GLOBALCONFIG SET VALUE ='" + alertval + "' WHERE NAME='AlertValue'";
/* 10060 */         this.mo.executeUpdateStmt(alertupdatequery);
/*       */ 
/*       */       }
/*       */       else
/*       */       {
/* 10065 */         String alertinsertquery = "INSERT INTO AM_GLOBALCONFIG VALUES('AlertValue','" + alertval + "')";
/* 10066 */         this.mo.executeUpdateStmt(alertinsertquery);
/*       */       }
/*       */       
/* 10069 */       ArrayList ATables = DBUtil.getAllArchiveTableNames();
/* 10070 */       ATables.add("AM_MinMaxAvgData");
/*       */       
/* 10072 */       for (int k = 0; k < ATables.size(); k++) {
/* 10073 */         boolean isvalue = getValueForDataCleanUp(ATables.get(k).toString());
/* 10074 */         AMLog.debug("TableName:" + ATables.get(k).toString() + "\tisvalue:" + isvalue);
/*       */         
/*       */ 
/* 10077 */         if (isvalue)
/*       */         {
/* 10079 */           oldupdateactionquery = "Update  AM_DataCleanupInfo  set SCHEDULE_INTERVAL=" + hourlyupdate + " where TABLENAME='" + ATables.get(k).toString() + "' AND CONDITIONS='DURATION=1'";
/*       */           
/*       */ 
/*       */ 
/* 10083 */           updateactionquery = "Update  AM_DataCleanupInfo  set SCHEDULE_INTERVAL=" + hourlyupdate + " where  CONDITIONS='DURATION=1'";
/*       */           
/*       */ 
/* 10086 */           FormatUtil.printQueryChange("AdminActions.java", oldupdateactionquery, updateactionquery);
/*       */           
/* 10088 */           oldupdateactionquery1 = "Update  AM_DataCleanupInfo  set SCHEDULE_INTERVAL=" + dailyupdate + " where TABLENAME='" + ATables.get(k).toString() + "' AND CONDITIONS='DURATION=2'";
/*       */           
/*       */ 
/*       */ 
/* 10092 */           updateactionquery1 = "Update  AM_DataCleanupInfo  set SCHEDULE_INTERVAL=" + dailyupdate + " where  CONDITIONS='DURATION=2'";
/*       */           
/*       */ 
/* 10095 */           FormatUtil.printQueryChange("AdminActions.java", oldupdateactionquery1, updateactionquery1);
/*       */         }
/*       */         else
/*       */         {
/* 10099 */           oldupdateactionquery = "insert into AM_DataCleanupInfo (ID, TABLENAME, COLUMNNAME, VALUE, MESSAGE, STATUS, SCHEDULE, SCHEDULE_INTERVAL,CONDITIONS) values(" + DBQueryUtil.getIncrementedID("ID", "AM_DataCleanupInfo") + ",'" + ATables.get(k).toString() + "','ARCHIVEDTIME','0','NotExecuted','3','1'," + hourlyupdate + ",'DURATION=1' )";
/*       */           
/*       */ 
/* 10102 */           updateactionquery = "insert into AM_DataCleanupInfo (ID, TABLENAME, COLUMNNAME, VALUE, MESSAGE, STATUS, SCHEDULE, SCHEDULE_INTERVAL,CONDITIONS) values(" + DBQueryUtil.getIncrementedID("ID", "AM_DataCleanupInfo") + ",'" + ATables.get(k).toString() + "','ARCHIVEDTIME','0','NotExecuted','3','1'," + hourlyupdate + ",'DURATION=1' )";
/*       */           
/*       */ 
/* 10105 */           FormatUtil.printQueryChange("AdminActions.java", oldupdateactionquery, updateactionquery);
/*       */           
/* 10107 */           oldupdateactionquery1 = "insert into AM_DataCleanupInfo (ID, TABLENAME, COLUMNNAME, VALUE, MESSAGE, STATUS, SCHEDULE, SCHEDULE_INTERVAL,CONDITIONS) values(" + DBQueryUtil.getIncrementedID("ID", "AM_DataCleanupInfo") + ",'" + ATables.get(k).toString() + "','ARCHIVEDTIME','0','NotExecuted','3','1'," + dailyupdate + ",'DURATION=2')";
/*       */           
/*       */ 
/* 10110 */           updateactionquery1 = "insert into AM_DataCleanupInfo (ID, TABLENAME, COLUMNNAME, VALUE, MESSAGE, STATUS, SCHEDULE, SCHEDULE_INTERVAL,CONDITIONS) values(" + DBQueryUtil.getIncrementedID("ID", "AM_DataCleanupInfo") + ",'" + ATables.get(k).toString() + "','ARCHIVEDTIME','0','NotExecuted','3','1'," + dailyupdate + ",'DURATION=2' )";
/*       */           
/*       */ 
/* 10113 */           FormatUtil.printQueryChange("AdminActions.java", oldupdateactionquery1, updateactionquery1);
/*       */         }
/*       */         
/* 10116 */         this.mo.executeUpdateStmt(updateactionquery);
/* 10117 */         this.mo.executeUpdateStmt(updateactionquery1);
/*       */       }
/* 10119 */       com.adventnet.appmanager.reporting.ReportUtilities.setHourlyCleanupDays(value);
/* 10120 */       com.adventnet.appmanager.reporting.ReportUtilities.setDailyCleanupDays(dvalue);
/* 10121 */       AMConnectionPool.closeStatement(re);
/*       */       
/*       */ 
/* 10124 */       value = amform.getUnsolTrapsCleanHrs();
/* 10125 */       if (value <= 0) {
/* 10126 */         value = 5;
/*       */       }
/* 10128 */       if (DBUtil.hasGlobalConfigValue("am.unsolicited.trap.cleanup.interval.hours")) {
/* 10129 */         DBUtil.updateGlobalConfigValue("am.unsolicited.trap.cleanup.interval.hours", String.valueOf(value));
/*       */       }
/*       */       else {
/* 10132 */         DBUtil.insertIntoGlobalConfig("am.unsolicited.trap.cleanup.interval.hours", String.valueOf(value));
/*       */       }
/*       */       
/*       */     }
/*       */     catch (Exception ee)
/*       */     {
/* 10138 */       ee.printStackTrace();
/*       */     }
/*       */     
/* 10141 */     request.setAttribute("tabtoLoad", "dataretention");
/* 10142 */     showDataCleanUp(mapping, form, request, response);
/* 10143 */     request.setAttribute("sucess", FormatUtil.getString("am.webclient.dbretention.sucess.text"));
/*       */     
/* 10145 */     return new ActionForward("/jsp/DataCleanUp.jsp");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward showDataCleanUp(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 10158 */     if (DBUtil.isDelegatedAdmin(request.getRemoteUser()))
/*       */     {
/* 10160 */       return new ActionForward("/jsp/formpages/AccessRestricted.jsp");
/*       */     }
/*       */     
/*       */ 
/* 10164 */     ActionMessages messages = new ActionMessages();
/* 10165 */     AMActionForm amform = (AMActionForm)form;
/* 10166 */     AMConnectionPool pool = AMConnectionPool.getInstance();
/*       */     
/*       */     try
/*       */     {
/* 10170 */       setReportsSettings(mapping, form, request, response);
/* 10171 */       String oldselectquery = "SELECT  SCHEDULE_INTERVAL FROM  AM_DataCleanupInfo  where TABLENAME='AM_MinMaxAvgData' AND CONDITIONS='DURATION=1'";
/*       */       
/*       */ 
/* 10174 */       String selectquery = "SELECT  SCHEDULE_INTERVAL FROM  AM_DataCleanupInfo  where TABLENAME='AM_MinMaxAvgData' AND CONDITIONS='DURATION=1'";
/*       */       
/*       */ 
/* 10177 */       FormatUtil.printQueryChange("AdminActions.java", oldselectquery, selectquery);
/*       */       
/* 10179 */       String oldselectquery1 = "SELECT  SCHEDULE_INTERVAL FROM  AM_DataCleanupInfo  where TABLENAME='AM_MinMaxAvgData' AND CONDITIONS='DURATION=2'";
/*       */       
/*       */ 
/* 10182 */       String selectquery1 = "SELECT  SCHEDULE_INTERVAL FROM  AM_DataCleanupInfo  where TABLENAME='AM_MinMaxAvgData' AND CONDITIONS='DURATION=2'";
/*       */       
/*       */ 
/* 10185 */       FormatUtil.printQueryChange("AdminActions.java", oldselectquery1, selectquery1);
/* 10186 */       String selectquery2 = "SELECT VALUE FROM AM_GLOBALCONFIG WHERE NAME='AlertValue'";
/* 10187 */       ResultSet rs1 = AMConnectionPool.executeQueryStmt(selectquery);
/*       */       
/*       */ 
/* 10190 */       String intvalue = null;
/* 10191 */       String dvalue = null;
/* 10192 */       String avalue = null;
/* 10193 */       int alert = com.adventnet.nms.eventdb.EventMgr.getFaultMgr().getAlertWindowSize();
/*       */       
/* 10195 */       if (rs1.next())
/*       */       {
/* 10197 */         intvalue = rs1.getString("SCHEDULE_INTERVAL");
/*       */       }
/* 10199 */       AMConnectionPool.closeStatement(rs1);
/* 10200 */       rs1 = AMConnectionPool.executeQueryStmt(selectquery1);
/* 10201 */       if (rs1.next())
/*       */       {
/* 10203 */         dvalue = rs1.getString("SCHEDULE_INTERVAL");
/*       */       }
/* 10205 */       AMConnectionPool.closeStatement(rs1);
/* 10206 */       rs1 = AMConnectionPool.executeQueryStmt(selectquery2);
/* 10207 */       if (rs1.next())
/*       */       {
/* 10209 */         avalue = rs1.getString("VALUE");
/*       */       }
/* 10211 */       AMConnectionPool.closeStatement(rs1);
/* 10212 */       if (intvalue != null)
/*       */       {
/* 10214 */         int showvalue = Integer.parseInt(intvalue) / 24;
/* 10215 */         amform.setDataclean(showvalue);
/* 10216 */         amform.setDailyclean(Integer.parseInt(dvalue) / 24);
/* 10217 */         if (avalue != null)
/*       */         {
/*       */ 
/* 10220 */           amform.setAlertclean(alert);
/*       */         }
/*       */       }
/*       */       
/*       */ 
/* 10225 */       File file = new File(System.getProperty("webnms.rootdir") + File.separator + "images" + File.separator + "report_logo.png");
/* 10226 */       if (file.exists()) {
/* 10227 */         request.setAttribute("reportlogo", "/images/report_logo.png");
/*       */       }
/*       */       else {
/* 10230 */         request.setAttribute("reportlogo", "/images/am_logo.png");
/*       */       }
/*       */       
/*       */ 
/* 10234 */       String s1 = DBUtil.getGlobalConfigValue("am.unsolicited.trap.cleanup.interval.hours");
/* 10235 */       if ((s1 == null) || (s1.trim().length() == 0) || (s1.equalsIgnoreCase("null"))) {
/* 10236 */         amform.setUnsolTrapsCleanHrs(5);
/*       */       } else {
/* 10238 */         amform.setUnsolTrapsCleanHrs(Integer.parseInt(s1));
/*       */       }
/*       */     }
/*       */     catch (Exception ee)
/*       */     {
/* 10243 */       ee.printStackTrace();
/*       */     }
/*       */     
/*       */ 
/* 10247 */     if ("dataretention".equals(request.getParameter("tabtoLoad")))
/*       */     {
/* 10249 */       request.setAttribute("tabtoLoad", "dataretention");
/*       */     }
/* 10251 */     return new ActionForward("/jsp/DataCleanUp.jsp");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */   private ArrayList makeArrayList(String values)
/*       */   {
/* 10258 */     ArrayList list = new ArrayList();
/* 10259 */     Properties p = new Properties();
/* 10260 */     p.setProperty("label", FormatUtil.getString("am.webclient.admintab.servicedesk.choosevalue"));
/* 10261 */     p.setProperty("value", "Choose a Value");
/* 10262 */     list.add(p);
/* 10263 */     StringTokenizer sToken = new StringTokenizer(values, ",");
/* 10264 */     while (sToken.hasMoreTokens())
/*       */     {
/* 10266 */       Properties p1 = new Properties();
/* 10267 */       String next = sToken.nextToken();
/* 10268 */       p1.setProperty("label", FormatUtil.getString(next));
/* 10269 */       p1.setProperty("value", next);
/* 10270 */       list.add(p1);
/*       */     }
/* 10272 */     return list;
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward AddThresholdActionConfiguration(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 10286 */     ActionMessages messages = new ActionMessages();
/* 10287 */     ActionErrors errors = new ActionErrors();
/* 10288 */     String forwardPage = "";
/* 10289 */     StringBuffer selectedMonitorsId = new StringBuffer();
/* 10290 */     String configAttThresholdOption = request.getParameter("confAttThresholdOption");
/* 10291 */     String[] selectedMonitors = null;
/* 10292 */     String[] availableMonitors = null;
/* 10293 */     ArrayList selectedMonitorsList = new ArrayList();
/* 10294 */     ArrayList updatedselectedMonitorsList = new ArrayList();
/* 10295 */     String isredirect = request.getParameter("isredirect");
/* 10296 */     String groupTemplate = request.getParameter("groupTemplate");
/* 10297 */     int groupID = 0;
/* 10298 */     boolean isredir = false;
/* 10299 */     if ("true".equals(groupTemplate)) {
/* 10300 */       groupID = Integer.parseInt(request.getParameter("haid"));
/*       */     }
/*       */     
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/* 10309 */     boolean fromAdmin = "true".equals(request.getParameter("adminAPIRequest"));
/* 10310 */     String[] criticalActions = request.getParameterValues("selectedactions_critical");
/* 10311 */     String[] warningActions = request.getParameterValues("selectedactions_warning");
/* 10312 */     String[] clearActions = request.getParameterValues("selectedactions_clear");
/* 10313 */     String removeRCAforMAS = request.getParameter("removeRCA");
/* 10314 */     Boolean removeRCA = Boolean.valueOf((removeRCAforMAS == null) || (!removeRCAforMAS.equals("false")));
/* 10315 */     ResultSet result = null;
/*       */     int requesttype;
/* 10317 */     if (request.getParameter("requesttype") != null)
/*       */     {
/* 10319 */       requesttype = Integer.parseInt(request.getParameter("requesttype"));
/*       */     }
/*       */     else
/*       */     {
/* 10323 */       return new ActionForward("/showresource.do?resourceid=" + com.adventnet.appmanager.util.ParentChildRelationalUtil.getParentResourceID(Integer.parseInt(request.getParameter("resourceid"))) + "&method=showResourceForResourceID", true);
/*       */     }
/*       */     int requesttype;
/* 10326 */     String deleteConfigType = request.getParameter("deleteConfigType");
/* 10327 */     if ((requesttype == 7) || (requesttype == 8)) {
/* 10328 */       requesttype = 3;
/*       */     }
/* 10330 */     String thresholdparams = request.getParameter("thresholdactionparams");
/* 10331 */     String resourceType = null;
/* 10332 */     String isSecondaryLevelAttr = "false";
/* 10333 */     if (thresholdparams != null) {
/* 10334 */       HashMap<String, String> thresholdParamMap = new HashMap();
/* 10335 */       String[] pairs = thresholdparams.split("&");
/* 10336 */       for (String pair : pairs) {
/* 10337 */         String[] keyvalues = pair.split("=");
/* 10338 */         String key = URLDecoder.decode(keyvalues[0], "UTF-8");
/* 10339 */         String value = URLDecoder.decode(keyvalues[1], "UTF-8");
/* 10340 */         thresholdParamMap.put(key, value);
/*       */       }
/* 10342 */       resourceType = (String)thresholdParamMap.get("resourceType");
/* 10343 */       isSecondaryLevelAttr = (String)thresholdParamMap.get("isSecondaryLevelAttr");
/*       */     }
/* 10345 */     String redirectTo = request.getParameter("redirectto");
/* 10346 */     if ((EnterpriseUtil.isAdminServer()) && (redirectTo != null) && (redirectTo.indexOf("&proxy=true") != -1)) {
/* 10347 */       redirectTo = redirectTo.substring(0, redirectTo.indexOf("&proxy=true"));
/*       */     }
/* 10349 */     if ((isredirect != null) && (isredirect.equals("true")))
/*       */     {
/* 10351 */       isredir = true;
/*       */     }
/* 10353 */     HashMap<String, String> apiParameters = new HashMap();
/*       */     try
/*       */     {
/* 10356 */       String thresholdVal = request.getParameter("thresholdList");
/*       */       
/* 10358 */       int resourceid = Integer.parseInt(request.getParameter("resourceid"));
/* 10359 */       String multimonitors = request.getParameter("multimonitors");
/*       */       
/* 10361 */       String overrideConfig = request.getParameter("overrideConfig");
/* 10362 */       boolean applySelected = (multimonitors != null) && (multimonitors.equals("applyselected"));
/* 10363 */       boolean overrideThresholdConfig = (overrideConfig != null) && (overrideConfig.equals("overrideThresholdConfig"));
/* 10364 */       boolean isMonitorGroupTemplate = false;
/* 10365 */       boolean isMonitorTypeTemplate = false;
/* 10366 */       Vector<String> resIdsinMultipleGroups = new Vector();
/* 10367 */       AMConnectionPool pool = AMConnectionPool.getInstance();
/* 10368 */       int attributeID = 0;
/* 10369 */       if (request.getParameter("attributeList") != null)
/*       */       {
/* 10371 */         attributeID = Integer.parseInt(request.getParameter("attributeList"));
/*       */       }
/*       */       else
/*       */       {
/* 10375 */         return new ActionForward("/showActionProfiles.do?method=getResourceProfiles&admin=true&monitor=true", true);
/*       */       }
/* 10377 */       int attribType = -1;
/* 10378 */       String attrName = "";
/* 10379 */       String attrResourceType = "";
/*       */       try
/*       */       {
/* 10382 */         result = AMConnectionPool.executeQueryStmt("select TYPE,RESOURCETYPE,ATTRIBUTE  from AM_ATTRIBUTES where ATTRIBUTEID = " + attributeID);
/* 10383 */         if (result.next())
/*       */         {
/* 10385 */           attribType = result.getInt(1);
/* 10386 */           attrName = result.getString(3);
/* 10387 */           attrResourceType = result.getString(2);
/*       */         }
/*       */       }
/*       */       catch (Exception e) {
/* 10391 */         AMLog.fatal("#--# Exception occured while getting atributes from table:" + e.getMessage());
/*       */       }
/*       */       finally {
/* 10394 */         AMConnectionPool.closeStatement(result);
/*       */       }
/* 10396 */       if ((resourceid <= 0) && (attributeID > 0)) {
/* 10397 */         if (groupID == 0) {
/* 10398 */           isMonitorTypeTemplate = true;
/*       */         }
/*       */         else {
/* 10401 */           isMonitorGroupTemplate = true;
/*       */         }
/*       */       }
/* 10404 */       boolean isHealth = attribType == 2;
/* 10405 */       if ((requesttype == 2) || (requesttype == 3))
/*       */       {
/*       */ 
/* 10408 */         if (thresholdparams != null)
/*       */         {
/* 10410 */           forwardPage = "/jsp/ThresholdActionConfiguration.jsp?" + thresholdparams;
/* 10411 */           forwardPage = forwardPage + "&redirectto=" + redirectTo + "&isredirect=" + isredirect;
/*       */         }
/*       */         else
/*       */         {
/* 10415 */           forwardPage = redirectTo;
/*       */         }
/*       */       }
/* 10418 */       else if ((requesttype == 1) || (requesttype == 4) || (requesttype == 5))
/*       */       {
/*       */ 
/* 10421 */         forwardPage = redirectTo;
/*       */       }
/* 10423 */       if (applySelected)
/*       */       {
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/* 10429 */         selectedMonitors = request.getParameterValues("similarmonitors_selected");
/* 10430 */         availableMonitors = request.getParameterValues("similarmonitors_available");
/* 10431 */         if ((selectedMonitors != null) && (selectedMonitors.length > 0))
/*       */         {
/* 10433 */           if (resourceid > 0)
/*       */           {
/* 10435 */             selectedMonitorsId.append(request.getParameter("resourceid"));
/* 10436 */             selectedMonitorsList.add(request.getParameter("resourceid"));
/* 10437 */             updatedselectedMonitorsList.add(request.getParameter("resourceid"));
/*       */           }
/* 10439 */           for (int i = 0; i < selectedMonitors.length; i++)
/*       */           {
/* 10441 */             if (!selectedMonitorsId.toString().equals(""))
/*       */             {
/* 10443 */               selectedMonitorsId.append(",");
/*       */             }
/* 10445 */             selectedMonitorsId.append(selectedMonitors[i]);
/* 10446 */             selectedMonitorsList.add(selectedMonitors[i]);
/*       */             
/* 10448 */             if (!updatedselectedMonitorsList.contains(selectedMonitors[i])) {
/* 10449 */               updatedselectedMonitorsList.add(selectedMonitors[i]);
/*       */             }
/*       */           }
/*       */           
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/* 10464 */           if (EnterpriseUtil.isAdminServer()) {
/* 10465 */             apiParameters.put("applytoMonitors", EnterpriseUtil.removeAAMResourceIds(selectedMonitorsId.toString()));
/* 10466 */             apiParameters.put("applySelected", "true");
/*       */           }
/*       */           
/*       */         }
/*       */         else
/*       */         {
/* 10472 */           selectedMonitorsId.append(request.getParameter("resourceid"));
/* 10473 */           selectedMonitorsList.add(request.getParameter("resourceid"));
/* 10474 */           updatedselectedMonitorsList.add(request.getParameter("resourceid"));
/* 10475 */           if (availableMonitors != null) {
/* 10476 */             for (int i = 0; i < availableMonitors.length; i++)
/*       */             {
/* 10478 */               if (!selectedMonitorsId.toString().equals(""))
/*       */               {
/* 10480 */                 selectedMonitorsId.append(",");
/*       */               }
/* 10482 */               selectedMonitorsId.append(availableMonitors[i]);
/* 10483 */               selectedMonitorsList.add(availableMonitors[i]);
/*       */             }
/*       */           }
/*       */         }
/*       */       }
/*       */       
/*       */ 
/*       */ 
/* 10491 */       String query = "";
/* 10492 */       if ((requesttype != 3) && (removeRCA.booleanValue()))
/*       */       {
/*       */ 
/*       */ 
/* 10496 */         if (attributeID == 4001)
/*       */         {
/* 10498 */           query = "delete from AM_RCAMAPPER where PARENTRESOURCEID = " + resourceid + " and PARENT_RESOURCEATTRIBUTEMAPPERID = " + attributeID + " and CHILD_RESOURCEATTRIBUTEMAPPERID in (4000,4002)";
/*       */         }
/*       */         else
/*       */         {
/* 10502 */           query = "delete from AM_RCAMAPPER where PARENTRESOURCEID = " + resourceid + " and PARENT_RESOURCEATTRIBUTEMAPPERID = " + attributeID;
/*       */         }
/* 10504 */         AMConnectionPool.executeUpdateStmt(query);
/* 10505 */         query = "delete from AM_RCARULESMAPPER  where RESOURCEID=" + resourceid + " and ATTRIBUTE=" + attributeID;
/* 10506 */         AMConnectionPool.executeUpdateStmt(query);
/*       */       }
/* 10508 */       apiParameters.put("selectedMonitors", selectedMonitorsId.toString());
/* 10509 */       if (requesttype != 5)
/*       */       {
/*       */ 
/*       */ 
/* 10513 */         if ((resourceid <= 0) && (attributeID > 0) && (requesttype == 3))
/*       */         {
/*       */ 
/* 10516 */           com.adventnet.appmanager.fault.ThresholdAssociationUtil.applyTemplateConfiguration(groupID, attrResourceType, isMonitorGroupTemplate, isMonitorTypeTemplate, overrideThresholdConfig, resourceType, isSecondaryLevelAttr, deleteConfigType, attributeID, attribType, resIdsinMultipleGroups);
/*       */         }
/*       */         
/*       */ 
/*       */ 
/* 10521 */         if (applySelected)
/*       */         {
/* 10523 */           if ((thresholdVal != null) && (!thresholdVal.equals("nothingSelected")) && (!thresholdVal.equals("Newfalse")) && (!thresholdVal.equals("Newtrue")))
/*       */           {
/* 10525 */             if ((requesttype != 3) && (requesttype != 4))
/*       */             {
/* 10527 */               deleteEventAlertEntries(selectedMonitorsList, String.valueOf(attributeID), attrName, attrResourceType, String.valueOf(thresholdVal), request);
/*       */             }
/*       */           }
/*       */           
/* 10531 */           query = "delete from AM_ATTRIBUTETHRESHOLDMAPPER where ATTRIBUTE =" + attributeID + " and ID IN (" + selectedMonitorsId + ")";
/* 10532 */           for (Object resId : selectedMonitorsList)
/*       */           {
/* 10534 */             com.adventnet.appmanager.util.Constants.removeThresholdEntry(String.valueOf(attributeID), (String)resId);
/* 10535 */             AMCacheHandler.removeThresholdConfiguration(resId + "_" + attributeID);
/*       */           }
/* 10537 */           AMConnectionPool.executeUpdateStmt(query);
/*       */           
/* 10539 */           query = "delete from AM_ATTRIBUTEACTIONMAPPER where ID in (" + selectedMonitorsId + ") and ATTRIBUTE =" + attributeID;
/* 10540 */           AMConnectionPool.executeUpdateStmt(query);
/*       */           
/*       */ 
/* 10543 */           if ((EnterpriseUtil.isManagedServer()) && (!fromAdmin)) {
/* 10544 */             EnterpriseUtil.addUpdateQueryToFile(query);
/*       */           }
/*       */           
/* 10547 */           query = "delete from AM_ATTRIBUTEACTIONSTATUS where RESOURCEID in (" + selectedMonitorsId + ") and ATTRIBUTEID =" + attributeID;
/* 10548 */           AMConnectionPool.executeUpdateStmt(query);
/* 10549 */           AMLog.debug("!!!!!!!!!!Query==" + query);
/*       */           
/* 10551 */           if (attrResourceType.equals("APM-Insight-Application"))
/*       */           {
/* 10553 */             for (Object appResIdObj : selectedMonitorsList)
/*       */             {
/* 10555 */               String appResIdStr = (String)appResIdObj;
/* 10556 */               deleteAppInstancesThresh(new Integer(appResIdStr).intValue(), attrName);
/*       */             }
/*       */             
/*       */           }
/*       */         }
/*       */         else
/*       */         {
/*       */           try
/*       */           {
/* 10565 */             if (attrResourceType.equals("APM-Insight-Application"))
/*       */             {
/* 10567 */               deleteAppInstancesThresh(resourceid, attrName);
/*       */             }
/* 10569 */             query = "delete from AM_ATTRIBUTETHRESHOLDMAPPER where ID = " + resourceid + " and ATTRIBUTE =" + attributeID;
/* 10570 */             com.adventnet.appmanager.util.Constants.removeThresholdEntry(String.valueOf(attributeID), String.valueOf(resourceid));
/* 10571 */             AMConnectionPool.executeUpdateStmt(query);
/* 10572 */             AMCacheHandler.removeThresholdConfiguration(resourceid + "_" + attributeID);
/*       */             try {
/* 10574 */               int thresholdId = Integer.parseInt(request.getParameter("thresholdconfigid"));
/* 10575 */               if ((EnterpriseUtil.isManagedServer()) && (thresholdId >= 10000) && (thresholdId < 10000000) && (!fromAdmin)) {
/* 10576 */                 String deletequery = "delete from AM_ATTRIBUTETHRESHOLDMAPPER where ID ='" + resourceid + "' AND ATTRIBUTE='" + attributeID + "' AND THRESHOLDCONFIGURATIONID='" + thresholdId + "'";
/* 10577 */                 EnterpriseUtil.addUpdateQueryToFile(deletequery);
/*       */               }
/*       */             } catch (Exception ex) {
/* 10580 */               AMLog.debug("ERRROR: Failed to insert threshold " + request.getParameter("thresholdconfigid") + " mapping for an attribute " + attributeID + " and resource " + resourceid + " " + ex.getMessage());
/*       */             }
/*       */             
/*       */           }
/*       */           catch (Exception e)
/*       */           {
/* 10586 */             e.printStackTrace();
/*       */           }
/*       */           
/*       */           try
/*       */           {
/* 10591 */             query = "delete from AM_ATTRIBUTEACTIONMAPPER where ID = " + resourceid + " and ATTRIBUTE =" + attributeID;
/* 10592 */             if ("true".equals(request.getParameter("adminAPIRequest"))) {
/* 10593 */               query = "delete from AM_ATTRIBUTEACTIONMAPPER where ID = " + resourceid + " and ATTRIBUTE =" + attributeID + " and actionId >= 10000 AND actionId < 10000000";
/*       */             }
/* 10595 */             AMConnectionPool.executeUpdateStmt(query);
/*       */             
/*       */ 
/* 10598 */             if ((EnterpriseUtil.isManagedServer()) && (!fromAdmin)) {
/* 10599 */               EnterpriseUtil.addUpdateQueryToFile("delete from AM_ATTRIBUTEACTIONMAPPER where ID = " + resourceid + " and ATTRIBUTE =" + attributeID + " and actionId >= 10000 AND actionId < 10000000");
/*       */             }
/*       */             
/* 10602 */             query = "delete from AM_ATTRIBUTEACTIONSTATUS where RESOURCEID = " + resourceid + " and ATTRIBUTEID =" + attributeID;
/* 10603 */             AMConnectionPool.executeUpdateStmt(query);
/*       */           }
/*       */           catch (Exception e)
/*       */           {
/* 10607 */             e.printStackTrace();
/*       */           }
/* 10609 */           if ((requesttype == 3) && (!isHealth))
/*       */           {
/*       */             try
/*       */             {
/* 10613 */               com.adventnet.appmanager.fault.DependentDeviceUtil.getInstance().removeDependentDeviceConfiguration(resourceid + "");
/*       */             }
/*       */             catch (Exception e)
/*       */             {
/* 10617 */               e.printStackTrace();
/*       */             }
/*       */           }
/*       */         }
/* 10621 */         if ((thresholdVal != null) && (!thresholdVal.equals("nothingSelected")) && ((configAttThresholdOption == null) || (configAttThresholdOption.equals("customThreshold"))))
/*       */         {
/*       */ 
/* 10624 */           if ((thresholdVal.equals("Newfalse")) || (thresholdVal.equals("Newtrue")))
/*       */           {
/* 10626 */             String displayname = request.getParameter("displayname");
/* 10627 */             if (DBQueryUtil.getDBType().equals("mssql"))
/*       */             {
/* 10629 */               displayname = displayname.replaceAll("'", "''");
/*       */             }
/*       */             else
/*       */             {
/* 10633 */               displayname = displayname.replaceAll("'", "\\\\'");
/*       */             }
/*       */             
/* 10636 */             String checkquery = "select * from AM_THRESHOLDCONFIG where NAME='" + displayname + "'";
/* 10637 */             ArrayList list = this.mo.getRows(checkquery);
/* 10638 */             if (list.size() == 0)
/*       */             {
/* 10640 */               boolean stringpattern = false;
/* 10641 */               String updateTableName = "AM_PATTERNMATCHERCONFIG";
/*       */               
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */               try
/*       */               {
/* 10650 */                 if ((thresholdVal.equals("Newfalse")) && (attribType == 7))
/*       */                 {
/* 10652 */                   apiParameters.put("type", "4");
/* 10653 */                   stringpattern = true;
/* 10654 */                   updateTableName = "AM_FLOAT_THRESHOLDCONFIG";
/* 10655 */                   insertThreshold(request, false, true, true);
/*       */                 }
/* 10657 */                 else if (thresholdVal.equals("Newfalse"))
/*       */                 {
/* 10659 */                   apiParameters.put("type", "1");
/* 10660 */                   insertThreshold(request, false, true);
/*       */                 }
/*       */                 else
/*       */                 {
/* 10664 */                   apiParameters.put("type", "3");
/* 10665 */                   stringpattern = true;
/* 10666 */                   insertThreshold(request, true, true);
/*       */                 }
/*       */               }
/*       */               catch (Exception e) {
/* 10670 */                 AMLog.fatal("#--# Exception occured while creating threshold query:" + e.getMessage());
/*       */               }
/* 10672 */               if ("true".equals(request.getParameter("adminAPIRequest"))) {
/* 10673 */                 if (("newfalse".equalsIgnoreCase(request.getParameter("thresholdid"))) || ("newtrue".equalsIgnoreCase(request.getParameter("thresholdid")))) {
/* 10674 */                   thresholdVal = request.getParameter("newthresholdid").trim();
/*       */                 } else {
/* 10676 */                   thresholdVal = request.getParameter("thresholdid").trim();
/*       */                 }
/* 10678 */                 AMCacheHandler.setThresholdProfileinCache(thresholdVal);
/*       */               } else {
/* 10680 */                 thresholdVal = updateThresholdProfileinCache();
/*       */               }
/*       */               
/* 10683 */               apiParameters.put("thresholdid", thresholdVal);
/* 10684 */               apiParameters.put("newThreshold", "true");
/* 10685 */               DelegatedUserRoleUtil.addEntryToConfigUserTable(request, Integer.parseInt(thresholdVal), 1);
/*       */               
/* 10687 */               if (stringpattern)
/*       */               {
/*       */                 try
/*       */                 {
/* 10691 */                   PreparedStatement ps = AMConnectionPool.getConnection().prepareStatement("insert into " + updateTableName + "(ID, CRITICALTHRESHOLDVALUE,WARNINGTHRESHOLDVALUE,INFOTHRESHOLDVALUE) values (?,?,?,?)");
/* 10692 */                   ps.setInt(1, Integer.parseInt(thresholdVal));
/* 10693 */                   ps.setString(2, request.getParameter("criticalthresholdvalue"));
/* 10694 */                   ps.setString(3, request.getParameter("warningthresholdvalue"));
/* 10695 */                   ps.setString(4, request.getParameter("infothresholdvalue"));
/* 10696 */                   ps.executeUpdate();
/*       */                 }
/*       */                 catch (Exception ex) {
/* 10699 */                   ex.printStackTrace();
/*       */                 }
/*       */                 
/*       */               }
/*       */               
/*       */             }
/*       */             else
/*       */             {
/* 10707 */               messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("thresholdprofile.create.alreadyexists", request.getParameter("displayname")));
/* 10708 */               saveMessages(request, messages);
/* 10709 */               forwardPage = "/jsp/ThresholdActionConfiguration.jsp?" + thresholdparams;
/* 10710 */               forwardPage = forwardPage + "&redirectto=" + redirectTo + "&isredirect=" + isredirect;
/* 10711 */               return new ActionForward(forwardPage, isredir);
/*       */             }
/*       */           }
/* 10714 */           if ((requesttype != 3) && (requesttype != 4))
/*       */           {
/* 10716 */             ArrayList<String> resIdList = new ArrayList();
/* 10717 */             if ((!applySelected) && (resourceid > 0))
/*       */             {
/* 10719 */               query = "insert into AM_ATTRIBUTETHRESHOLDMAPPER (ID, ATTRIBUTE, THRESHOLDCONFIGURATIONID) values (" + resourceid + "," + attributeID + "," + thresholdVal + ")";
/* 10720 */               AMConnectionPool.executeUpdateStmt(query);
/*       */               
/* 10722 */               if ((thresholdVal != null) && (!thresholdVal.equals("nothingSelected")) && (!thresholdVal.equals("Newfalse")) && (!thresholdVal.equals("Newtrue"))) {
/* 10723 */                 int thresholdId = Integer.parseInt(thresholdVal);
/* 10724 */                 if ((EnterpriseUtil.isManagedServer()) && (thresholdId >= 10000) && (thresholdId < 10000000) && (!fromAdmin)) {
/* 10725 */                   EnterpriseUtil.addUpdateQueryToFile(query);
/*       */                 }
/*       */               }
/* 10728 */               AMCacheHandler.setThresholdconfiguration(resourceid + "_" + attributeID, thresholdVal);
/* 10729 */               com.adventnet.appmanager.util.Constants.addThresholdEntry(String.valueOf(attributeID), String.valueOf(resourceid));
/* 10730 */               addActions(resourceid, attributeID, 1, criticalActions, attribType, fromAdmin);
/* 10731 */               addActions(resourceid, attributeID, 4, warningActions, attribType, fromAdmin);
/* 10732 */               addActions(resourceid, attributeID, 5, clearActions, attribType, fromAdmin);
/* 10733 */               resIdList.add(String.valueOf(resourceid));
/*       */               
/*       */ 
/* 10736 */               if (attrResourceType.equals("APM-Insight-Application"))
/*       */               {
/* 10738 */                 copyThreshAdditionToAppInstances(resourceid, attrName, thresholdVal, criticalActions, warningActions, clearActions, attribType);
/*       */ 
/*       */               }
/*       */               
/*       */ 
/*       */             }
/* 10744 */             else if (applySelected)
/*       */             {
/* 10746 */               applyToSelectedMonitors(attributeID, thresholdVal, updatedselectedMonitorsList, criticalActions, warningActions, clearActions, attribType, fromAdmin);
/* 10747 */               resIdList.addAll(updatedselectedMonitorsList);
/*       */               
/* 10749 */               if (attrResourceType.equals("APM-Insight-Application"))
/*       */               {
/* 10751 */                 for (Object appResIdObj : updatedselectedMonitorsList)
/*       */                 {
/* 10753 */                   String appResIdStr = (String)appResIdObj;
/* 10754 */                   copyThreshAdditionToAppInstances(new Integer(appResIdStr).intValue(), attrName, thresholdVal, criticalActions, warningActions, clearActions, attribType);
/*       */                 }
/*       */               }
/*       */             }
/*       */             
/* 10759 */             if ((resourceid <= 0) && (attributeID > 0))
/*       */             {
/* 10761 */               query = "delete from AM_PredefinedThreshold where ATTRIBUTEID='" + attributeID + "' and ID = " + groupID + " AND RESOURCETYPE = '" + resourceType + "'";
/* 10762 */               AMConnectionPool.executeUpdateStmt(query);
/* 10763 */               query = "insert into AM_PredefinedThreshold values(" + attributeID + "," + thresholdVal + "," + groupID + "," + "'" + resourceType + "'" + ")";
/* 10764 */               AMConnectionPool.executeUpdateStmt(query);
/* 10765 */               query = "delete from AM_PredefinedAction where ATTRIBUTEID='" + attributeID + "' and ID=" + groupID + " AND RESOURCETYPE = '" + resourceType + "'";
/* 10766 */               AMConnectionPool.executeUpdateStmt(query);
/* 10767 */               addPreDefinedActions(attributeID, 1, criticalActions, groupID, resourceType);
/* 10768 */               addPreDefinedActions(attributeID, 4, warningActions, groupID, resourceType);
/* 10769 */               addPreDefinedActions(attributeID, 5, clearActions, groupID, resourceType);
/*       */               
/* 10771 */               com.adventnet.appmanager.fault.ThresholdAssociationUtil.applyTemplateConfiguration(groupID, attrResourceType, isMonitorGroupTemplate, isMonitorTypeTemplate, overrideThresholdConfig, resourceType, isSecondaryLevelAttr, deleteConfigType, attributeID, attribType, resIdsinMultipleGroups);
/*       */             }
/*       */           }
/*       */           
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/* 10782 */           if ((requesttype == 3) || (requesttype == 4))
/*       */           {
/* 10784 */             String entity = null;
/* 10785 */             ArrayList<String> entityList = new ArrayList();
/* 10786 */             if (applySelected)
/*       */             {
/* 10788 */               int i = 0; for (int size = selectedMonitorsList.size(); i < size; i++)
/*       */               {
/* 10790 */                 String resid = (String)selectedMonitorsList.get(i);
/* 10791 */                 entity = resid + "_" + attributeID;
/* 10792 */                 FaultUtil.deleteAlertsForEntity(entity);
/* 10793 */                 entityList.add(entity);
/*       */               }
/*       */             }
/*       */             else
/*       */             {
/* 10798 */               entity = resourceid + "_" + attributeID;
/* 10799 */               FaultUtil.deleteAlertsForEntity(entity);
/* 10800 */               entityList.add(entity);
/*       */             }
/* 10802 */             if ((thresholdVal != null) && (!thresholdVal.equals("nothingSelected")) && (!thresholdVal.equals("Newfalse")) && (!thresholdVal.equals("Newtrue"))) {
/* 10803 */               int thresholdId = Integer.parseInt(thresholdVal);
/* 10804 */               if ((EnterpriseUtil.isManagedServer()) && (thresholdId >= 10000) && (thresholdId < 10000000) && (!fromAdmin)) {
/* 10805 */                 String deletequery = "delete from AM_ATTRIBUTETHRESHOLDMAPPER where ID ='" + resourceid + "' AND ATTRIBUTE='" + attributeID + "' AND THRESHOLDCONFIGURATIONID='" + thresholdVal + "'";
/* 10806 */                 EnterpriseUtil.addUpdateQueryToFile(deletequery);
/*       */               }
/*       */             }
/* 10809 */             if (EnterpriseUtil.isAdminServer()) {
/* 10810 */               ThresholdActionsAPIUtil.synchConfigureAlarmstoMAS(request, apiParameters);
/*       */             }
/*       */             
/*       */ 
/*       */ 
/* 10815 */             ExecuteSDPTicketAction.closeTicketUsingRestApi(entityList, FormatUtil.getString("am.webclient.action.ticket.closed.msg", new String[] { FormatUtil.getString("am.webclient.fault.removeconfig.txt") }), false);
/* 10816 */             request.setAttribute("savedConfiguration", "true");
/* 10817 */             messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("threshold.action.configuration.removed"));
/* 10818 */             saveMessages(request, messages);
/* 10819 */             return new ActionForward(forwardPage);
/*       */           }
/*       */           
/*       */ 
/*       */         }
/*       */         else
/*       */         {
/*       */ 
/* 10827 */           if ((resourceid <= 0) && (attributeID > 0) && (requesttype != 3))
/*       */           {
/* 10829 */             query = "delete from AM_PredefinedAction where ATTRIBUTEID='" + attributeID + "' and ID=" + groupID + " AND RESOURCETYPE = '" + resourceType + "'";
/* 10830 */             AMConnectionPool.executeUpdateStmt(query);
/* 10831 */             addPreDefinedActions(attributeID, 1, criticalActions, groupID, resourceType);
/* 10832 */             if ((isHealth) || ((EnterpriseUtil.isAdminServer()) && (attribType != 1)))
/*       */             {
/* 10834 */               addPreDefinedActions(attributeID, 4, warningActions, groupID, resourceType);
/*       */             }
/* 10836 */             addPreDefinedActions(attributeID, 5, clearActions, groupID, resourceType);
/*       */             
/* 10838 */             com.adventnet.appmanager.fault.ThresholdAssociationUtil.applyTemplateConfiguration(groupID, attrResourceType, isMonitorGroupTemplate, isMonitorTypeTemplate, overrideThresholdConfig, resourceType, isSecondaryLevelAttr, deleteConfigType, attributeID, attribType, resIdsinMultipleGroups);
/*       */           }
/*       */           
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/* 10845 */           if ((requesttype != 3) && (requesttype != 4))
/*       */           {
/* 10847 */             if ((isHealth) || ("EventLogRuleMatched".equals(attrName)))
/*       */             {
/*       */ 
/*       */ 
/* 10851 */               if (!applySelected)
/*       */               {
/* 10853 */                 addActions(resourceid, attributeID, 4, warningActions, attribType, fromAdmin);
/*       */               }
/*       */             }
/* 10856 */             else if (attribType == 1)
/*       */             {
/* 10858 */               if (request.getParameter("criticalpollscount") != null)
/*       */               {
/*       */ 
/* 10861 */                 String delquery = "delete from AM_RETRIES_CONFIG where RESOURCEID = " + resourceid + " and  ATTRIBUTEID =" + attributeID;
/* 10862 */                 AMConnectionPool.executeUpdateStmt(delquery);
/* 10863 */                 String critCount = request.getParameter("criticalpollscount");
/* 10864 */                 String clearCount = request.getParameter("clearpollscount");
/* 10865 */                 if (critCount.trim().equals(""))
/*       */                 {
/* 10867 */                   critCount = "-1";
/*       */                 }
/* 10869 */                 if (clearCount.trim().equals(""))
/*       */                 {
/* 10871 */                   clearCount = "-1";
/*       */                 }
/* 10873 */                 String qq = "insert into AM_RETRIES_CONFIG (RESOURCEID,ATTRIBUTEID,CRITICAL_RETRIES, WARNING_RETRIES, CLEAR_RETRIES) values (" + resourceid + "," + attributeID + "," + critCount + ",-1," + clearCount + ")";
/* 10874 */                 AMConnectionPool.getInstance();AMConnectionPool.executeUpdateStmt(qq);
/*       */               }
/*       */             }
/*       */             
/*       */ 
/* 10879 */             String dependentDeviceId = request.getParameter("depDeviceId");
/* 10880 */             int suppressAlerts = 0;
/* 10881 */             if ((request.getParameter("suppressAlert") != null) && (request.getParameter("suppressAlert").equals("1")))
/*       */             {
/* 10883 */               suppressAlerts = 1;
/*       */             }
/* 10885 */             if ((dependentDeviceId != null) && (!dependentDeviceId.equals("")))
/*       */             {
/* 10887 */               HashMap<String, HashMap<String, String>> dependentMonitorMap = AMCacheHandler.getDependentDevice(resourceid);
/* 10888 */               JSONObject jsArr = new JSONObject(dependentDeviceId);
/* 10889 */               Hashtable addQueryMap = new Hashtable();
/* 10890 */               Hashtable updateQueryMap = new Hashtable();
/* 10891 */               Hashtable deleteQueryMap = new Hashtable();
/* 10892 */               ArrayList deleteMonitorList = new ArrayList();
/* 10893 */               Iterator jsItr = jsArr.keys();
/* 10894 */               int masIndex = EnterpriseUtil.getManagedServerIndex();
/* 10895 */               while (jsItr.hasNext())
/*       */               {
/* 10897 */                 String key = (String)jsItr.next();
/* 10898 */                 JSONObject jsObj = (JSONObject)jsArr.get(key);
/* 10899 */                 String parentID = jsObj.getString("resourceid");
/* 10900 */                 int parentIndex = EnterpriseUtil.getManagedServerIndex(Integer.parseInt(parentID));
/* 10901 */                 boolean isDependentDeviceAddedForManagedServer = masIndex != parentIndex;
/* 10902 */                 if ((dependentMonitorMap == null) || (!dependentMonitorMap.containsKey(parentID)))
/*       */                 {
/* 10904 */                   Properties prop = new Properties();
/* 10905 */                   String dependentDeviceType = jsObj.getString("resourceType");
/* 10906 */                   prop.setProperty("PARENTID", parentID);
/* 10907 */                   prop.setProperty("CHILDID", resourceid + "");
/* 10908 */                   prop.setProperty("SUPPRESS_ALERTS", suppressAlerts + "");
/* 10909 */                   prop.setProperty("PARENT_AVAILABILITYID", AMAttributesCache.getAvailabilityId(dependentDeviceType));
/* 10910 */                   if (isDependentDeviceAddedForManagedServer)
/*       */                   {
/* 10912 */                     prop.setProperty("PARENT_TYPE", dependentDeviceType);
/* 10913 */                     prop.setProperty("DISPLAYNAME", jsObj.getString("displayname"));
/* 10914 */                     prop.setProperty("MANAGEDSERVER", jsObj.getString("managedServer"));
/*       */                   }
/* 10916 */                   addQueryMap.put(parentID, prop);
/*       */                 }
/* 10918 */                 else if ((dependentMonitorMap != null) && (dependentMonitorMap.containsKey(parentID)))
/*       */                 {
/* 10920 */                   HashMap<String, String> monitorDetails = (HashMap)dependentMonitorMap.get(parentID);
/* 10921 */                   int monitorSuppressAlert = Integer.parseInt((String)monitorDetails.get("SUPPRESS_ALERTS"));
/* 10922 */                   if (monitorSuppressAlert != suppressAlerts)
/*       */                   {
/* 10924 */                     Properties prop = new Properties();
/* 10925 */                     prop.setProperty("SUPPRESS_ALERTS", suppressAlerts + "");
/* 10926 */                     updateQueryMap.put(parentID, prop);
/*       */                   }
/*       */                 }
/*       */               }
/* 10930 */               if (dependentMonitorMap != null)
/*       */               {
/* 10932 */                 Iterator itr = dependentMonitorMap.keySet().iterator();
/* 10933 */                 while (itr.hasNext())
/*       */                 {
/* 10935 */                   Iterator jsItr1 = jsArr.keys();
/* 10936 */                   boolean isParentIDContains = false;
/* 10937 */                   String key = (String)itr.next();
/* 10938 */                   while (jsItr1.hasNext())
/*       */                   {
/* 10940 */                     String key1 = (String)jsItr1.next();
/* 10941 */                     JSONObject jsObj = (JSONObject)jsArr.get(key1);
/* 10942 */                     String parentID = jsObj.getString("resourceid");
/* 10943 */                     if (parentID.equals(key))
/*       */                     {
/* 10945 */                       isParentIDContains = true;
/*       */                     }
/*       */                   }
/* 10948 */                   if (!isParentIDContains)
/*       */                   {
/* 10950 */                     deleteMonitorList.add(key);
/*       */                   }
/*       */                 }
/*       */               }
/*       */               
/* 10955 */               com.adventnet.appmanager.fault.DependentDeviceUtil.getInstance().performDependentMonitorDBOperations(String.valueOf(resourceid), addQueryMap, updateQueryMap, deleteMonitorList);
/*       */             }
/* 10957 */             ArrayList<String> resIdList = new ArrayList();
/* 10958 */             resIdList.add(String.valueOf(resourceid));
/* 10959 */             if (!applySelected)
/*       */             {
/* 10961 */               addActions(resourceid, attributeID, 5, clearActions, attribType, fromAdmin);
/* 10962 */               addActions(resourceid, attributeID, 1, criticalActions, attribType, fromAdmin);
/* 10963 */               if (((attrResourceType.indexOf("OpManager") != -1) || (attrResourceType.indexOf("OpStor") != -1)) && (!isHealth) && (!"EventLogRuleMatched".equals(attrName)))
/*       */               {
/* 10965 */                 addActions(resourceid, attributeID, 4, warningActions, attribType, fromAdmin);
/*       */               }
/*       */             }
/*       */             else
/*       */             {
/* 10970 */               applyToSelectedMonitors(attributeID, null, updatedselectedMonitorsList, criticalActions, warningActions, clearActions, attribType, fromAdmin);
/* 10971 */               resIdList.addAll(updatedselectedMonitorsList);
/*       */               
/* 10973 */               if (attrResourceType.equals("APM-Insight-Application"))
/*       */               {
/* 10975 */                 for (Object appResIdObj : updatedselectedMonitorsList)
/*       */                 {
/* 10977 */                   String appResIdStr = (String)appResIdObj;
/* 10978 */                   copyThreshAdditionToAppInstances(new Integer(appResIdStr).intValue(), attrName, null, criticalActions, warningActions, clearActions, attribType);
/*       */                 }
/*       */               }
/*       */             }
/*       */           }
/*       */           
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/* 10994 */           if ((requesttype == 3) || (requesttype == 4))
/*       */           {
/* 10996 */             String entity = String.valueOf(resourceid) + "_" + String.valueOf(attributeID);
/* 10997 */             FaultUtil.deleteAlertsForEntity(entity);
/* 10998 */             if (requesttype == 3)
/*       */             {
/* 11000 */               String delquery = "delete from AM_RETRIES_CONFIG where RESOURCEID = " + resourceid + " and ATTRIBUTEID =" + attributeID;
/* 11001 */               AMConnectionPool.executeUpdateStmt(delquery);
/* 11002 */               String updateQuery = "delete from AM_CONSECUTIVE_POLLSDATA where RESOURCEID = " + resourceid + " and ATTRIBUTEID =" + attributeID;
/* 11003 */               this.mo.executeUpdateStmt(updateQuery);
/*       */             }
/* 11005 */             ExecuteSDPTicketAction.closeTicketUsingRestApi(entity, FormatUtil.getString("am.webclient.action.ticket.closed.msg", new String[] { FormatUtil.getString("am.webclient.fault.removeconfig.txt") }));
/* 11006 */             if (EnterpriseUtil.isAdminServer()) {
/* 11007 */               ThresholdActionsAPIUtil.synchConfigureAlarmstoMAS(request, apiParameters);
/*       */             }
/* 11009 */             request.setAttribute("savedConfiguration", "true");
/* 11010 */             messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("threshold.action.configuration.removed"));
/* 11011 */             saveMessages(request, messages);
/* 11012 */             return new ActionForward(forwardPage);
/*       */           }
/*       */         }
/*       */       }
/*       */       
/*       */ 
/* 11018 */       if (request.getParameterValues("selected_dependencies") != null)
/*       */       {
/* 11020 */         if ((requesttype != 3) && (requesttype != 4))
/*       */         {
/* 11022 */           addDependencies(resourceid, attributeID, request.getParameterValues("selected_dependencies"));
/* 11023 */           int selection = Integer.parseInt(request.getParameter("radiobutton"));
/* 11024 */           int ruleVal = -1;
/* 11025 */           if (selection == 0)
/*       */           {
/* 11027 */             ruleVal = Integer.parseInt(request.getParameter("any_count"));
/*       */           }
/* 11029 */           addRCARules(resourceid, attributeID, ruleVal);
/*       */           
/*       */ 
/* 11032 */           if (attrResourceType.equals("APM-Insight-Application"))
/*       */           {
/* 11034 */             copyDependencyAdditionToAppInstances(resourceid, attributeID, request.getParameterValues("selected_dependencies"), ruleVal);
/*       */           }
/* 11036 */           if (attributeID == 17)
/*       */           {
/* 11038 */             AMRCAnalyser rcaAnalyser = new AMRCAnalyser();
/* 11039 */             rcaAnalyser.applyRCA(resourceid, 17, System.currentTimeMillis(), true, true, 1);
/*       */           }
/* 11041 */           else if (attributeID == 18)
/*       */           {
/* 11043 */             AMRCAnalyser rcaAnalyser = new AMRCAnalyser();
/* 11044 */             rcaAnalyser.applyRCA(resourceid, 18, System.currentTimeMillis(), true, false, 2);
/*       */           }
/*       */         }
/*       */       }
/* 11048 */       if (EnterpriseUtil.isAdminServer()) {
/* 11049 */         apiParameters.put("removeRCA", "false");
/* 11050 */         ThresholdActionsAPIUtil.synchConfigureAlarmstoMAS(request, apiParameters);
/*       */       }
/* 11052 */       if ((requesttype == 1) && (EnterpriseUtil.isAdminServer()) && (redirectTo != null)) {
/* 11053 */         isredir = true;
/*       */       }
/* 11055 */       request.setAttribute("savedConfiguration", "true");
/* 11056 */       if (requesttype == 3)
/*       */       {
/* 11058 */         if (deleteConfigType.equals("deleteTemplate")) {
/* 11059 */           messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("threshold.action.template.configuration.removed"));
/*       */         }
/*       */         else {
/* 11062 */           messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("threshold.action.configuration.removed"));
/*       */         }
/*       */       }
/* 11065 */       else if (requesttype != 5)
/*       */       {
/* 11067 */         if (!resIdsinMultipleGroups.isEmpty()) {
/* 11068 */           String residslist = resIdsinMultipleGroups.toString().replace("[", "").replace("]", "");
/* 11069 */           String displaynames = DBUtil.getDisplaynameforResourceID(residslist, true);
/* 11070 */           AMLog.debug("ThresholdAssociationUtil :: Cannot apply threshold configuration for Monitors with Multiple Monitor Group Templates :: RESOURCEIDS :: " + residslist + " MONITORS :: " + displaynames);
/* 11071 */           messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage(FormatUtil.getString("threshold.action.configuration.cannotbeapplied", new String[] { displaynames })));
/*       */         }
/*       */         else {
/* 11074 */           messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("threshold.action.configuration.success"));
/*       */         }
/*       */         
/*       */       }
/*       */       else {
/* 11079 */         messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("rca.configuration.success"));
/*       */       }
/* 11081 */       saveMessages(request, messages);
/* 11082 */       return new ActionForward(forwardPage, isredir);
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 11086 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("threshold.action.configuration.failure"));
/* 11087 */       saveMessages(request, messages);
/* 11088 */       e.printStackTrace(); }
/* 11089 */     return new ActionForward(forwardPage, isredir);
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward AddThresholdActionConfigurationGlobal(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 11099 */     ActionMessages messages = new ActionMessages();
/* 11100 */     ActionErrors errors = new ActionErrors();
/* 11101 */     String forwardPage = "";
/*       */     try
/*       */     {
/* 11104 */       String fromMonitorGroup = request.getParameter("fromMonitorGroup");
/* 11105 */       int resourceid = 0;
/* 11106 */       if (fromMonitorGroup == null)
/*       */       {
/* 11108 */         if (request.getParameter("resourceid") != null)
/*       */         {
/* 11110 */           resourceid = Integer.parseInt(request.getParameter("resourceid"));
/*       */         }
/*       */         else
/*       */         {
/* 11114 */           return new ActionForward("/showActionProfiles.do?method=getResourceProfiles&admin=true&monitor=true", true);
/*       */         }
/*       */         
/*       */ 
/*       */       }
/* 11119 */       else if (request.getParameter("haid") != null)
/*       */       {
/* 11121 */         resourceid = Integer.parseInt(request.getParameter("haid"));
/*       */       }
/*       */       else
/*       */       {
/* 11125 */         return new ActionForward("/showActionProfiles.do?method=getResourceProfiles&admin=true&monitor=true", true);
/*       */       }
/*       */       
/* 11128 */       forwardPage = request.getParameter("redirectto");
/* 11129 */       String attributeID = "";
/* 11130 */       if (request.getParameter("healthAttributeId") != null)
/*       */       {
/* 11132 */         attributeID = request.getParameter("healthAttributeId");
/*       */       }
/* 11134 */       if (request.getParameter("availabilityAttributeId") != null)
/*       */       {
/* 11136 */         attributeID = attributeID + "," + request.getParameter("availabilityAttributeId");
/*       */       }
/*       */       
/* 11139 */       AMConnectionPool pool = AMConnectionPool.getInstance();
/* 11140 */       String query = "delete from AM_ATTRIBUTEACTIONMAPPER where ID = " + resourceid + " and ATTRIBUTE in (" + attributeID + ")";
/* 11141 */       AMConnectionPool.executeUpdateStmt(query);
/* 11142 */       if ((request.getParameter("removeconfiguration") != null) && (request.getParameter("removeconfiguration").equals("true")))
/*       */       {
/* 11144 */         query = "delete from AM_RETRIES_CONFIG where RESOURCEID = " + resourceid + " and ATTRIBUTEID =" + request.getParameter("availabilityAttributeId");
/* 11145 */         AMConnectionPool.executeUpdateStmt(query);
/* 11146 */         query = "delete from AM_CONSECUTIVE_POLLSDATA where RESOURCEID = " + resourceid + " and ATTRIBUTEID =" + request.getParameter("availabilityAttributeId");
/* 11147 */         AMConnectionPool.executeUpdateStmt(query);
/*       */ 
/*       */       }
/*       */       else
/*       */       {
/*       */ 
/* 11153 */         query = "delete from AM_RCAMAPPER where PARENTRESOURCEID = " + resourceid + " and PARENT_RESOURCEATTRIBUTEMAPPERID in (" + attributeID + ")";
/* 11154 */         AMConnectionPool.executeUpdateStmt(query);
/* 11155 */         query = "delete from AM_RCARULESMAPPER where RESOURCEID=" + resourceid + " and ATTRIBUTE in (" + attributeID + ")";
/* 11156 */         AMConnectionPool.executeUpdateStmt(query);
/*       */       }
/* 11158 */       if ((request.getParameter("healthAttributeId") != null) && (request.getParameter("removeconfiguration").equals("false")))
/*       */       {
/* 11160 */         int attributeid = Integer.parseInt(request.getParameter("healthAttributeId"));
/* 11161 */         addActions(resourceid, attributeid, 1, request.getParameterValues("selectedactions_criticaltrue"));
/* 11162 */         addActions(resourceid, attributeid, 4, request.getParameterValues("selectedactions_warning"));
/* 11163 */         addActions(resourceid, attributeid, 5, request.getParameterValues("selectedactions_cleartrue"));
/* 11164 */         if ((request.getParameterValues("selected_dependencies") != null) || (request.getParameterValues("selected_dependenciestrue") != null))
/*       */         {
/* 11166 */           String radiobutton = "0";
/* 11167 */           String any_count = "0";
/* 11168 */           if (fromMonitorGroup == null)
/*       */           {
/* 11170 */             addDependencies(resourceid, attributeid, request.getParameterValues("selected_dependencies"));
/* 11171 */             radiobutton = request.getParameter("radiobutton");
/* 11172 */             any_count = request.getParameter("any_count");
/*       */           }
/*       */           else
/*       */           {
/* 11176 */             addDependencies(resourceid, attributeid, request.getParameterValues("selected_dependenciestrue"));
/* 11177 */             radiobutton = request.getParameter("radiobuttontrue");
/* 11178 */             any_count = request.getParameter("any_counttrue");
/*       */           }
/* 11180 */           int selection = Integer.parseInt(radiobutton);
/* 11181 */           int ruleVal = -1;
/* 11182 */           if (selection == 0)
/*       */           {
/* 11184 */             ruleVal = Integer.parseInt(any_count);
/*       */           }
/* 11186 */           addRCARules(resourceid, attributeid, ruleVal);
/* 11187 */           if (attributeid == 17)
/*       */           {
/* 11189 */             AMRCAnalyser rcaAnalyser = new AMRCAnalyser();
/* 11190 */             rcaAnalyser.applyRCA(resourceid, 17, System.currentTimeMillis(), true, true, 1);
/*       */           }
/* 11192 */           else if (attributeid == 18)
/*       */           {
/* 11194 */             AMRCAnalyser rcaAnalyser = new AMRCAnalyser();
/* 11195 */             rcaAnalyser.applyRCA(resourceid, 18, System.currentTimeMillis(), true, false, 2);
/*       */           }
/*       */         }
/*       */       }
/* 11199 */       if ((request.getParameter("availabilityAttributeId") != null) && (request.getParameter("removeconfiguration").equals("false")))
/*       */       {
/* 11201 */         int attributeid = Integer.parseInt(request.getParameter("availabilityAttributeId"));
/* 11202 */         addActions(resourceid, attributeid, 1, request.getParameterValues("selectedactions_criticalfalse"));
/* 11203 */         addActions(resourceid, attributeid, 5, request.getParameterValues("selectedactions_clearfalse"));
/* 11204 */         if ((request.getParameter("criticalpollscount") != null) && (fromMonitorGroup == null))
/*       */         {
/*       */ 
/* 11207 */           String delquery = "delete from AM_RETRIES_CONFIG where RESOURCEID = " + resourceid + " and ATTRIBUTEID =" + attributeid;
/* 11208 */           AMConnectionPool.executeUpdateStmt(delquery);
/* 11209 */           String critCount = request.getParameter("criticalpollscount");
/* 11210 */           String clearCount = request.getParameter("clearpollscount");
/* 11211 */           if (critCount.trim().equals(""))
/*       */           {
/* 11213 */             critCount = "-1";
/*       */           }
/* 11215 */           if (clearCount.trim().equals(""))
/*       */           {
/* 11217 */             clearCount = "-1";
/*       */           }
/* 11219 */           String qq = "insert into AM_RETRIES_CONFIG (RESOURCEID,ATTRIBUTEID,CRITICAL_RETRIES, WARNING_RETRIES, CLEAR_RETRIES) values (" + resourceid + "," + attributeid + "," + critCount + ",-1," + clearCount + ")";
/* 11220 */           AMConnectionPool.executeUpdateStmt(qq);
/*       */         }
/* 11222 */         else if (request.getParameter("radiobuttonfalse") != null)
/*       */         {
/* 11224 */           addDependencies(resourceid, attributeid, request.getParameterValues("selected_dependenciesfalse"));
/* 11225 */           int selection = Integer.parseInt(request.getParameter("radiobuttonfalse"));
/* 11226 */           int ruleVal = -1;
/* 11227 */           if (selection == 0)
/*       */           {
/* 11229 */             ruleVal = Integer.parseInt(request.getParameter("any_countfalse"));
/*       */           }
/* 11231 */           addRCARules(resourceid, attributeid, ruleVal);
/* 11232 */           if (attributeid == 17)
/*       */           {
/* 11234 */             AMRCAnalyser rcaAnalyser = new AMRCAnalyser();
/* 11235 */             rcaAnalyser.applyRCA(resourceid, 17, System.currentTimeMillis(), true, true, 1);
/*       */           }
/* 11237 */           else if (attributeid == 18)
/*       */           {
/* 11239 */             AMRCAnalyser rcaAnalyser = new AMRCAnalyser();
/* 11240 */             rcaAnalyser.applyRCA(resourceid, 18, System.currentTimeMillis(), true, false, 2);
/*       */           }
/*       */         }
/*       */       }
/* 11244 */       if ((request.getParameter("removeconfiguration") != null) && (request.getParameter("removeconfiguration").equals("true")))
/*       */       {
/* 11246 */         messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("threshold.action.configuration.removed"));
/*       */       }
/*       */       else
/*       */       {
/* 11250 */         messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("threshold.action.configuration.success"));
/*       */       }
/* 11252 */       saveMessages(request, messages);
/* 11253 */       return new ActionForward(forwardPage);
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 11257 */       e.printStackTrace();
/* 11258 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("threshold.action.configuration.failure"));
/* 11259 */       saveMessages(request, messages); }
/* 11260 */     return new ActionForward(forwardPage);
/*       */   }
/*       */   
/*       */   private void addPreDefinedActions(int attributeID, int severity, String[] actionIDs, int haid, String resourceType) throws SQLException
/*       */   {
/* 11265 */     if ((actionIDs != null) && (attributeID > 0) && (severity > 0))
/*       */     {
/* 11267 */       for (int i = 0; i < actionIDs.length; i++)
/*       */       {
/* 11269 */         String actionIDAsString = actionIDs[i].trim();
/* 11270 */         if (!actionIDAsString.equals(""))
/*       */         {
/* 11272 */           int actionID = Integer.parseInt(actionIDAsString);
/* 11273 */           String query = "insert into AM_PredefinedAction (ATTRIBUTEID, SEVERITY, ACTIONID, ID,RESOURCETYPE) values ('" + attributeID + "'," + severity + "," + actionID + "," + haid + ",'" + resourceType + "'" + ")";
/* 11274 */           AMConnectionPool.getInstance();AMConnectionPool.executeUpdateStmt(query);
/*       */         }
/*       */       }
/*       */     }
/*       */   }
/*       */   
/*       */   private void addActions(int resourceid, int attributeIDArg, int severity, String[] actionIDs, int attributeType, boolean fromAdmin) throws Exception
/*       */   {
/* 11282 */     int action_count_default = 0;
/* 11283 */     if ((actionIDs != null) && (resourceid > 0))
/*       */     {
/* 11285 */       for (int i = 0; i < actionIDs.length; i++)
/*       */       {
/* 11287 */         String actionIDAsString = actionIDs[i].trim();
/* 11288 */         if (!actionIDAsString.equals(""))
/*       */         {
/* 11290 */           int actionID = Integer.parseInt(actionIDAsString);
/* 11291 */           String query = "insert into AM_ATTRIBUTEACTIONMAPPER (ID, ATTRIBUTE, SEVERITY, ACTIONID) values (" + resourceid + ",'" + attributeIDArg + "'," + severity + "," + actionID + ")";
/*       */           
/*       */ 
/* 11294 */           if ((EnterpriseUtil.isManagedServer()) && (actionID >= 10000) && (actionID < 10000000) && (!fromAdmin)) {
/* 11295 */             EnterpriseUtil.addUpdateQueryToFile(query);
/*       */           }
/*       */           
/* 11298 */           AMConnectionPool.getInstance();AMConnectionPool.executeUpdateStmt(query);
/* 11299 */           if ((attributeType == 2) && ((severity == 1) || (severity == 4)))
/*       */           {
/* 11301 */             DBUtil.insertValuesForAttributeActionStatus(resourceid, attributeIDArg, severity, action_count_default);
/*       */           }
/*       */         }
/*       */       }
/*       */     }
/*       */   }
/*       */   
/*       */   private void addActions(int resourceid, int attributeIDArg, int severity, String[] actionIDs) throws Exception
/*       */   {
/* 11310 */     if ((actionIDs != null) && (resourceid > 0))
/*       */     {
/* 11312 */       for (int i = 0; i < actionIDs.length; i++)
/*       */       {
/* 11314 */         String actionIDAsString = actionIDs[i].trim();
/* 11315 */         if (!actionIDAsString.equals(""))
/*       */         {
/* 11317 */           int actionID = Integer.parseInt(actionIDAsString);
/* 11318 */           String query = "insert into AM_ATTRIBUTEACTIONMAPPER (ID, ATTRIBUTE, SEVERITY, ACTIONID) values (" + resourceid + ",'" + attributeIDArg + "'," + severity + "," + actionID + ")";
/* 11319 */           AMConnectionPool.getInstance();AMConnectionPool.executeUpdateStmt(query);
/*       */           
/*       */ 
/* 11322 */           if ((EnterpriseUtil.isManagedServer()) && (actionID >= 10000) && (actionID < 10000000)) {
/* 11323 */             EnterpriseUtil.addUpdateQueryToFile(query);
/*       */           }
/*       */         }
/*       */       }
/*       */     }
/*       */   }
/*       */   
/*       */ 
/*       */   private void deleteCurrentThreshold(String resourceid, int attribute)
/*       */   {
/* 11333 */     AMConnectionPool pool = AMConnectionPool.getInstance();
/* 11334 */     String thresholdQuery = "select THRESHOLDCONFIGURATIONID from AM_ATTRIBUTETHRESHOLDMAPPER where ID=" + resourceid + " and ATTRIBUTE=" + attribute;
/* 11335 */     ResultSet thresholdResult = null;
/*       */     try
/*       */     {
/* 11338 */       thresholdResult = AMConnectionPool.executeQueryStmt(thresholdQuery);
/* 11339 */       if (thresholdResult.next())
/*       */       {
/* 11341 */         String deleteThreshold = "delete from AM_ATTRIBUTETHRESHOLDMAPPER where ID = " + resourceid + " and ATTRIBUTE=" + attribute;
/* 11342 */         com.adventnet.appmanager.util.Constants.removeThresholdEntry(String.valueOf(attribute), resourceid);
/* 11343 */         AMConnectionPool.executeUpdateStmt(deleteThreshold);
/* 11344 */         AMCacheHandler.removeThresholdConfiguration(resourceid, String.valueOf(resourceid));
/*       */       }
/*       */       return;
/*       */     }
/*       */     catch (Exception exc) {
/* 11349 */       exc.printStackTrace();
/*       */     }
/*       */     finally
/*       */     {
/* 11353 */       if (thresholdResult != null)
/*       */       {
/*       */         try
/*       */         {
/* 11357 */           AMConnectionPool.closeStatement(thresholdResult);
/*       */         }
/*       */         catch (Exception exc)
/*       */         {
/* 11361 */           exc.printStackTrace();
/*       */         }
/*       */       }
/*       */     }
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   private void deleteEventAlertEntries(ArrayList selectedMonitorsList, String attributeId, String attributeName, String attrResourceType, String thresholdId, HttpServletRequest request)
/*       */   {
/* 11372 */     String condition = "";
/* 11373 */     String unionQuery = "";
/* 11374 */     String condtion2 = "";
/* 11375 */     String selectResourceQry = "select ID from AM_ATTRIBUTETHRESHOLDMAPPER where ATTRIBUTE=" + attributeId + " and THRESHOLDCONFIGURATIONID=" + thresholdId;
/* 11376 */     if (EnterpriseUtil.isIt360MSPEdition())
/*       */     {
/* 11378 */       String siteId = null;
/* 11379 */       String custId = null;
/* 11380 */       Properties siteProps = EnterpriseUtil.getSiteProp(request);
/* 11381 */       Properties custProp = EnterpriseUtil.getCustProp(request);
/*       */       
/* 11383 */       if ((siteProps != null) && (siteProps.size() > 0))
/*       */       {
/* 11385 */         String siteName = siteProps.keys().nextElement().toString();
/* 11386 */         siteId = siteProps.getProperty(siteName);
/*       */       }
/*       */       
/*       */ 
/* 11390 */       if (siteId == null)
/*       */       {
/* 11392 */         siteId = request.getParameter("siteId");
/*       */       }
/*       */       
/* 11395 */       if ((custProp != null) && (custProp.size() > 0))
/*       */       {
/* 11397 */         String custName = custProp.keys().nextElement().toString();
/* 11398 */         custId = custProp.getProperty(custName);
/*       */       }
/*       */       
/*       */ 
/* 11402 */       if (custId == null)
/*       */       {
/* 11404 */         custId = request.getParameter("custId");
/*       */         
/* 11406 */         custId = custId == null ? request.getParameter("organization") : custId;
/*       */       }
/*       */       
/*       */ 
/* 11410 */       if ((custId != null) && (!custId.equals("-")))
/*       */       {
/*       */ 
/* 11413 */         Vector resVector = new Vector();
/* 11414 */         if ((siteId != null) && (!siteId.equals("-")))
/*       */         {
/* 11416 */           resVector = EnterpriseUtil.filterSiteBasedResourceIds(Integer.parseInt(siteId), new Vector());
/*       */         }
/*       */         else
/*       */         {
/* 11420 */           resVector = EnterpriseUtil.filterCustBasedResourceIds(Integer.parseInt(custId));
/*       */         }
/*       */         
/* 11423 */         condition = " AND " + EnterpriseUtil.getCondition("ID", resVector);
/*       */         
/*       */ 
/*       */ 
/* 11427 */         String condition2 = " WHERE " + EnterpriseUtil.getCondition("PCMAP.PARENTID", resVector);
/*       */         
/* 11429 */         unionQuery = " UNION  select ID from AM_ATTRIBUTETHRESHOLDMAPPER where ATTRIBUTE=" + attributeId + " and THRESHOLDCONFIGURATIONID=" + thresholdId + " and ID IN (select CHILDID FROM AM_PARENTCHILDMAPPER PCMAP " + condition2 + " )";
/*       */       }
/*       */       
/* 11432 */       selectResourceQry = selectResourceQry + " " + condition + " " + unionQuery;
/*       */     }
/*       */     
/*       */     try
/*       */     {
/*       */       try
/*       */       {
/* 11439 */         if (DBUtil.isChildType(attributeId)) {
/* 11440 */           String appendQry = "" + DBUtil.getResIdsForSimilarResType(attrResourceType);
/* 11441 */           if ((appendQry != null) && (!"".equals(appendQry.trim())))
/* 11442 */             selectResourceQry = selectResourceQry + " and ID not in " + appendQry;
/*       */         }
/*       */       } catch (Exception ex) {
/* 11445 */         ex.printStackTrace(); }
/* 11446 */       AMConnectionPool pool = AMConnectionPool.getInstance();
/* 11447 */       Statement s = AMConnectionPool.getConnection().createStatement();
/* 11448 */       ArrayList resourceList = this.mo.getRows(selectResourceQry);
/* 11449 */       if (resourceList != null)
/*       */       {
/* 11451 */         AMLog.debug("SELECTED MONITOR LIST " + selectedMonitorsList + "THID==" + thresholdId);
/* 11452 */         AMLog.debug("QUERY======" + selectResourceQry);
/* 11453 */         int i = 0; for (int size = resourceList.size(); i < size; i++)
/*       */         {
/* 11455 */           String resourceId = (String)((ArrayList)resourceList.get(i)).get(0);
/*       */           
/* 11457 */           if (!selectedMonitorsList.contains(resourceId))
/*       */           {
/* 11459 */             String entity = resourceId + "_" + attributeId;
/* 11460 */             FaultUtil.deleteAlertsForEntity(entity);
/* 11461 */             String deleteActionsquery = "delete from AM_ATTRIBUTEACTIONMAPPER where ATTRIBUTE=" + attributeId + " and ID=" + resourceId;
/* 11462 */             s.addBatch(deleteActionsquery);
/* 11463 */             String deleteThresholdquery = "delete from AM_ATTRIBUTETHRESHOLDMAPPER where ATTRIBUTE =" + attributeId + " and THRESHOLDCONFIGURATIONID=" + thresholdId + " and ID =" + resourceId;
/* 11464 */             com.adventnet.appmanager.util.Constants.removeThresholdEntry(attributeId, resourceId);
/* 11465 */             s.addBatch(deleteThresholdquery);
/* 11466 */             AMCacheHandler.removeThresholdConfiguration(entity);
/*       */             
/*       */ 
/* 11469 */             if (attrResourceType.equals("APM-Insight-Application"))
/*       */             {
/* 11471 */               deleteAppInstancesThresh(new Integer(resourceId).intValue(), attributeName);
/*       */             }
/*       */           }
/*       */         }
/* 11475 */         s.executeBatch();
/* 11476 */         s.close();
/*       */       }
/*       */     }
/*       */     catch (Exception exc)
/*       */     {
/* 11481 */       exc.printStackTrace();
/*       */     }
/*       */   }
/*       */   
/*       */ 
/*       */   public ArrayList<String> getAttrbIdsToCallSimilarResourceType()
/*       */   {
/* 11488 */     if ((this.attrbIdsForSimilarResourceType != null) && (this.attrbIdsForSimilarResourceType.size() > 0)) {
/* 11489 */       return this.attrbIdsForSimilarResourceType;
/*       */     }
/* 11491 */     this.attrbIdsForSimilarResourceType = new ArrayList();
/*       */     
/* 11493 */     ResultSet rs = null;
/*       */     try {
/* 11495 */       rs = AMConnectionPool.executeQueryStmt("SELECT ATTRIBUTEID FROM AM_ATTRIBUTES WHERE RESOURCETYPE in ('Disk','Process','Disk IO Stats','Hw_Fan','Hw_PowerSupply','Hw_Temperature','Hw_Cpu','Hw_Array','Hw_Chassis','Hw_Disk','Hw_Memorydevice','Hw_Voltage','Hw_Battery')");
/* 11496 */       while (rs.next()) {
/* 11497 */         String attrbId = rs.getString(1);
/* 11498 */         this.attrbIdsForSimilarResourceType.add(attrbId);
/*       */       }
/*       */     }
/*       */     catch (Exception ex) {
/* 11502 */       ex.printStackTrace();
/*       */     } finally {
/* 11504 */       AMConnectionPool.closeStatement(rs);
/*       */     }
/* 11506 */     return this.attrbIdsForSimilarResourceType;
/*       */   }
/*       */   
/*       */   public String getResIdsForSimilarResType(String parentAttId, String childAttId) {
/* 11510 */     String toreturn = null;
/* 11511 */     StringBuffer childResId = new StringBuffer();
/*       */     try {
/* 11513 */       ArrayList resList = DBUtil.getRows("select distinct CHILDRESOURCEID from AM_RCAMAPPER where PARENT_RESOURCEATTRIBUTEMAPPERID=" + parentAttId + " and CHILD_RESOURCEATTRIBUTEMAPPERID=" + childAttId);
/* 11514 */       childResId.append("(");
/* 11515 */       for (int i = 0; i < resList.size(); i++) {
/* 11516 */         childResId.append((String)((ArrayList)resList.get(i)).get(0));
/* 11517 */         if (i != resList.size() - 1) {
/* 11518 */           childResId.append(",");
/*       */         } else {
/* 11520 */           childResId.append(")");
/*       */         }
/*       */       }
/*       */     } catch (Exception ex) {
/* 11524 */       ex.printStackTrace();
/*       */     }
/*       */     try {
/* 11527 */       toreturn = childResId.toString();
/*       */     } catch (Exception e) {}
/* 11529 */     AMLog.debug("toreturn===>>" + toreturn);
/* 11530 */     return toreturn;
/*       */   }
/*       */   
/*       */ 
/*       */   private void deleteUnselectedMonitors(int attributeId, int thresholdConfigId, int resourceId)
/*       */   {
/* 11536 */     PreparedStatement ptmt = null;
/*       */     try {
/* 11538 */       String deleteUnselectedQuery = "delete from AM_ATTRIBUTETHRESHOLDMAPPER where ATTRIBUTE = ? and THRESHOLDCONFIGURATIONID = ? and ID <> ?";
/* 11539 */       ptmt = AMConnectionPool.getPreparedStatement(deleteUnselectedQuery);
/* 11540 */       ptmt.setInt(1, attributeId);
/* 11541 */       ptmt.setInt(2, thresholdConfigId);
/* 11542 */       ptmt.setInt(3, resourceId);
/* 11543 */       ptmt.executeUpdate(); return;
/*       */     }
/*       */     catch (Exception se) {
/* 11546 */       AMLog.fatal("#--#Exception occured while deleting similar monitors which are removed from mapping: \n" + se.getMessage());
/*       */     }
/*       */     finally {
/* 11549 */       if (ptmt != null) {
/*       */         try {
/* 11551 */           ptmt.close();
/*       */         } catch (SQLException e) {
/* 11553 */           AMLog.fatal("#--#SQLException occured while closing preparedStatement: " + ptmt);
/*       */         }
/*       */       }
/*       */     }
/*       */   }
/*       */   
/*       */   private void applyToSelectedMonitors(int attribute, String threshold, ArrayList selectedMonitorsList, String[] cri, String[] warn, String[] clear, int attributeType) throws Exception {
/* 11560 */     applyToSelectedMonitors(attribute, threshold, selectedMonitorsList, cri, warn, clear, attributeType, false);
/*       */   }
/*       */   
/*       */   private void applyToSelectedMonitors(int attribute, String threshold, ArrayList selectedMonitorsList, String[] cri, String[] warn, String[] clear, int attributeType, boolean fromAdmin) throws Exception
/*       */   {
/* 11565 */     Statement s = AMConnectionPool.getConnection().createStatement();
/*       */     
/*       */ 
/* 11568 */     int i = 0; for (int size = selectedMonitorsList.size(); i < size; i++)
/*       */     {
/* 11570 */       String resid = (String)selectedMonitorsList.get(i);
/* 11571 */       com.adventnet.appmanager.util.Constants.addThresholdEntry(String.valueOf(attribute), resid);
/*       */       
/* 11573 */       if ((threshold != null) && (!threshold.equals("nothingSelected")))
/*       */       {
/*       */ 
/*       */ 
/* 11577 */         String insertThresholdQuery = "insert into AM_ATTRIBUTETHRESHOLDMAPPER (ID,ATTRIBUTE,THRESHOLDCONFIGURATIONID) values (" + resid + "," + attribute + "," + threshold + ")";
/* 11578 */         s.addBatch(insertThresholdQuery);
/* 11579 */         AMCacheHandler.setThresholdconfiguration(resid, String.valueOf(attribute), threshold);
/* 11580 */         if ((!threshold.equals("Newfalse")) && (!threshold.equals("Newtrue"))) {
/* 11581 */           int thresholdID = Integer.parseInt(threshold);
/* 11582 */           if ((EnterpriseUtil.isManagedServer()) && (thresholdID >= 10000) && (thresholdID < 10000000) && (!fromAdmin)) {
/* 11583 */             EnterpriseUtil.addUpdateQueryToFile(insertThresholdQuery);
/*       */           }
/*       */         }
/*       */       }
/* 11587 */       if (cri != null)
/*       */       {
/*       */ 
/*       */ 
/* 11591 */         boolean critical = false;
/* 11592 */         for (int j = 0; j < cri.length; j++)
/*       */         {
/* 11594 */           String actionIDAsString = cri[j].trim();
/* 11595 */           if (!actionIDAsString.equals(""))
/*       */           {
/* 11597 */             critical = true;
/* 11598 */             int actionID = Integer.parseInt(actionIDAsString);
/*       */             
/*       */ 
/* 11601 */             s.addBatch("insert into AM_ATTRIBUTEACTIONMAPPER (ID, ATTRIBUTE, SEVERITY, ACTIONID) values (" + resid + "," + attribute + "," + 1 + "," + actionID + ")");
/* 11602 */             if ((EnterpriseUtil.isManagedServer()) && (actionID >= 10000) && (actionID < 10000000) && (!fromAdmin)) {
/* 11603 */               EnterpriseUtil.addUpdateQueryToFile("insert into AM_ATTRIBUTEACTIONMAPPER (ID, ATTRIBUTE, SEVERITY, ACTIONID) values (" + resid + "," + attribute + "," + 1 + "," + actionID + ")");
/*       */             }
/*       */           }
/*       */         }
/* 11607 */         if ((critical) && (attributeType == 2)) {
/* 11608 */           s.addBatch("insert into AM_ATTRIBUTEACTIONSTATUS (RESOURCEID, ATTRIBUTEID, SEVERITY, ACTIONTRIGGEREDCOUNT) values (" + resid + "," + attribute + "," + 1 + ",0)");
/*       */         }
/*       */       }
/* 11611 */       if (warn != null)
/*       */       {
/*       */ 
/* 11614 */         boolean warning = false;
/* 11615 */         for (int j = 0; j < warn.length; j++)
/*       */         {
/* 11617 */           String actionIDAsString = warn[j].trim();
/* 11618 */           if (!actionIDAsString.equals(""))
/*       */           {
/* 11620 */             warning = true;
/* 11621 */             int actionID = Integer.parseInt(actionIDAsString);
/*       */             
/*       */ 
/* 11624 */             s.addBatch("insert into AM_ATTRIBUTEACTIONMAPPER (ID, ATTRIBUTE, SEVERITY, ACTIONID) values (" + resid + "," + attribute + "," + 4 + "," + actionID + ")");
/* 11625 */             if ((EnterpriseUtil.isManagedServer()) && (actionID >= 10000) && (actionID < 10000000) && (!fromAdmin)) {
/* 11626 */               EnterpriseUtil.addUpdateQueryToFile("insert into AM_ATTRIBUTEACTIONMAPPER (ID, ATTRIBUTE, SEVERITY, ACTIONID) values (" + resid + "," + attribute + "," + 4 + "," + actionID + ")");
/*       */             }
/*       */           }
/*       */         }
/* 11630 */         if ((warning) && (attributeType == 2)) {
/* 11631 */           s.addBatch("insert into AM_ATTRIBUTEACTIONSTATUS (RESOURCEID, ATTRIBUTEID, SEVERITY, ACTIONTRIGGEREDCOUNT) values (" + resid + "," + attribute + "," + 4 + ",0)");
/*       */         }
/*       */       }
/*       */       
/* 11635 */       if (clear != null)
/*       */       {
/*       */ 
/* 11638 */         for (int j = 0; j < clear.length; j++)
/*       */         {
/* 11640 */           String actionIDAsString = clear[j].trim();
/* 11641 */           if (!actionIDAsString.equals(""))
/*       */           {
/* 11643 */             int actionID = Integer.parseInt(actionIDAsString);
/*       */             
/*       */ 
/* 11646 */             s.addBatch("insert into AM_ATTRIBUTEACTIONMAPPER (ID, ATTRIBUTE, SEVERITY, ACTIONID) values (" + resid + "," + attribute + "," + 5 + "," + actionID + ")");
/* 11647 */             if ((EnterpriseUtil.isManagedServer()) && (actionID >= 10000) && (actionID < 10000000) && (!fromAdmin)) {
/* 11648 */               EnterpriseUtil.addUpdateQueryToFile("insert into AM_ATTRIBUTEACTIONMAPPER (ID, ATTRIBUTE, SEVERITY, ACTIONID) values (" + resid + "," + attribute + "," + 5 + "," + actionID + ")");
/*       */             }
/*       */           }
/*       */         }
/*       */       }
/*       */     }
/*       */     
/*       */ 
/* 11656 */     s.executeBatch();
/* 11657 */     s.close();
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   private void addDependencies(int resourceid, int attributeIDArg, String[] childResourceAttribIDs)
/*       */     throws Exception
/*       */   {
/* 11730 */     if (childResourceAttribIDs != null)
/*       */     {
/* 11732 */       for (int i = 0; i < childResourceAttribIDs.length; i++)
/*       */       {
/* 11734 */         String childResourceAttribIDsAsString = childResourceAttribIDs[i].trim();
/* 11735 */         if (!childResourceAttribIDsAsString.equals(""))
/*       */         {
/* 11737 */           StringTokenizer token = new StringTokenizer(childResourceAttribIDsAsString, ":");
/* 11738 */           int childResID = Integer.parseInt(token.nextToken());
/* 11739 */           int childAttributeID = Integer.parseInt(token.nextToken());
/* 11740 */           String query = "insert into AM_RCAMAPPER (PARENTRESOURCEID, PARENT_RESOURCEATTRIBUTEMAPPERID, CHILDRESOURCEID, CHILD_RESOURCEATTRIBUTEMAPPERID) values (" + resourceid + "," + attributeIDArg + "," + childResID + "," + childAttributeID + ")";
/* 11741 */           AMConnectionPool.getInstance();AMConnectionPool.executeUpdateStmt(query);
/*       */         }
/*       */       }
/*       */     }
/*       */   }
/*       */   
/*       */   private void addRCARules(int resourceid, int attributeIDArg, int ruleVal) throws Exception
/*       */   {
/* 11749 */     String query = "insert into AM_RCARULESMAPPER (RESOURCEID,ATTRIBUTE, ANYCONDITIONVALUE) values (" + resourceid + "," + attributeIDArg + "," + ruleVal + ")";
/* 11750 */     AMConnectionPool.getInstance();AMConnectionPool.executeUpdateStmt(query);
/*       */   }
/*       */   
/*       */   public ActionForward updateAndSyncConfFileConfiguration(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
/*       */   {
/* 11755 */     if (DBUtil.isDelegatedAdmin(request.getRemoteUser()))
/*       */     {
/* 11757 */       return new ActionForward("/jsp/formpages/AccessRestricted.jsp");
/*       */     }
/* 11759 */     PrintWriter out = response.getWriter();
/* 11760 */     response.setContentType("text/html; charset=UTF-8");
/* 11761 */     String confFilePath = "";
/* 11762 */     String delimiter = "=";
/* 11763 */     HashMap<String, String> params = new HashMap();
/* 11764 */     boolean bulksave = false;boolean threadFlag = false;boolean dbparamFlag = false;boolean jvmparamFlag = false;
/*       */     try {
/* 11766 */       Map<String, String[]> confPropsMap = request.getParameterMap();
/* 11767 */       String[] val = new String[1];
/* 11768 */       if (confPropsMap.containsKey("bulksave")) {
/* 11769 */         val = (String[])confPropsMap.get("bulksave");
/* 11770 */         if ("true".equalsIgnoreCase(val[0])) {
/* 11771 */           bulksave = true;
/*       */         }
/*       */       }
/* 11774 */       if (confPropsMap.containsKey("conffiletype")) {
/* 11775 */         val = (String[])confPropsMap.get("conffiletype");
/*       */         
/* 11777 */         if ("threads".equalsIgnoreCase(val[0])) {
/* 11778 */           threadFlag = true;
/* 11779 */           delimiter = " ";
/* 11780 */           confFilePath = System.getProperty("user.dir") + File.separator + "conf" + File.separator + "threads.conf";
/*       */         }
/* 11782 */         else if ("dbparams".equalsIgnoreCase(val[0])) {
/* 11783 */           dbparamFlag = true;
/* 11784 */           delimiter = " ";
/* 11785 */           confFilePath = System.getProperty("user.dir") + File.separator + "conf" + File.separator + "database_params.conf";
/*       */         }
/* 11787 */         else if ("jvmparams".equalsIgnoreCase(val[0])) {
/* 11788 */           jvmparamFlag = true;
/*       */         }
/*       */       }
/* 11791 */       for (Map.Entry<String, String[]> entry : confPropsMap.entrySet()) {
/* 11792 */         String propKey = (String)entry.getKey();
/* 11793 */         String[] propVal = (String[])entry.getValue();
/*       */         int tempval;
/* 11795 */         try { tempval = Integer.parseInt(propVal[0]);
/*       */         }
/*       */         catch (Exception e) {}
/* 11798 */         continue;
/*       */         
/* 11800 */         if ((!"method".equalsIgnoreCase(propKey)) && (!"bulksave".equalsIgnoreCase(propKey)) && (!"conffiletype".equalsIgnoreCase(propKey)) && (!jvmparamFlag)) {
/* 11801 */           propVal[0] = AMCacheHandler.updateKeysToDefaultValues(propKey, propVal[0], val[0]);
/* 11802 */           if (!bulksave) {
/* 11803 */             AMCacheHandler.updateOrInsertPropinConfFile(confFilePath, propKey, propVal[0], delimiter);
/*       */           }
/* 11805 */           if ((EnterpriseUtil.isAdminServer()) || (bulksave)) {
/* 11806 */             params.put(propKey, propVal[0]);
/*       */           }
/*       */         }
/* 11809 */         else if ((!"method".equalsIgnoreCase(propKey)) && (!"bulksave".equalsIgnoreCase(propKey)) && (!"conffiletype".equalsIgnoreCase(propKey)) && (jvmparamFlag)) {
/* 11810 */           propVal[0] = AMCacheHandler.updateKeysToDefaultValues(propKey, propVal[0], val[0]);
/* 11811 */           params.put(propKey, propVal[0]);
/* 11812 */           AMCacheHandler.writeJVMparamsToStartupFile(params);
/*       */         }
/*       */       }
/* 11815 */       if ((bulksave) && (!jvmparamFlag)) {
/* 11816 */         AMCacheHandler.updatebulkPropsinConfFile(confFilePath, params, delimiter);
/*       */       }
/* 11818 */       if (threadFlag) {
/* 11819 */         params.put("conffiletype", "threads");
/*       */       }
/* 11821 */       else if (dbparamFlag)
/*       */       {
/* 11823 */         params.put("conffiletype", "dbparams");
/*       */       }
/* 11825 */       else if (jvmparamFlag) {
/* 11826 */         params.put("conffiletype", "jvmparams");
/*       */       }
/* 11828 */       params.put("bulksave", String.valueOf(bulksave));
/* 11829 */       if ((EnterpriseUtil.isAdminServer()) && (!params.isEmpty())) {
/* 11830 */         Vector serverids = MASSyncUtil.getallServerIDS();
/* 11831 */         for (int i = 0; i < serverids.size(); i++) {
/* 11832 */           MASSyncUtil.addTasktoSync(params, "/AppManager/xml/confFileProps/update", serverids.get(i).toString(), "POST", 9, 2);
/*       */         }
/*       */       }
/* 11835 */       out.write("true");
/*       */     } catch (Exception e) {
/* 11837 */       e.printStackTrace();
/* 11838 */       out.write("false");
/*       */     }
/* 11840 */     out.flush();
/* 11841 */     return null;
/*       */   }
/*       */   
/*       */   public ActionForward saveAndSyncServerSettingsConfiguration(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
/*       */   {
/* 11846 */     if (DBUtil.isDelegatedAdmin(request.getRemoteUser()))
/*       */     {
/* 11848 */       return new ActionForward("/jsp/formpages/AccessRestricted.jsp");
/*       */     }
/* 11850 */     PrintWriter out = response.getWriter();
/* 11851 */     response.setContentType("text/html; charset=UTF-8");
/* 11852 */     String typetoshow = request.getParameter("typetoshow");
/* 11853 */     request.setAttribute("typetoshow", typetoshow);
/* 11854 */     HashMap<String, String> params = new HashMap();
/*       */     try {
/* 11856 */       Map<String, String[]> serverPropsMap = request.getParameterMap();
/*       */       
/* 11858 */       for (Map.Entry<String, String[]> entry : serverPropsMap.entrySet()) {
/* 11859 */         String propKey = (String)entry.getKey();
/* 11860 */         String[] propVal = (String[])entry.getValue();
/* 11861 */         if (!"method".equalsIgnoreCase(propKey)) {
/* 11862 */           if ("am.html.dirsize".equalsIgnoreCase(propKey)) {
/* 11863 */             long dirsizeInBytes = Long.parseLong(propVal[0]) * 1048576L;
/* 11864 */             propVal[0] = (dirsizeInBytes + "");
/*       */           }
/* 11866 */           propVal[0] = AMCacheHandler.updateKeysToDefaultValues(propKey, propVal[0], "amserver");
/* 11867 */           if (!propVal[0].equalsIgnoreCase(DBUtil.getServerConfigValue(propKey)))
/*       */           {
/*       */ 
/* 11870 */             DBUtil.updateServerConfigValue(propKey, propVal[0]);
/* 11871 */             params.put(propKey, propVal[0]);
/*       */           }
/*       */         } }
/* 11874 */       if (!params.isEmpty()) {
/* 11875 */         AMCacheHandler.updateGlobalVariables(params);
/*       */       }
/* 11877 */       if (params.containsKey("am.adminserver.deletesql")) {
/* 11878 */         params.remove("am.adminserver.deletesql");
/*       */       }
/* 11880 */       if ((EnterpriseUtil.isAdminServer()) && (!params.isEmpty())) {
/* 11881 */         Vector serverids = MASSyncUtil.getallServerIDS();
/* 11882 */         for (int i = 0; i < serverids.size(); i++) {
/* 11883 */           MASSyncUtil.addTasktoSync(params, "/AppManager/xml/serverConfigs/update", serverids.get(i).toString(), "POST", 9, 2);
/*       */         }
/*       */       }
/* 11886 */       out.write("true");
/*       */     } catch (Exception e) {
/* 11888 */       out.write("false");
/* 11889 */       e.printStackTrace();
/*       */     }
/* 11891 */     out.flush();
/* 11892 */     return null;
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward showServerSettingsConfiguration(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 11901 */     if (DBUtil.isDelegatedAdmin(request.getRemoteUser()))
/*       */     {
/* 11903 */       return new ActionForward("/jsp/formpages/AccessRestricted.jsp");
/*       */     }
/* 11905 */     HashMap servConfMap = new HashMap();
/* 11906 */     HashMap availabilityMap = new HashMap();
/* 11907 */     HashMap detailsMap = new java.util.LinkedHashMap();
/* 11908 */     HashSet<String> keysRequireRestart = new HashSet();
/* 11909 */     ResultSet rs = null;
/*       */     try {
/* 11911 */       rs = AMConnectionPool.executeQueryStmt("select NAME,VALUE,TYPE,KEYREQUIRERESTART,SERVERTYPE from AM_SERVERCONFIG where TYPE in (0,1,2) and SHOWKEYINUI='true' order by KEYORDERINUI");
/* 11912 */       while (rs.next())
/*       */       {
/* 11914 */         String type = rs.getString("TYPE");
/* 11915 */         String servertype = rs.getString("SERVERTYPE");
/* 11916 */         boolean isKeyRequireRestart = rs.getBoolean("KEYREQUIRERESTART");
/* 11917 */         detailsMap = new java.util.LinkedHashMap();
/* 11918 */         if (servConfMap.containsKey(type)) {
/* 11919 */           detailsMap = (HashMap)servConfMap.get(type);
/*       */         }
/* 11921 */         if (isKeyRequireRestart) {
/* 11922 */           keysRequireRestart.add(rs.getString("NAME"));
/*       */         }
/* 11924 */         if (((EnterpriseUtil.isAdminServer) || (!"AAM".equals(servertype))) && (
/*       */         
/*       */ 
/* 11927 */           (EnterpriseUtil.isAdminServer) || (EnterpriseUtil.isManagedServer) || (!"AAM,MAS".equals(servertype))))
/*       */         {
/*       */ 
/* 11930 */           if ("am.html.dirsize".equalsIgnoreCase(rs.getString("NAME"))) {
/* 11931 */             long dirsizeInMB = Long.parseLong(rs.getString("VALUE")) / 1048576L;
/* 11932 */             detailsMap.put(rs.getString("NAME"), Long.valueOf(dirsizeInMB));
/*       */           } else {
/* 11934 */             detailsMap.put(rs.getString("NAME"), rs.getString("VALUE"));
/*       */           }
/*       */           
/* 11937 */           servConfMap.put(type, detailsMap);
/*       */         } }
/* 11939 */       AMLog.info("servConfMap :" + servConfMap);
/* 11940 */       availabilityMap = AMCacheHandler.getAvailabilityTestsProps();
/* 11941 */       if (AMCacheHandler.dbparamsMap.isEmpty()) {
/* 11942 */         AMCacheHandler.getDBParamsProps();
/*       */       }
/* 11944 */       if (AMCacheHandler.threadsMap.isEmpty()) {
/* 11945 */         AMCacheHandler.readThreadsConfFileProps();
/*       */       }
/*       */       
/* 11948 */       if (AMCacheHandler.jvmParamsMap.isEmpty()) {
/* 11949 */         AMCacheHandler.readJVMparamsFromStartupFile();
/*       */       }
/* 11951 */       request.setAttribute("commonprops", servConfMap);
/* 11952 */       request.setAttribute("availabilityprops", availabilityMap);
/* 11953 */       request.setAttribute("dbParamsprops", AMCacheHandler.dbparamsMap);
/* 11954 */       request.setAttribute("threadsprops", AMCacheHandler.threadsMap);
/* 11955 */       request.setAttribute("jvmparamsprops", AMCacheHandler.jvmParamsMap);
/* 11956 */       request.setAttribute("keysRequireRestart", keysRequireRestart);
/* 11957 */       AMLog.info("availabilityprops :" + availabilityMap + "\ndbparamsMap :" + AMCacheHandler.dbparamsMap + "\nthreadsMap :" + AMCacheHandler.threadsMap + "\njvmparamsprops :" + AMCacheHandler.jvmParamsMap);
/*       */     }
/*       */     catch (Exception e) {
/* 11960 */       e.printStackTrace();
/*       */     } finally {
/* 11962 */       AMConnectionPool.closeStatement(rs);
/*       */     }
/* 11964 */     return mapping.findForward("ServerSettings");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward showGlobalSettingsConfiguration(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 11973 */     ActionMessages messages = new ActionMessages();
/* 11974 */     AMActionForm amform = (AMActionForm)form;
/* 11975 */     String type = request.getParameter("typetoshow");
/* 11976 */     if ((DBUtil.isDelegatedAdmin(request.getRemoteUser())) && (("Actionalert".equals(type)) || ("performance".equals(type)) || ("general".equals(type)) || ("logging".equals(type))))
/*       */     {
/* 11978 */       return new ActionForward("/jsp/formpages/AccessRestricted.jsp");
/*       */     }
/* 11980 */     request.setAttribute("type", type);
/* 11981 */     String productEdition = com.adventnet.appmanager.util.Constants.getCategorytype();
/* 11982 */     String viewthreshold = request.getParameter("fromwhere");
/* 11983 */     request.setAttribute("viewthreshold", viewthreshold);
/* 11984 */     request.setAttribute("productEdition", productEdition);
/* 11985 */     AMConnectionPool.getInstance();ResultSet result = AMConnectionPool.executeQueryStmt("select * from AM_GLOBALCONFIG ");
/* 11986 */     while (result.next())
/*       */     {
/* 11988 */       if (result.getString(1).equals("RCAENABLED"))
/*       */       {
/* 11990 */         amform.setEnableRCA(result.getString(2));
/*       */       }
/* 11992 */       else if (result.getString(1).equals("presales_emails"))
/*       */       {
/* 11994 */         amform.setPresales_emails(Boolean.valueOf(result.getString(2)).booleanValue());
/*       */       }
/* 11996 */       else if (result.getString(1).equals("easyUpgrade"))
/*       */       {
/* 11998 */         amform.setEasyUpgrade(Boolean.valueOf(result.getString(2)).booleanValue());
/*       */       }
/* 12000 */       else if (result.getString(1).equals("selfMonitoring"))
/*       */       {
/* 12002 */         amform.setSelfMonitoring(Boolean.valueOf(result.getString(2)).booleanValue());
/*       */       }
/* 12004 */       else if (result.getString(1).equals("SalesForceChatEnabled"))
/*       */       {
/* 12006 */         amform.setShowSalesForce(Boolean.valueOf(result.getString(2)).booleanValue());
/*       */       }
/* 12008 */       else if (result.getString(1).equals("useProxyForMASImage"))
/*       */       {
/* 12010 */         if (EnterpriseUtil.isAdminServer())
/*       */         {
/* 12012 */           amform.setUseWebServerPort(Boolean.valueOf(result.getString(2)).booleanValue());
/*       */         }
/*       */       }
/* 12015 */       else if (result.getString(1).equals("usagestatistics"))
/*       */       {
/* 12017 */         if ((EnterpriseUtil.isAdminServer()) || (EnterpriseUtil.isProfEdition()))
/*       */         {
/* 12019 */           amform.setShowUsageStatistics(true);
/* 12020 */           amform.setUsagestatistics(result.getString(2));
/*       */         }
/*       */       }
/* 12023 */       else if (result.getString(1).equals("AddHostToHA"))
/*       */       {
/* 12025 */         amform.setAddHostToHolisticApplication(result.getString(2));
/*       */ 
/*       */       }
/* 12028 */       else if (result.getString(1).equals("DiscoverHostAlso"))
/*       */       {
/* 12030 */         amform.setDiscoverHostAlso(result.getString(2));
/*       */       }
/* 12032 */       else if (result.getString(1).equals("ServerSnapshot"))
/*       */       {
/* 12034 */         amform.setEnableServerSnapshot(result.getString(2));
/*       */       }
/* 12036 */       else if (result.getString(1).equals("ConsolidatedMail"))
/*       */       {
/* 12038 */         amform.setEnableConsolidatedMail(result.getString(2));
/*       */       }
/* 12040 */       else if (result.getString(1).equals("DateFormat"))
/*       */       {
/* 12042 */         amform.setDateformat(result.getString(2));
/*       */       }
/* 12044 */       else if (result.getString(1).equals("POLLING_COUNT"))
/*       */       {
/*       */         try
/*       */         {
/* 12048 */           amform.setPollInterval(Integer.parseInt(result.getString(2)));
/*       */         }
/*       */         catch (Exception e)
/*       */         {
/* 12052 */           amform.setPollInterval(1);
/* 12053 */           e.printStackTrace();
/*       */         }
/*       */       }
/* 12056 */       else if (result.getString(1).equals("QueryCount"))
/*       */       {
/*       */         try
/*       */         {
/* 12060 */           amform.setQueryCount(Integer.parseInt(result.getString(2)));
/*       */         }
/*       */         catch (Exception e)
/*       */         {
/* 12064 */           amform.setQueryCount(1);
/* 12065 */           e.printStackTrace();
/*       */         }
/*       */       }
/* 12068 */       else if (result.getString(1).equals("PERFSTAT_COLLECTION_DAILY"))
/*       */       {
/*       */         try
/*       */         {
/* 12072 */           amform.setDailyPerfReportCollection(result.getString(2));
/* 12073 */           request.setAttribute("dailyperfrptcoll", result.getString(2));
/*       */         }
/*       */         catch (Exception ex)
/*       */         {
/* 12077 */           amform.setDailyPerfReportCollection("true");
/* 12078 */           ex.printStackTrace();
/*       */         }
/*       */         
/*       */       }
/* 12082 */       else if (result.getString(1).equals("dbAvailabilityCheck"))
/*       */       {
/*       */         try
/*       */         {
/* 12086 */           amform.setDbAvailabilityCheck(result.getString(2));
/* 12087 */           request.setAttribute("dbAvailabilityCheck", result.getString(2));
/*       */         }
/*       */         catch (Exception ex)
/*       */         {
/* 12091 */           amform.setDbAvailabilityCheck("true");
/* 12092 */           ex.printStackTrace();
/*       */         }
/*       */         
/*       */       }
/* 12096 */       else if (result.getString(1).equals("DATAFILE_COLLECTION_HOURLY"))
/*       */       {
/*       */         try
/*       */         {
/* 12100 */           amform.setHourlyDataFileCollection(result.getString(2));
/*       */         }
/*       */         catch (Exception e)
/*       */         {
/* 12104 */           amform.setHourlyDataFileCollection("true");
/* 12105 */           e.printStackTrace();
/*       */         }
/* 12107 */       } else if (result.getString(1).equals("ALERT_JOB_SKIP"))
/*       */       {
/*       */         try {
/* 12110 */           amform.setAlertJobSkip(result.getString(2));
/*       */         }
/*       */         catch (Exception e)
/*       */         {
/* 12114 */           amform.setAlertJobSkip("false");
/* 12115 */           e.printStackTrace();
/*       */         }
/*       */       }
/* 12118 */       else if (result.getString(1).equals("VLF_COLLECTION_DAILY")) {
/*       */         try {
/* 12120 */           amform.setDailyVlfCollection(result.getString(2));
/*       */         } catch (Exception e) {
/* 12122 */           amform.setDailyVlfCollection("true");
/* 12123 */           e.printStackTrace();
/*       */         }
/* 12125 */       } else if (result.getString(1).equals("BACKUP_COLLECTION_PERIOD")) {
/*       */         try {
/* 12127 */           request.setAttribute("backupCollectionPeriod", result.getString(2));
/*       */         } catch (Exception e) {
/* 12129 */           request.setAttribute("backupCollectionPeriod", "7");
/* 12130 */           e.printStackTrace();
/*       */         }
/* 12132 */       } else if (result.getString(1).equals("sqlReplMonStatus")) {
/*       */         try {
/* 12134 */           request.setAttribute("sqlReplMonStatus", result.getString(2));
/*       */         } catch (Exception ex) {
/* 12136 */           request.setAttribute("sqlReplMonStatus", "true");
/* 12137 */           ex.printStackTrace();
/*       */         }
/* 12139 */       } else if (result.getString(1).equals("sqlReplMonHistoryStatus")) {
/*       */         try {
/* 12141 */           request.setAttribute("sqlReplMonHistoryStatus", result.getString(2));
/*       */         } catch (Exception ex) {
/* 12143 */           request.setAttribute("sqlReplMonHistoryStatus", "false");
/* 12144 */           ex.printStackTrace();
/*       */         }
/* 12146 */       } else if (result.getString(1).equals("replAgentHistoryMaintenancePeriod")) {
/*       */         try {
/* 12148 */           request.setAttribute("replAgentHistoryMaintenancePeriod", Integer.valueOf(result.getInt(2)));
/*       */         } catch (Exception ex) {
/* 12150 */           request.setAttribute("replAgentHistoryMaintenancePeriod", Integer.valueOf(30));
/* 12151 */           ex.printStackTrace();
/*       */         }
/*       */       }
/* 12154 */       else if (result.getString(1).equals("FILEUPLOADENABLED"))
/*       */       {
/* 12156 */         amform.setEnableupload(result.getString(2));
/*       */       }
/* 12158 */       else if (result.getString(1).equals("showwizhelp"))
/*       */       {
/* 12160 */         amform.setWizHelp(result.getString(2));
/*       */       }
/* 12162 */       else if (result.getString(1).equals("showgettingstarted"))
/*       */       {
/* 12164 */         amform.setGettingstarted(result.getString(2));
/*       */       }
/* 12166 */       else if (result.getString(1).equals("auto_restart"))
/*       */       {
/* 12168 */         boolean b = result.getString(2).equals("true");
/* 12169 */         amform.setAuto_restart(b);
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       }
/* 12176 */       else if (result.getString(1).equals("availability.up.under.maintenance"))
/*       */       {
/* 12178 */         amform.setAvailabilityUpUnderMaintenance(result.getString(2));
/*       */       }
/* 12180 */       else if (result.getString(1).equals("health.clear.under.maintenance"))
/*       */       {
/* 12182 */         amform.setHealthClearUnderMaintenance(result.getString(2));
/*       */ 
/*       */       }
/* 12185 */       else if (result.getString(1).equals("action.contentTransferEncoding"))
/*       */       {
/* 12187 */         amform.setTransferEncoding(result.getString(2));
/*       */ 
/*       */       }
/* 12190 */       else if (result.getString(1).equals("gmapheight"))
/*       */       {
/* 12192 */         amform.setGmapheight(result.getString(2));
/*       */       }
/* 12194 */       else if (result.getString(1).equals("gmapwidth"))
/*       */       {
/* 12196 */         amform.setGmapwidth(result.getString(2));
/*       */ 
/*       */       }
/* 12199 */       else if (result.getString(1).equals("DEFAULTZOOM"))
/*       */       {
/* 12201 */         amform.setZoomlevel(result.getString(2));
/*       */       }
/* 12203 */       else if (result.getString(1).equals("showFeedback"))
/*       */       {
/* 12205 */         amform.setShowFeedback(result.getString(2));
/*       */       }
/* 12207 */       else if (result.getString(1).equals("PlotGraph"))
/*       */       {
/* 12209 */         amform.setMtype(result.getString(2));
/*       */       }
/* 12211 */       else if (result.getString(1).equals("AddSchedMaintenancetoAvail"))
/*       */       {
/* 12213 */         amform.setAddmaintenance(result.getString(2));
/*       */       }
/* 12215 */       else if (result.getString(1).equals("BarchartForAttributeReport"))
/*       */       {
/* 12217 */         amform.setGraphType(result.getString(2));
/*       */ 
/*       */       }
/* 12220 */       else if (result.getString(1).equals("MGServiceAvailability"))
/*       */       {
/* 12222 */         amform.setRulefrom(result.getString(2));
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */       }
/* 12232 */       else if (result.getString(1).equals("sevenThirtyMAValue"))
/*       */       {
/* 12234 */         amform.setSeventhirtyMA(result.getString(2));
/*       */       }
/* 12236 */       else if (result.getString(1).equals("SNMPversion"))
/*       */       {
/* 12238 */         System.out.println("@@@@ the snmpversion===>" + result.getString(2));
/* 12239 */         amform.setSnmpVersion(result.getString(2));
/*       */       }
/* 12241 */       else if (result.getString(1).equalsIgnoreCase("doNotGoToLogoutPage"))
/*       */       {
/* 12243 */         amform.setDoNotGoToLogoutPage(result.getString(2));
/*       */       }
/* 12245 */       else if (result.getString(1).equals("am.amazonEC2PrimaryKey"))
/*       */       {
/* 12247 */         amform.setAmazonEC2PrimaryKey(result.getString(2));
/*       */       }
/* 12249 */       else if (result.getString(1).equals("am.amazonEC2.state.terminated.dontalert"))
/*       */       {
/* 12251 */         if (result.getBoolean(2)) {
/* 12252 */           amform.setEc2AlertTerminatedInstance(false);
/*       */         } else {
/* 12254 */           amform.setEc2AlertTerminatedInstance(true);
/*       */         }
/*       */       }
/* 12257 */       else if (result.getString(1).equals("am.amazon.signatureversion4.enabled")) {
/* 12258 */         if (result.getBoolean(2)) {
/* 12259 */           amform.setSignatureVersion4SigningEnabled(true);
/*       */         } else {
/* 12261 */           amform.setSignatureVersion4SigningEnabled(false);
/*       */         }
/*       */       }
/* 12264 */       else if (result.getString(1).equals("am.webclient.displaynamelength"))
/*       */       {
/* 12266 */         amform.setDisplaynamelength(result.getString(2));
/*       */       }
/* 12268 */       else if (result.getString(1).equals("am.webservices.operationtime"))
/*       */       {
/* 12270 */         amform.setWebServicesOperationTime(result.getInt(2));
/*       */       }
/* 12272 */       else if (result.getString(1).equals("am.ping.packtosend"))
/*       */       {
/* 12274 */         amform.setPingPackToSend(result.getInt(2));
/*       */       }
/*       */     }
/*       */     
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/* 12289 */     if ((DBUtil.hasGlobalConfigValue("loginSlider")) && (!DBUtil.getGlobalConfigValueasBoolean("loginSlider"))) {
/* 12290 */       amform.setLoginSlider(false);
/*       */     }
/* 12292 */     if ((DBUtil.hasGlobalConfigValue("loginFeatures")) && (!DBUtil.getGlobalConfigValueasBoolean("loginFeatures"))) {
/* 12293 */       amform.setLoginFeatures(false);
/*       */     }
/* 12295 */     if ((DBUtil.hasGlobalConfigValue("loginTopLinks")) && (!DBUtil.getGlobalConfigValueasBoolean("loginTopLinks"))) {
/* 12296 */       amform.setLoginTopLinks(false);
/*       */     }
/* 12298 */     HashMap<String, String> mapview = getMapStatus();
/* 12299 */     String hasMap = (String)mapview.get("showmap");
/* 12300 */     if ("true".equals(hasMap)) {
/* 12301 */       amform.setShowMapView(true);
/*       */     }
/* 12303 */     amform.setErrorpollCount(String.valueOf(com.adventnet.appmanager.util.Constants.getErrorPollCount()));
/* 12304 */     amform.setEnableErrorMail(com.adventnet.appmanager.util.Constants.getSenderrormail());
/* 12305 */     AMConnectionPool.closeStatement(result);
/* 12306 */     amform.setTimeout(com.adventnet.appmanager.util.Constants.socketTimeOut);
/*       */     
/* 12308 */     amform.setCriticalpollscount(FaultUtil.getConsecutivePollsAllowedForSeverity(1));
/* 12309 */     amform.setWarningpollscount(FaultUtil.getConsecutivePollsAllowedForSeverity(4));
/* 12310 */     amform.setClearpollscount(FaultUtil.getConsecutivePollsAllowedForSeverity(5));
/* 12311 */     amform.setMin_criticalpollscount(FaultUtil.getConsecutivePollsAllowedForSeverity("min_1"));
/* 12312 */     amform.setMin_warningpollscount(FaultUtil.getConsecutivePollsAllowedForSeverity("min_4"));
/* 12313 */     amform.setMin_clearpollscount(FaultUtil.getConsecutivePollsAllowedForSeverity("min_5"));
/* 12314 */     amform.setActionsEnabled("" + FaultUtil.ACTIONS_ENABLED);
/* 12315 */     amform.setPluginActionEnabled(Boolean.toString(FaultUtil.pluginActionsEnabled));
/* 12316 */     amform.setEnableCompleteInfoForSMS("" + FaultUtil.APPEND_FULL_INFO_TO_SMS);
/* 12317 */     amform.setGatewayCheckStatus("" + FaultUtil.GATEWAY_CHECK_ENABLED);
/* 12318 */     amform.setGatewayName(FaultUtil.GATEWAY_NAME);
/* 12319 */     if (UrlCheck.urlenabled)
/*       */     {
/*       */ 
/* 12322 */       amform.setGatewayUrlStatus("true");
/*       */     }
/*       */     else
/*       */     {
/* 12326 */       amform.setGatewayUrlStatus("false");
/*       */     }
/* 12328 */     amform.setGatewayUrlName(UrlCheck.urlname);
/* 12329 */     amform.setFromaddress(UrlCheck.fromaddress);
/* 12330 */     amform.setSendmail(UrlCheck.mailaddress);
/* 12331 */     amform.setLogConfig("" + com.adventnet.appmanager.logging.AMLogController.LOGGING_CONFIG_VALUE);
/* 12332 */     amform.setRepeatAvailabilityActions("" + FaultUtil.REPEAT_ACTIONS_FOR_AVAILABILITY);
/* 12333 */     if (FaultUtil.REPEAT_ACTIONS_FOR_HEALTH)
/*       */     {
/* 12335 */       amform.setRepeatHealthActions("tillActionCleared");
/* 12336 */       if (FaultUtil.repeat_UNRESTRICTED_ACTIONS_FOR_HEALTH)
/*       */       {
/* 12338 */         amform.setHealthActionCount("");
/*       */       }
/*       */       else
/*       */       {
/* 12342 */         amform.setHealthActionCount(FaultUtil.repeat_ACTIONS_FOR_HEALTH_COUNT + "");
/* 12343 */         FaultUtil.repeat_UNRESTRICTED_ACTIONS_FOR_HEALTH = false;
/*       */       }
/*       */     }
/* 12346 */     else if (FaultUtil.repeat_ACTIONS_FOR_HEALTH_UNTIL_PICKED)
/*       */     {
/* 12348 */       amform.setRepeatHealthActions("tillActionPicked");
/* 12349 */       amform.setHealthActionCount("1");
/*       */     }
/* 12351 */     amform.setRepeatAttributeActions("" + FaultUtil.REPEAT_ACTIONS_FOR_ATTRIBUTES);
/* 12352 */     amform.setAdvancedUser("" + FaultUtil.ADVANCED_USER);
/*       */     
/* 12354 */     ArrayList locationid = this.mo.getRows("select LOCATIONID from AM_GMapCountryResourceRel");
/* 12355 */     ArrayList gmapcountries = (ArrayList)DBUtil.getGMapCountries();
/* 12356 */     amform.setGmapcountries(gmapcountries);
/* 12357 */     amform.setCategory("1");
/* 12358 */     ArrayList al = new ArrayList();
/*       */     
/*       */ 
/*       */ 
/*       */ 
/* 12363 */     amform.setToAdd(al);
/* 12364 */     amform.setPresent(al);
/* 12365 */     if (request.getParameter("addSuccessMessage") != null)
/*       */     {
/* 12367 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("am.managedserver.typechange.success"));
/* 12368 */       saveMessages(request, messages);
/*       */     }
/* 12370 */     if (type.equals("performance"))
/*       */     {
/* 12372 */       AMConnectionPool.getInstance();ResultSet disableResult = AMConnectionPool.executeQueryStmt("select * from AM_GLOBAL_DISABLECOLLECTION");
/* 12373 */       request.setAttribute("MonitorType", request.getParameter("MonitorType") != null ? request.getParameter("MonitorType") : "");
/* 12374 */       while (disableResult.next())
/*       */       {
/*       */ 
/* 12377 */         if ((disableResult.getString(2).equals("DISK IO STATS")) && (disableResult.getString(1).equals("AIX")))
/*       */         {
/* 12379 */           amform.setDiskIOAix(Boolean.valueOf(disableResult.getString(3)).booleanValue());
/*       */         }
/* 12381 */         else if ((disableResult.getString(2).equals("DISK IO STATS")) && ((disableResult.getString(1).equals("FreeBSD")) || (disableResult.getString(1).equals("OpenBSD"))))
/*       */         {
/* 12383 */           amform.setDiskIOFreeBsd(Boolean.valueOf(disableResult.getString(3)).booleanValue());
/*       */         }
/* 12385 */         else if ((disableResult.getString(2).equals("DISK IO STATS")) && (disableResult.getString(1).equals("Mac OS")))
/*       */         {
/* 12387 */           amform.setDiskIOMacOS(Boolean.valueOf(disableResult.getString(3)).booleanValue());
/*       */         }
/* 12389 */         else if ((disableResult.getString(2).equals("DISK IO STATS")) && (disableResult.getString(1).equals("HP-UX")))
/*       */         {
/* 12391 */           amform.setDiskIOHPUX(Boolean.valueOf(disableResult.getString(3)).booleanValue());
/*       */         }
/* 12393 */         else if ((disableResult.getString(2).equals("DISK IO STATS")) && (disableResult.getString(1).equals("Linux")))
/*       */         {
/* 12395 */           amform.setDiskIOLinux(Boolean.valueOf(disableResult.getString(3)).booleanValue());
/*       */         }
/* 12397 */         else if ((disableResult.getString(2).equals("DISK IO STATS")) && (disableResult.getString(1).equals("SUN")))
/*       */         {
/* 12399 */           amform.setDiskIOSun(Boolean.valueOf(disableResult.getString(3)).booleanValue());
/*       */         }
/* 12401 */         else if ((disableResult.getString(2).equals("DISK IO STATS")) && (disableResult.getString(1).equals("Windows")))
/*       */         {
/* 12403 */           amform.setDiskIOWindows(Boolean.valueOf(disableResult.getString(3)).booleanValue());
/*       */         }
/* 12405 */         else if ((disableResult.getString(2).equals("DISKREADS")) && (disableResult.getString(1).equals("ORACLE")))
/*       */         {
/* 12407 */           amform.setOracleDiskReads(Boolean.valueOf(disableResult.getString(3)).booleanValue());
/*       */         }
/* 12409 */         else if ((disableResult.getString(2).equals("BUFFERGETS")) && (disableResult.getString(1).equals("ORACLE")))
/*       */         {
/* 12411 */           amform.setOracleBufferGets(Boolean.valueOf(disableResult.getString(3)).booleanValue());
/*       */         }
/* 12413 */         else if ((disableResult.getString(2).equals("LOCKANDWAITS")) && (disableResult.getString(1).equals("ORACLE")))
/*       */         {
/* 12415 */           amform.setOracleLockWaits(Boolean.valueOf(disableResult.getString(3)).booleanValue());
/*       */         }
/* 12417 */         else if ((!com.adventnet.appmanager.util.Constants.sqlManager) && (disableResult.getString(2).equals("AVERAGEEXECUTIONS")) && (disableResult.getString(1).equals("ORACLE")))
/*       */         {
/* 12419 */           amform.setOracleAverageExecutions(Boolean.valueOf(disableResult.getString(3)).booleanValue());
/*       */         }
/* 12421 */         else if ((disableResult.getString(2).equals("SCHEDULEDJOBS")) && (disableResult.getString(1).equals("MSSQL-DB-server")))
/*       */         {
/* 12423 */           request.setAttribute("mssqlScheduledJobs", Boolean.valueOf(disableResult.getString(3)));
/*       */ 
/*       */         }
/* 12426 */         else if ((disableResult.getString(2).equals("TABLEDATA")) && (disableResult.getString(1).equals("MYSQL-DB-server")))
/*       */         {
/*       */ 
/* 12429 */           amform.setMysqlTableData(disableResult.getString(3));
/*       */         }
/* 12431 */         else if ((disableResult.getString(2).equals("URLDEBUG")) && (disableResult.getString(1).equals("HTTP(S) URLs")))
/*       */         {
/* 12433 */           amform.setUrlDebug(Boolean.valueOf(disableResult.getString(3)).booleanValue());
/*       */         }
/* 12435 */         else if ((disableResult.getString(2).equals("URLRESPONSES")) && (disableResult.getString(1).equals("HTTP(S) URLs")))
/*       */         {
/* 12437 */           amform.setUrlResponses(Boolean.valueOf(disableResult.getString(3)).booleanValue());
/*       */         }
/* 12439 */         else if ((disableResult.getString(2).equals("S3BucketTABLEDATA")) && (disableResult.getString(1).equals("Amazon")))
/*       */         {
/* 12441 */           amform.setAmazonS3BucketTableData(disableResult.getString(3));
/*       */         }
/* 12443 */         else if ((disableResult.getString(2).equals("DATABASE DETAILS")) && (disableResult.getString(1).equals("PostgreSQL")))
/*       */         {
/* 12445 */           amform.setPostgresDBDetails(disableResult.getString(3));
/*       */         }
/* 12447 */         else if ((disableResult.getString(2).equals("DATABASE DETAILS")) && (disableResult.getString(1).equals("SYBASE-DB-server")))
/*       */         {
/* 12449 */           amform.setSybaseDBDetails(disableResult.getString(3));
/*       */         }
/* 12451 */         else if ((disableResult.getString(2).equals("FAILEDBACKUPJOBSONLY")) && (disableResult.getString(1).equals("ORACLE-DB-server")))
/*       */         {
/* 12453 */           amform.setFailedScheduledBackupJobs(Boolean.valueOf(disableResult.getString(3)).booleanValue());
/*       */         }
/*       */         
/*       */ 
/* 12457 */         String s1 = DBUtil.getGlobalConfigValue("am.server.windows.disk.monitoring.type");
/* 12458 */         if ((s1 == null) || (s1.trim().length() == 0) || (s1.equalsIgnoreCase("null"))) {
/* 12459 */           s1 = "LOCAL";
/*       */         }
/* 12461 */         if (s1.indexOf("LOCAL") != -1) {
/* 12462 */           amform.setWinDiskLocal(true);
/*       */         }
/* 12464 */         if (s1.indexOf("NETWORK") != -1) {
/* 12465 */           amform.setWinDiskNetwork(true);
/*       */         }
/* 12467 */         if (s1.indexOf("MOUNT") != -1) {
/* 12468 */           amform.setWinDiskMount(true);
/*       */         }
/* 12470 */         s1 = DBUtil.getGlobalConfigValue("am.show.process.down.if.server.down");
/* 12471 */         if ((s1 == null) || (s1.trim().length() == 0) || (s1.equalsIgnoreCase("null"))) {
/* 12472 */           s1 = "false";
/*       */         }
/* 12474 */         if (s1.equalsIgnoreCase("true")) {
/* 12475 */           amform.setHostProcDown(true);
/*       */         }
/* 12477 */         s1 = DBUtil.getGlobalConfigValue("am.show.windows.service.down.if.server.down");
/* 12478 */         if ((s1 == null) || (s1.trim().length() == 0) || (s1.equalsIgnoreCase("null"))) {
/* 12479 */           s1 = "false";
/*       */         }
/* 12481 */         if (s1.equalsIgnoreCase("true")) {
/* 12482 */           amform.setWinServDown(true);
/*       */         }
/*       */         
/*       */ 
/* 12486 */         s1 = DBUtil.getGlobalConfigValue("am.server.linux.process.cpu.usage.irixmodeoff");
/* 12487 */         if ((s1 == null) || (s1.trim().length() == 0) || (s1.equalsIgnoreCase("null"))) {
/* 12488 */           s1 = "false";
/*       */         }
/* 12490 */         if (s1.equalsIgnoreCase("true")) {
/* 12491 */           amform.setIrixModeOffLinux(true);
/*       */         }
/*       */         
/*       */ 
/* 12495 */         s1 = DBUtil.getGlobalConfigValue("am.server.hardware.health.monitoring");
/* 12496 */         if ((s1 == null) || (s1.trim().length() == 0) || (s1.equalsIgnoreCase("null"))) {
/* 12497 */           s1 = "enable";
/*       */         }
/* 12499 */         amform.setHostHwMonitoring(s1);
/*       */         
/*       */ 
/* 12502 */         if (DBUtil.getServerConfigValueasBoolean("am.server.network.adapter.monitoring"))
/*       */         {
/* 12504 */           amform.setEnableNetAdapterMonitor(true);
/*       */         }
/*       */         else
/*       */         {
/* 12508 */           DBUtil.insertOrUpdateServerConfigValue("am.server.network.adapter.monitoring", "false", 5);
/* 12509 */           amform.setEnableNetAdapterMonitor(false);
/*       */         }
/*       */         
/*       */ 
/*       */ 
/* 12514 */         s1 = DBUtil.getGlobalConfigValue("am.server.error.alert.settings");
/* 12515 */         if ((s1 == null) || (s1.trim().length() == 0) || (s1.equalsIgnoreCase("null"))) {
/* 12516 */           s1 = "DISK|NETINTER|NETADAPTER|RESTART|SCHEDULEDTASK|PROCESSRESTART";
/* 12517 */           DBUtil.insertIntoGlobalConfig("am.server.error.alert.settings", s1);
/*       */         }
/* 12519 */         if (s1.indexOf("DISK") != -1) {
/* 12520 */           amform.setErrorAlertDisk(true);
/*       */         }
/* 12522 */         if (s1.indexOf("NETINTER") != -1) {
/* 12523 */           amform.setErrorAlertNwInter(true);
/*       */         }
/* 12525 */         if (s1.indexOf("NETADAPTER") != -1) {
/* 12526 */           amform.setErrorAlertNwAdapter(true);
/*       */         }
/* 12528 */         if (s1.indexOf("RESTART") != -1) {
/* 12529 */           amform.setErrorAlertRestart(true);
/*       */         }
/* 12531 */         if (s1.indexOf("SCHEDULEDTASK") != -1) {
/* 12532 */           amform.setErrorAlertScheduledTask(true);
/*       */         }
/* 12534 */         if (s1.indexOf("PROCESSRESTART") != -1) {
/* 12535 */           amform.setErrorAlertProcessRestart(true);
/*       */         }
/*       */         
/*       */ 
/* 12539 */         s1 = DBUtil.getGlobalConfigValue("am.snmp.agent.error.timedout.retry");
/* 12540 */         if ((s1 == null) || (s1.trim().length() == 0) || (s1.equalsIgnoreCase("null"))) {
/* 12541 */           s1 = "3";
/*       */         }
/*       */         try {
/* 12544 */           amform.setSnmpRetryVal(Integer.parseInt(s1));
/*       */         } catch (Exception ex) {
/* 12546 */           amform.setSnmpRetryVal(3);
/*       */         }
/*       */       }
/* 12549 */       AMConnectionPool.closeStatement(disableResult);
/*       */       
/*       */ 
/*       */       try
/*       */       {
/* 12554 */         String hardware = DBUtil.getGlobalConfigValue("am.server.enable.hardware");
/* 12555 */         if ((hardware != null) && (hardware.indexOf("Array") != -1)) {
/* 12556 */           amform.setArray(true);
/*       */         }
/* 12558 */         if ((hardware != null) && (hardware.indexOf("Temperature") != -1)) {
/* 12559 */           amform.setTemperature(true);
/*       */         }
/* 12561 */         if ((hardware != null) && (hardware.indexOf("PowerSupply") != -1)) {
/* 12562 */           amform.setPower(true);
/*       */         }
/* 12564 */         if ((hardware != null) && (hardware.indexOf("Fan") != -1)) {
/* 12565 */           amform.setFan(true);
/*       */         }
/* 12567 */         if ((hardware != null) && (hardware.indexOf("Cpu") != -1)) {
/* 12568 */           amform.setProcessor(true);
/*       */         }
/* 12570 */         if ((hardware != null) && (hardware.indexOf("Disk") != -1)) {
/* 12571 */           amform.setDisk(true);
/*       */         }
/* 12573 */         if ((hardware != null) && (hardware.indexOf("Chassis") != -1)) {
/* 12574 */           amform.setChassis(true);
/*       */         }
/* 12576 */         if ((hardware != null) && (hardware.indexOf("Memorydevice") != -1)) {
/* 12577 */           amform.setMemorydevice(true);
/*       */         }
/* 12579 */         if ((hardware != null) && (hardware.indexOf("Voltage") != -1)) {
/* 12580 */           amform.setVoltage(true);
/*       */         }
/* 12582 */         if ((hardware != null) && (hardware.indexOf("Battery") != -1)) {
/* 12583 */           amform.setBattery(true);
/*       */         }
/* 12585 */         String hwCriticalStatusMessages = DBUtil.getGlobalConfigValue("am.server.hardware.critical.status.messages");
/* 12586 */         if ((hwCriticalStatusMessages == null) || (hwCriticalStatusMessages.trim().length() == 0)) {
/* 12587 */           hwCriticalStatusMessages = "failed,error,failure,nonRecoverable,criticalUpper,criticalLower,nonRecoverableLower,critical";
/*       */         }
/* 12589 */         String hwWarningStatusMessages = DBUtil.getGlobalConfigValue("am.server.hardware.warning.status.messages");
/* 12590 */         if ((hwWarningStatusMessages == null) || (hwWarningStatusMessages.trim().length() == 0)) {
/* 12591 */           hwWarningStatusMessages = "degraded,warning,nonCritical,nonCriticalUpper,nonRecoverableUpper,nonCriticalLower";
/*       */         }
/* 12593 */         String hwClearStatusMessages = DBUtil.getGlobalConfigValue("am.server.hardware.clear.status.messages");
/* 12594 */         if ((hwClearStatusMessages == null) || (hwClearStatusMessages.trim().length() == 0)) {
/* 12595 */           hwClearStatusMessages = "ok";
/*       */         }
/* 12597 */         amform.setHwCriticalStatusMessage(hwCriticalStatusMessages);
/* 12598 */         amform.setHwWarningStatusMessage(hwWarningStatusMessages);
/* 12599 */         amform.setHwClearStatusMessage(hwClearStatusMessages);
/*       */       } catch (Exception e) {
/* 12601 */         e.printStackTrace();
/*       */       }
/*       */     }
/* 12604 */     return mapping.findForward("GlobalSettings");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward setzoom(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/*       */     try
/*       */     {
/* 12615 */       System.out.println("SETZOOM METHOD IS CALLED????");
/* 12616 */       String query = "select * from AM_GLOBALCONFIG where NAME='DEFAULTZOOM'";
/* 12617 */       AMConnectionPool.getInstance();ResultSet rs = AMConnectionPool.executeQueryStmt(query);
/* 12618 */       AMActionForm af = (AMActionForm)form;
/*       */       
/* 12620 */       if (rs.next())
/*       */       {
/* 12622 */         String updateQuery = "update AM_GLOBALCONFIG set VALUE ='" + af.getZoomlevel() + "' where NAME='DEFAULTZOOM'";
/* 12623 */         AMConnectionPool.getInstance();AMConnectionPool.executeUpdateStmt(updateQuery);
/* 12624 */         String updatelocation = "update AM_GLOBALCONFIG set VALUE ='" + af.getZoomlocation() + "' where NAME='DEFAULTLOCATION'";
/*       */         
/* 12626 */         AMConnectionPool.getInstance();AMConnectionPool.executeUpdateStmt(updatelocation);
/*       */ 
/*       */       }
/*       */       else
/*       */       {
/* 12631 */         String insertQuery = "insert into AM_GLOBALCONFIG (NAME, VALUE) values ('DEFAULTZOOM','" + af.getZoomlevel() + "')";
/* 12632 */         String insertlocation = "insert into AM_GLOBALCONFIG (NAME, VALUE) values ('DEFAULTLOCATION','" + af.getZoomlocation() + "')";
/* 12633 */         AMConnectionPool.getInstance();AMConnectionPool.executeUpdateStmt(insertQuery);
/* 12634 */         AMConnectionPool.getInstance();AMConnectionPool.executeUpdateStmt(insertlocation);
/*       */       }
/*       */       
/* 12637 */       AMConnectionPool.closeStatement(rs);
/*       */     }
/*       */     catch (Exception exp) {
/* 12640 */       exp.printStackTrace();
/*       */     }
/* 12642 */     return new ActionForward("/showresource.do?group=All&method=showGMapView");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward checkUrlAvailability(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 12652 */     String value = request.getParameter("urlcheck");
/* 12653 */     boolean isurl = true;
/* 12654 */     if (value != null)
/*       */     {
/* 12656 */       isurl = UrlCheck.isURLReachable(value);
/* 12657 */       if (!isurl)
/*       */       {
/* 12659 */         PrintWriter pw = response.getWriter();
/* 12660 */         pw.print(UrlCheck.reason);
/*       */       }
/*       */     }
/*       */     
/* 12664 */     return null;
/*       */   }
/*       */   
/*       */ 
/*       */   private HashMap<String, String> getMapStatus()
/*       */   {
/* 12670 */     HashMap<String, String> mapview = new HashMap();
/*       */     try {
/* 12672 */       String path = System.getProperty("webnms.rootdir");
/* 12673 */       File f = new File(path + File.separator + "maps" + File.separator + "mapview.html");
/* 12674 */       if (f.exists()) {
/* 12675 */         mapview.put("showmap", "true");
/* 12676 */         mapview.put("filename", "mapview.html");
/*       */       } else {
/* 12678 */         File filedir = new File(path + File.separator + "maps" + File.separator);
/* 12679 */         if (filedir.exists()) {
/* 12680 */           String[] filelist = filedir.list();
/* 12681 */           if (filelist.length > 0) {
/* 12682 */             String filename = filelist[0];
/* 12683 */             mapview.put("showmap", "true");
/* 12684 */             mapview.put("filename", filename);
/*       */           } else {
/* 12686 */             mapview.put("showmap", "false");
/*       */           }
/*       */         } else {
/* 12689 */           filedir.mkdir();
/* 12690 */           mapview.put("showmap", "false");
/*       */         }
/*       */       }
/*       */     }
/*       */     catch (Exception ex) {
/* 12695 */       ex.printStackTrace();
/*       */     }
/* 12697 */     return mapview;
/*       */   }
/*       */   
/*       */   public ActionForward customMapView(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
/*       */     try {
/* 12702 */       AMActionForm amform = (AMActionForm)form;
/* 12703 */       HashMap<String, String> map = getMapStatus();
/* 12704 */       String mapview = (String)map.get("showmap");
/* 12705 */       if ("true".equals(mapview)) {
/* 12706 */         amform.setShowMapView(true);
/* 12707 */         amform.setMapFileName((String)map.get("filename"));
/*       */       }
/*       */     } catch (Exception ex) {
/* 12710 */       ex.printStackTrace();
/*       */     }
/*       */     
/* 12713 */     return new ActionForward("/jsp/CustomMapView.jsp");
/*       */   }
/*       */   
/*       */   public ActionForward addLocation(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) {
/*       */     try {
/* 12718 */       AMActionForm amform = (AMActionForm)form;
/* 12719 */       HashMap<String, String> map = getMapStatus();
/* 12720 */       String mapview = (String)map.get("showmap");
/* 12721 */       if ("true".equals(mapview)) {
/* 12722 */         amform.setShowMapView(true);
/* 12723 */         amform.setMapFileName((String)map.get("filename"));
/*       */       }
/*       */     } catch (Exception ex) {
/* 12726 */       ex.printStackTrace();
/*       */     }
/* 12728 */     return new ActionForward("/jsp/MapView_showlocations.jsp");
/*       */   }
/*       */   
/*       */   public ActionForward deleteLocation(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */   {
/* 12733 */     String id = request.getParameter("id");
/* 12734 */     if ((id != null) && (!id.equals("")))
/*       */     {
/*       */       try
/*       */       {
/* 12738 */         AMConnectionPool pool = AMConnectionPool.getInstance();
/* 12739 */         AMConnectionPool.executeUpdateStmt("delete from AM_GMapCountryCoord where ID=" + id);
/* 12740 */         AMConnectionPool.executeUpdateStmt("delete from AM_GMapCountryResourceRel where LOCATIONID=" + id);
/* 12741 */         String updateQuery = "delete from AM_GMapCountryResourceRel where LOCATIONID=" + id;
/* 12742 */         String updateQry = "delete from AM_GMapCountryCoord where ID=" + id;
/*       */         
/* 12744 */         EnterpriseUtil.addUpdateQueryToFile(updateQry);
/* 12745 */         EnterpriseUtil.addUpdateQueryToFile(updateQuery);
/*       */ 
/*       */       }
/*       */       catch (Exception exc)
/*       */       {
/* 12750 */         exc.printStackTrace();
/*       */       }
/*       */     }
/* 12753 */     return new ActionForward("/adminAction.do?method=showGlobalSettingsConfiguration&typetoshow=gmapkey");
/*       */   }
/*       */   
/*       */   public ActionForward saveMSSQLGlobalSettingsConfiguration(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */   {
/* 12758 */     HashMap<String, String> params = new HashMap();
/* 12759 */     HashMap<String, String> perfParams = new HashMap();
/* 12760 */     ResultSet rs = null;
/*       */     try {
/* 12762 */       String backupCollectionPeriod = request.getParameter("backupCollectionPeriod");
/* 12763 */       String sqlReplMonStatus = request.getParameter("sqlReplMonStatus");
/* 12764 */       sqlReplMonStatus = sqlReplMonStatus == null ? "false" : "true";
/* 12765 */       String sqlReplMonHistoryStatus = request.getParameter("sqlReplMonHistoryStatus");
/* 12766 */       sqlReplMonHistoryStatus = sqlReplMonHistoryStatus == null ? "false" : "true";
/* 12767 */       String replAgentHistoryMaintenancePeriod = request.getParameter("replAgentHistoryMaintenancePeriod");
/*       */       try {
/* 12769 */         DBUtil.updateGlobalConfigValue("BACKUP_COLLECTION_PERIOD", backupCollectionPeriod);
/* 12770 */         DBUtil.updateGlobalConfigValue("sqlReplMonStatus", sqlReplMonStatus);
/*       */       } catch (Exception e) {
/* 12772 */         e.printStackTrace();
/*       */       }
/* 12774 */       if (sqlReplMonStatus.equals("true")) {
/*       */         try {
/* 12776 */           DBUtil.updateGlobalConfigValue("sqlReplMonHistoryStatus", sqlReplMonHistoryStatus);
/*       */         } catch (Exception e) {
/* 12778 */           e.printStackTrace();
/*       */         }
/* 12780 */         if (sqlReplMonHistoryStatus.equals("true")) {
/* 12781 */           int replAgentHistoryMaintenancePeriodVal = 30;
/* 12782 */           if (replAgentHistoryMaintenancePeriod != null) {
/* 12783 */             replAgentHistoryMaintenancePeriodVal = Integer.valueOf(replAgentHistoryMaintenancePeriod).intValue();
/*       */           }
/* 12785 */           ResultSet rsRepl = null;
/*       */           try {
/* 12787 */             rsRepl = AMConnectionPool.executeQueryStmt("select SCHEDULE_INTERVAL from AM_DataCleanupInfo where TABLENAME like 'AM_MSSQL_REPLAGENTHISTORY_%'");
/* 12788 */             if (rsRepl.next()) {
/* 12789 */               int oldVal = rsRepl.getInt("SCHEDULE_INTERVAL") / 24;
/* 12790 */               if (oldVal != replAgentHistoryMaintenancePeriodVal) {
/* 12791 */                 AMConnectionPool.executeUpdateStmt("update AM_DataCleanupInfo set SCHEDULE_INTERVAL=" + replAgentHistoryMaintenancePeriodVal * 24 + " where TABLENAME like 'AM_MSSQL_REPLAGENTHISTORY_%'");
/* 12792 */                 DBUtil.updateGlobalConfigValue("replAgentHistoryMaintenancePeriod", replAgentHistoryMaintenancePeriod + "");
/*       */               }
/*       */             }
/*       */           } catch (Exception e) {
/* 12796 */             e.printStackTrace();
/*       */           } finally {
/* 12798 */             if (rsRepl == null) {}
/*       */           }
/*       */         }
/*       */       }
/*       */       else
/*       */       {
/*       */         try {
/* 12805 */           DBUtil.updateGlobalConfigValue("sqlReplMonHistoryStatus", "false");
/*       */         } catch (Exception e) {
/* 12807 */           e.printStackTrace();
/*       */         }
/*       */       }
/*       */       
/* 12811 */       String mssqlScheduledJobs = request.getParameter("mssqlScheduledJobs");
/* 12812 */       if (mssqlScheduledJobs == null)
/*       */       {
/* 12814 */         mssqlScheduledJobs = "false";
/* 12815 */         String entityid = null;
/*       */         try
/*       */         {
/* 12818 */           ArrayList entityList = DBUtil.getRows("SELECT distinct ENTITY FROM Event WHERE CATEGORY in ('3158','3159','3160','3161')");
/* 12819 */           for (int i = 0; i < entityList.size(); i++)
/*       */           {
/* 12821 */             entityid = (String)((ArrayList)entityList.get(i)).get(0);
/* 12822 */             FaultUtil.deleteAlertsForEntity(entityid);
/*       */           }
/*       */         } catch (Exception ex) {
/* 12825 */           ex.printStackTrace();
/*       */         }
/*       */       }
/*       */       else
/*       */       {
/* 12830 */         mssqlScheduledJobs = "true";
/*       */       }
/* 12832 */       if (!mssqlScheduledJobs.equalsIgnoreCase(getGlobalDisableDataCollectionData("MSSQL-DB-server", "SCHEDULEDJOBS"))) {
/* 12833 */         perfParams.put("mssqlScheduledJobs", mssqlScheduledJobs);
/* 12834 */         AMConnectionPool.executeUpdateStmt("update AM_GLOBAL_DISABLECOLLECTION set STATUS ='" + mssqlScheduledJobs + "' where MONITORTYPE='MSSQL-DB-server' AND COMPONENTNAME='SCHEDULEDJOBS'");
/*       */         
/* 12836 */         Hashtable table = new Hashtable();
/* 12837 */         rs = AMConnectionPool.executeQueryStmt("select * from AM_GLOBAL_DISABLECOLLECTION");
/* 12838 */         while (rs.next())
/*       */         {
/* 12840 */           String key = rs.getString(1) + "#" + rs.getString(2);
/* 12841 */           String value = rs.getString(3);
/* 12842 */           table.put(key, value);
/*       */         }
/* 12844 */         AMConnectionPool.closeStatement(rs);
/* 12845 */         EnterpriseUtil.setDisableTable(table);
/*       */       }
/* 12847 */       String deleteJobs = request.getParameter("am.mssql.deleteJobs");
/* 12848 */       if (!deleteJobs.equalsIgnoreCase(DBUtil.getServerConfigValue("am.mssql.deleteJobs")))
/*       */       {
/* 12850 */         DBUtil.updateServerConfigValue("am.mssql.deleteJobs", deleteJobs);
/* 12851 */         params.put("am.mssql.deleteJobs", deleteJobs);
/*       */       }
/* 12853 */       if ((EnterpriseUtil.isAdminServer()) && ((!params.isEmpty()) || (!perfParams.isEmpty()))) {
/* 12854 */         Vector serverids = MASSyncUtil.getallServerIDS();
/* 12855 */         if (!params.isEmpty()) {
/* 12856 */           for (int i = 0; i < serverids.size(); i++) {
/* 12857 */             MASSyncUtil.addTasktoSync(params, "/AppManager/xml/serverConfigs/update", serverids.get(i).toString(), "POST", 9, 2);
/*       */           }
/*       */         }
/* 12860 */         if (!perfParams.isEmpty()) {
/* 12861 */           perfParams.put("tabname", "showconfigureMSSQLTab");
/* 12862 */           for (int i = 0; i < serverids.size(); i++) {
/* 12863 */             MASSyncUtil.addTasktoSync(perfParams, "/AppManager/xml/perfConfigs/update", serverids.get(i).toString(), "POST", 10, 2);
/*       */           }
/*       */         }
/*       */       }
/*       */     } catch (SQLException e) {
/* 12868 */       e.printStackTrace();
/*       */     } finally {
/* 12870 */       AMConnectionPool.closeResultSet(rs);
/*       */     }
/* 12872 */     return new ActionForward("/adminAction.do?method=showGlobalSettingsConfiguration&typetoshow=performance&showconfigureMSSQL=true");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward saveGlobalSettingsConfiguration(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 12881 */     Hashtable globalconfig = (Hashtable)request.getSession().getServletContext().getAttribute("globalconfig");
/* 12882 */     ActionMessages messages = new ActionMessages();
/* 12883 */     ActionErrors errors = new ActionErrors();
/* 12884 */     AMActionForm amform = (AMActionForm)form;
/* 12885 */     AMConnectionPool pool = AMConnectionPool.getInstance();
/* 12886 */     AMConnectionPool.getInstance();Statement stmt = AMConnectionPool.getConnection().createStatement();
/* 12887 */     boolean error = true;
/* 12888 */     boolean criticalChanged = false;
/* 12889 */     boolean warningChanged = false;
/* 12890 */     boolean clearChanged = false;
/* 12891 */     boolean isnet = false;
/*       */     
/*       */ 
/*       */ 
/* 12895 */     String settings = amform.getSettings();
/* 12896 */     String addparams = "";
/* 12897 */     String gatewayurlstatus = "false";
/*       */     
/* 12899 */     String updateQuery = null;
/* 12900 */     String fileEnabled = request.getParameter("enableupload");
/* 12901 */     if (fileEnabled == null)
/*       */     {
/* 12903 */       fileEnabled = "false";
/*       */     }
/* 12905 */     updateQuery = "update AM_GLOBALCONFIG set VALUE ='" + fileEnabled + "' where NAME='FILEUPLOADENABLED'";
/* 12906 */     stmt.addBatch(updateQuery);
/*       */     
/*       */ 
/* 12909 */     if ((settings != null) && (settings.equalsIgnoreCase("unmanage")))
/*       */     {
/* 12911 */       String[] temp = request.getParameterValues("maintenanceCombo2");
/* 12912 */       String del_unman = "delete from AM_UnManagedNodes";
/* 12913 */       AMConnectionPool.getInstance();int how_many = AMConnectionPool.executeUpdateStmt(del_unman);
/* 12914 */       if (temp != null)
/*       */       {
/* 12916 */         for (int i = 0; i < temp.length; i++)
/*       */         {
/* 12918 */           if (temp[i] != null)
/*       */           {
/* 12920 */             stmt.addBatch("insert into AM_UnManagedNodes values(" + temp[i] + ")");
/*       */           }
/*       */         }
/*       */       }
/* 12924 */       addparams = "&typetoshow=unmanage";
/*       */     }
/*       */     
/* 12927 */     if (settings.equalsIgnoreCase("gmapkey"))
/*       */     {
/* 12929 */       String gmapheight = request.getParameter("gmapheight");
/* 12930 */       String gmapwidth = request.getParameter("gmapwidth");
/*       */       
/* 12932 */       globalconfig.put("gmapheight", gmapheight);
/* 12933 */       globalconfig.put("gmapwidth", gmapwidth);
/*       */       
/* 12935 */       ResultSet rs = null;
/*       */       
/*       */       try
/*       */       {
/* 12939 */         String Query = "select * from AM_GLOBALCONFIG where NAME='gmapheight'";
/* 12940 */         AMConnectionPool.getInstance();rs = AMConnectionPool.executeQueryStmt(Query);
/* 12941 */         if (rs.next())
/*       */         {
/* 12943 */           updateQuery = "update AM_GLOBALCONFIG set VALUE ='" + gmapheight + "' where NAME='gmapheight'";
/*       */           
/* 12945 */           stmt.addBatch(updateQuery);
/*       */ 
/*       */         }
/*       */         else
/*       */         {
/* 12950 */           String insertQuery = "insert into AM_GLOBALCONFIG (NAME, VALUE) values ('gmapheight','" + gmapheight + "')";
/* 12951 */           stmt.addBatch(insertQuery);
/*       */         }
/*       */       }
/*       */       catch (Exception exp1)
/*       */       {
/* 12956 */         exp1.printStackTrace();
/*       */       }
/*       */       finally {
/* 12959 */         AMConnectionPool.closeStatement(rs);
/*       */       }
/*       */       
/*       */       try
/*       */       {
/* 12964 */         String Query = "select * from AM_GLOBALCONFIG where NAME='gmapwidth'";
/* 12965 */         AMConnectionPool.getInstance();rs = AMConnectionPool.executeQueryStmt(Query);
/* 12966 */         if (rs.next())
/*       */         {
/* 12968 */           updateQuery = "update AM_GLOBALCONFIG set VALUE ='" + gmapwidth + "' where NAME='gmapwidth'";
/* 12969 */           stmt.addBatch(updateQuery);
/*       */ 
/*       */         }
/*       */         else
/*       */         {
/* 12974 */           String insertQuery = "insert into AM_GLOBALCONFIG (NAME, VALUE) values ('gmapwidth','" + gmapwidth + "')";
/* 12975 */           stmt.addBatch(insertQuery);
/*       */         }
/*       */       }
/*       */       catch (Exception exp2)
/*       */       {
/* 12980 */         exp2.printStackTrace();
/*       */       }
/*       */       finally {
/* 12983 */         AMConnectionPool.closeStatement(rs);
/*       */       }
/* 12985 */       addparams = "&typetoshow=gmapkey";
/*       */     }
/*       */     
/* 12988 */     if ((EnterpriseUtil.isAdminServer()) && (!com.adventnet.appmanager.util.Constants.isIt360))
/*       */     {
/* 12990 */       String useProxy = request.getParameter("useWebServerPort");
/* 12991 */       boolean updateProxyForImage = useProxy != null;
/* 12992 */       updateQuery = "update AM_GLOBALCONFIG set VALUE ='" + updateProxyForImage + "' where NAME='useProxyForMASImage'";
/* 12993 */       stmt.addBatch(updateQuery);
/*       */     }
/*       */     
/* 12996 */     if ((settings.equalsIgnoreCase("logging")) || ((com.adventnet.appmanager.util.Constants.sqlManager) && (settings.equalsIgnoreCase("general"))))
/*       */     {
/* 12998 */       String logConfig = request.getParameter("logConfig");
/* 12999 */       if (Integer.parseInt(logConfig) != com.adventnet.appmanager.logging.AMLogController.LOGGING_CONFIG_VALUE)
/*       */       {
/* 13001 */         DBUtil.updateGlobalConfigValue("am.log.config", logConfig);
/* 13002 */         com.adventnet.appmanager.logging.AMLogController.updateLogSetting(Integer.parseInt(logConfig));
/*       */       }
/* 13004 */       if (Integer.parseInt(logConfig) == 4)
/*       */       {
/* 13006 */         System.setProperty("httpservDebug", "true");
/*       */       }
/*       */       else
/*       */       {
/* 13010 */         System.setProperty("httpservDebug", "false");
/*       */       }
/* 13012 */       addparams = "&typetoshow=logging";
/*       */     }
/*       */     
/* 13015 */     if (settings.equalsIgnoreCase("jsonfeed"))
/*       */     {
/* 13017 */       addparams = "&typetoshow=jsonfeed";
/*       */     }
/*       */     
/* 13020 */     if (settings.equalsIgnoreCase("general"))
/*       */     {
/*       */ 
/* 13023 */       String collectstatistics = request.getParameter("usagestatistics") != null ? request.getParameter("usagestatistics") : "false";
/* 13024 */       globalconfig.put("usagestatistics", collectstatistics);
/* 13025 */       DBUtil.updateGlobalConfigValue("usagestatistics", collectstatistics);
/*       */       
/*       */ 
/* 13028 */       String gettingStarted = request.getParameter("gettingstarted") != null ? request.getParameter("gettingstarted") : "false";
/* 13029 */       globalconfig.put("showgettingstarted", gettingStarted);
/* 13030 */       DBUtil.updateGlobalConfigValue("showgettingstarted", gettingStarted);
/*       */       
/*       */ 
/* 13033 */       String loginSlider = request.getParameter("loginSlider") != null ? request.getParameter("loginSlider") : "false";
/* 13034 */       DBUtil.insertOrUpdateGlobalConfigValue("loginSlider", loginSlider);
/*       */       
/*       */ 
/* 13037 */       String loginFeatures = request.getParameter("loginFeatures") != null ? request.getParameter("loginFeatures") : "false";
/* 13038 */       DBUtil.insertOrUpdateGlobalConfigValue("loginFeatures", loginFeatures);
/*       */       
/* 13040 */       String loginTopLinks = request.getParameter("loginTopLinks") != null ? request.getParameter("loginTopLinks") : "false";
/* 13041 */       DBUtil.insertOrUpdateGlobalConfigValue("loginTopLinks", loginTopLinks);
/*       */       
/*       */ 
/* 13044 */       String doNotGoToLogoutPage = request.getParameter("doNotGoToLogoutPage") != null ? request.getParameter("doNotGoToLogoutPage") : "false";
/* 13045 */       DBUtil.updateGlobalConfigValue("doNotGoToLogoutPage", doNotGoToLogoutPage);
/*       */       
/*       */ 
/* 13048 */       String wizHelp = request.getParameter("wizHelp") != null ? request.getParameter("wizHelp") : "false";
/* 13049 */       globalconfig.put("showwizhelp", wizHelp);
/* 13050 */       DBUtil.updateGlobalConfigValue("showwizhelp", wizHelp);
/*       */       
/* 13052 */       String haEnabled = request.getParameter("addHostToHolisticApplication") != null ? request.getParameter("addHostToHolisticApplication") : "false";
/* 13053 */       DBUtil.updateGlobalConfigValue("AddHostToHA", haEnabled);
/*       */       
/* 13055 */       String discHostEnabled = request.getParameter("discoverHostAlso") != null ? request.getParameter("discoverHostAlso") : "false";
/* 13056 */       com.adventnet.appmanager.util.Constants.isAddHostAlsoEnabled = !"false".equals(discHostEnabled);
/* 13057 */       DBUtil.updateGlobalConfigValue("DiscoverHostAlso", discHostEnabled);
/*       */       
/* 13059 */       String isAdvancedUser = request.getParameter("advancedUser") != null ? request.getParameter("advancedUser") : "false";
/* 13060 */       DBUtil.updateGlobalConfigValue("fault.advanceduser", isAdvancedUser);
/*       */       
/* 13062 */       String showFeedback = request.getParameter("showFeedback") != null ? request.getParameter("showFeedback") : "false";
/* 13063 */       DBUtil.updateGlobalConfigValue("showFeedback", showFeedback);
/* 13064 */       globalconfig.put("showFeedback", showFeedback);
/*       */       
/*       */ 
/*       */ 
/* 13068 */       String gtype = request.getParameter("mtype") != null ? request.getParameter("mtype") : "false";
/* 13069 */       if (DBUtil.hasGlobalConfigValue("PlotGraph"))
/*       */       {
/* 13071 */         DBUtil.updateGlobalConfigValue("PlotGraph", gtype);
/*       */       }
/*       */       else
/*       */       {
/* 13075 */         DBUtil.insertIntoGlobalConfig("PlotGraph", gtype);
/*       */       }
/* 13077 */       com.adventnet.awolf.chart.ChartInfo.plotGraphValue = gtype;
/*       */       
/*       */ 
/* 13080 */       String atype = request.getParameter("addmaintenance") != null ? request.getParameter("addmaintenance") : "false";
/* 13081 */       if (DBUtil.hasGlobalConfigValue("PlotGraph"))
/*       */       {
/* 13083 */         DBUtil.updateGlobalConfigValue("AddSchedMaintenancetoAvail", atype);
/*       */       }
/*       */       else
/*       */       {
/* 13087 */         DBUtil.insertIntoGlobalConfig("AddSchedMaintenancetoAvail", atype);
/*       */       }
/* 13089 */       com.adventnet.appmanager.util.Constants.addMaintenanceToAvailablity = atype;
/*       */       
/*       */ 
/* 13092 */       String graphtype = request.getParameter("graphType") != null ? request.getParameter("graphType") : "true";
/* 13093 */       if (DBUtil.hasGlobalConfigValue("PlotGraph"))
/*       */       {
/* 13095 */         DBUtil.updateGlobalConfigValue("BarchartForAttributeReport", graphtype);
/*       */       }
/*       */       else
/*       */       {
/* 13099 */         DBUtil.insertIntoGlobalConfig("BarchartForAttributeReport", graphtype);
/*       */       }
/* 13101 */       com.adventnet.appmanager.util.Constants.attributesReportGraphType = graphtype;
/*       */       
/* 13103 */       String displaynameLength = request.getParameter("displaynamelength") != null ? request.getParameter("displaynamelength") : "";
/* 13104 */       if (DBUtil.hasGlobalConfigValue("am.webclient.displaynamelength"))
/*       */       {
/* 13106 */         DBUtil.updateGlobalConfigValue("am.webclient.displaynamelength", displaynameLength);
/*       */       }
/*       */       else
/*       */       {
/* 13110 */         DBUtil.insertIntoGlobalConfig("am.webclient.displaynamelength", displaynameLength);
/*       */       }
/* 13112 */       com.adventnet.appmanager.util.AppManagerUtil.setWebclientDisplayLength(displaynameLength);
/*       */       
/* 13114 */       boolean auto_restart = amform.isAuto_restart();
/* 13115 */       DBUtil.updateGlobalConfigValue("auto_restart", String.valueOf(auto_restart));
/* 13116 */       com.adventnet.appmanager.util.Constants.setAuto_restart(String.valueOf(auto_restart));
/*       */       
/* 13118 */       DBUtil.updateGlobalConfigValue("presales_emails", String.valueOf(amform.isPresales_emails()));
/*       */       
/* 13120 */       DBUtil.updateGlobalConfigValue("SalesForceChatEnabled", String.valueOf(amform.getShowSalesForce()));
/*       */       
/*       */ 
/* 13123 */       com.adventnet.appmanager.util.SWMgmtUtil.enableorDisableEasyUpgrade(amform.getEasyUpgrade());
/*       */       
/*       */ 
/* 13126 */       com.manageengine.appmanager.diagnostics.util.DiagnosticsAPIUtil.enableOrDisableSelfMonitoring(amform.getSelfMonitoring());
/*       */       
/* 13128 */       addparams = "&typetoshow=general";
/*       */     }
/*       */     
/*       */ 
/*       */ 
/* 13133 */     if (settings.equalsIgnoreCase("Actionalert"))
/*       */     {
/*       */       try
/*       */       {
/* 13137 */         String actionsEnabled = request.getParameter("actionsEnabled");
/* 13138 */         if (actionsEnabled == null)
/*       */         {
/* 13140 */           actionsEnabled = "false";
/*       */         }
/* 13142 */         if (DBUtil.hasGlobalConfigValue("actions.enabled")) {
/* 13143 */           DBUtil.updateGlobalConfigValue("actions.enabled", actionsEnabled);
/*       */         }
/*       */         else {
/* 13146 */           DBUtil.insertIntoGlobalConfig("actions.enabled", actionsEnabled);
/*       */         }
/*       */         
/* 13149 */         if (com.manageengine.appmanager.plugin.PluginUtil.isPlugin()) {
/* 13150 */           String pluginActionsEnabled = request.getParameter("pluginActionEnabled");
/* 13151 */           if (pluginActionsEnabled == null)
/*       */           {
/* 13153 */             pluginActionsEnabled = "false";
/*       */           }
/* 13155 */           if (DBUtil.hasGlobalConfigValue("PluginActionsEnabled")) {
/* 13156 */             DBUtil.updateGlobalConfigValue("PluginActionsEnabled", pluginActionsEnabled);
/*       */           }
/*       */           else {
/* 13159 */             DBUtil.insertIntoGlobalConfig("PluginActionsEnabled", pluginActionsEnabled);
/*       */           }
/*       */         }
/* 13162 */         FaultUtil.refreshActionsEnabledStatus();
/*       */       }
/*       */       catch (Exception e) {
/* 13165 */         error = false;
/* 13166 */         e.printStackTrace();
/*       */       }
/*       */       
/* 13169 */       String addITSEnabled = request.getParameter("enableCompleteInfoForSMS");
/* 13170 */       if (addITSEnabled == null)
/*       */       {
/* 13172 */         addITSEnabled = "false";
/*       */       }
/* 13174 */       updateQuery = "update AM_GLOBALCONFIG set VALUE ='" + addITSEnabled + "' where NAME='append.complete.info.to.sms'";
/* 13175 */       stmt.addBatch(updateQuery);
/*       */       
/* 13177 */       String repeatAvailabilityActions = request.getParameter("repeatAvailabilityActions");
/* 13178 */       if (repeatAvailabilityActions == null)
/*       */       {
/* 13180 */         repeatAvailabilityActions = "false";
/*       */       }
/* 13182 */       updateQuery = "update AM_GLOBALCONFIG set VALUE ='" + repeatAvailabilityActions + "' where NAME='meam.repeat.availability.actions'";
/* 13183 */       stmt.addBatch(updateQuery);
/* 13184 */       String repeatHealthActions = request.getParameter("repeatHealthActions");
/* 13185 */       if (repeatHealthActions != null)
/*       */       {
/* 13187 */         String updateQuery1 = "UPDATE AM_ATTRIBUTEACTIONSTATUS SET ACTIONTRIGGEREDCOUNT='0'";
/* 13188 */         boolean tillActionCleared = false;
/* 13189 */         boolean tillActionPicked = false;
/* 13190 */         int healthActionCount = 1;
/* 13191 */         if (repeatHealthActions.equals("tillActionCleared"))
/*       */         {
/*       */           try
/*       */           {
/* 13195 */             healthActionCount = Integer.parseInt(amform.getHealthActionCount());
/* 13196 */             FaultUtil.repeat_UNRESTRICTED_ACTIONS_FOR_HEALTH = false;
/*       */           }
/*       */           catch (NumberFormatException e)
/*       */           {
/* 13200 */             FaultUtil.repeat_UNRESTRICTED_ACTIONS_FOR_HEALTH = true;
/* 13201 */             healthActionCount = -1;
/*       */           }
/* 13203 */           if (healthActionCount != FaultUtil.repeat_ACTIONS_FOR_HEALTH_COUNT)
/*       */           {
/* 13205 */             FaultUtil.repeat_ACTIONS_FOR_HEALTH_COUNT = healthActionCount;
/* 13206 */             stmt.addBatch(updateQuery1);
/*       */           }
/*       */           
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/* 13213 */           tillActionCleared = true;
/*       */         }
/* 13215 */         else if (repeatHealthActions.equals("tillActionPicked"))
/*       */         {
/* 13217 */           FaultUtil.repeat_ACTIONS_FOR_HEALTH_COUNT = healthActionCount;
/* 13218 */           tillActionPicked = true;
/*       */         }
/* 13220 */         String updateQuery2 = "update AM_GLOBALCONFIG set VALUE ='" + tillActionCleared + "' where NAME='meam.repeat.health.actions'";
/* 13221 */         String updateQuery3 = "update AM_GLOBALCONFIG set VALUE ='" + tillActionPicked + "' where NAME='meam.repeat.health.picked.actions'";
/* 13222 */         String updateQuery4 = "update AM_GLOBALCONFIG set VALUE ='" + healthActionCount + "' where NAME='meam.repeat.health.action.count'";
/*       */         
/* 13224 */         stmt.addBatch(updateQuery2);
/* 13225 */         stmt.addBatch(updateQuery3);
/* 13226 */         stmt.addBatch(updateQuery4);
/*       */       }
/*       */       
/* 13229 */       String repeatAttributeActions = request.getParameter("repeatAttributeActions");
/* 13230 */       if (repeatAttributeActions == null)
/*       */       {
/* 13232 */         repeatAttributeActions = "false";
/*       */       }
/* 13234 */       updateQuery = "update AM_GLOBALCONFIG set VALUE ='" + repeatAttributeActions + "' where NAME='meam.repeat.attribute.actions'";
/* 13235 */       stmt.addBatch(updateQuery);
/*       */       
/* 13237 */       String rcaEnabled = request.getParameter("enableRCA");
/* 13238 */       if (rcaEnabled == null)
/*       */       {
/* 13240 */         rcaEnabled = "true";
/*       */       }
/* 13242 */       updateQuery = "update AM_GLOBALCONFIG set VALUE ='" + rcaEnabled + "' where NAME='RCAENABLED'";
/* 13243 */       stmt.addBatch(updateQuery);
/*       */       
/*       */ 
/* 13246 */       String transferEncoding = request.getParameter("transferEncoding");
/* 13247 */       if (transferEncoding == null)
/*       */       {
/* 13249 */         transferEncoding = "base64";
/*       */       }
/*       */       
/* 13252 */       updateQuery = "update AM_GLOBALCONFIG set VALUE ='" + transferEncoding + "' where NAME='action.contentTransferEncoding'";
/* 13253 */       stmt.addBatch(updateQuery);
/* 13254 */       com.adventnet.appmanager.util.Constants.setTransferEncoding(transferEncoding);
/* 13255 */       String ssnapshot = request.getParameter("enableServerSnapshot");
/* 13256 */       if (ssnapshot == null)
/*       */       {
/* 13258 */         ssnapshot = "false";
/*       */       }
/* 13260 */       updateQuery = "update AM_GLOBALCONFIG set VALUE ='" + ssnapshot + "' where NAME='ServerSnapshot'";
/* 13261 */       stmt.addBatch(updateQuery);
/* 13262 */       String cmail = request.getParameter("enableConsolidatedMail");
/* 13263 */       if (cmail == null)
/*       */       {
/* 13265 */         cmail = "false";
/*       */       }
/* 13267 */       updateQuery = "update AM_GLOBALCONFIG set VALUE ='" + cmail + "' where NAME='ConsolidatedMail'";
/* 13268 */       stmt.addBatch(updateQuery);
/* 13269 */       String monErrorMail = amform.getEnableErrorMail();
/* 13270 */       String pollCount = amform.getErrorpollCount();
/*       */       
/* 13272 */       if (pollCount == null)
/*       */       {
/*       */ 
/* 13275 */         pollCount = String.valueOf(com.adventnet.appmanager.util.Constants.getErrorPollCount());
/*       */       }
/* 13277 */       if (monErrorMail == null)
/*       */       {
/*       */ 
/* 13280 */         monErrorMail = com.adventnet.appmanager.util.Constants.getSenderrormail();
/*       */       }
/*       */       
/* 13283 */       com.adventnet.appmanager.util.Constants.saveChanges(monErrorMail, pollCount);
/*       */       
/* 13285 */       String dateformat = request.getParameter("dateformat");
/* 13286 */       if (dateformat == null)
/*       */       {
/* 13288 */         dateformat = "default";
/*       */       }
/* 13290 */       DBUtil.updateGlobalConfigValue("DateFormat", dateformat);
/*       */       
/* 13292 */       int min_criticalPollsCount = amform.getMin_criticalpollscount();
/* 13293 */       if (min_criticalPollsCount != Integer.valueOf((String)FaultUtil.severityVsPollsCount.get("min_1")).intValue())
/*       */       {
/* 13295 */         if (DBUtil.hasGlobalConfigValue("meam.min_critical.polls.count")) {
/* 13296 */           DBUtil.updateGlobalConfigValue("meam.min_critical.polls.count", String.valueOf(min_criticalPollsCount));
/*       */         } else {
/* 13298 */           DBUtil.insertIntoGlobalConfig("meam.min_critical.polls.count", String.valueOf(min_criticalPollsCount));
/*       */         }
/* 13300 */         criticalChanged = true;
/*       */       }
/*       */       
/* 13303 */       int min_warningPollsCount = amform.getMin_warningpollscount();
/* 13304 */       if (min_warningPollsCount != Integer.valueOf((String)FaultUtil.severityVsPollsCount.get("min_4")).intValue())
/*       */       {
/* 13306 */         if (DBUtil.hasGlobalConfigValue("meam.min_warning.polls.count")) {
/* 13307 */           DBUtil.updateGlobalConfigValue("meam.min_warning.polls.count", String.valueOf(min_warningPollsCount));
/*       */         } else {
/* 13309 */           DBUtil.insertIntoGlobalConfig("meam.min_warning.polls.count", String.valueOf(min_warningPollsCount));
/*       */         }
/* 13311 */         warningChanged = true;
/*       */       }
/*       */       
/* 13314 */       int min_clearPollsCount = amform.getMin_clearpollscount();
/* 13315 */       if (min_clearPollsCount != Integer.valueOf((String)FaultUtil.severityVsPollsCount.get("min_5")).intValue())
/*       */       {
/* 13317 */         if (DBUtil.hasGlobalConfigValue("meam.min_clear.polls.count")) {
/* 13318 */           DBUtil.updateGlobalConfigValue("meam.min_clear.polls.count", String.valueOf(min_clearPollsCount));
/*       */         } else {
/* 13320 */           DBUtil.insertIntoGlobalConfig("meam.min_clear.polls.count", String.valueOf(min_clearPollsCount));
/*       */         }
/* 13322 */         clearChanged = true;
/*       */       }
/*       */       
/* 13325 */       int criticalPollsCount = amform.getCriticalpollscount();
/* 13326 */       if (criticalPollsCount != FaultUtil.getConsecutivePollsAllowedForSeverity(1))
/*       */       {
/*       */ 
/*       */ 
/*       */ 
/* 13331 */         updateQuery = "update AM_GLOBALCONFIG set VALUE ='" + criticalPollsCount + "' where NAME='meam.critical.polls.count'";
/* 13332 */         stmt.addBatch(updateQuery);
/* 13333 */         criticalChanged = true;
/* 13334 */         updateQuery = "delete from AM_CONSECUTIVE_POLLSDATA where SEVERITY=1";
/* 13335 */         stmt.addBatch(updateQuery);
/*       */       }
/* 13337 */       int warningPollsCount = amform.getWarningpollscount();
/* 13338 */       if (warningPollsCount != FaultUtil.getConsecutivePollsAllowedForSeverity(4))
/*       */       {
/* 13340 */         updateQuery = "update AM_GLOBALCONFIG set VALUE ='" + warningPollsCount + "' where NAME='meam.warning.polls.count'";
/* 13341 */         stmt.addBatch(updateQuery);
/* 13342 */         warningChanged = true;
/* 13343 */         updateQuery = "delete from AM_CONSECUTIVE_POLLSDATA where SEVERITY=4";
/* 13344 */         stmt.addBatch(updateQuery);
/*       */       }
/* 13346 */       int clearPollsCount = amform.getClearpollscount();
/* 13347 */       if (clearPollsCount != FaultUtil.getConsecutivePollsAllowedForSeverity(5))
/*       */       {
/* 13349 */         updateQuery = "update AM_GLOBALCONFIG set VALUE ='" + clearPollsCount + "' where NAME='meam.clear.polls.count'";
/* 13350 */         stmt.addBatch(updateQuery);
/* 13351 */         clearChanged = true;
/* 13352 */         updateQuery = "delete from AM_CONSECUTIVE_POLLSDATA where SEVERITY=5";
/* 13353 */         stmt.addBatch(updateQuery);
/*       */       }
/*       */       
/* 13356 */       addparams = "&typetoshow=Actionalert";
/*       */     }
/* 13358 */     if (settings.equalsIgnoreCase("performance"))
/*       */     {
/* 13360 */       HashMap<String, String> params = new HashMap();
/* 13361 */       HashMap<String, String> perfParams = new HashMap();
/* 13362 */       String perfDailyReportCollection = request.getParameter("dailyPerfReportCollection");
/* 13363 */       if (perfDailyReportCollection == null)
/*       */       {
/* 13365 */         perfDailyReportCollection = "false";
/*       */       }
/* 13367 */       amform.setDailyPerfReportCollection(perfDailyReportCollection);
/* 13368 */       DBUtil.updateGlobalConfigValue("PERFSTAT_COLLECTION_DAILY", perfDailyReportCollection);
/*       */       
/* 13370 */       String hourlyDataFileCollection = request.getParameter("hourlyDataFileCollection");
/* 13371 */       if (hourlyDataFileCollection == null) {
/* 13372 */         hourlyDataFileCollection = "false";
/*       */       }
/* 13374 */       amform.setHourlyDataFileCollection(hourlyDataFileCollection);
/* 13375 */       DBUtil.updateGlobalConfigValue("DATAFILE_COLLECTION_HOURLY", hourlyDataFileCollection);
/*       */       
/* 13377 */       String alertJobSkip = request.getParameter("alertJobSkip");
/* 13378 */       if (alertJobSkip == null) {
/* 13379 */         alertJobSkip = "false";
/*       */       }
/* 13381 */       amform.setAlertJobSkip(alertJobSkip);
/* 13382 */       DBUtil.updateGlobalConfigValue("ALERT_JOB_SKIP", alertJobSkip);
/*       */       
/* 13384 */       String dailyVlfCollection = request.getParameter("dailyVlfCollection");
/* 13385 */       if (dailyVlfCollection == null) {
/* 13386 */         dailyVlfCollection = "false";
/*       */       }
/* 13388 */       amform.setDailyVlfCollection(dailyVlfCollection);
/* 13389 */       DBUtil.updateGlobalConfigValue("VLF_COLLECTION_DAILY", dailyVlfCollection);
/*       */       
/* 13391 */       if ((request.getParameter("showDataCollectionTab") != null) && (request.getParameter("showDataCollectionTab").equals("true")))
/*       */       {
/* 13393 */         int interval = amform.getPollInterval();
/*       */         
/*       */         try
/*       */         {
/* 13397 */           if (interval != DataCollectionControllerUtil.getPolling()) {
/* 13398 */             DataCollectionControllerUtil.setPolling(interval);
/* 13399 */             updateQuery = "update AM_GLOBALCONFIG set VALUE ='" + interval + "' where NAME='POLLING_COUNT'";
/* 13400 */             stmt.addBatch(updateQuery);
/* 13401 */             perfParams.put("tabname", "showDataCollectionTab");
/* 13402 */             perfParams.put("POLLING_COUNT", String.valueOf(interval));
/*       */           }
/*       */         }
/*       */         catch (Exception exc1) {}
/*       */         
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/* 13411 */         boolean sqlmanager = com.adventnet.appmanager.util.Constants.sqlManager;
/* 13412 */         if (sqlmanager) {
/*       */           try {
/* 13414 */             String batchquery = null;
/* 13415 */             int Querycount = amform.getQueryCount();
/*       */             
/* 13417 */             batchquery = "update AM_GLOBALCONFIG set VALUE ='" + Querycount + "' where NAME='QueryCount'";
/* 13418 */             stmt.addBatch(batchquery);
/* 13419 */             com.adventnet.appmanager.util.Constants.querycount = Integer.toString(Querycount);
/*       */           }
/*       */           catch (Exception e)
/*       */           {
/* 13423 */             e.printStackTrace();
/*       */           }
/*       */         }
/*       */         
/*       */ 
/* 13428 */         addparams = "&typetoshow=performance";
/*       */       }
/* 13430 */       if ((request.getParameter("showDiskIoTab") != null) && (request.getParameter("showDiskIoTab").equals("true")))
/*       */       {
/* 13432 */         String aixDisk = request.getParameter("diskIOAix");
/* 13433 */         if (aixDisk == null)
/*       */         {
/* 13435 */           aixDisk = "false";
/* 13436 */           disableDiskIO("AIX");
/*       */         }
/*       */         else
/*       */         {
/* 13440 */           aixDisk = "true";
/*       */         }
/* 13442 */         if (!aixDisk.equalsIgnoreCase(getGlobalDisableDataCollectionData("AIX", "DISK IO STATS"))) {
/* 13443 */           updateQuery = "update AM_GLOBAL_DISABLECOLLECTION set STATUS ='" + aixDisk + "' where MONITORTYPE='AIX' AND COMPONENTNAME='DISK IO STATS'";
/* 13444 */           stmt.addBatch(updateQuery);
/* 13445 */           perfParams.put("diskIOAix", aixDisk);
/*       */         }
/* 13447 */         String freeDisk = request.getParameter("diskIOFreeBsd");
/* 13448 */         if (freeDisk == null)
/*       */         {
/* 13450 */           freeDisk = "false";
/*       */ 
/*       */         }
/*       */         else
/*       */         {
/* 13455 */           freeDisk = "true";
/*       */         }
/* 13457 */         if (!freeDisk.equalsIgnoreCase(getGlobalDisableDataCollectionData("FreeBSD / OpenBSD", "DISK IO STATS"))) {
/* 13458 */           updateQuery = "update AM_GLOBAL_DISABLECOLLECTION set STATUS ='" + freeDisk + "' where MONITORTYPE='FreeBSD / OpenBSD' AND COMPONENTNAME='DISK IO STATS'";
/* 13459 */           stmt.addBatch(updateQuery);
/*       */         }
/*       */         
/* 13462 */         String macDisk = request.getParameter("diskIOMacOS");
/* 13463 */         if (macDisk == null)
/*       */         {
/* 13465 */           macDisk = "false";
/*       */         }
/*       */         else
/*       */         {
/* 13469 */           macDisk = "true";
/*       */         }
/* 13471 */         if (!macDisk.equalsIgnoreCase(getGlobalDisableDataCollectionData("Mac OS", "DISK IO STATS"))) {
/* 13472 */           updateQuery = "update AM_GLOBAL_DISABLECOLLECTION set STATUS ='" + macDisk + "' where MONITORTYPE='Mac OS' AND COMPONENTNAME='DISK IO STATS'";
/* 13473 */           stmt.addBatch(updateQuery);
/* 13474 */           perfParams.put("diskIOMacOS", macDisk);
/*       */         }
/* 13476 */         String hpDisk = request.getParameter("diskIOHPUX");
/* 13477 */         if (hpDisk == null)
/*       */         {
/* 13479 */           hpDisk = "false";
/*       */ 
/*       */         }
/*       */         else
/*       */         {
/* 13484 */           hpDisk = "true";
/*       */         }
/* 13486 */         if (!hpDisk.equalsIgnoreCase(getGlobalDisableDataCollectionData("HP-UX", "DISK IO STATS"))) {
/* 13487 */           updateQuery = "update AM_GLOBAL_DISABLECOLLECTION set STATUS ='" + hpDisk + "' where MONITORTYPE='HP-UX' AND COMPONENTNAME='DISK IO STATS'";
/* 13488 */           stmt.addBatch(updateQuery);
/* 13489 */           perfParams.put("diskIOHPUX", hpDisk);
/*       */         }
/* 13491 */         String linuxDisk = request.getParameter("diskIOLinux");
/* 13492 */         if (linuxDisk == null)
/*       */         {
/* 13494 */           linuxDisk = "false";
/* 13495 */           disableDiskIO("Linux");
/*       */         }
/*       */         else
/*       */         {
/* 13499 */           linuxDisk = "true";
/*       */         }
/* 13501 */         if (!linuxDisk.equalsIgnoreCase(getGlobalDisableDataCollectionData("Linux", "DISK IO STATS"))) {
/* 13502 */           updateQuery = "update AM_GLOBAL_DISABLECOLLECTION set STATUS ='" + linuxDisk + "' where MONITORTYPE='Linux' AND COMPONENTNAME='DISK IO STATS'";
/* 13503 */           stmt.addBatch(updateQuery);
/* 13504 */           perfParams.put("diskIOLinux", linuxDisk);
/*       */         }
/* 13506 */         String sunDisk = request.getParameter("diskIOSun");
/* 13507 */         if (sunDisk == null)
/*       */         {
/* 13509 */           sunDisk = "false";
/* 13510 */           disableDiskIO("SUN");
/*       */         }
/*       */         else
/*       */         {
/* 13514 */           sunDisk = "true";
/*       */         }
/* 13516 */         if (!sunDisk.equalsIgnoreCase(getGlobalDisableDataCollectionData("SUN", "DISK IO STATS"))) {
/* 13517 */           updateQuery = "update AM_GLOBAL_DISABLECOLLECTION set STATUS ='" + sunDisk + "' where MONITORTYPE='SUN' AND COMPONENTNAME='DISK IO STATS'";
/* 13518 */           stmt.addBatch(updateQuery);
/* 13519 */           perfParams.put("diskIOSun", sunDisk);
/*       */         }
/* 13521 */         String windowsDisk = request.getParameter("diskIOWindows");
/* 13522 */         if (windowsDisk == null)
/*       */         {
/* 13524 */           windowsDisk = "false";
/*       */         }
/*       */         else
/*       */         {
/* 13528 */           windowsDisk = "true";
/*       */         }
/* 13530 */         if (!windowsDisk.equalsIgnoreCase(getGlobalDisableDataCollectionData("Windows", "DISK IO STATS"))) {
/* 13531 */           updateQuery = "update AM_GLOBAL_DISABLECOLLECTION set STATUS ='" + windowsDisk + "' where MONITORTYPE='Windows' AND COMPONENTNAME='DISK IO STATS'";
/* 13532 */           stmt.addBatch(updateQuery);
/* 13533 */           perfParams.put("diskIOWindows", windowsDisk);
/*       */         }
/* 13535 */         addparams = "&typetoshow=performance&showDiskIOLink=true";
/*       */         
/*       */ 
/* 13538 */         String winDiskMonType = "LOCAL";
/* 13539 */         if (amform.isWinDiskNetwork()) {
/* 13540 */           winDiskMonType = winDiskMonType + "|NETWORK";
/*       */         }
/* 13542 */         if (amform.isWinDiskMount()) {
/* 13543 */           winDiskMonType = winDiskMonType + "|MOUNT";
/*       */         }
/* 13545 */         if (!winDiskMonType.equalsIgnoreCase(DBUtil.getGlobalConfigValue("am.server.windows.disk.monitoring.type"))) {
/* 13546 */           DBUtil.insertOrUpdateGlobalConfigValue("am.server.windows.disk.monitoring.type", winDiskMonType);
/* 13547 */           perfParams.put("am.server.windows.disk.monitoring.type", winDiskMonType);
/*       */         }
/*       */         
/*       */ 
/* 13551 */         String s1 = "false";
/* 13552 */         if (amform.isHostProcDown()) {
/* 13553 */           s1 = "true";
/*       */         }
/* 13555 */         if (!s1.equalsIgnoreCase(DBUtil.getGlobalConfigValue("am.show.process.down.if.server.down"))) {
/* 13556 */           DBUtil.insertOrUpdateGlobalConfigValue("am.show.process.down.if.server.down", s1);
/* 13557 */           perfParams.put("am.show.process.down.if.server.down", s1);
/*       */         }
/*       */         
/* 13560 */         s1 = "false";
/* 13561 */         if (amform.isWinServDown()) {
/* 13562 */           s1 = "true";
/*       */         }
/* 13564 */         if (!s1.equalsIgnoreCase(DBUtil.getGlobalConfigValue("am.show.windows.service.down.if.server.down"))) {
/* 13565 */           DBUtil.insertOrUpdateGlobalConfigValue("am.show.windows.service.down.if.server.down", s1);
/* 13566 */           perfParams.put("am.show.windows.service.down.if.server.down", s1);
/*       */         }
/*       */         
/*       */ 
/* 13570 */         s1 = "false";
/* 13571 */         if (amform.isIrixModeOffLinux()) {
/* 13572 */           s1 = "true";
/*       */         }
/* 13574 */         if (!s1.equalsIgnoreCase(DBUtil.getGlobalConfigValue("am.server.linux.process.cpu.usage.irixmodeoff"))) {
/* 13575 */           DBUtil.insertOrUpdateGlobalConfigValue("am.server.linux.process.cpu.usage.irixmodeoff", s1);
/* 13576 */           perfParams.put("am.server.linux.process.cpu.usage.irixmodeoff", s1);
/*       */         }
/*       */         
/*       */ 
/* 13580 */         s1 = amform.getHostHwMonitoring();
/* 13581 */         if ((s1 == null) || (s1.trim().length() == 0) || (s1.equalsIgnoreCase("null"))) {
/* 13582 */           s1 = "enable";
/*       */         }
/* 13584 */         if (!s1.equalsIgnoreCase(DBUtil.getGlobalConfigValue("am.server.hardware.health.monitoring"))) {
/* 13585 */           DBUtil.insertOrUpdateGlobalConfigValue("am.server.hardware.health.monitoring", s1);
/* 13586 */           perfParams.put("am.server.hardware.health.monitoring", s1);
/*       */         }
/*       */         
/*       */ 
/* 13590 */         if (s1.equalsIgnoreCase("disable")) {
/* 13591 */           String[] hwTypes = "'Hw_Fan','Hw_PowerSupply','Hw_Temperature','Hw_Cpu','Hw_Array','Hw_Chassis','Hw_Disk','Hw_Memorydevice','Hw_Voltage','Hw_Battery'".replaceAll("'", "").split(",");
/* 13592 */           deleteMODetails(hwTypes);
/*       */         }
/*       */         else {
/* 13595 */           String hardware = "";
/* 13596 */           String deleteDevice = "";
/* 13597 */           if (amform.isTemperature()) {
/* 13598 */             hardware = hardware + "Temperature";
/*       */           } else {
/* 13600 */             deleteDevice = deleteDevice + "Hw_Temperature";
/*       */           }
/* 13602 */           if (amform.isFan()) {
/* 13603 */             hardware = hardware + "|Fan";
/*       */           } else {
/* 13605 */             deleteDevice = deleteDevice + "#Hw_Fan";
/*       */           }
/* 13607 */           if (amform.isProcessor()) {
/* 13608 */             hardware = hardware + "|Cpu";
/*       */           } else {
/* 13610 */             deleteDevice = deleteDevice + "#Hw_Cpu";
/*       */           }
/* 13612 */           if (amform.isDisk()) {
/* 13613 */             hardware = hardware + "|Disk";
/*       */           } else {
/* 13615 */             deleteDevice = deleteDevice + "#Hw_Disk";
/*       */           }
/* 13617 */           if (amform.isArray()) {
/* 13618 */             hardware = hardware + "|Array";
/*       */           } else {
/* 13620 */             deleteDevice = deleteDevice + "#Hw_Array";
/*       */           }
/* 13622 */           if (amform.isChassis()) {
/* 13623 */             hardware = hardware + "|Chassis";
/*       */           } else {
/* 13625 */             deleteDevice = deleteDevice + "#Hw_Chassis";
/*       */           }
/* 13627 */           if (amform.isPower()) {
/* 13628 */             hardware = hardware + "|PowerSupply";
/*       */           } else {
/* 13630 */             deleteDevice = deleteDevice + "#Hw_PowerSupply";
/*       */           }
/* 13632 */           if (amform.isMemorydevice()) {
/* 13633 */             hardware = hardware + "|Memorydevice";
/*       */           } else {
/* 13635 */             deleteDevice = deleteDevice + "#Hw_Memorydevice";
/*       */           }
/* 13637 */           if (amform.isVoltage()) {
/* 13638 */             hardware = hardware + "|Voltage";
/*       */           } else {
/* 13640 */             deleteDevice = deleteDevice + "#Hw_Voltage";
/*       */           }
/* 13642 */           if (amform.isBattery()) {
/* 13643 */             hardware = hardware + "|Battery";
/*       */           } else {
/* 13645 */             deleteDevice = deleteDevice + "#Hw_Battery";
/*       */           }
/* 13647 */           if (!hardware.equalsIgnoreCase(DBUtil.getGlobalConfigValue("am.server.enable.hardware"))) {
/* 13648 */             DBUtil.insertOrUpdateGlobalConfigValue("am.server.enable.hardware", hardware);
/* 13649 */             perfParams.put("am.server.enable.hardware", hardware);
/*       */           }
/* 13651 */           if ((deleteDevice.length() > 0) && (perfParams.containsKey("am.server.enable.hardware"))) {
/* 13652 */             perfParams.put("deleteDevice", deleteDevice);
/* 13653 */             String[] deleteDeviceArray = deleteDevice.split("#");
/* 13654 */             deleteMODetails(deleteDeviceArray);
/*       */           }
/*       */         }
/*       */         
/*       */ 
/* 13659 */         String errorAlertSettings = "";
/* 13660 */         if (amform.isErrorAlertDisk()) {
/* 13661 */           errorAlertSettings = errorAlertSettings + "DISK";
/*       */         }
/* 13663 */         if (amform.isErrorAlertNwInter()) {
/* 13664 */           errorAlertSettings = errorAlertSettings + "|NETINTER";
/*       */         }
/* 13666 */         if (amform.isErrorAlertNwAdapter()) {
/* 13667 */           errorAlertSettings = errorAlertSettings + "|NETADAPTER";
/*       */         }
/* 13669 */         if (amform.isErrorAlertRestart()) {
/* 13670 */           errorAlertSettings = errorAlertSettings + "|RESTART";
/*       */         }
/* 13672 */         if (amform.isErrorAlertScheduledTask()) {
/* 13673 */           errorAlertSettings = errorAlertSettings + "|SCHEDULEDTASK";
/*       */         }
/* 13675 */         if (amform.isErrorAlertProcessRestart()) {
/* 13676 */           errorAlertSettings = errorAlertSettings + "|PROCESSRESTART";
/*       */         }
/* 13678 */         if (errorAlertSettings.length() == 0) {
/* 13679 */           errorAlertSettings = "none";
/*       */         }
/* 13681 */         if (!errorAlertSettings.equalsIgnoreCase(DBUtil.getGlobalConfigValue("am.server.error.alert.settings"))) {
/* 13682 */           DBUtil.insertOrUpdateGlobalConfigValue("am.server.error.alert.settings", errorAlertSettings);
/* 13683 */           perfParams.put("am.server.error.alert.settings", errorAlertSettings);
/*       */         }
/*       */         
/*       */ 
/* 13687 */         int retryVal = amform.getSnmpRetryVal();
/* 13688 */         if (retryVal < 1) {
/* 13689 */           retryVal = 3;
/*       */         }
/* 13691 */         if (!String.valueOf(retryVal).equalsIgnoreCase(DBUtil.getGlobalConfigValue("am.snmp.agent.error.timedout.retry"))) {
/* 13692 */           DBUtil.insertOrUpdateGlobalConfigValue("am.snmp.agent.error.timedout.retry", String.valueOf(retryVal));
/* 13693 */           perfParams.put("am.snmp.agent.error.timedout.retry", String.valueOf(retryVal));
/*       */         }
/*       */         
/*       */ 
/* 13697 */         String hwCriticalStatusMessages = amform.getHwCriticalStatusMessage();
/* 13698 */         if ((hwCriticalStatusMessages == null) || (hwCriticalStatusMessages.trim().length() == 0)) {
/* 13699 */           hwCriticalStatusMessages = "failed,error,failure,nonRecoverable,criticalUpper,criticalLower,nonRecoverableLower,critical";
/*       */         }
/* 13701 */         Class hwcClass = Class.forName("com.adventnet.appmanager.server.hostresources.datacollection.HardwareConstants");
/*       */         
/* 13703 */         int i = 0;
/* 13704 */         StringTokenizer tokens = new StringTokenizer(hwCriticalStatusMessages, ",");
/* 13705 */         String[] arrMessages = new String[tokens.countTokens()];
/* 13706 */         while (tokens.hasMoreTokens()) {
/* 13707 */           arrMessages[(i++)] = tokens.nextToken().trim();
/*       */         }
/* 13709 */         Method m = hwcClass.getDeclaredMethod("setHwCriticalStatusMessages", new Class[] { String[].class });
/* 13710 */         m.invoke(null, new Object[] { arrMessages });
/*       */         
/* 13712 */         hwCriticalStatusMessages = Arrays.toString(arrMessages);
/* 13713 */         hwCriticalStatusMessages = hwCriticalStatusMessages.replaceAll(", ", ",").replaceAll("\\[", "").replaceAll("\\]", "");
/*       */         
/* 13715 */         if (!hwCriticalStatusMessages.equalsIgnoreCase(DBUtil.getGlobalConfigValue("am.server.hardware.critical.status.messages"))) {
/* 13716 */           DBUtil.insertOrUpdateGlobalConfigValue("am.server.hardware.critical.status.messages", hwCriticalStatusMessages);
/* 13717 */           perfParams.put("am.server.hardware.critical.status.messages", hwCriticalStatusMessages);
/*       */         }
/*       */         
/*       */ 
/* 13721 */         String hwWarningStatusMessages = amform.getHwWarningStatusMessage();
/* 13722 */         if ((hwWarningStatusMessages == null) || (hwWarningStatusMessages.trim().length() == 0)) {
/* 13723 */           hwWarningStatusMessages = "degraded,warning,nonCritical,nonCriticalUpper,nonRecoverableUpper,nonCriticalLower";
/*       */         }
/* 13725 */         i = 0;
/* 13726 */         tokens = new StringTokenizer(hwWarningStatusMessages, ",");
/* 13727 */         arrMessages = new String[tokens.countTokens()];
/* 13728 */         while (tokens.hasMoreTokens()) {
/* 13729 */           arrMessages[(i++)] = tokens.nextToken().trim();
/*       */         }
/* 13731 */         m = hwcClass.getDeclaredMethod("setHwWarningStatusMessages", new Class[] { String[].class });
/* 13732 */         m.invoke(null, new Object[] { arrMessages });
/*       */         
/* 13734 */         hwWarningStatusMessages = Arrays.toString(arrMessages);
/* 13735 */         hwWarningStatusMessages = hwWarningStatusMessages.replaceAll(", ", ",").replaceAll("\\[", "").replaceAll("\\]", "");
/*       */         
/* 13737 */         if (!hwWarningStatusMessages.equalsIgnoreCase(DBUtil.getGlobalConfigValue("am.server.hardware.warning.status.messages"))) {
/* 13738 */           DBUtil.insertOrUpdateGlobalConfigValue("am.server.hardware.warning.status.messages", hwWarningStatusMessages);
/* 13739 */           perfParams.put("am.server.hardware.warning.status.messages", hwWarningStatusMessages);
/*       */         }
/*       */         
/* 13742 */         String hwClearStatusMessages = amform.getHwClearStatusMessage();
/* 13743 */         if ((hwClearStatusMessages == null) || (hwClearStatusMessages.trim().length() == 0)) {
/* 13744 */           hwClearStatusMessages = "ok";
/*       */         }
/* 13746 */         i = 0;
/* 13747 */         tokens = new StringTokenizer(hwClearStatusMessages, ",");
/* 13748 */         arrMessages = new String[tokens.countTokens()];
/* 13749 */         while (tokens.hasMoreTokens()) {
/* 13750 */           arrMessages[(i++)] = tokens.nextToken().trim();
/*       */         }
/* 13752 */         m = hwcClass.getDeclaredMethod("setHwClearStatusMessages", new Class[] { String[].class });
/* 13753 */         m.invoke(null, new Object[] { arrMessages });
/*       */         
/* 13755 */         hwClearStatusMessages = Arrays.toString(arrMessages);
/* 13756 */         hwClearStatusMessages = hwClearStatusMessages.replaceAll(", ", ",").replaceAll("\\[", "").replaceAll("\\]", "");
/*       */         
/* 13758 */         if (!hwClearStatusMessages.equalsIgnoreCase(DBUtil.getGlobalConfigValue("am.server.hardware.clear.status.messages"))) {
/* 13759 */           DBUtil.insertOrUpdateGlobalConfigValue("am.server.hardware.clear.status.messages", hwClearStatusMessages);
/* 13760 */           perfParams.put("am.server.hardware.clear.status.messages", hwClearStatusMessages);
/*       */         }
/*       */         
/* 13763 */         if (!perfParams.isEmpty()) {
/* 13764 */           perfParams.put("tabname", "showDiskIoTab");
/*       */         }
/* 13766 */         String loginTimeOut = request.getParameter("am.telnet.loginTimeOut");
/* 13767 */         String bulkcmdResptimeout = request.getParameter("am.cli.bulkcmd.exec.responsetimeout");
/*       */         
/*       */ 
/* 13770 */         String servercmdResptimeout = request.getParameter("am.server.command.responsetimeout");
/*       */         
/* 13772 */         String cliCaching = request.getParameter("am.cliSession.caching");
/* 13773 */         String loginprefix = request.getParameter("am.cli.loginprefix");
/* 13774 */         String bulkexec = request.getParameter("am.cli.command.bulk.execute");
/* 13775 */         String resendvbscripts = request.getParameter("am.server.windows.resend.vbscripts");
/* 13776 */         String enableRawData = request.getParameter("am.rawdata.enabled");
/* 13777 */         String wmiencoding = request.getParameter("am.wmi.encoding");
/* 13778 */         String processinstance = request.getParameter("am.processinstance.equals");
/* 13779 */         String mgAssoicatedProcessAndServiceSetting = request.getParameter("am.mg.processAndService.associate");
/* 13780 */         String disksignore = request.getParameter("am.disks.ignore");
/* 13781 */         String deleteDisk = request.getParameter("am.host.deleteDisk");
/* 13782 */         String deleteDiskPollCount = request.getParameter("am.host.disk.delete.consecutivePollingCount");
/*       */         
/* 13784 */         params = new HashMap();
/*       */         
/*       */ 
/* 13787 */         if (amform.isEnableNetAdapterMonitor())
/*       */         {
/* 13789 */           DBUtil.insertOrUpdateServerConfigValue("am.server.network.adapter.monitoring", "true", 5);
/* 13790 */           params.put("am.server.network.adapter.monitoring", "true");
/*       */         }
/*       */         else
/*       */         {
/* 13794 */           DBUtil.insertOrUpdateServerConfigValue("am.server.network.adapter.monitoring", "false", 5);
/* 13795 */           params.put("am.server.network.adapter.monitoring", "false");
/*       */         }
/*       */         
/* 13798 */         if (("".equalsIgnoreCase(loginTimeOut)) || ("0".equalsIgnoreCase(loginTimeOut))) {
/* 13799 */           loginTimeOut = "3000";
/*       */         }
/* 13801 */         if (!loginTimeOut.equalsIgnoreCase(DBUtil.getServerConfigValue("am.telnet.loginTimeOut")))
/*       */         {
/* 13803 */           DBUtil.updateServerConfigValue("am.telnet.loginTimeOut", loginTimeOut);
/* 13804 */           params.put("am.telnet.loginTimeOut", loginTimeOut);
/*       */         }
/* 13806 */         if (("".equalsIgnoreCase(bulkcmdResptimeout)) || ("0".equalsIgnoreCase(bulkcmdResptimeout))) {
/* 13807 */           bulkcmdResptimeout = "120";
/*       */         }
/* 13809 */         if (!bulkcmdResptimeout.equalsIgnoreCase(DBUtil.getServerConfigValue("am.cli.bulkcmd.exec.responsetimeout")))
/*       */         {
/* 13811 */           DBUtil.updateServerConfigValue("am.cli.bulkcmd.exec.responsetimeout", bulkcmdResptimeout);
/* 13812 */           params.put("am.cli.bulkcmd.exec.responsetimeout", bulkcmdResptimeout);
/*       */         }
/*       */         
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/* 13830 */         if (("".equalsIgnoreCase(servercmdResptimeout)) || ("0".equalsIgnoreCase(servercmdResptimeout))) {
/* 13831 */           servercmdResptimeout = "40";
/*       */         }
/* 13833 */         if (!servercmdResptimeout.equalsIgnoreCase(DBUtil.getServerConfigValue("am.server.command.responsetimeout")))
/*       */         {
/* 13835 */           DBUtil.updateServerConfigValue("am.server.command.responsetimeout", servercmdResptimeout);
/* 13836 */           params.put("am.server.command.responsetimeout", servercmdResptimeout);
/*       */         }
/*       */         
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/* 13843 */         if (!cliCaching.equalsIgnoreCase(DBUtil.getServerConfigValue("am.cliSession.caching")))
/*       */         {
/* 13845 */           DBUtil.updateServerConfigValue("am.cliSession.caching", cliCaching);
/* 13846 */           params.put("am.cliSession.caching", cliCaching);
/*       */         }
/* 13848 */         if (!loginprefix.equalsIgnoreCase(DBUtil.getServerConfigValue("am.cli.loginprefix")))
/*       */         {
/* 13850 */           DBUtil.updateServerConfigValue("am.cli.loginprefix", loginprefix);
/* 13851 */           params.put("am.cli.loginprefix", loginprefix);
/*       */         }
/* 13853 */         if (!bulkexec.equalsIgnoreCase(DBUtil.getServerConfigValue("am.cli.command.bulk.execute")))
/*       */         {
/* 13855 */           DBUtil.updateServerConfigValue("am.cli.command.bulk.execute", bulkexec);
/* 13856 */           params.put("am.cli.command.bulk.execute", bulkexec);
/*       */         }
/* 13858 */         if (!resendvbscripts.equalsIgnoreCase(DBUtil.getServerConfigValue("am.server.windows.resend.vbscripts")))
/*       */         {
/* 13860 */           DBUtil.updateServerConfigValue("am.server.windows.resend.vbscripts", resendvbscripts);
/* 13861 */           params.put("am.server.windows.resend.vbscripts", resendvbscripts);
/*       */         }
/* 13863 */         if (!enableRawData.equalsIgnoreCase(DBUtil.getServerConfigValue("am.rawdata.enabled")))
/*       */         {
/* 13865 */           DBUtil.updateServerConfigValue("am.rawdata.enabled", enableRawData);
/* 13866 */           params.put("am.rawdata.enabled", enableRawData);
/*       */         }
/* 13868 */         if (!disksignore.equalsIgnoreCase(DBUtil.getServerConfigValue("am.disks.ignore")))
/*       */         {
/* 13870 */           DBUtil.updateServerConfigValue("am.disks.ignore", disksignore);
/* 13871 */           params.put("am.disks.ignore", disksignore);
/*       */         }
/* 13873 */         if (!deleteDisk.equalsIgnoreCase(DBUtil.getServerConfigValue("am.host.deleteDisk")))
/*       */         {
/* 13875 */           DBUtil.updateServerConfigValue("am.host.deleteDisk", deleteDisk);
/* 13876 */           params.put("am.host.deleteDisk", deleteDisk);
/*       */         }
/* 13878 */         if ((deleteDiskPollCount != null) && 
/* 13879 */           (!deleteDiskPollCount.equalsIgnoreCase(DBUtil.getServerConfigValue("am.host.disk.delete.consecutivePollingCount"))))
/*       */         {
/* 13881 */           DBUtil.updateServerConfigValue("am.host.disk.delete.consecutivePollingCount", deleteDiskPollCount);
/* 13882 */           params.put("am.host.disk.delete.consecutivePollingCount", deleteDiskPollCount);
/*       */         }
/*       */         
/* 13885 */         if (!processinstance.equalsIgnoreCase(DBUtil.getServerConfigValue("am.processinstance.equals")))
/*       */         {
/* 13887 */           DBUtil.updateServerConfigValue("am.processinstance.equals", processinstance);
/* 13888 */           params.put("am.processinstance.equals", processinstance);
/*       */         }
/* 13890 */         if (!mgAssoicatedProcessAndServiceSetting.equalsIgnoreCase(DBUtil.getServerConfigValue("am.mg.processAndService.associate")))
/*       */         {
/* 13892 */           DBUtil.updateServerConfigValue("am.mg.processAndService.associate", mgAssoicatedProcessAndServiceSetting);
/* 13893 */           params.put("am.mg.processAndService.associate", mgAssoicatedProcessAndServiceSetting);
/*       */         }
/*       */         
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/* 13907 */         if (!params.isEmpty()) {
/* 13908 */           AMCacheHandler.updateGlobalVariables(params);
/*       */         }
/* 13910 */         if ((EnterpriseUtil.isAdminServer()) && (!params.isEmpty())) {
/* 13911 */           Vector serverids = MASSyncUtil.getallServerIDS();
/* 13912 */           for (int id = 0; id < serverids.size(); id++) {
/* 13913 */             MASSyncUtil.addTasktoSync(params, "/AppManager/xml/serverConfigs/update", serverids.get(id).toString(), "POST", 9, 2);
/*       */           }
/*       */         }
/* 13916 */         if (!wmiencoding.equalsIgnoreCase(com.adventnet.appmanager.util.Constants.getWmiEncoding()))
/*       */         {
/* 13918 */           params = new HashMap();
/* 13919 */           String confFilePath = System.getProperty("webnms.rootdir") + File.separator + ".." + File.separator + "conf" + File.separator + "AMServer.properties";
/* 13920 */           AMCacheHandler.updateOrInsertPropinConfFile(confFilePath, "am.wmi.encoding", wmiencoding, "=");
/* 13921 */           params.put("am.wmi.encoding", wmiencoding);
/* 13922 */           params.put("conffiletype", "amserver");
/* 13923 */           AMCacheHandler.updateGlobalVariables(params);
/* 13924 */           if ((EnterpriseUtil.isAdminServer()) && (!params.isEmpty())) {
/* 13925 */             Vector serverids = MASSyncUtil.getallServerIDS();
/* 13926 */             for (int id = 0; id < serverids.size(); id++) {
/* 13927 */               MASSyncUtil.addTasktoSync(params, "/AppManager/xml/confFileProps/update", serverids.get(id).toString(), "POST", 9, 2);
/*       */             }
/*       */           }
/*       */         }
/*       */       }
/* 13932 */       if ((request.getParameter("showDatabaseTab") != null) && (request.getParameter("showDatabaseTab").equals("true")))
/*       */       {
/* 13934 */         params = new HashMap();
/*       */         
/*       */ 
/* 13937 */         String mysqlTableData = request.getParameter("mysqlTableData");
/* 13938 */         if (!mysqlTableData.equalsIgnoreCase(getGlobalDisableDataCollectionData("MYSQL-DB-server", "TABLEDATA"))) {
/* 13939 */           updateQuery = "update AM_GLOBAL_DISABLECOLLECTION set STATUS ='" + mysqlTableData + "' where MONITORTYPE='MYSQL-DB-server' AND COMPONENTNAME='TABLEDATA'";
/* 13940 */           stmt.addBatch(updateQuery);
/* 13941 */           perfParams.put("mysqlTableData", mysqlTableData);
/*       */         }
/* 13943 */         String mysqlDaystoretain = request.getParameter("am.htmldata.mysql.daystoretain");
/* 13944 */         if (("".equalsIgnoreCase(mysqlDaystoretain)) || ("0".equalsIgnoreCase(mysqlDaystoretain))) {
/* 13945 */           mysqlDaystoretain = "30";
/*       */         }
/* 13947 */         if (!mysqlDaystoretain.equalsIgnoreCase(DBUtil.getServerConfigValue("am.htmldata.mysql.daystoretain")))
/*       */         {
/* 13949 */           DBUtil.updateServerConfigValue("am.htmldata.mysql.daystoretain", mysqlDaystoretain);
/* 13950 */           params.put("am.htmldata.mysql.daystoretain", mysqlDaystoretain);
/*       */         }
/*       */         
/*       */ 
/*       */ 
/*       */ 
/* 13956 */         String sybaseDBDetails = request.getParameter("sybaseDBDetails");
/* 13957 */         if (!sybaseDBDetails.equalsIgnoreCase(getGlobalDisableDataCollectionData("SYBASE-DB-server", "DATABASE DETAILS"))) {
/* 13958 */           updateQuery = "update AM_GLOBAL_DISABLECOLLECTION set STATUS ='" + sybaseDBDetails + "' where MONITORTYPE='SYBASE-DB-server' AND COMPONENTNAME='DATABASE DETAILS'";
/* 13959 */           stmt.addBatch(updateQuery);
/* 13960 */           perfParams.put("sybaseDBDetails", sybaseDBDetails);
/*       */         }
/* 13962 */         String OracleFailedBackupJobsOnly = request.getParameter("failedScheduledBackupJobs");
/* 13963 */         OracleFailedBackupJobsOnly = OracleFailedBackupJobsOnly == null ? "false" : "true";
/* 13964 */         if (!OracleFailedBackupJobsOnly.equalsIgnoreCase(getGlobalDisableDataCollectionData("ORACLE-DB-server", "FAILEDBACKUPJOBSONLY"))) {
/* 13965 */           updateQuery = "update AM_GLOBAL_DISABLECOLLECTION set STATUS ='" + OracleFailedBackupJobsOnly + "' where MONITORTYPE='ORACLE-DB-server' AND COMPONENTNAME='FAILEDBACKUPJOBSONLY'";
/* 13966 */           stmt.addBatch(updateQuery);
/* 13967 */           perfParams.put("failedScheduledBackupJobs", OracleFailedBackupJobsOnly);
/*       */         }
/* 13969 */         if (!perfParams.isEmpty()) {
/* 13970 */           perfParams.put("tabname", "showDatabaseTab");
/*       */         }
/*       */         
/* 13973 */         String rediscover = request.getParameter("am.nosql.rediscover.interval");
/* 13974 */         if (("".equalsIgnoreCase(rediscover)) || ("0".equalsIgnoreCase(rediscover))) {
/* 13975 */           rediscover = "60";
/*       */         }
/* 13977 */         if (!rediscover.equalsIgnoreCase(DBUtil.getServerConfigValue("am.nosql.rediscover.interval")))
/*       */         {
/* 13979 */           DBUtil.updateServerConfigValue("am.nosql.rediscover.interval", rediscover);
/* 13980 */           params.put("am.nosql.rediscover.interval", rediscover);
/*       */         }
/*       */         
/* 13983 */         if (!params.isEmpty()) {
/* 13984 */           AMCacheHandler.updateGlobalVariables(params);
/*       */         }
/*       */         
/* 13987 */         if ((EnterpriseUtil.isAdminServer()) && (!params.isEmpty())) {
/* 13988 */           Vector serverids = MASSyncUtil.getallServerIDS();
/* 13989 */           for (int i = 0; i < serverids.size(); i++) {
/* 13990 */             MASSyncUtil.addTasktoSync(params, "/AppManager/xml/serverConfigs/update", serverids.get(i).toString(), "POST", 9, 2);
/*       */           }
/*       */         }
/*       */         
/*       */ 
/*       */ 
/* 13996 */         addparams = "&typetoshow=performance&showDBLink=true";
/*       */       }
/* 13998 */       if ((request.getParameter("showAmazonTab") != null) && (request.getParameter("showAmazonTab").equals("true")))
/*       */       {
/* 14000 */         String amazonTableData = request.getParameter("amazonS3BucketTableData");
/* 14001 */         if ((amazonTableData != null) && (!amazonTableData.equalsIgnoreCase(getGlobalDisableDataCollectionData("Amazon", "S3BucketTABLEDATA")))) {
/* 14002 */           updateQuery = "update AM_GLOBAL_DISABLECOLLECTION set STATUS ='" + amazonTableData + "' where MONITORTYPE='Amazon' AND COMPONENTNAME='S3BucketTABLEDATA'";
/* 14003 */           stmt.addBatch(updateQuery);
/* 14004 */           perfParams.put("amazonS3BucketTableData", amazonTableData);
/*       */         }
/*       */         
/*       */ 
/*       */ 
/*       */ 
/* 14010 */         String ec2TableData = request.getParameter("amazonEC2PrimaryKey");
/* 14011 */         if ((ec2TableData != null) && (!ec2TableData.equalsIgnoreCase(com.adventnet.appmanager.util.AppManagerUtil.getec2InstancePK())))
/*       */         {
/* 14013 */           updateQuery = "update AM_GLOBALCONFIG set VALUE ='" + ec2TableData + "' where NAME='am.amazonEC2PrimaryKey'";
/* 14014 */           stmt.addBatch(updateQuery);
/* 14015 */           DBaction.deletAllAmazonMonitors();
/* 14016 */           perfParams.put("amazonEC2PrimaryKey", ec2TableData);
/* 14017 */           String mergeEnabled = "false";
/* 14018 */           if (ec2TableData.equalsIgnoreCase("nameTag"))
/*       */           {
/* 14020 */             mergeEnabled = "true";
/*       */           }
/* 14022 */           if (!mergeEnabled.equalsIgnoreCase(DBUtil.getGlobalConfigValue("am.amazonEC2.mergeEnabled"))) {
/* 14023 */             perfParams.put("mergeEnabled", mergeEnabled);
/* 14024 */             updateQuery = "update AM_GLOBALCONFIG set VALUE ='" + mergeEnabled + "' where NAME='am.amazonEC2.mergeEnabled'";
/* 14025 */             stmt.addBatch(updateQuery);
/*       */           }
/*       */         }
/* 14028 */         if ((request.getParameter("ec2AlertTerminatedInstance") != null) && ("true".equalsIgnoreCase(request.getParameter("ec2AlertTerminatedInstance")))) {
/* 14029 */           DBUtil.insertOrUpdateGlobalConfigValue("am.amazonEC2.state.terminated.dontalert", "false");
/*       */         } else {
/* 14031 */           DBUtil.insertOrUpdateGlobalConfigValue("am.amazonEC2.state.terminated.dontalert", "true");
/*       */         }
/* 14033 */         if ((request.getParameter("signatureVersion4SigningEnabled") != null) && ("on".equalsIgnoreCase(request.getParameter("signatureVersion4SigningEnabled")))) {
/* 14034 */           DBUtil.insertOrUpdateGlobalConfigValue("am.amazon.signatureversion4.enabled", "true");
/*       */         } else {
/* 14036 */           DBUtil.insertOrUpdateGlobalConfigValue("am.amazon.signatureversion4.enabled", "false");
/*       */         }
/* 14038 */         if (!perfParams.isEmpty()) {
/* 14039 */           perfParams.put("tabname", "showAmazonTab");
/*       */         }
/* 14041 */         addparams = "&typetoshow=performance&showAmazonLink=true";
/*       */       }
/* 14043 */       if ((request.getParameter("showUrlTab") != null) && (request.getParameter("showUrlTab").equals("true")))
/*       */       {
/* 14045 */         String urlDebug = request.getParameter("urlDebug") != null ? "true" : "false";
/* 14046 */         String urlResponses = request.getParameter("urlResponses") != null ? "true" : "false";
/* 14047 */         String repollInterval = request.getParameter("am.repoll.interval");
/*       */         
/* 14049 */         if (!urlDebug.equalsIgnoreCase(getGlobalDisableDataCollectionData("HTTP(S) URLs", "URLDEBUG"))) {
/* 14050 */           updateQuery = "update AM_GLOBAL_DISABLECOLLECTION set STATUS ='" + urlDebug + "' where MONITORTYPE='HTTP(S) URLs' AND COMPONENTNAME='URLDEBUG'";
/* 14051 */           stmt.addBatch(updateQuery);
/* 14052 */           perfParams.put("urlDebug", urlDebug);
/*       */         }
/* 14054 */         if (!urlResponses.equalsIgnoreCase(getGlobalDisableDataCollectionData("HTTP(S) URLs", "URLRESPONSES"))) {
/* 14055 */           updateQuery = "update AM_GLOBAL_DISABLECOLLECTION set STATUS ='" + urlResponses + "' where MONITORTYPE='HTTP(S) URLs' AND COMPONENTNAME='URLRESPONSES'";
/* 14056 */           stmt.addBatch(updateQuery);
/* 14057 */           perfParams.put("urlResponses", urlResponses);
/*       */         }
/*       */         
/* 14060 */         if (!perfParams.isEmpty()) {
/* 14061 */           perfParams.put("tabname", "showUrlTab");
/*       */         }
/* 14063 */         if (repollInterval != null) {
/* 14064 */           if (("".equals(repollInterval)) || (repollInterval.equals("0"))) {
/* 14065 */             repollInterval = "10";
/*       */           }
/* 14067 */           params = new HashMap();
/* 14068 */           if (!repollInterval.equalsIgnoreCase(DBUtil.getServerConfigValue("am.repoll.interval")))
/*       */           {
/* 14070 */             DBUtil.updateServerConfigValue("am.repoll.interval", repollInterval);
/* 14071 */             params.put("am.repoll.interval", repollInterval);
/*       */           }
/* 14073 */           if (!params.isEmpty()) {
/* 14074 */             AMCacheHandler.updateGlobalVariables(params);
/*       */           }
/*       */           
/* 14077 */           if ((EnterpriseUtil.isAdminServer()) && (!params.isEmpty())) {
/* 14078 */             Vector serverids = MASSyncUtil.getallServerIDS();
/* 14079 */             for (int i = 0; i < serverids.size(); i++) {
/* 14080 */               MASSyncUtil.addTasktoSync(params, "/AppManager/xml/serverConfigs/update", serverids.get(i).toString(), "POST", 9, 2);
/*       */             }
/*       */           }
/*       */         }
/* 14084 */         addparams = "&typetoshow=performance&showUrlLink=true";
/*       */       }
/* 14086 */       if ((request.getParameter("showSnmpTab") != null) && (request.getParameter("showSnmpTab").equals("true")))
/*       */       {
/* 14088 */         String snmpVersion = request.getParameter("snmpVersion");
/* 14089 */         if ((snmpVersion == null) || (snmpVersion.trim().length() == 0)) {
/* 14090 */           snmpVersion = "v1";
/*       */         }
/*       */         try
/*       */         {
/* 14094 */           if (!snmpVersion.equalsIgnoreCase(DBUtil.getGlobalConfigValue("SNMPversion"))) {
/* 14095 */             perfParams.put("tabname", "showSnmpTab");
/* 14096 */             DBUtil.insertOrUpdateGlobalConfigValue("SNMPversion", snmpVersion);
/* 14097 */             perfParams.put("SNMPversion", snmpVersion);
/* 14098 */             com.adventnet.appmanager.util.Constants.snmpVersion = snmpVersion;
/*       */           }
/*       */         }
/*       */         catch (Exception e)
/*       */         {
/* 14103 */           e.printStackTrace();
/*       */         }
/*       */         
/* 14106 */         addparams = "&typetoshow=performance&showSnmpLink=true";
/*       */       }
/* 14108 */       if ((request.getParameter("showWeblogicTab") != null) && (request.getParameter("showWeblogicTab").equals("true")))
/*       */       {
/*       */         try
/*       */         {
/* 14112 */           addparams = "&typetoshow=performance&showWeblogicLink=true";
/* 14113 */           perfParams = disableWLSWebapp(request, stmt);
/* 14114 */           System.out.println("DISABLE WLS WEBAPP!!!!!!!!!!!!!!!!!!!!!!!");
/*       */ 
/*       */         }
/*       */         catch (Exception exc)
/*       */         {
/* 14119 */           exc.printStackTrace();
/*       */         }
/*       */       }
/*       */       
/* 14123 */       String dbAvailabilityCheck = request.getParameter("dbAvailabilityCheck");
/* 14124 */       if (dbAvailabilityCheck == null)
/*       */       {
/* 14126 */         dbAvailabilityCheck = "false";
/*       */       }
/* 14128 */       amform.setDbAvailabilityCheck(dbAvailabilityCheck);
/* 14129 */       DBUtil.updateGlobalConfigValue("dbAvailabilityCheck", dbAvailabilityCheck);
/*       */       
/* 14131 */       if ((request.getParameter("showWebservicesTab") != null) && (request.getParameter("showWebservicesTab").equals("true")))
/*       */       {
/* 14133 */         int webServicesOperationTime = amform.getWebServicesOperationTime();
/* 14134 */         if (webServicesOperationTime != Integer.parseInt(DBUtil.getGlobalConfigValue("am.webservices.operationtime"))) {
/* 14135 */           perfParams.put("tabname", "showWebservicesTab");
/* 14136 */           perfParams.put("am.webservices.operationtime", webServicesOperationTime + "");
/* 14137 */           DBUtil.updateGlobalConfigValue("am.webservices.operationtime", "" + webServicesOperationTime);
/* 14138 */           com.adventnet.appmanager.util.AppManagerUtil.webServicesOperationTime = webServicesOperationTime;
/*       */         }
/* 14140 */         addparams = "&typetoshow=performance&showWebservicesLink=true";
/*       */       }
/*       */       
/* 14143 */       if ((request.getParameter("showPingTab") != null) && ("true".equals(request.getParameter("showPingTab"))))
/*       */       {
/* 14145 */         int pingPackToSend = amform.getPingPackToSend();
/* 14146 */         params = new HashMap();
/* 14147 */         String pingcmd = request.getParameter("am.pingtest.command");
/* 14148 */         if (pingPackToSend != Integer.parseInt(DBUtil.getGlobalConfigValue("am.ping.packtosend"))) {
/* 14149 */           DBUtil.updateGlobalConfigValue("am.ping.packtosend", "" + pingPackToSend);
/* 14150 */           perfParams.put("tabname", "showPingTab");
/* 14151 */           perfParams.put("am.ping.packtosend", pingPackToSend + "");
/* 14152 */           com.adventnet.appmanager.util.AppManagerUtil.pingPackToSend = pingPackToSend;
/*       */         }
/* 14154 */         if (!pingcmd.equals(DBUtil.getServerConfigValue("am.pingtest.command")))
/*       */         {
/* 14156 */           DBUtil.updateServerConfigValue("am.pingtest.command", "" + pingcmd);
/* 14157 */           params.put("am.pingtest.command", pingcmd);
/*       */         }
/* 14159 */         if (!params.isEmpty()) {
/* 14160 */           AMCacheHandler.updateGlobalVariables(params);
/*       */         }
/* 14162 */         if ((EnterpriseUtil.isAdminServer()) && (!params.isEmpty())) {
/* 14163 */           Vector serverids = MASSyncUtil.getallServerIDS();
/* 14164 */           for (int i = 0; i < serverids.size(); i++) {
/* 14165 */             MASSyncUtil.addTasktoSync(params, "/AppManager/xml/serverConfigs/update", serverids.get(i).toString(), "POST", 9, 2);
/*       */           }
/*       */         }
/* 14168 */         addparams = "&typetoshow=performance&showPingLink=true";
/*       */       }
/* 14170 */       AMLog.debug("final perfParams :" + perfParams);
/* 14171 */       if ((EnterpriseUtil.isAdminServer()) && (!perfParams.isEmpty())) {
/* 14172 */         Vector serverids = MASSyncUtil.getallServerIDS();
/* 14173 */         for (int i = 0; i < serverids.size(); i++) {
/* 14174 */           MASSyncUtil.addTasktoSync(perfParams, "/AppManager/xml/perfConfigs/update", serverids.get(i).toString(), "POST", 10, 2);
/*       */         }
/*       */       }
/*       */     }
/*       */     
/* 14179 */     if (settings.equalsIgnoreCase("downTimeSchedulerConf"))
/*       */     {
/* 14181 */       String availabilityUpUnderMaintenance = request.getParameter("availabilityUpUnderMaintenance");
/* 14182 */       String healthClearUnderMaintenance = request.getParameter("healthClearUnderMaintenance");
/* 14183 */       String doEnbleProcessMonsInDSpage = request.getParameter("processMonsEnablingStatusInDS");
/* 14184 */       String unmanageMonitorAfterMaintenance = request.getParameter("unmanageMonitorAfterMaintenance");
/* 14185 */       AMLog.debug("availabilityUpUnderMaintenance?" + availabilityUpUnderMaintenance + ", healthClearUnderMaintenance? " + healthClearUnderMaintenance + ", doEnbleProcessMonsInDSpage?" + doEnbleProcessMonsInDSpage);
/*       */       
/* 14187 */       if (availabilityUpUnderMaintenance == null)
/*       */       {
/* 14189 */         availabilityUpUnderMaintenance = "false";
/*       */       }
/* 14191 */       if (healthClearUnderMaintenance == null)
/*       */       {
/* 14193 */         healthClearUnderMaintenance = "false";
/*       */       }
/* 14195 */       if (doEnbleProcessMonsInDSpage == null)
/*       */       {
/* 14197 */         doEnbleProcessMonsInDSpage = "false";
/*       */       }
/* 14199 */       if (unmanageMonitorAfterMaintenance == null)
/*       */       {
/* 14201 */         unmanageMonitorAfterMaintenance = "false";
/*       */       }
/*       */       
/*       */       try
/*       */       {
/* 14206 */         if (DBUtil.hasGlobalConfigValue("enable.processmons.under.downtimescheduler.config"))
/*       */         {
/* 14208 */           DBUtil.updateGlobalConfigValue("enable.processmons.under.downtimescheduler.config", doEnbleProcessMonsInDSpage);
/*       */         }
/*       */         else
/*       */         {
/* 14212 */           DBUtil.insertIntoGlobalConfig("enable.processmons.under.downtimescheduler.config", doEnbleProcessMonsInDSpage);
/*       */         }
/*       */       }
/*       */       catch (Exception e) {
/* 14216 */         e.printStackTrace();
/*       */       }
/*       */       try
/*       */       {
/* 14220 */         if (DBUtil.hasGlobalConfigValue("unmanage.monitor.after.maintenance"))
/*       */         {
/* 14222 */           DBUtil.updateGlobalConfigValue("unmanage.monitor.after.maintenance", unmanageMonitorAfterMaintenance);
/*       */         }
/*       */         else
/*       */         {
/* 14226 */           DBUtil.insertIntoGlobalConfig("unmanage.monitor.after.maintenance", unmanageMonitorAfterMaintenance);
/*       */         }
/*       */       }
/*       */       catch (Exception e)
/*       */       {
/* 14231 */         e.printStackTrace();
/*       */       }
/* 14233 */       DBUtil.updateGlobalConfigValue("availability.up.under.maintenance", availabilityUpUnderMaintenance);
/* 14234 */       DBUtil.updateGlobalConfigValue("health.clear.under.maintenance", healthClearUnderMaintenance);
/* 14235 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("globalsettings.config.success"));
/* 14236 */       saveMessages(request, messages);
/* 14237 */       return new ActionForward("/downTimeScheduler.do?method=maintenanceTaskListView&tabtoLoad=downtimeSchedulerSettingsDiv");
/*       */     }
/* 14239 */     if (settings.equalsIgnoreCase("Availablity"))
/*       */     {
/* 14241 */       String gatewayCheck = request.getParameter("gatewayCheckStatus");
/* 14242 */       String gateway = null;
/* 14243 */       if (gatewayCheck == null)
/*       */       {
/* 14245 */         gatewayCheck = "false";
/* 14246 */         gateway = FaultUtil.GATEWAY_NAME;
/*       */       }
/*       */       else
/*       */       {
/* 14250 */         gateway = request.getParameter("gatewayName");
/* 14251 */         updateQuery = "update AM_GLOBALCONFIG set VALUE ='" + gateway + "' where NAME='GATEWAY'";
/* 14252 */         stmt.addBatch(updateQuery);
/*       */       }
/* 14254 */       updateQuery = "update AM_GLOBALCONFIG set VALUE ='" + gatewayCheck + "' where NAME='GATEWAY_CHECK_ENABLED'";
/* 14255 */       stmt.addBatch(updateQuery);
/* 14256 */       FaultUtil.refreshGatewayCheckParameters(gatewayCheck, gateway);
/* 14257 */       if (FaultUtil.GATEWAY_CHECK_ENABLED)
/*       */       {
/* 14259 */         FaultUtil.updateAndProvideGatewayStatus(true);
/* 14260 */         if (FaultUtil.getCurrentGatewayStatus() == 1)
/*       */         {
/* 14262 */           errors.add("org.apache.struts.action.GLOBAL_ERROR", new ActionError("globalsettings.invalid.gateway"));
/* 14263 */           saveErrors(request, errors);
/*       */         }
/*       */       }
/*       */       
/* 14267 */       String availabilityUpUnderMaintenance = request.getParameter("availabilityUpUnderMaintenance");
/* 14268 */       if (availabilityUpUnderMaintenance == null)
/*       */       {
/* 14270 */         availabilityUpUnderMaintenance = "false";
/*       */       }
/* 14272 */       updateQuery = "update AM_GLOBALCONFIG set VALUE ='" + availabilityUpUnderMaintenance + "' where NAME='availability.up.under.maintenance'";
/* 14273 */       stmt.addBatch(updateQuery);
/*       */       
/* 14275 */       String healthClearUnderMaintenance = request.getParameter("healthClearUnderMaintenance");
/*       */       
/* 14277 */       if (healthClearUnderMaintenance == null)
/*       */       {
/* 14279 */         healthClearUnderMaintenance = "false";
/*       */       }
/*       */       
/* 14282 */       updateQuery = " update AM_GLOBALCONFIG set VALUE='" + healthClearUnderMaintenance + "' where NAME='health.clear.under.maintenance'";
/* 14283 */       stmt.addBatch(updateQuery);
/*       */       
/*       */ 
/* 14286 */       UrlCheck uck = new UrlCheck();
/* 14287 */       boolean toupdate = true;
/* 14288 */       gatewayurlstatus = amform.getGatewayUrlStatus();
/*       */       
/* 14290 */       String gatewayurlname = amform.getGatewayUrlName();
/* 14291 */       if ((gatewayurlstatus != null) && (gatewayurlstatus.equalsIgnoreCase("false")))
/*       */       {
/* 14293 */         gatewayurlstatus = "false";
/* 14294 */         gatewayurlname = "localhost";
/*       */ 
/*       */       }
/*       */       else
/*       */       {
/* 14299 */         isnet = UrlCheck.isURLReachable(gatewayurlname);
/*       */         
/* 14301 */         if (isnet)
/*       */         {
/* 14303 */           toupdate = true;
/* 14304 */           String selectquery = "SELECT VALUE FROM AM_GLOBALCONFIG WHERE NAME='URLGATEWAY'";
/* 14305 */           ResultSet rs = AMConnectionPool.executeQueryStmt(selectquery);
/* 14306 */           if (rs.next())
/*       */           {
/*       */ 
/* 14309 */             updateQuery = "update AM_GLOBALCONFIG set VALUE ='" + gatewayurlname + "' where NAME='URLGATEWAY'";
/* 14310 */             stmt.addBatch(updateQuery);
/* 14311 */             updateQuery = "update AM_GLOBALCONFIG set VALUE ='" + amform.getFromaddress() + "' where NAME='frommailforurlavailability'";
/* 14312 */             stmt.addBatch(updateQuery);
/* 14313 */             updateQuery = "update AM_GLOBALCONFIG set VALUE ='" + amform.getSendmail() + "' where NAME='sendmailforurlavailability'";
/* 14314 */             stmt.addBatch(updateQuery);
/*       */ 
/*       */           }
/*       */           else
/*       */           {
/*       */ 
/* 14320 */             updateQuery = "INSERT INTO AM_GLOBALCONFIG  VALUES('URLGATEWAY','" + gatewayurlname + "')";
/* 14321 */             stmt.addBatch(updateQuery);
/* 14322 */             updateQuery = "INSERT INTO AM_GLOBALCONFIG  VALUES('frommailforurlavailability','" + amform.getFromaddress() + "')";
/* 14323 */             stmt.addBatch(updateQuery);
/* 14324 */             updateQuery = "INSERT INTO AM_GLOBALCONFIG  VALUES('sendmailforurlavailability','" + amform.getSendmail() + "')";
/* 14325 */             stmt.addBatch(updateQuery);
/*       */           }
/*       */           
/*       */         }
/*       */         else
/*       */         {
/* 14331 */           toupdate = false;
/*       */         }
/*       */       }
/*       */       
/*       */ 
/* 14336 */       if (toupdate)
/*       */       {
/* 14338 */         updateQuery = "update AM_GLOBALCONFIG set VALUE ='" + gatewayurlstatus + "' where NAME='GATEWAYURL_CHECK_ENABLED'";
/* 14339 */         stmt.addBatch(updateQuery);
/*       */       }
/*       */       
/* 14342 */       String Mgtype = request.getParameter("rulefrom");
/* 14343 */       if (Mgtype == null)
/*       */       {
/* 14345 */         Mgtype = "false";
/*       */       }
/*       */       
/*       */ 
/*       */       try
/*       */       {
/* 14351 */         String Query = "select * from AM_GLOBALCONFIG where NAME='MGServiceAvailability'";
/* 14352 */         AMConnectionPool.getInstance();ResultSet rs = AMConnectionPool.executeQueryStmt(Query);
/* 14353 */         if (rs.next())
/*       */         {
/* 14355 */           updateQuery = "update AM_GLOBALCONFIG set VALUE ='" + Mgtype + "' where NAME='MGServiceAvailability'";
/* 14356 */           stmt.addBatch(updateQuery);
/* 14357 */           DBUtil.MonitorGroupCalculation = Mgtype;
/*       */ 
/*       */         }
/*       */         else
/*       */         {
/* 14362 */           String insertQuery1 = "insert into AM_GLOBALCONFIG (NAME, VALUE) values ('MGServiceAvailability','" + Mgtype + "')";
/* 14363 */           stmt.addBatch(insertQuery1);
/* 14364 */           DBUtil.MonitorGroupCalculation = Mgtype;
/*       */         }
/*       */       }
/*       */       catch (Exception exp3)
/*       */       {
/* 14369 */         exp3.printStackTrace();
/*       */       }
/*       */       
/*       */       try
/*       */       {
/* 14374 */         DataCollectionControllerUtil.changeAvailabilityUpUnderMaintenance(Boolean.valueOf(availabilityUpUnderMaintenance).booleanValue());
/* 14375 */         DataCollectionControllerUtil.changeHealthClearUnderMaintenance(Boolean.valueOf(healthClearUnderMaintenance).booleanValue());
/*       */       }
/*       */       catch (Exception e)
/*       */       {
/* 14379 */         DataCollectionControllerUtil.changeAvailabilityUpUnderMaintenance(false);
/* 14380 */         DataCollectionControllerUtil.changeHealthClearUnderMaintenance(false);
/* 14381 */         e.printStackTrace();
/*       */       }
/* 14383 */       FileOutputStream fos = null;
/*       */       try
/*       */       {
/* 14386 */         File f = new File(".." + File.separator + "conf" + File.separator + "AMServer.properties");
/* 14387 */         if (f != null)
/*       */         {
/* 14389 */           BufferedReader envreader = new BufferedReader(new java.io.FileReader(f));
/* 14390 */           StringBuffer buffer = new StringBuffer();
/* 14391 */           String line = null;
/* 14392 */           while ((line = envreader.readLine()) != null)
/*       */           {
/* 14394 */             if (line.indexOf("am.sockettest.timeout") != -1)
/*       */             {
/* 14396 */               line = "am.sockettest.timeout=" + amform.getTimeout();
/*       */             }
/* 14398 */             buffer.append(line + "\n");
/*       */           }
/* 14400 */           byte[] b = buffer.toString().getBytes();
/* 14401 */           fos = new FileOutputStream(f);
/* 14402 */           if (fos != null)
/*       */           {
/* 14404 */             fos.write(b);
/*       */           }
/* 14406 */           envreader.close();
/*       */         }
/* 14408 */         com.adventnet.appmanager.util.Constants.socketTimeOut = amform.getTimeout();
/*       */         
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */         try
/*       */         {
/* 14418 */           if (fos != null)
/*       */           {
/* 14420 */             fos.close();
/*       */           }
/*       */         }
/*       */         catch (Exception eb)
/*       */         {
/* 14425 */           eb.printStackTrace();
/*       */         }
/*       */         
/* 14428 */         addparams = "&typetoshow=Availablity";
/*       */       }
/*       */       catch (Exception e) {}finally
/*       */       {
/*       */         try
/*       */         {
/* 14418 */           if (fos != null)
/*       */           {
/* 14420 */             fos.close();
/*       */           }
/*       */         }
/*       */         catch (Exception eb)
/*       */         {
/* 14425 */           eb.printStackTrace();
/*       */         }
/*       */       }
/*       */     }
/*       */     
/*       */     try
/*       */     {
/* 14432 */       stmt.executeBatch();
/* 14433 */       stmt.clearBatch();
/* 14434 */       stmt.close();
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 14438 */       stmt = null;
/* 14439 */       error = false;
/* 14440 */       e.printStackTrace();
/*       */     }
/* 14442 */     Hashtable table = new Hashtable();
/* 14443 */     ResultSet rs = AMConnectionPool.executeQueryStmt("select * from AM_GLOBAL_DISABLECOLLECTION");
/* 14444 */     while (rs.next())
/*       */     {
/* 14446 */       String key = rs.getString(1) + "#" + rs.getString(2);
/* 14447 */       String value = rs.getString(3);
/* 14448 */       table.put(key, value);
/*       */     }
/* 14450 */     AMConnectionPool.closeStatement(rs);
/* 14451 */     EnterpriseUtil.setDisableTable(table);
/* 14452 */     if ((settings != null) && (settings.equalsIgnoreCase("unmanage")))
/*       */     {
/* 14454 */       DataCollectionControllerUtil.setUnmanaged_nodes(DataCollectionControllerUtil.getUnManagedNodes());
/* 14455 */       DataCollectionControllerUtil.setManaged_nodes(DataCollectionControllerUtil.getManagedNodes());
/*       */     }
/*       */     try
/*       */     {
/* 14459 */       UrlCheck.urlEnabledAndNameCheck();
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 14463 */       e.printStackTrace();
/*       */     }
/*       */     
/* 14466 */     if (error)
/*       */     {
/* 14468 */       if ((gatewayurlstatus != null) && (gatewayurlstatus.equalsIgnoreCase("true")) && (!isnet))
/*       */       {
/*       */ 
/* 14471 */         errors.add("org.apache.struts.action.GLOBAL_ERROR", new ActionError(UrlCheck.reason + "" + FormatUtil.getString("am.webclient.urlavailability.adminactionreason.text")));
/* 14472 */         saveErrors(request, errors);
/*       */ 
/*       */ 
/*       */       }
/* 14476 */       else if ((settings != null) && (settings.equalsIgnoreCase("gmapkey")))
/*       */       {
/* 14478 */         messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("globalsettings.googlekey.config.success"));
/*       */       }
/* 14480 */       else if ((settings != null) && (settings.equalsIgnoreCase("logging")))
/*       */       {
/* 14482 */         messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("globalsettings.logging.config.success"));
/*       */       }
/*       */       else
/*       */       {
/* 14486 */         messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("globalsettings.config.success"));
/*       */       }
/*       */       
/*       */ 
/* 14490 */       FaultUtil.refreshRCAEnabledStatus();
/* 14491 */       FaultUtil.refreshActionsEnabledStatus();
/* 14492 */       if ((criticalChanged) || (warningChanged) || (clearChanged))
/*       */       {
/* 14494 */         FaultUtil.refreshAllowedConsecutivePollsCount();
/*       */       }
/* 14496 */       FaultUtil.refreshAppendFullInfoToSMSStatus();
/* 14497 */       FaultUtil.refreshRepeatActionsStatus();
/* 14498 */       FaultUtil.refreshAdvancedUserStatus();
/* 14499 */       saveMessages(request, messages);
/*       */ 
/*       */     }
/*       */     else
/*       */     {
/* 14504 */       errors.add("org.apache.struts.action.GLOBAL_ERROR", new ActionError("globalsettings.config.failure"));
/* 14505 */       saveErrors(request, errors);
/*       */     }
/* 14507 */     return new ActionForward("/adminAction.do?method=showGlobalSettingsConfiguration" + addparams);
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   public void disableDiskIO(String resType)
/*       */   {
/* 14515 */     Statement deldiskio = null;
/*       */     try {
/* 14517 */       AMConnectionPool pool = AMConnectionPool.getInstance();
/* 14518 */       AMConnectionPool.getInstance();deldiskio = AMConnectionPool.getConnection().createStatement();
/*       */       
/* 14520 */       String moQuery = "select RESOURCEID from AM_ManagedObject where TYPE='" + resType + "'";
/* 14521 */       if (EnterpriseUtil.isAdminServer()) {
/* 14522 */         moQuery = moQuery + " AND AM_ManagedObject.RESOURCEID < " + EnterpriseUtil.RANGE;
/*       */       }
/* 14524 */       AMLog.debug("Disk IO stats Monitoring: Disable: query: " + moQuery);
/* 14525 */       ResultSet rs = AMConnectionPool.executeQueryStmt(moQuery);
/* 14526 */       StringBuffer resourceid = new StringBuffer();
/*       */       
/* 14528 */       while (rs.next())
/*       */       {
/* 14530 */         resourceid.append(rs.getString("RESOURCEID")).append(",");
/*       */       }
/*       */       
/* 14533 */       if (resourceid.length() < 1) {
/*       */         return;
/*       */       }
/*       */       
/*       */ 
/*       */ 
/* 14539 */       resourceid.append("-1");
/*       */       
/*       */ 
/* 14542 */       AMConnectionPool.closeStatement(rs);
/* 14543 */       String childidQuery = "select CHILDID from AM_PARENTCHILDMAPPER,AM_ManagedObject where RESOURCEID=CHILDID and TYPE='Disk IO stats' and PARENTID in (" + resourceid + ")";
/*       */       
/* 14545 */       ResultSet rs1 = AMConnectionPool.executeQueryStmt(childidQuery);
/*       */       
/*       */ 
/* 14548 */       while (rs1.next())
/*       */       {
/*       */ 
/* 14551 */         deldiskio.addBatch("delete from AM_ManagedObject where RESOURCEID=" + rs1.getString(1));
/* 14552 */         deldiskio.addBatch("delete from AM_PARENTCHILDMAPPER where CHILDID=" + rs1.getString(1));
/* 14553 */         deldiskio.addBatch("delete from HostDiskIODataCollected where RESOURCEID=" + rs1.getString(1));
/* 14554 */         deldiskio.addBatch("delete from AM_RCARULESMAPPER where RESOURCEID=" + rs1.getString(1));
/* 14555 */         deldiskio.addBatch("delete from AM_RCAMAPPER where PARENTRESOURCEID=" + rs1.getString(1) + " or CHILDRESOURCEID=" + rs1.getString(1));
/*       */       }
/*       */       
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/* 14562 */       deldiskio.executeBatch();
/* 14563 */       deldiskio.close();
/* 14564 */       AMConnectionPool.closeStatement(rs1); return;
/*       */     }
/*       */     catch (Exception ex) {
/* 14567 */       ex.printStackTrace();
/*       */ 
/*       */     }
/*       */     finally
/*       */     {
/*       */       try
/*       */       {
/* 14574 */         if (deldiskio != null) {
/* 14575 */           deldiskio.close();
/*       */         }
/*       */       }
/*       */       catch (Exception ee)
/*       */       {
/* 14580 */         ee.printStackTrace();
/*       */       }
/*       */     }
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   private HashMap disableWLSWebapp(HttpServletRequest request, Statement stmt)
/*       */   {
/* 14590 */     String disableWebapp = request.getParameter("wlswebapp");
/* 14591 */     String disableEjb = request.getParameter("wlsejb");
/* 14592 */     String disableServlet = request.getParameter("wlsservlet");
/* 14593 */     System.out.println("enable query=====" + disableEjb);
/* 14594 */     String enableWebappresids = "";String disableWebappresids = "";String enableEjbresids = "";String disableEjbresids = "";String enableServletresids = "";String disableServletresids = "";
/* 14595 */     HashMap<String, String> params = new HashMap();
/*       */     
/* 14597 */     if ((disableWebapp != null) && (disableWebapp.equals("disablewebapp")))
/*       */     {
/* 14599 */       params.put("wlswebapp", disableWebapp);
/* 14600 */       String batchquery = "";
/* 14601 */       String[] enableWebappid = request.getParameterValues("wlswebapp_enable");
/* 14602 */       String[] disableWebappid = request.getParameterValues("wlswebapp_disable");
/*       */       
/* 14604 */       System.out.println("enableWebappid==" + enableWebappid);
/* 14605 */       System.out.println("disableWebappid==" + disableWebappid);
/*       */       
/* 14607 */       if (enableWebappid != null)
/*       */       {
/* 14609 */         for (int i = 0; i < enableWebappid.length; i++)
/*       */         {
/* 14611 */           if (i == 0) {
/* 14612 */             enableWebappresids = enableWebappid[i];
/*       */           }
/*       */           else {
/* 14615 */             enableWebappresids = enableWebappresids + "," + enableWebappid[i];
/*       */           }
/* 14617 */           batchquery = "update AM_WLS_DISABLE_STATS set ENABLEWEBAPP=1 where RESOURCEID=" + enableWebappid[i];
/*       */           try
/*       */           {
/* 14620 */             stmt.addBatch(batchquery);
/*       */           } catch (Exception exc) {
/* 14622 */             exc.printStackTrace(); }
/* 14623 */           AMDataCollector.disablewebapplist.remove(enableWebappid[i]);
/* 14624 */           System.out.println("enable query=====" + batchquery);
/*       */         }
/*       */         
/* 14627 */         params.put("wlswebapp_enable", enableWebappresids);
/*       */       }
/*       */       
/* 14630 */       if (disableWebappid != null)
/*       */       {
/* 14632 */         for (int i = 0; i < disableWebappid.length; i++)
/*       */         {
/* 14634 */           if (i == 0) {
/* 14635 */             disableWebappresids = disableWebappid[i];
/*       */           }
/*       */           else {
/* 14638 */             disableWebappresids = disableWebappresids + "," + disableWebappid[i];
/*       */           }
/* 14640 */           batchquery = "update AM_WLS_DISABLE_STATS set ENABLEWEBAPP=0 where RESOURCEID=" + disableWebappid[i];
/*       */           try
/*       */           {
/* 14643 */             stmt.addBatch(batchquery);
/*       */           } catch (Exception exc) {
/* 14645 */             exc.printStackTrace(); }
/* 14646 */           if (!AMDataCollector.disablewebapplist.contains(disableWebappid[i]))
/* 14647 */             AMDataCollector.disablewebapplist.add(disableWebappid[i]);
/* 14648 */           System.out.println("disable query=====" + batchquery);
/*       */         }
/* 14650 */         params.put("wlswebapp_disable", disableWebappresids);
/*       */       }
/*       */     }
/*       */     
/* 14654 */     if ((disableEjb != null) && (disableEjb.equals("disableejb")))
/*       */     {
/* 14656 */       params.put("wlsejb", disableEjb);
/* 14657 */       String batchquery = "";
/* 14658 */       String[] enableEjbid = request.getParameterValues("wlsejb_enable");
/* 14659 */       String[] disableEjbid = request.getParameterValues("wlsejb_disable");
/*       */       
/* 14661 */       System.out.println("enableWebappid==" + enableEjbid);
/* 14662 */       System.out.println("disableWebappid==" + disableEjbid);
/*       */       
/* 14664 */       if (enableEjbid != null)
/*       */       {
/* 14666 */         for (int i = 0; i < enableEjbid.length; i++)
/*       */         {
/* 14668 */           if (i == 0) {
/* 14669 */             enableEjbresids = enableEjbid[i];
/*       */           }
/*       */           else {
/* 14672 */             enableEjbresids = enableEjbresids + "," + enableEjbid[i];
/*       */           }
/* 14674 */           batchquery = "update AM_WLS_DISABLE_STATS set ENABLEEJB=1 where RESOURCEID=" + enableEjbid[i];
/*       */           try
/*       */           {
/* 14677 */             stmt.addBatch(batchquery);
/*       */           } catch (Exception exc) {
/* 14679 */             exc.printStackTrace(); }
/* 14680 */           AMDataCollector.disableEjblist.remove(enableEjbid[i]);
/* 14681 */           System.out.println("enable query=====" + batchquery);
/*       */         }
/*       */         
/* 14684 */         params.put("wlsejb_enable", enableEjbresids);
/*       */       }
/*       */       
/* 14687 */       if (disableEjbid != null)
/*       */       {
/* 14689 */         for (int i = 0; i < disableEjbid.length; i++)
/*       */         {
/* 14691 */           if (i == 0) {
/* 14692 */             disableEjbresids = disableEjbid[i];
/*       */           }
/*       */           else {
/* 14695 */             disableEjbresids = disableEjbresids + "," + disableEjbid[i];
/*       */           }
/* 14697 */           batchquery = "update AM_WLS_DISABLE_STATS set ENABLEEJB=0 where RESOURCEID=" + disableEjbid[i];
/*       */           try
/*       */           {
/* 14700 */             stmt.addBatch(batchquery);
/*       */           } catch (Exception exc) {
/* 14702 */             exc.printStackTrace(); }
/* 14703 */           if (!AMDataCollector.disableEjblist.contains(disableEjbid[i]))
/* 14704 */             AMDataCollector.disableEjblist.add(disableEjbid[i]);
/* 14705 */           System.out.println("disable query=====" + batchquery);
/*       */         }
/* 14707 */         params.put("wlsejb_disable", disableEjbresids);
/*       */       }
/*       */     }
/*       */     
/*       */ 
/* 14712 */     if ((disableServlet != null) && (disableServlet.equals("disableservlet")))
/*       */     {
/* 14714 */       params.put("wlsservlet", disableServlet);
/* 14715 */       String batchquery = "";
/* 14716 */       String[] enableServletid = request.getParameterValues("wlsservlet_enable");
/* 14717 */       String[] disableServletid = request.getParameterValues("wlsservlet_disable");
/* 14718 */       System.out.println("enableWebappid==" + enableServletid);
/* 14719 */       System.out.println("disableWebappid==" + disableServletid);
/*       */       
/* 14721 */       if (enableServletid != null)
/*       */       {
/* 14723 */         for (int i = 0; i < enableServletid.length; i++)
/*       */         {
/* 14725 */           if (i == 0) {
/* 14726 */             enableServletresids = enableServletid[i];
/*       */           }
/*       */           else {
/* 14729 */             enableServletresids = enableServletresids + "," + enableServletid[i];
/*       */           }
/* 14731 */           batchquery = "update AM_WLS_DISABLE_STATS set ENABLESERVLET=1 where RESOURCEID=" + enableServletid[i];
/*       */           try
/*       */           {
/* 14734 */             stmt.addBatch(batchquery);
/*       */           } catch (Exception exc) {
/* 14736 */             exc.printStackTrace(); }
/* 14737 */           AMDataCollector.disableServletlist.remove(enableServletid[i]);
/* 14738 */           System.out.println("enable query=====" + batchquery);
/*       */         }
/*       */         
/* 14741 */         params.put("wlsservlet_enable", enableServletresids);
/*       */       }
/*       */       
/* 14744 */       if (disableServletid != null)
/*       */       {
/* 14746 */         for (int i = 0; i < disableServletid.length; i++)
/*       */         {
/* 14748 */           if (i == 0) {
/* 14749 */             disableServletresids = disableServletid[i];
/*       */           }
/*       */           else {
/* 14752 */             disableServletresids = disableServletresids + "," + disableServletid[i];
/*       */           }
/* 14754 */           batchquery = "update AM_WLS_DISABLE_STATS set ENABLESERVLET=0 where RESOURCEID=" + disableServletid[i];
/*       */           try
/*       */           {
/* 14757 */             stmt.addBatch(batchquery);
/*       */           } catch (Exception exc) {
/* 14759 */             exc.printStackTrace();
/*       */           }
/* 14761 */           if (!AMDataCollector.disableServletlist.contains(disableServletid[i]))
/* 14762 */             AMDataCollector.disableServletlist.add(disableServletid[i]);
/* 14763 */           System.out.println("disable query=====" + batchquery);
/*       */         }
/* 14765 */         params.put("wlsservlet_enable", disableServletresids);
/*       */       }
/*       */     }
/* 14768 */     if (!params.isEmpty()) {
/* 14769 */       params.put("tabname", "showWeblogicTab");
/*       */     }
/* 14771 */     return params;
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward showAMServerStatus(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 14783 */     ActionMessages messages = new ActionMessages();
/* 14784 */     ActionMessages messages1 = new ActionMessages();
/* 14785 */     ActionErrors errors = new ActionErrors();
/* 14786 */     ArrayList buildinfo = new ArrayList();
/* 14787 */     String addmsg = request.getParameter("message");
/* 14788 */     if (addmsg != null)
/*       */     {
/* 14790 */       if (addmsg.equals("true"))
/*       */       {
/* 14792 */         messages1.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("license.migration.evaluation.success"));
/* 14793 */         messages1.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("license.migration.evaluation.features"));
/* 14794 */         messages1.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("license.migration.evaluation.duration"));
/*       */       }
/* 14796 */       else if (addmsg.equals("false"))
/*       */       {
/* 14798 */         String m3 = FormatUtil.getString("license.migration.evaluation.failed", new String[] { LUtil.getErrorCode(), OEMUtil.getOEMString("product.talkback.mailid") });
/* 14799 */         messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage(m3));
/*       */       }
/* 14801 */       saveMessages(request, messages1);
/*       */     }
/* 14803 */     buildinfo.add(OEMUtil.getOEMString("product.name"));
/* 14804 */     buildinfo.add(NmsUtil.GetString("Version x.x"));
/* 14805 */     buildinfo.add(NmsUtil.GetString("product.build.date"));
/* 14806 */     buildinfo.add(OEMUtil.getOEMString("company.name") + ". (" + OEMUtil.getOEMString("company.website") + ")");
/* 14807 */     buildinfo.add(NmsUtil.GetString("product.build.number"));
/* 14808 */     request.setAttribute("buildinfo", buildinfo);
/* 14809 */     ArrayList serverdetails = new ArrayList();
/* 14810 */     File f = null;
/* 14811 */     if ((System.getProperty("os.name").startsWith("Windows")) || (System.getProperty("os.name").startsWith("windows")))
/*       */     {
/* 14813 */       f = new File(PureUtils.rootDir + "\\setEnv.bat");
/* 14814 */       serverdetails.add(new File(NmsUtil.getAIM_ROOT()).getAbsoluteFile().getParentFile().getAbsolutePath());
/*       */     }
/*       */     else
/*       */     {
/* 14818 */       f = new File(PureUtils.rootDir + "/setEnv.sh");
/* 14819 */       serverdetails.add(new File(NmsUtil.getAIM_ROOT()).getAbsoluteFile().getParentFile().getAbsolutePath());
/*       */     }
/* 14821 */     serverdetails.add(new Long(AMServerFramework.serverStartupTime));
/* 14822 */     serverdetails.add(System.getProperty("webserver.port"));
/* 14823 */     serverdetails.add(System.getProperty("java.runtime.version"));
/* 14824 */     serverdetails.add(new Long(com.adventnet.appmanager.webclient.util.NmsHttpSessionAttributeListener.getNoOfUsers()).toString());
/* 14825 */     String serverEdition = FormatUtil.getString("am.webclient.edition.professional.type");
/* 14826 */     if ((EnterpriseUtil.isManagedServer) || (EnterpriseUtil.isAdminServer)) {
/* 14827 */       serverEdition = FormatUtil.getString("am.webclient.newfeatures.login.Feature1.text");
/* 14828 */     } else if (EnterpriseUtil.isCloudEdition()) {
/* 14829 */       serverEdition = FormatUtil.getString("am.webclient.edition.cloud.type");
/* 14830 */     } else if ("F".equalsIgnoreCase(FreeEditionDetails.getFreeEditionDetails().getUserType())) {
/* 14831 */       serverEdition = FormatUtil.getString("am.webclient.licensetype.freeedition");
/*       */     }
/* 14833 */     serverdetails.add(serverEdition);
/* 14834 */     request.setAttribute("serverdetails", serverdetails);
/* 14835 */     ArrayList sysinfo = new ArrayList();
/*       */     try
/*       */     {
/* 14838 */       InetAddress add = InetAddress.getLocalHost();
/* 14839 */       sysinfo.add(add.getHostName());
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 14843 */       e.printStackTrace();
/*       */     }
/* 14845 */     sysinfo.add(System.getProperty("os.name"));
/* 14846 */     sysinfo.add(System.getProperty("os.version"));
/* 14847 */     sysinfo.add(System.getProperty("os.arch"));
/* 14848 */     sysinfo.add(new Long(System.currentTimeMillis()));
/* 14849 */     request.setAttribute("sysinfo", sysinfo);
/* 14850 */     ArrayList heapinfo = new ArrayList();
/* 14851 */     Runtime heap = Runtime.getRuntime();
/* 14852 */     long total = heap.totalMemory();
/* 14853 */     total /= 1048576L;
/* 14854 */     long free = heap.freeMemory();
/* 14855 */     free /= 1048576L;
/* 14856 */     long used = total - free;
/* 14857 */     heapinfo.add(new Long(total).toString());
/* 14858 */     heapinfo.add(new Long(used).toString());
/* 14859 */     heapinfo.add(new Long(free).toString());
/* 14860 */     request.setAttribute("heapinfo", heapinfo);
/*       */     
/* 14862 */     Wield w = Wield.getInstance();
/*       */     
/* 14864 */     Properties props = w.getModuleProperties("Free");
/* 14865 */     String usertype = w.getUserType();
/*       */     
/*       */ 
/* 14868 */     Hashtable licensetype = new Hashtable(4);
/*       */     
/*       */ 
/* 14871 */     licensetype.put("R", "Registered");
/* 14872 */     licensetype.put("T", "Evaluation");
/* 14873 */     licensetype.put("RT", "Runtime");
/* 14874 */     licensetype.put("F", "Free Edition");
/* 14875 */     request.setAttribute("licensetypes", licensetype);
/* 14876 */     Properties licenseprops = new Properties();
/* 14877 */     licenseprops.put("userType", w.getUserType());
/* 14878 */     licenseprops.put("evaluationDays", String.valueOf(w.getEvaluationDays()));
/*       */     
/* 14880 */     String evaluationExpiryDate = w.getEvaluationExpiryDate();
/* 14881 */     StringTokenizer st = new StringTokenizer(evaluationExpiryDate);
/* 14882 */     if (st.countTokens() == 3)
/*       */     {
/* 14884 */       String year = st.nextToken();
/* 14885 */       String month = st.nextToken();
/* 14886 */       String day = st.nextToken();
/* 14887 */       String[] Months = { " ", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" };
/*       */       try
/*       */       {
/* 14890 */         month = Months[Integer.parseInt(month)];
/*       */       }
/*       */       catch (Exception exp)
/*       */       {
/* 14894 */         exp.printStackTrace();
/*       */       }
/* 14896 */       evaluationExpiryDate = month + " " + day + ", " + year;
/*       */     }
/* 14898 */     licenseprops.put("evaluationExpiryDate", evaluationExpiryDate);
/* 14899 */     licenseprops.put("userName", w.getUserName());
/* 14900 */     licenseprops.put("companyName", w.getCompanyName());
/*       */     
/* 14902 */     Properties info = ClientDBUtil.getLicenseInfo();
/* 14903 */     licenseprops.put("numberofclients", info.getProperty("numberofclients"));
/* 14904 */     licenseprops.put("nodes", info.getProperty("nodes"));
/* 14905 */     request.setAttribute("licenseinfo", licenseprops);
/*       */     
/*       */ 
/*       */ 
/*       */ 
/* 14910 */     String resID = "-1";
/*       */     try
/*       */     {
/* 14913 */       resID = DataCollectionDBUtil.getGlobalConfigValue("am.diagnostics.mysql");
/* 14914 */       if ((resID == null) || (resID.equals("")))
/*       */       {
/* 14916 */         resID = "-1";
/*       */       }
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 14921 */       e.printStackTrace();
/*       */     }
/*       */     
/*       */ 
/* 14925 */     String mssqlResID = "-1";
/*       */     
/*       */     try
/*       */     {
/* 14929 */       mssqlResID = DataCollectionDBUtil.getGlobalConfigValue("am.diagnostics.mssql");
/* 14930 */       if ((mssqlResID == null) || (mssqlResID.equals("")))
/*       */       {
/* 14932 */         mssqlResID = "-1";
/*       */       }
/*       */     }
/*       */     catch (Exception ex) {
/* 14936 */       ex.printStackTrace();
/*       */     }
/*       */     
/* 14939 */     request.setAttribute("showinline", "productinformation");
/*       */     
/* 14941 */     Map amMySQLMap = DataCollectionDBUtil.getAMMySQLDetails(resID);
/* 14942 */     request.setAttribute("ammysqlmap", amMySQLMap);
/* 14943 */     request.setAttribute("am.mysql.resourceid", resID);
/* 14944 */     request.setAttribute("am.mssql.resourceid", mssqlResID);
/*       */     
/* 14946 */     if ((!resID.equals("-1")) || (!mssqlResID.equals("-1"))) {
/* 14947 */       ResultSet rs = null;
/*       */       try {
/* 14949 */         String portQuery = "select APPLNDISCPORT as Port,VERSION as Version from CollectData, AM_MSSQLDETAILS, AM_ManagedObject where AM_ManagedObject.RESOURCEID=AM_MSSQLDETAILS.RESOURCEID and AM_ManagedObject.RESOURCENAME=CollectData.RESOURCENAME and AM_MSSQLDETAILS.RESOURCEID=" + mssqlResID;
/* 14950 */         if (!resID.equals("-1")) {
/* 14951 */           portQuery = "select " + com.adventnet.appmanager.server.framework.AMAutomaticPortChanger.getDBPort() + " as Port,CONFVALUE as Version from AM_MYSQL_CONFIGURATION_INFO where ATTRIBUTEID=5258 and RESOURCEID=" + resID;
/*       */         }
/* 14953 */         rs = AMConnectionPool.executeQueryStmt(portQuery);
/* 14954 */         if (rs.next()) {
/* 14955 */           request.setAttribute("databasePort", rs.getString("Port"));
/* 14956 */           request.setAttribute("databaseVersion", rs.getString("Version"));
/*       */         }
/*       */       } catch (Exception ex) {
/* 14959 */         ex.printStackTrace();
/*       */       } finally {
/* 14961 */         AMConnectionPool.closeStatement(rs);
/*       */       }
/*       */     }
/*       */     
/*       */ 
/* 14966 */     String hostResID = DataCollectionDBUtil.getGlobalConfigValue("am.diagnostics.localhost");
/* 14967 */     if ((hostResID == null) || (hostResID.equals("")))
/*       */     {
/* 14969 */       hostResID = "-1";
/*       */     }
/*       */     
/* 14972 */     String hostName = "";
/* 14973 */     String hostType = "";
/* 14974 */     String hostDisplayName = "";
/* 14975 */     AMConnectionPool cp = AMConnectionPool.getInstance();
/*       */     try
/*       */     {
/* 14978 */       ResultSet modetails = AMConnectionPool.executeQueryStmt("select * from AM_ManagedObject where RESOURCEID=" + hostResID + "");
/* 14979 */       if (modetails.next())
/*       */       {
/* 14981 */         hostName = modetails.getString("RESOURCENAME");
/* 14982 */         hostDisplayName = modetails.getString("DISPLAYNAME");
/* 14983 */         hostType = modetails.getString("TYPE");
/*       */       }
/* 14985 */       if (modetails != null) {
/* 14986 */         AMConnectionPool.closeStatement(modetails);
/*       */       }
/*       */     }
/*       */     catch (Exception e) {
/* 14990 */       e.printStackTrace();
/*       */     }
/*       */     
/* 14993 */     request.setAttribute("hostresourceid", hostResID);
/* 14994 */     request.setAttribute("hostresourcename", hostName);
/* 14995 */     request.setAttribute("hostdisplayname", hostDisplayName);
/* 14996 */     request.setAttribute("hosttype", hostType);
/*       */     
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/* 15011 */     if (request.getParameter("addMessage") != null)
/*       */     {
/* 15013 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("am.managedserver.typechange.success"));
/* 15014 */       saveMessages(request, messages);
/*       */     }
/*       */     
/* 15017 */     return new ActionForward("/jsp/AMServerStatus.jsp");
/*       */   }
/*       */   
/*       */ 
/*       */   public ActionForward showSQLServerStatus(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 15024 */     ActionMessages messages = new ActionMessages();
/* 15025 */     ActionMessages messages1 = new ActionMessages();
/* 15026 */     ActionErrors errors = new ActionErrors();
/* 15027 */     ArrayList buildinfo = new ArrayList();
/* 15028 */     String addmsg = request.getParameter("message");
/* 15029 */     if (addmsg != null)
/*       */     {
/* 15031 */       if (addmsg.equals("true"))
/*       */       {
/* 15033 */         messages1.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("license.migration.evaluation.success"));
/* 15034 */         messages1.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("license.migration.evaluation.features"));
/* 15035 */         messages1.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("license.migration.evaluation.duration"));
/*       */       }
/* 15037 */       else if (addmsg.equals("false"))
/*       */       {
/* 15039 */         String m3 = FormatUtil.getString("license.migration.evaluation.failed", new String[] { LUtil.getErrorCode(), OEMUtil.getOEMString("product.talkback.mailid") });
/* 15040 */         messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage(m3));
/*       */       }
/* 15042 */       saveMessages(request, messages1);
/*       */     }
/* 15044 */     buildinfo.add(OEMUtil.getOEMString("product.name"));
/* 15045 */     buildinfo.add(NmsUtil.GetString("Version x.x"));
/* 15046 */     buildinfo.add(NmsUtil.GetString("product.build.date"));
/* 15047 */     buildinfo.add(OEMUtil.getOEMString("company.name") + ". (" + OEMUtil.getOEMString("company.website") + ")");
/* 15048 */     buildinfo.add(NmsUtil.GetString("product.build.number"));
/* 15049 */     request.setAttribute("buildinfo", buildinfo);
/* 15050 */     ArrayList serverdetails = new ArrayList();
/* 15051 */     File f = null;
/* 15052 */     if ((System.getProperty("os.name").startsWith("Windows")) || (System.getProperty("os.name").startsWith("windows")))
/*       */     {
/* 15054 */       f = new File(PureUtils.rootDir + "\\setEnv.bat");
/* 15055 */       serverdetails.add(new File(NmsUtil.getAIM_ROOT()).getAbsoluteFile().getParentFile().getAbsolutePath());
/*       */     }
/*       */     else
/*       */     {
/* 15059 */       f = new File(PureUtils.rootDir + "/setEnv.sh");
/* 15060 */       serverdetails.add(new File(NmsUtil.getAIM_ROOT()).getAbsoluteFile().getParentFile().getAbsolutePath());
/*       */     }
/* 15062 */     serverdetails.add(new Long(AMServerFramework.serverStartupTime));
/* 15063 */     serverdetails.add(System.getProperty("webserver.port"));
/* 15064 */     serverdetails.add(System.getProperty("java.runtime.version"));
/* 15065 */     serverdetails.add(new Long(com.adventnet.appmanager.webclient.util.NmsHttpSessionAttributeListener.getNoOfUsers()).toString());
/* 15066 */     request.setAttribute("serverdetails", serverdetails);
/* 15067 */     ArrayList sysinfo = new ArrayList();
/*       */     try
/*       */     {
/* 15070 */       InetAddress add = InetAddress.getLocalHost();
/* 15071 */       sysinfo.add(add.getHostName());
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 15075 */       e.printStackTrace();
/*       */     }
/* 15077 */     sysinfo.add(System.getProperty("os.name"));
/* 15078 */     sysinfo.add(System.getProperty("os.version"));
/* 15079 */     sysinfo.add(System.getProperty("os.arch"));
/* 15080 */     sysinfo.add(new Long(System.currentTimeMillis()));
/* 15081 */     request.setAttribute("sysinfo", sysinfo);
/* 15082 */     ArrayList heapinfo = new ArrayList();
/* 15083 */     Runtime heap = Runtime.getRuntime();
/* 15084 */     long total = heap.totalMemory();
/* 15085 */     total /= 1048576L;
/* 15086 */     long free = heap.freeMemory();
/* 15087 */     free /= 1048576L;
/* 15088 */     long used = total - free;
/* 15089 */     heapinfo.add(new Long(total).toString());
/* 15090 */     heapinfo.add(new Long(used).toString());
/* 15091 */     heapinfo.add(new Long(free).toString());
/* 15092 */     request.setAttribute("heapinfo", heapinfo);
/*       */     
/* 15094 */     Wield w = Wield.getInstance();
/*       */     
/* 15096 */     Properties props = w.getModuleProperties("Free");
/* 15097 */     String usertype = w.getUserType();
/*       */     
/*       */ 
/* 15100 */     Hashtable licensetype = new Hashtable(4);
/*       */     
/*       */ 
/* 15103 */     licensetype.put("R", "Registered");
/* 15104 */     licensetype.put("T", "Evaluation");
/* 15105 */     licensetype.put("RT", "Runtime");
/* 15106 */     licensetype.put("F", "Free Edition");
/* 15107 */     request.setAttribute("licensetypes", licensetype);
/* 15108 */     Properties licenseprops = new Properties();
/* 15109 */     licenseprops.put("userType", w.getUserType());
/* 15110 */     licenseprops.put("evaluationDays", String.valueOf(w.getEvaluationDays()));
/*       */     
/* 15112 */     String evaluationExpiryDate = w.getEvaluationExpiryDate();
/* 15113 */     StringTokenizer st = new StringTokenizer(evaluationExpiryDate);
/* 15114 */     if (st.countTokens() == 3)
/*       */     {
/* 15116 */       String year = st.nextToken();
/* 15117 */       String month = st.nextToken();
/* 15118 */       String day = st.nextToken();
/* 15119 */       String[] Months = { " ", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" };
/*       */       try
/*       */       {
/* 15122 */         month = Months[Integer.parseInt(month)];
/*       */       }
/*       */       catch (Exception exp)
/*       */       {
/* 15126 */         exp.printStackTrace();
/*       */       }
/* 15128 */       evaluationExpiryDate = month + " " + day + ", " + year;
/*       */     }
/* 15130 */     licenseprops.put("evaluationExpiryDate", evaluationExpiryDate);
/* 15131 */     licenseprops.put("userName", w.getUserName());
/* 15132 */     licenseprops.put("companyName", w.getCompanyName());
/*       */     
/* 15134 */     Properties info = ClientDBUtil.getLicenseInfo();
/* 15135 */     licenseprops.put("numberofclients", info.getProperty("numberofclients"));
/* 15136 */     licenseprops.put("nodes", info.getProperty("nodes"));
/* 15137 */     request.setAttribute("licenseinfo", licenseprops);
/* 15138 */     request.setAttribute("showinline", "productinformation");
/*       */     
/* 15140 */     String mssqlResID = "-1";
/*       */     try
/*       */     {
/* 15143 */       mssqlResID = DataCollectionDBUtil.getGlobalConfigValue("am.diagnostics.mssql");
/*       */     }
/*       */     catch (Exception ex)
/*       */     {
/* 15147 */       ex.printStackTrace();
/*       */     }
/*       */     
/* 15150 */     ResultSet rs = null;
/*       */     try
/*       */     {
/* 15153 */       rs = AMConnectionPool.executeQueryStmt("select APPLNDISCPORT,VERSION from CollectData, AM_MSSQLDETAILS, AM_ManagedObject where AM_ManagedObject.RESOURCEID=AM_MSSQLDETAILS.RESOURCEID and AM_ManagedObject.RESOURCENAME=CollectData.RESOURCENAME and AM_MSSQLDETAILS.RESOURCEID=" + mssqlResID);
/* 15154 */       if (rs.next())
/*       */       {
/* 15156 */         request.setAttribute("mssqlversion", rs.getString("VERSION"));
/* 15157 */         request.setAttribute("mssqlport", rs.getString("APPLNDISCPORT"));
/*       */       }
/*       */     }
/*       */     catch (Exception ex)
/*       */     {
/* 15162 */       ex.printStackTrace();
/*       */     }
/*       */     finally
/*       */     {
/* 15166 */       AMConnectionPool.closeStatement(rs);
/*       */     }
/*       */     
/* 15169 */     if (request.getParameter("addMessage") != null)
/*       */     {
/* 15171 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("am.managedserver.typechange.success"));
/* 15172 */       saveMessages(request, messages);
/*       */     }
/* 15174 */     return new ActionForward("/jsp/mssql/SQLServerStatus.jsp");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward createThresholdFromPopup(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 15318 */     ActionMessages messages = new ActionMessages();
/* 15319 */     String resourceid = request.getParameter("resourceid");
/* 15320 */     String attributeID = request.getParameter("attributeid");
/* 15321 */     String exist = request.getParameter("exist");
/* 15322 */     String admin = "";
/* 15323 */     if (request.getParameter("admin") != null)
/*       */     {
/* 15325 */       admin = "true";
/*       */     }
/* 15327 */     String displayname = request.getParameter("displayname");
/* 15328 */     if (DBQueryUtil.getDBType().equals("mssql"))
/*       */     {
/* 15330 */       displayname = displayname.replaceAll("'", "''");
/*       */     }
/*       */     else
/*       */     {
/* 15334 */       displayname = displayname.replaceAll("'", "\\\\'");
/*       */     }
/* 15336 */     String checkquery = "select * from AM_THRESHOLDCONFIG where NAME='" + displayname + "'";
/* 15337 */     ArrayList list = this.mo.getRows(checkquery);
/* 15338 */     if (list.size() == 0)
/*       */     {
/*       */ 
/* 15341 */       insertThreshold(request, false, true);
/*       */       
/* 15343 */       String thresholdID = updateThresholdProfileinCache();
/* 15344 */       if (!thresholdID.equals(""))
/*       */       {
/* 15346 */         if ((exist != null) && (!exist.equals("null")))
/*       */         {
/* 15348 */           String associateQuery = "update AM_ATTRIBUTETHRESHOLDMAPPER set THRESHOLDCONFIGURATIONID=" + thresholdID + " where ID='" + resourceid + "' and ATTRIBUTE='" + attributeID + "'";
/* 15349 */           AMConnectionPool.executeUpdateStmt(associateQuery);
/*       */         }
/*       */         else
/*       */         {
/* 15353 */           String associateQuery = "insert into AM_ATTRIBUTETHRESHOLDMAPPER (ID, ATTRIBUTE, THRESHOLDCONFIGURATIONID) values (" + resourceid + "," + attributeID + "," + thresholdID + ")";
/* 15354 */           com.adventnet.appmanager.util.Constants.addThresholdEntry(attributeID, resourceid);
/* 15355 */           AMConnectionPool.executeUpdateStmt(associateQuery);
/* 15356 */           DelegatedUserRoleUtil.addEntryToConfigUserTable(request, Integer.parseInt(thresholdID), 1);
/*       */         }
/*       */       }
/* 15359 */       AMCacheHandler.setThresholdconfiguration(resourceid, attributeID, thresholdID);
/* 15360 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("thresholdprofile.create.success"));
/* 15361 */       saveMessages(request, messages);
/* 15362 */       if (getWizString(request).equals("?wiz=true"))
/*       */       {
/* 15364 */         if (admin.equals("true"))
/*       */         {
/* 15366 */           return new ActionForward("/jsp/ThresholdCreationForwarder.jsp" + getWizString(request) + "&admin=true");
/*       */         }
/*       */         
/*       */ 
/* 15370 */         return new ActionForward("/jsp/ThresholdCreationForwarder.jsp" + getWizString(request));
/*       */       }
/*       */       
/*       */ 
/*       */ 
/* 15375 */       if (admin.equals("true"))
/*       */       {
/* 15377 */         return new ActionForward("/jsp/ThresholdCreationForwarder.jsp?admin=true");
/*       */       }
/*       */       
/*       */ 
/* 15381 */       return new ActionForward("/jsp/ThresholdCreationForwarder.jsp");
/*       */     }
/*       */     
/*       */ 
/*       */ 
/*       */ 
/* 15387 */     messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("thresholdprofile.create.alreadyexists", request.getParameter("displayname")));
/* 15388 */     saveMessages(request, messages);
/* 15389 */     return new ActionForward("/adminAction.do?method=showNewThresholdCreationPopup&admin=<%=admin%>");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward showNewThresholdCreationPopup(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 15399 */     return new ActionForward("/jsp/Popup_NewThreshold.jsp");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward createPatternFromPopup(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 15408 */     ActionMessages messages = new ActionMessages();
/* 15409 */     String resourceid = request.getParameter("resourceid");
/* 15410 */     String attributeID = request.getParameter("attributeid");
/* 15411 */     String exist = request.getParameter("exist");
/* 15412 */     String admin = "";
/* 15413 */     if (request.getParameter("admin") != null)
/*       */     {
/* 15415 */       admin = "true";
/*       */     }
/* 15417 */     String displayname = request.getParameter("displayname");
/* 15418 */     if (DBQueryUtil.getDBType().equals("mssql"))
/*       */     {
/* 15420 */       displayname = displayname.replaceAll("'", "''");
/*       */     }
/*       */     else
/*       */     {
/* 15424 */       displayname = displayname.replaceAll("'", "\\\\'");
/*       */     }
/* 15426 */     String checkquery = "select * from AM_THRESHOLDCONFIG where NAME='" + displayname + "'";
/* 15427 */     ArrayList list = this.mo.getRows(checkquery);
/* 15428 */     if (list.size() == 0)
/*       */     {
/* 15430 */       insertThreshold(request, true, true);
/* 15431 */       String thresholdID = updateThresholdProfileinCache();
/*       */       
/* 15433 */       if (!thresholdID.equals("-1"))
/*       */       {
/*       */         try
/*       */         {
/* 15437 */           PreparedStatement ps = AMConnectionPool.getConnection().prepareStatement("insert into AM_PATTERNMATCHERCONFIG(ID, CRITICALTHRESHOLDVALUE,WARNINGTHRESHOLDVALUE,INFOTHRESHOLDVALUE) values (?,?,?,?)");
/* 15438 */           ps.setInt(1, Integer.parseInt(thresholdID));
/* 15439 */           ps.setString(2, request.getParameter("criticalthresholdvalue"));
/* 15440 */           ps.setString(3, request.getParameter("warningthresholdvalue"));
/* 15441 */           ps.setString(4, request.getParameter("infothresholdvalue"));
/* 15442 */           ps.executeUpdate();
/*       */         }
/*       */         catch (Exception ex) {
/* 15445 */           ex.printStackTrace();
/*       */         }
/*       */         
/* 15448 */         if ((exist != null) && (!exist.equals("null")))
/*       */         {
/* 15450 */           String associateQuery = "update AM_ATTRIBUTETHRESHOLDMAPPER set THRESHOLDCONFIGURATIONID=" + thresholdID + " where ID='" + resourceid + "' and ATTRIBUTE='" + attributeID + "'";
/* 15451 */           AMConnectionPool.executeUpdateStmt(associateQuery);
/*       */         }
/*       */         else
/*       */         {
/* 15455 */           String associateQuery = "insert into AM_ATTRIBUTETHRESHOLDMAPPER (ID, ATTRIBUTE, THRESHOLDCONFIGURATIONID) values (" + resourceid + "," + attributeID + "," + thresholdID + ")";
/* 15456 */           com.adventnet.appmanager.util.Constants.addThresholdEntry(attributeID, resourceid);
/* 15457 */           AMConnectionPool.executeUpdateStmt(associateQuery);
/* 15458 */           DelegatedUserRoleUtil.addEntryToConfigUserTable(request, Integer.parseInt(thresholdID), 1);
/*       */         }
/* 15460 */         AMCacheHandler.setThresholdconfiguration(resourceid, attributeID, thresholdID);
/*       */       }
/* 15462 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("patternprofile.create.success"));
/* 15463 */       saveMessages(request, messages);
/* 15464 */       if (getWizString(request).equals("?wiz=true"))
/*       */       {
/* 15466 */         if (admin.equals("true"))
/*       */         {
/* 15468 */           return new ActionForward("/jsp/ThresholdCreationForwarder.jsp" + getWizString(request) + "&admin=true");
/*       */         }
/*       */         
/*       */ 
/* 15472 */         return new ActionForward("/jsp/ThresholdCreationForwarder.jsp" + getWizString(request));
/*       */       }
/*       */       
/*       */ 
/*       */ 
/* 15477 */       if (admin.equals("true"))
/*       */       {
/* 15479 */         return new ActionForward("/jsp/ThresholdCreationForwarder.jsp?admin=true");
/*       */       }
/*       */       
/*       */ 
/* 15483 */       return new ActionForward("/jsp/ThresholdCreationForwarder.jsp");
/*       */     }
/*       */     
/*       */ 
/*       */ 
/*       */ 
/* 15489 */     messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("patternprofile.create.alreadyexists", request.getParameter("displayname")));
/* 15490 */     saveMessages(request, messages);
/* 15491 */     return new ActionForward("/adminAction.do?method=showNewPatternCreationPopup&admin=<%=admin%>");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward showNewPatternCreationPopup(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 15501 */     return new ActionForward("/jsp/Popup_NewPattern.jsp");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward showNewActionsCreationPopup(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 15510 */     return new ActionForward("/jsp/Popup_NewActions.jsp");
/*       */   }
/*       */   
/*       */   public void associateActions(HttpServletRequest request) throws Exception
/*       */   {
/* 15515 */     String resourceid = request.getParameter("resourceid");
/* 15516 */     String attributeid = request.getParameter("attributeid");
/* 15517 */     String severity = request.getParameter("severity");
/* 15518 */     String actionID = "";
/* 15519 */     AMConnectionPool cp = AMConnectionPool.getInstance();
/* 15520 */     ResultSet rs = AMConnectionPool.executeQueryStmt("select MAX(ID) from AM_ACTIONPROFILE");
/* 15521 */     if (rs.next())
/*       */     {
/* 15523 */       actionID = "" + rs.getInt(1);
/*       */     }
/* 15525 */     AMConnectionPool.closeStatement(rs);
/* 15526 */     if (!actionID.equals(""))
/*       */     {
/* 15528 */       String query = "insert into AM_ATTRIBUTEACTIONMAPPER (ID, ATTRIBUTE, SEVERITY, ACTIONID) values (" + resourceid + ",'" + attributeid + "'," + severity + "," + actionID + ")";
/* 15529 */       AMConnectionPool.executeUpdateStmt(query);
/*       */     }
/*       */   }
/*       */   
/*       */   private String getWizString(HttpServletRequest request)
/*       */   {
/* 15535 */     String wiz = request.getParameter("wiz");
/* 15536 */     if (wiz != null)
/*       */     {
/* 15538 */       wiz = "?wiz=true";
/*       */     }
/*       */     else
/*       */     {
/* 15542 */       wiz = "";
/*       */     }
/* 15544 */     return wiz;
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward updateLicense(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 15554 */     System.out.println("LICENSE CHANGE TO EVALUATION");
/* 15555 */     ActionMessages messages = new ActionMessages();
/* 15556 */     CMDClass cmd = new CMDClass();
/* 15557 */     String user = (String)cmd.getUserList("." + File.separator + "classes" + File.separator + "AdventNetLicense.xml").elementAt(0);
/*       */     
/*       */ 
/*       */ 
/*       */ 
/* 15562 */     LUtil.setISMP(true);
/* 15563 */     System.setProperty("IsWeb", "true");
/*       */     
/* 15565 */     Wield w = Wield.getInstance();
/* 15566 */     Validation valid = Validation.getInstance();
/* 15567 */     System.setProperty("IsWeb", "true");
/*       */     
/* 15569 */     boolean success = valid.doValidation(".", user, "." + File.separator + "classes" + File.separator + "Evaluation.xml", false, false);
/*       */     
/* 15571 */     String addmsg = null;
/* 15572 */     if (success)
/*       */     {
/* 15574 */       valid.copyLicenseFile(".", "." + File.separator + "classes" + File.separator + "Evaluation.xml");
/* 15575 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("license.migration.evaluation.success"));
/* 15576 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("license.migration.evaluation.features"));
/* 15577 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("license.migration.evaluation.duration"));
/* 15578 */       addmsg = "true";
/*       */       
/* 15580 */       File evaluationLicenseFile = new File("." + File.separator + "classes" + File.separator + "Evaluation.xml");
/* 15581 */       if ((evaluationLicenseFile != null) && (evaluationLicenseFile.exists()))
/*       */       {
/* 15583 */         evaluationLicenseFile.delete();
/*       */       }
/*       */     }
/*       */     else
/*       */     {
/* 15588 */       AMLog.fatal("License migration failure error code " + LUtil.getErrorCode());
/* 15589 */       AMLog.fatal("License migration failure error message " + LUtil.getErrorMessage());
/* 15590 */       AMLog.fatal("License migration failure detailed error message " + LUtil.getDetailedErrorMessage());
/* 15591 */       addmsg = "false";
/* 15592 */       String m1 = FormatUtil.getString("license.migration.evaluation.failed", new String[] { LUtil.getErrorCode(), OEMUtil.getOEMString("product.talkback.mailid") });
/* 15593 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage(m1));
/*       */     }
/* 15595 */     this.mo.executeUpdateStmt("update AM_GLOBALCONFIG set value='" + w.getUserType() + "' where NAME='type'");
/*       */     
/*       */     try
/*       */     {
/* 15599 */       FreeEditionDetails f = FreeEditionDetails.getFreeEditionDetails();
/* 15600 */       f.update();
/* 15601 */       if (f.getCategory() == null)
/*       */       {
/* 15603 */         AMServerStartup.initFreeEdition();
/*       */       }
/* 15605 */       com.adventnet.appmanager.util.Constants.setCategorytype(f.getCategory());
/* 15606 */       com.adventnet.appmanager.util.Constants.callFirst();
/* 15607 */       com.adventnet.appmanager.util.Constants.callAfterMysqlStartUp();
/* 15608 */       DataCollectionControllerUtil.setUnmanaged_nodes(DataCollectionControllerUtil.getUnManagedNodes());
/* 15609 */       DataCollectionControllerUtil.setManaged_nodes(DataCollectionControllerUtil.getManagedNodes());
/*       */     }
/*       */     catch (Exception exc)
/*       */     {
/* 15613 */       exc.printStackTrace();
/*       */     }
/* 15615 */     saveMessages(request, messages);
/*       */     
/* 15617 */     return new ActionForward("/common/serverinfo.do?message=" + addmsg, true);
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward updateToFreeEdition(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 15627 */     ActionMessages messages = new ActionMessages();
/* 15628 */     CMDClass cmd = new CMDClass();
/* 15629 */     String user = (String)cmd.getUserList("." + File.separator + "classes" + File.separator + "AdventNetLicense.xml").elementAt(0);
/*       */     
/*       */ 
/*       */ 
/*       */ 
/* 15634 */     LUtil.setISMP(true);
/* 15635 */     System.setProperty("IsWeb", "true");
/*       */     
/* 15637 */     Wield w = Wield.getInstance();
/* 15638 */     Validation valid = Validation.getInstance();
/* 15639 */     System.setProperty("IsWeb", "true");
/*       */     
/* 15641 */     boolean success = valid.doValidation(".", user, "." + File.separator + "classes" + File.separator + "Free.xml", false, false);
/*       */     
/*       */ 
/* 15644 */     if (success)
/*       */     {
/* 15646 */       valid.copyLicenseFile(".", "." + File.separator + "classes" + File.separator + "Free.xml");
/* 15647 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("license.migration.free.success"));
/* 15648 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("license.migration.free.features"));
/* 15649 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("license.migration.free.duration"));
/*       */ 
/*       */     }
/*       */     else
/*       */     {
/*       */ 
/* 15655 */       System.out.println("<br>The error code " + LUtil.getErrorCode());
/* 15656 */       System.out.println("<br>The error message " + LUtil.getErrorMessage());
/* 15657 */       System.out.println("<br>The error code " + LUtil.getDetailedErrorMessage());
/* 15658 */       String m2 = FormatUtil.getString("license.migration.evaluation.failed", new String[] { LUtil.getErrorCode(), OEMUtil.getOEMString("product.talkback.mailid") });
/* 15659 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage(m2));
/*       */     }
/*       */     
/* 15662 */     this.mo.executeUpdateStmt("update AM_GLOBALCONFIG set value='" + w.getUserType() + "' where NAME='type'");
/*       */     try
/*       */     {
/* 15665 */       FreeEditionDetails f = FreeEditionDetails.getFreeEditionDetails();
/* 15666 */       if (f.getCategory() == null)
/*       */       {
/* 15668 */         AMServerStartup.initFreeEdition();
/*       */       }
/* 15670 */       f.update();
/* 15671 */       com.adventnet.appmanager.util.Constants.setCategorytype(f.getCategory());
/* 15672 */       com.adventnet.appmanager.util.Constants.callFirst();
/* 15673 */       com.adventnet.appmanager.util.Constants.callAfterMysqlStartUp();
/* 15674 */       DataCollectionControllerUtil.setUnmanaged_nodes(DataCollectionControllerUtil.getUnManagedNodes());
/* 15675 */       DataCollectionControllerUtil.setManaged_nodes(DataCollectionControllerUtil.getManagedNodes());
/*       */     }
/*       */     catch (Exception exc)
/*       */     {
/* 15679 */       exc.printStackTrace();
/*       */     }
/* 15681 */     saveMessages(request, messages);
/* 15682 */     return showAMServerStatus(mapping, form, request, response);
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   private ActionForward getReturnPage(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */   {
/* 15693 */     String serverTypeWithPort = ((AMActionForm)form).getType();
/* 15694 */     String serverType = serverTypeWithPort.substring(0, serverTypeWithPort.indexOf(":"));
/* 15695 */     String addtoapplication = request.getParameter("addtoha");
/*       */     
/* 15697 */     String redirectTo = request.getParameter("redirectto");
/* 15698 */     if (redirectTo != null)
/*       */     {
/* 15700 */       return new ActionForward(redirectTo);
/*       */     }
/* 15702 */     if (addtoapplication.equals("true"))
/*       */     {
/* 15704 */       if (!serverType.equals("All"))
/*       */       {
/* 15706 */         String wiz = request.getParameter("wiz");
/* 15707 */         if (wiz == null)
/*       */         {
/* 15709 */           if (com.adventnet.appmanager.util.Constants.isIt360)
/*       */           {
/* 15711 */             return new ActionForward("/adminAction.do?method=reloadHostDiscoveryForm&type=SYSTEM:9999");
/*       */           }
/*       */           
/*       */ 
/* 15715 */           return new ActionForward("/showapplication.do?haid=" + request.getParameter("haid") + "&method=showApplication");
/*       */         }
/*       */         
/*       */ 
/*       */ 
/*       */ 
/* 15721 */         String value = request.getParameter("value");
/* 15722 */         if (value == null)
/*       */         {
/*       */ 
/* 15725 */           return mapping.findForward("associatemonitors");
/*       */         }
/*       */         
/*       */ 
/*       */ 
/* 15730 */         return mapping.findForward("HAProfiles");
/*       */       }
/*       */     }
/*       */     
/*       */ 
/* 15735 */     return new ActionForward("/adminAction.do?method=showMonitorTemplates&haid=" + request.getParameter("haid"));
/*       */   }
/*       */   
/*       */   private Hashtable getTypes()
/*       */   {
/* 15740 */     Hashtable table = new Hashtable();
/* 15741 */     table.put("RMI", "RMI");
/* 15742 */     table.put("JBoss", "JBOSS-server");
/* 15743 */     table.put("MYSQLDB", "MYSQL-DB-server");
/*       */     
/*       */ 
/* 15746 */     table.put("ORACLEDB", "ORACLE-DB-server");
/*       */     
/*       */ 
/* 15749 */     table.put("Tomcat", "Tomcat-server");
/* 15750 */     table.put("SERVICE", "Port-Test");
/* 15751 */     table.put("TELNET", "TELNET");
/* 15752 */     table.put("WEB", "WEB-server");
/* 15753 */     table.put("WEBLOGIC", "WEBLOGIC-server");
/* 15754 */     table.put("WEBSPHERE", "WebSphere-server");
/* 15755 */     table.put("WTA", "WTA");
/* 15756 */     table.put("ORACLEAS", "ORACLE-APP-server");
/* 15757 */     table.put("SAP", "SAP");
/* 15758 */     return table;
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward setDefaultMonitorsView(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 15770 */     AMConnectionPool cp = AMConnectionPool.getInstance();
/* 15771 */     String value = request.getParameter("defaultmonitorsview");
/* 15772 */     String insertQry = "update AM_GLOBALCONFIG set VALUE ='" + value + "' where NAME='defaultmonitorsview'";
/* 15773 */     AMConnectionPool.executeUpdateStmt(insertQry);
/* 15774 */     Hashtable table = (Hashtable)request.getSession().getServletContext().getAttribute("globalconfig");
/* 15775 */     table.put("defaultmonitorsview", value);
/*       */     
/*       */ 
/* 15778 */     if (com.adventnet.appmanager.util.Constants.sqlManager) {
/* 15779 */       if ((value != null) && (value.equals("showResourceTypesAll"))) {
/* 15780 */         return new ActionForward("/showresource.do?method=showResourceTypes&detailspage=true&network=MSSQL-DB-server&viewmontype=MSSQL-DB-server", true);
/*       */       }
/* 15782 */       value = value + "&group=All";
/* 15783 */       return new ActionForward("/showresource.do?method=" + value, true);
/*       */     }
/*       */     
/* 15786 */     if ((value != null) && (value.equals("showResourceTypesAll"))) {
/* 15787 */       value = value + "&group=All";
/*       */     }
/* 15789 */     return new ActionForward("/showresource.do?method=" + value);
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward addActionFromPopup(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 15798 */     ActionMessages messages = new ActionMessages();
/* 15799 */     ActionErrors errors = new ActionErrors();
/* 15800 */     String forwardPage = "";
/*       */     try
/*       */     {
/* 15803 */       AMConnectionPool pool = AMConnectionPool.getInstance();
/* 15804 */       int actionId = -1;int requesttype = 0;
/*       */       
/* 15806 */       if (request.getParameter("actionId") != null) {
/* 15807 */         actionId = Integer.parseInt(request.getParameter("actionId"));
/*       */       }
/* 15809 */       int resourceid = Integer.parseInt(request.getParameter("resourceid"));
/* 15810 */       int attributeID = Integer.parseInt(request.getParameter("attributeid"));
/* 15811 */       if (request.getParameter("requesttype") != null) {
/* 15812 */         requesttype = Integer.parseInt(request.getParameter("requesttype"));
/*       */       }
/* 15814 */       int severity = Integer.parseInt(request.getParameter("severity"));
/*       */       
/* 15816 */       forwardPage = request.getParameter("forwardPage");
/*       */       
/* 15818 */       String query = null;
/* 15819 */       if (requesttype == 1) {
/* 15820 */         query = "delete from AM_ATTRIBUTEACTIONMAPPER where ID = " + resourceid + " and ACTIONID = " + actionId + " and ATTRIBUTE =" + attributeID + " and SEVERITY =" + severity;
/* 15821 */         AMConnectionPool.executeUpdateStmt(query);
/*       */         
/* 15823 */         if ((EnterpriseUtil.isManagedServer()) && (actionId >= 10000) && (actionId < 10000000)) {
/* 15824 */           EnterpriseUtil.addUpdateQueryToFile(query);
/*       */         }
/* 15826 */         return new ActionForward(forwardPage, true);
/*       */       }
/* 15828 */       query = "delete from AM_ATTRIBUTEACTIONMAPPER where ID = " + resourceid + " and ATTRIBUTE =" + attributeID + " and SEVERITY =" + severity;
/* 15829 */       AMConnectionPool.executeUpdateStmt(query);
/* 15830 */       EnterpriseUtil.addUpdateQueryToFile(query);
/*       */       
/* 15832 */       addActions(resourceid, attributeID, severity, request.getParameterValues("selectedactions"));
/* 15833 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("threshold.action.configuration.success"));
/* 15834 */       saveMessages(request, messages);
/* 15835 */       return new ActionForward(forwardPage);
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 15839 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("threshold.action.configuration.failure"));
/* 15840 */       saveMessages(request, messages);
/* 15841 */       e.printStackTrace(); }
/* 15842 */     return new ActionForward(forwardPage);
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward addThresholdFromPopup(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 15851 */     String redirectTo = request.getParameter("redirectTo");
/* 15852 */     ActionMessages messages = new ActionMessages();
/* 15853 */     ActionErrors errors = new ActionErrors();
/*       */     try
/*       */     {
/* 15856 */       AMConnectionPool pool = AMConnectionPool.getInstance();
/* 15857 */       int resourceid = Integer.parseInt(request.getParameter("resourceid"));
/* 15858 */       int attributeID = Integer.parseInt(request.getParameter("attributeid"));
/* 15859 */       String thresholdID = request.getParameter("thresholdid");
/* 15860 */       String query = "delete from AM_ATTRIBUTETHRESHOLDMAPPER where AM_ATTRIBUTETHRESHOLDMAPPER.ID='" + resourceid + "' and AM_ATTRIBUTETHRESHOLDMAPPER.ATTRIBUTE='" + attributeID + "'";
/* 15861 */       com.adventnet.appmanager.util.Constants.removeThresholdEntry(String.valueOf(attributeID), String.valueOf(resourceid));
/* 15862 */       AMConnectionPool.executeUpdateStmt(query);
/* 15863 */       query = "insert into AM_ATTRIBUTETHRESHOLDMAPPER (ID, ATTRIBUTE, THRESHOLDCONFIGURATIONID) values (" + resourceid + "," + attributeID + "," + thresholdID + ")";
/* 15864 */       com.adventnet.appmanager.util.Constants.addThresholdEntry(String.valueOf(attributeID), String.valueOf(resourceid));
/* 15865 */       AMConnectionPool.executeUpdateStmt(query);
/* 15866 */       AMCacheHandler.setThresholdconfiguration(resourceid + "_" + attributeID, thresholdID);
/* 15867 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("threshold.action.configuration.success"));
/* 15868 */       saveMessages(request, messages);
/* 15869 */       return new ActionForward("/jsp/Iframe_ThresholdDetails.jsp");
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 15873 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("threshold.action.configuration.failure"));
/* 15874 */       saveMessages(request, messages);
/* 15875 */       e.printStackTrace(); }
/* 15876 */     return new ActionForward("/jsp/Iframe_ThresholdDetails.jsp");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward addPatternFromPopup(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 15886 */     String redirectTo = request.getParameter("redirectTo");
/* 15887 */     ActionMessages messages = new ActionMessages();
/* 15888 */     ActionErrors errors = new ActionErrors();
/*       */     try
/*       */     {
/* 15891 */       AMConnectionPool pool = AMConnectionPool.getInstance();
/* 15892 */       int resourceid = Integer.parseInt(request.getParameter("resourceid"));
/* 15893 */       int attributeID = Integer.parseInt(request.getParameter("attributeid"));
/* 15894 */       String thresholdID = request.getParameter("thresholdid");
/* 15895 */       String query = "delete from AM_ATTRIBUTETHRESHOLDMAPPER where AM_ATTRIBUTETHRESHOLDMAPPER.ID='" + resourceid + "' and AM_ATTRIBUTETHRESHOLDMAPPER.ATTRIBUTE='" + attributeID + "'";
/* 15896 */       com.adventnet.appmanager.util.Constants.removeThresholdEntry(String.valueOf(attributeID), String.valueOf(resourceid));
/* 15897 */       AMConnectionPool.executeUpdateStmt(query);
/* 15898 */       query = "insert into AM_ATTRIBUTETHRESHOLDMAPPER (ID, ATTRIBUTE, THRESHOLDCONFIGURATIONID) values (" + resourceid + "," + attributeID + "," + thresholdID + ")";
/* 15899 */       com.adventnet.appmanager.util.Constants.addThresholdEntry(String.valueOf(attributeID), String.valueOf(resourceid));
/* 15900 */       AMConnectionPool.executeUpdateStmt(query);
/* 15901 */       AMCacheHandler.setThresholdconfiguration(resourceid + "_" + attributeID, thresholdID);
/* 15902 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("threshold.action.configuration.success"));
/* 15903 */       saveMessages(request, messages);
/* 15904 */       return new ActionForward("/jsp/Iframe_PatternDetails.jsp");
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 15908 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("threshold.action.configuration.failure"));
/* 15909 */       saveMessages(request, messages);
/* 15910 */       e.printStackTrace(); }
/* 15911 */     return new ActionForward("/jsp/Iframe_PatternDetails.jsp");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward deleteAssociatedThreshold(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 15922 */     String redirect = request.getParameter("redirectto");
/*       */     try
/*       */     {
/* 15925 */       AMConnectionPool pool = AMConnectionPool.getInstance();
/* 15926 */       int resourceid = Integer.parseInt(request.getParameter("resourceid"));
/* 15927 */       int attributeID = Integer.parseInt(request.getParameter("attributeid"));
/* 15928 */       String query = "delete from AM_ATTRIBUTETHRESHOLDMAPPER where AM_ATTRIBUTETHRESHOLDMAPPER.ID='" + resourceid + "' and AM_ATTRIBUTETHRESHOLDMAPPER.ATTRIBUTE='" + attributeID + "'";
/* 15929 */       com.adventnet.appmanager.util.Constants.removeThresholdEntry(String.valueOf(attributeID), String.valueOf(resourceid));
/* 15930 */       AMConnectionPool.executeUpdateStmt(query);
/* 15931 */       AMCacheHandler.removeThresholdConfiguration(resourceid + "_" + attributeID);
/* 15932 */       query = "delete from AM_ATTRIBUTEACTIONMAPPER where AM_ATTRIBUTEACTIONMAPPER.ID='" + resourceid + "' and AM_ATTRIBUTEACTIONMAPPER.ATTRIBUTE='" + attributeID + "'";
/* 15933 */       AMConnectionPool.executeUpdateStmt(query);
/* 15934 */       query = "delete from AM_RCAMAPPER where PARENTRESOURCEID = " + resourceid + " and PARENT_RESOURCEATTRIBUTEMAPPERID = " + attributeID;
/* 15935 */       AMConnectionPool.executeUpdateStmt(query);
/* 15936 */       query = "delete from AM_RCARULESMAPPER where RESOURCEID=" + resourceid + " and ATTRIBUTE=" + attributeID;
/* 15937 */       AMConnectionPool.executeUpdateStmt(query);
/* 15938 */       FaultUtil.deleteAlertsForEntity(String.valueOf(resourceid) + "_" + String.valueOf(attributeID));
/* 15939 */       return new ActionForward(redirect, true);
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 15943 */       e.printStackTrace(); }
/* 15944 */     return new ActionForward(redirect, true);
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward deleteAssociatedAction(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 15953 */     String redirect = request.getParameter("redirectto");
/*       */     try
/*       */     {
/* 15956 */       AMConnectionPool pool = AMConnectionPool.getInstance();
/* 15957 */       int resourceid = Integer.parseInt(request.getParameter("resourceid"));
/* 15958 */       int attributeID = Integer.parseInt(request.getParameter("attributeid"));
/* 15959 */       int severity = Integer.parseInt(request.getParameter("severity"));
/* 15960 */       String query = "delete from AM_ATTRIBUTEACTIONMAPPER where ID='" + resourceid + "' and ATTRIBUTE='" + attributeID + "' and SEVERITY ='" + severity + "'";
/* 15961 */       AMConnectionPool.executeUpdateStmt(query);
/* 15962 */       return new ActionForward(redirect, true);
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 15966 */       e.printStackTrace(); }
/* 15967 */     return new ActionForward(redirect, true);
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward addMBeanOperationAction(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 15977 */     String returnpath = request.getParameter("redirectto");
/* 15978 */     if (returnpath == null)
/*       */     {
/* 15980 */       returnpath = request.getParameter("returnpath");
/*       */     }
/* 15982 */     String popupParam = request.getParameter("popup");
/* 15983 */     boolean popup = (popupParam != null) && (popupParam.equals("true"));
/* 15984 */     ActionMessages messages = new ActionMessages();
/* 15985 */     boolean isCancel = false;
/* 15986 */     String actionname = request.getParameter("actionname");
/* 15987 */     if (DBQueryUtil.getDBType().equals("mssql"))
/*       */     {
/* 15989 */       actionname = actionname.replaceAll("'", "''");
/*       */     }
/*       */     else
/*       */     {
/* 15993 */       actionname = actionname.replaceAll("'", "\\\\'");
/*       */     }
/* 15995 */     if (!isCancel)
/*       */     {
/* 15997 */       String checkquery = "select * from AM_ACTIONPROFILE where NAME='" + actionname + "'";
/* 15998 */       ArrayList list = this.mo.getRows(checkquery);
/* 15999 */       if (list.size() == 0)
/*       */       {
/* 16001 */         String insertquery = "insert into AM_ACTIONPROFILE (ID, NAME, TYPE) VALUES(" + DBQueryUtil.getIncrementedID("ID", "AM_ACTIONPROFILE") + ",'" + actionname + "','" + 4 + "' )";
/* 16002 */         this.mo.executeUpdateStmt(insertquery);
/* 16003 */         ArrayList result = this.mo.getRows("select max(ID) from AM_ACTIONPROFILE");
/* 16004 */         if (result.size() > 0)
/*       */         {
/* 16006 */           String id = (String)((ArrayList)result.get(0)).get(0);
/* 16007 */           if (id == null) id = "1";
/* 16008 */           DelegatedUserRoleUtil.addEntryToConfigUserTable(request, Integer.parseInt(id), 2);
/* 16009 */           String groupid = "-1";
/* 16010 */           String existsQry = "select GROUPID from AM_CAM_DC_GROUPS where GROUPNAME='" + Translate.decode(request.getParameter("mbeanname")) + "' and RESOURCEID=" + request.getParameter("actionresourceid");
/* 16011 */           ArrayList retVal = this.mo.getRows(existsQry);
/* 16012 */           boolean exists = retVal.size() > 0;
/* 16013 */           if (exists)
/*       */           {
/* 16015 */             groupid = (String)((ArrayList)retVal.get(0)).get(0);
/*       */           }
/*       */           else
/*       */           {
/* 16019 */             ArrayList result1 = this.mo.getRows("select max(GROUPID) from AM_CAM_DC_GROUPS");
/* 16020 */             String grid = (String)((ArrayList)result1.get(0)).get(0);
/* 16021 */             if (grid == null)
/*       */             {
/* 16023 */               groupid = "1";
/*       */             }
/*       */             else
/*       */             {
/* 16027 */               groupid = "" + (Integer.parseInt(grid) + 1);
/*       */             }
/* 16029 */             this.mo.executeUpdateStmt("insert into AM_CAM_DC_GROUPS (GROUPID,GROUPNAME, RESOURCEID) values('" + groupid + "','" + Translate.decode(request.getParameter("mbeanname")) + "'," + request.getParameter("actionresourceid") + ")");
/*       */           }
/*       */           
/* 16032 */           int numberOfParams = Integer.parseInt(request.getParameter("numberOfParams"));
/* 16033 */           String insertmopaction = "insert into AM_MBEANOPERATIONACTION(ID,GROUPID,OPERATIONNAME,ARGSCOUNT,EMAIL_ACTION_ID) values (" + id + ",'" + groupid + "','" + request.getParameter("operationname") + "'," + numberOfParams + "," + request.getParameter("sendmail") + ")";
/* 16034 */           this.mo.executeUpdateStmt(insertmopaction);
/* 16035 */           if (numberOfParams > 0)
/*       */           {
/* 16037 */             ArrayList listOfArgTypes = new ArrayList(numberOfParams);
/* 16038 */             StringTokenizer tokenizer = new StringTokenizer(request.getParameter("argTypes"), ",");
/* 16039 */             for (int i = 0; i < numberOfParams; i++)
/*       */             {
/* 16041 */               String argType = "No Class Type specified";
/*       */               try
/*       */               {
/* 16044 */                 argType = tokenizer.nextToken();
/*       */               }
/*       */               catch (java.util.NoSuchElementException ee) {}
/*       */               
/*       */ 
/*       */ 
/* 16050 */               listOfArgTypes.add(argType);
/*       */               
/* 16052 */               String addOpActionArgDetailsQuery = "insert into AM_MBEANOPERATIONACTION_ARGDETAILS(AM_MBEANOPERATIONACTIONID,ARGINDEX,ARGTYPE,ARG_ID) values (" + id + ",'" + (i + 1) + "','" + argType + "','" + DBQueryUtil.getIncrementedID("ARG_ID", "AM_MBEANOPERATIONACTION_ARGDETAILS") + "')";
/*       */               
/* 16054 */               this.mo.executeUpdateStmt(addOpActionArgDetailsQuery);
/* 16055 */               ArrayList result2 = this.mo.getRows("select max(ARG_ID) from AM_MBEANOPERATIONACTION_ARGDETAILS");
/* 16056 */               String arg_index = (String)((ArrayList)result2.get(0)).get(0);
/* 16057 */               StringTokenizer valuesTokenizer = new StringTokenizer(request.getParameter("textfield" + request.getParameter("methodIndex") + (i + 1)), ",");
/* 16058 */               int count = 1;
/* 16059 */               while (valuesTokenizer.hasMoreTokens())
/*       */               {
/* 16061 */                 String addOpActionArgValuesQuery = "insert into AM_MBEANOPERATIONACTION_ARGVALUES(ARG_ID,POSITIONINPREDEFINEDVALUES,VALUE,ISDEFAULT) values (" + arg_index + ",'" + count++ + "','" + valuesTokenizer.nextToken() + "','notimplemented')";
/* 16062 */                 this.mo.executeUpdateStmt(addOpActionArgValuesQuery);
/*       */               }
/*       */             }
/*       */           }
/*       */           
/* 16067 */           messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("mopaction.create.success"));
/* 16068 */           saveMessages(request, messages);
/* 16069 */           if (popup)
/*       */           {
/* 16071 */             associateActions(request);
/* 16072 */             messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("mopaction.createandassociate.success"));
/*       */             
/* 16074 */             return new ActionForward("/jsp/ThresholdCreationForwarder.jsp" + getWizString(request));
/*       */           }
/*       */         }
/*       */       }
/*       */       else
/*       */       {
/* 16080 */         messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("mopaction.create.alreadyexists", request.getParameter("displayname")));
/* 16081 */         saveMessages(request, messages);
/* 16082 */         if (popup)
/*       */         {
/* 16084 */           return new ActionForward("/jsp/mopaction_initialscreen.jsp");
/*       */         }
/* 16086 */         return new ActionForward("/showTile.do?TileName=.MBeanOperationActions");
/*       */       }
/* 16088 */       System.out.println("returnpath -> " + returnpath);
/* 16089 */       if (returnpath != null)
/*       */       {
/* 16091 */         request.setAttribute("showAdvancedOptions", "true");
/* 16092 */         return new ActionForward(returnpath, true);
/*       */       }
/*       */       
/* 16095 */       return mapping.findForward("success");
/*       */     }
/*       */     
/*       */ 
/* 16099 */     if (returnpath != null) {
/* 16100 */       return new ActionForward(returnpath);
/*       */     }
/* 16102 */     return mapping.findForward("success");
/*       */   }
/*       */   
/*       */ 
/*       */   public ActionForward sendActionDetails(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 16109 */     AMConnectionPool cp = AMConnectionPool.getInstance();
/* 16110 */     AMActionForm am = (AMActionForm)form;
/* 16111 */     ActionMessages messages = new ActionMessages();
/* 16112 */     ActionErrors errors = new ActionErrors();
/* 16113 */     response.setContentType("text/html; charset=UTF-8");
/* 16114 */     ResultSet rs = null;
/* 16115 */     String temp = null;
/* 16116 */     String sname = null;
/* 16117 */     String emailid = null;
/* 16118 */     String host = InetAddress.getLocalHost().getHostName();
/* 16119 */     String port = System.getProperty("webserver.port");
/* 16120 */     ResultSet rst = null;
/*       */     try
/*       */     {
/* 16123 */       emailid = request.getParameter("emailid");
/* 16124 */       int i = 0;
/* 16125 */       String actionquery = null;
/* 16126 */       if (emailid != null)
/*       */       {
/* 16128 */         String q1 = "select HOST from AM_MAILSETTINGS";
/* 16129 */         rst = AMConnectionPool.executeQueryStmt(q1);
/* 16130 */         String returnVal = null;
/* 16131 */         String sentactid = null;
/* 16132 */         if (rst.next())
/*       */         {
/* 16134 */           if (returnVal == null)
/*       */           {
/* 16136 */             sname = request.getParameter("emailname");
/* 16137 */             sname = sname + "_Action";
/* 16138 */             String query = "SELECT COUNT(*) FROM AM_ACTIONPROFILE WHERE NAME like '" + sname + "%'";
/* 16139 */             rst = AMConnectionPool.executeQueryStmt(query);
/* 16140 */             if (rst.next())
/*       */             {
/* 16142 */               int cnt = rst.getInt(1);
/* 16143 */               if (cnt > 0)
/*       */               {
/* 16145 */                 sname = sname + cnt;
/*       */               }
/*       */             }
/* 16148 */             String actid = DBQueryUtil.getIncrementedID("ID", "AM_ACTIONPROFILE") + "";
/* 16149 */             actionquery = "INSERT INTO AM_ACTIONPROFILE (ID,NAME,TYPE) VALUES(" + actid + ",'" + sname + "','1')";
/* 16150 */             AMConnectionPool.executeUpdateStmt(actionquery);
/* 16151 */             String subject = FormatUtil.getString("am.webclient.managermail.bsm.alertfrommessage.text", new String[] { OEMUtil.getOEMString("product.name") });
/* 16152 */             String act2 = "insert into AM_EMAILACTION (ID, FROMADDRESS, TOADDRESS, SUBJECT, MESSAGE,SMTPPORT) values (" + actid + ",'" + emailid + "','" + emailid + "','" + subject + "','" + FormatUtil.getString("am.webclient.mail.default.message.text", new String[] { OEMUtil.getOEMString("product.name") }) + "',25)";
/* 16153 */             AMConnectionPool.executeUpdateStmt(act2);
/* 16154 */             Properties pro = new Properties();
/* 16155 */             ArrayList rows = new ArrayList();
/* 16156 */             pro.setProperty("label", sname);
/* 16157 */             pro.setProperty("value", actid);
/* 16158 */             rows.add(pro);
/*       */             
/* 16160 */             am.setSendmail(actid);
/* 16161 */             sentactid = sname + "," + actid;
/* 16162 */             request.setAttribute("tabtoselect", "3");
/* 16163 */             PrintWriter pw = response.getWriter();
/* 16164 */             pw.print(sentactid);
/*       */           }
/*       */           else
/*       */           {
/* 16168 */             request.setAttribute("tabtoselect", "3");
/*       */             
/* 16170 */             returnVal = FormatUtil.getString("am.webclient.schedulereport.showwschedule.mailmessage.text");
/* 16171 */             sentactid = returnVal + ",0";
/* 16172 */             PrintWriter pw = response.getWriter();
/* 16173 */             pw.print(sentactid);
/*       */           }
/*       */         }
/*       */         else
/*       */         {
/* 16178 */           returnVal = FormatUtil.getString("am.webclient.schedulereport.showwschedule.smtpmailmessage.text");
/*       */           
/* 16180 */           sentactid = returnVal + ",0";
/* 16181 */           PrintWriter pw = response.getWriter();
/* 16182 */           pw.print(sentactid);
/*       */         }
/* 16184 */         AMConnectionPool.closeStatement(rst);
/*       */       }
/*       */     }
/*       */     catch (Exception es)
/*       */     {
/* 16189 */       es.printStackTrace();
/*       */     }
/*       */     finally {
/* 16192 */       AMConnectionPool.closeStatement(rst);
/* 16193 */       AMConnectionPool.closeStatement(rs);
/*       */     }
/* 16195 */     return null;
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */   public ActionForward showMBeanOperationAction(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 16203 */     String actionID = request.getParameter("actionID");
/* 16204 */     String query = "select AM_ACTIONPROFILE.ID,AM_ACTIONPROFILE.NAME,AM_ManagedObject.DISPLAYNAME,AM_CAM_DC_GROUPS.GROUPNAME,AM_MBEANOPERATIONACTION.OPERATIONNAME,AM_MBEANOPERATIONACTION.ARGSCOUNT,AM_MBEANOPERATIONACTION.EMAIL_ACTION_ID from AM_ACTIONPROFILE,AM_CAM_DC_GROUPS,AM_ManagedObject,AM_MBEANOPERATIONACTION where AM_ACTIONPROFILE.ID=AM_MBEANOPERATIONACTION.ID and AM_MBEANOPERATIONACTION.GROUPID=AM_CAM_DC_GROUPS.GROUPID and AM_CAM_DC_GROUPS.RESOURCEID=AM_ManagedObject.RESOURCEID and AM_ACTIONPROFILE.ID=" + actionID;
/* 16205 */     ArrayList rows = this.mo.getRows(query);
/* 16206 */     ArrayList row = (ArrayList)rows.get(0);
/* 16207 */     AMActionForm amform = (AMActionForm)form;
/* 16208 */     amform.setId(Integer.parseInt((String)row.get(0)));
/* 16209 */     amform.setDisplayname((String)row.get(1));
/* 16210 */     amform.setMethod("editMBeanOperationAction");
/* 16211 */     request.setAttribute("hostname", (String)row.get(2));
/* 16212 */     request.setAttribute("resourcetype", (String)row.get(2));
/* 16213 */     request.setAttribute("mbeanname", (String)row.get(3));
/* 16214 */     request.setAttribute("operationname", (String)row.get(4));
/* 16215 */     request.setAttribute("numberOfParams", (String)row.get(5));
/* 16216 */     int numberOfParams = Integer.parseInt((String)row.get(5));
/* 16217 */     if (numberOfParams > 0)
/*       */     {
/* 16219 */       String query1 = "select AM_MBEANOPERATIONACTION_ARGDETAILS.ARGINDEX,AM_MBEANOPERATIONACTION_ARGDETAILS.ARGTYPE,AM_MBEANOPERATIONACTION_ARGDETAILS.ARG_ID,POSITIONINPREDEFINEDVALUES,VALUE from AM_MBEANOPERATIONACTION_ARGDETAILS,AM_MBEANOPERATIONACTION_ARGVALUES where AM_MBEANOPERATIONACTION_ARGDETAILS.ARG_ID=AM_MBEANOPERATIONACTION_ARGVALUES.ARG_ID and AM_MBEANOPERATIONACTION_ARGDETAILS.AM_MBEANOPERATIONACTIONID=" + actionID + " ORDER BY AM_MBEANOPERATIONACTION_ARGDETAILS.ARGINDEX,POSITIONINPREDEFINEDVALUES";
/* 16220 */       ArrayList list = new ArrayList(numberOfParams);
/* 16221 */       Hashtable typeTable = new Hashtable();
/* 16222 */       Hashtable valuesTable = new Hashtable();
/* 16223 */       AMConnectionPool cp = AMConnectionPool.getInstance();
/* 16224 */       ResultSet res = AMConnectionPool.executeQueryStmt(query1);
/* 16225 */       while (res.next())
/*       */       {
/* 16227 */         String argID = "" + res.getInt(3);
/* 16228 */         if (list.indexOf(argID) == -1)
/*       */         {
/* 16230 */           list.add(argID);
/* 16231 */           valuesTable.put(argID, "");
/* 16232 */           typeTable.put(argID, res.getString(2));
/*       */         }
/* 16234 */         String prevVal = (String)valuesTable.get(argID);
/* 16235 */         prevVal = prevVal + res.getString(5) + ",";
/* 16236 */         valuesTable.put(argID, prevVal);
/*       */       }
/* 16238 */       AMConnectionPool.closeStatement(res);
/* 16239 */       Enumeration enumeration = valuesTable.keys();
/* 16240 */       while (enumeration.hasMoreElements())
/*       */       {
/* 16242 */         Object key = enumeration.nextElement();
/* 16243 */         String val = (String)valuesTable.get(key);
/* 16244 */         if (val.endsWith(","))
/*       */         {
/* 16246 */           val = val.substring(0, val.length() - 1);
/* 16247 */           valuesTable.put(key, val);
/*       */         }
/*       */       }
/*       */       
/* 16251 */       request.setAttribute("argIDs", list);
/* 16252 */       request.setAttribute("argIDsVsType", typeTable);
/* 16253 */       request.setAttribute("argIDsVsValue", valuesTable);
/*       */     }
/* 16255 */     ArrayList rows1 = com.adventnet.appmanager.cam.CAMDBUtil.getListofMails();
/* 16256 */     amform.setMaillist(rows1);
/* 16257 */     amform.setSendmail((String)row.get(6));
/* 16258 */     request.setAttribute("HelpKey", "MBean Operation");
/* 16259 */     return mapping.findForward("showMopAction");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward editMBeanOperationAction(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 16269 */     ActionMessages messages = new ActionMessages();
/* 16270 */     AMActionForm amform = (AMActionForm)form;
/* 16271 */     String displayname = request.getParameter("displayname");
/* 16272 */     if (DBQueryUtil.getDBType().equals("mssql"))
/*       */     {
/* 16274 */       displayname = displayname.replaceAll("'", "''");
/*       */     }
/*       */     else
/*       */     {
/* 16278 */       displayname = displayname.replaceAll("'", "\\\\'");
/*       */     }
/*       */     try {
/* 16281 */       String updatembeanactionquery = "update AM_MBEANOPERATIONACTION set EMAIL_ACTION_ID=" + request.getParameter("sendmail") + " where ID=" + amform.getId();
/* 16282 */       AMConnectionPool.getInstance();AMConnectionPool.executeUpdateStmt(updatembeanactionquery);
/*       */     } catch (Exception ex) {
/* 16284 */       ex.printStackTrace();
/*       */     }
/* 16286 */     String checkquery = "select * from AM_ACTIONPROFILE where NAME='" + displayname + "' and ID!=" + amform.getId();
/* 16287 */     ArrayList list = this.mo.getRows(checkquery);
/* 16288 */     if (list.size() == 0)
/*       */     {
/* 16290 */       String updateactionquery = "update AM_ACTIONPROFILE set NAME='" + displayname + "' where ID = " + amform.getId();
/* 16291 */       this.mo.executeUpdateStmt(updateactionquery);
/* 16292 */       int numberOfParams = Integer.parseInt(request.getParameter("numberOfParams"));
/* 16293 */       if (numberOfParams > 0)
/*       */       {
/* 16295 */         String commaseparated_arg_id = request.getParameter("commaseparated_arg_ids");
/* 16296 */         StringTokenizer arg_id_tokens = new StringTokenizer(commaseparated_arg_id, ",");
/* 16297 */         while (arg_id_tokens.hasMoreTokens())
/*       */         {
/* 16299 */           String arg_id = arg_id_tokens.nextToken();
/* 16300 */           StringTokenizer valuesTokenizer = new StringTokenizer(request.getParameter("textfield" + arg_id), ",");
/* 16301 */           String deletequery = "delete from AM_MBEANOPERATIONACTION_ARGVALUES where ARG_ID = " + arg_id;
/* 16302 */           this.mo.executeUpdateStmt(deletequery);
/* 16303 */           int count = 1;
/* 16304 */           while (valuesTokenizer.hasMoreTokens())
/*       */           {
/*       */ 
/* 16307 */             String addOpActionArgValuesQuery = "insert into AM_MBEANOPERATIONACTION_ARGVALUES(ARG_ID,POSITIONINPREDEFINEDVALUES,VALUE,ISDEFAULT) values (" + arg_id + ",'" + count++ + "','" + valuesTokenizer.nextToken() + "','notimplemented')";
/* 16308 */             this.mo.executeUpdateStmt(addOpActionArgValuesQuery);
/*       */           }
/*       */         }
/*       */       }
/* 16312 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("mopaction.edit.success"));
/* 16313 */       saveMessages(request, messages);
/*       */     }
/*       */     else
/*       */     {
/* 16317 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("mopaction.create.alreadyexists", request.getParameter("displayname")));
/* 16318 */       saveMessages(request, messages);
/* 16319 */       return new ActionForward("/adminAction.do?method=showMBeanOperationAction&actionID=" + amform.getId() + "&haid=null");
/*       */     }
/* 16321 */     String redirectTo = request.getParameter("redirectto");
/* 16322 */     if (redirectTo != null)
/*       */     {
/* 16324 */       return new ActionForward(redirectTo, true);
/*       */     }
/* 16326 */     return new ActionForward("/adminAction.do?method=showActionProfiles");
/*       */   }
/*       */   
/*       */   public ActionForward deleteMBeanOperationAction(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 16332 */     String[] applications = request.getParameterValues("execmopcheckbox");
/* 16333 */     String messg = "";
/* 16334 */     if (applications != null)
/*       */     {
/* 16336 */       for (int i = 0; i < applications.length; i++)
/*       */       {
/* 16338 */         FaultUtil.deleteMBeanOperationAction(applications[i]);
/* 16339 */         DelegatedUserRoleUtil.deleteEntryFromConfigUserTable(Integer.parseInt(applications[i]), 2);
/*       */       }
/* 16341 */       messg = "mopaction.delete.success";
/*       */     }
/* 16343 */     ActionMessages messages = new ActionMessages();
/* 16344 */     messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage(messg));
/* 16345 */     saveMessages(request, messages);
/* 16346 */     String redirectTo = request.getParameter("redirectto");
/* 16347 */     if (redirectTo != null)
/*       */     {
/* 16349 */       return new ActionForward(redirectTo, true);
/*       */     }
/* 16351 */     return mapping.findForward("success");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */   public ActionForward applyDataSettings(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 16359 */     String listToApply = "";
/* 16360 */     String query = "";
/* 16361 */     AMConnectionPool cp = AMConnectionPool.getInstance();
/* 16362 */     String componentname = request.getParameter("resourcetypedisplayname");
/* 16363 */     boolean enablemain = request.getParameter("gatewayCheckStatus") != null;
/* 16364 */     ArrayList resDisplayNames = new ArrayList();
/*       */     
/* 16366 */     String disabled = "";
/*       */     
/* 16368 */     if (!enablemain) {
/* 16369 */       disabled = request.getParameter("resourceid") + ",";
/*       */     }
/*       */     
/*       */ 
/* 16373 */     if (!request.getParameter("unselected").equals("")) {
/* 16374 */       disabled = disabled + request.getParameter("unselected");
/*       */     }
/*       */     
/* 16377 */     if (!disabled.equals("")) {
/* 16378 */       System.out.println("delete all and insert ==>" + disabled);
/* 16379 */       DataCollectionComponent.enableselectedComponent(disabled, componentname);
/* 16380 */       DataCollectionComponent.loadComponent();
/*       */     }
/*       */     else
/*       */     {
/* 16384 */       DataCollectionComponent.enableallComponent(componentname);
/* 16385 */       System.out.println("delete all" + disabled);
/* 16386 */       DataCollectionComponent.loadComponent();
/*       */     }
/*       */     
/* 16389 */     request.setAttribute("resultresids", resDisplayNames);
/* 16390 */     return new ActionForward("/jsp/FaultTemplateOptionsResult.jsp");
/*       */   }
/*       */   
/*       */ 
/*       */   public ActionForward getenabledetails(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */   {
/* 16396 */     ArrayList enableDetails = new ArrayList();
/* 16397 */     ResultSet results = null;
/* 16398 */     String resourceid = request.getParameter("resourceid");
/* 16399 */     String resourcetypedisplayname = request.getParameter("resourcetypedisplayname");
/* 16400 */     String type = request.getParameter("type");
/*       */     
/*       */ 
/*       */     try
/*       */     {
/* 16405 */       String query = "select RESOURCEID,DISPLAYNAME from AM_Managedobject where AM_Managedobject.type='" + type + "'";
/* 16406 */       results = AMConnectionPool.executeQueryStmt(query);
/* 16407 */       AMActionForm amForm = (AMActionForm)form;
/* 16408 */       amForm.setGatewayCheckStatus("true");
/* 16409 */       while (results.next()) {
/* 16410 */         Properties enable = new Properties();
/* 16411 */         ArrayList existing = (ArrayList)DataCollectionComponent.generalTable.get(results.getString("RESOURCEID").trim());
/* 16412 */         if ((existing != null) && (results.getString("RESOURCEID").equals(resourceid)) && (existing.contains(resourcetypedisplayname)))
/*       */         {
/* 16414 */           amForm = (AMActionForm)form;
/* 16415 */           amForm.setGatewayCheckStatus("false");
/*       */         }
/* 16417 */         else if (!results.getString("RESOURCEID").equals(resourceid))
/*       */         {
/* 16419 */           enable.setProperty("RESOURCEID", results.getString("RESOURCEID"));
/* 16420 */           enable.setProperty("DISPLAYNAME", results.getString("DISPLAYNAME"));
/* 16421 */           if ((existing != null) && (existing.contains(resourcetypedisplayname)))
/*       */           {
/* 16423 */             enable.setProperty("STATUS", "false");
/*       */           }
/*       */           else
/*       */           {
/* 16427 */             enable.setProperty("STATUS", "true");
/*       */           }
/* 16429 */           enableDetails.add(enable);
/*       */         }
/*       */       }
/* 16432 */       AMConnectionPool.closeStatement(results);
/* 16433 */       request.setAttribute("enable", enableDetails);
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 16437 */       e.printStackTrace();
/*       */     }
/* 16439 */     return new ActionForward("/jsp/mssql/enableData.jsp?resourceid=" + resourceid + "&resourcetype=MSSQL-DB-server&resourcetypedisplayname=" + resourcetypedisplayname);
/*       */   }
/*       */   
/*       */ 
/*       */   public ActionForward applyTemplateSettings(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 16446 */     String listToApply = "";
/* 16447 */     String[] monitors = request.getParameterValues("monitors");
/* 16448 */     if (monitors != null)
/*       */     {
/* 16450 */       for (int j = 0; j < monitors.length; j++)
/*       */       {
/* 16452 */         listToApply = listToApply + monitors[j] + ",";
/*       */       }
/*       */     }
/* 16455 */     if (!listToApply.equals(""))
/*       */     {
/* 16457 */       listToApply = listToApply.substring(0, listToApply.length() - 1);
/*       */     }
/* 16459 */     String templateResourceId = request.getParameter("resourceid");
/* 16460 */     String templateResourceType = request.getParameter("resourcetype");
/* 16461 */     String templateResourceDisplayName = request.getParameter("resourcedisplayname");
/* 16462 */     Hashtable attribIDVsThresholdID = new Hashtable();
/* 16463 */     Map attribIDVsAnomalyID = new HashMap();
/* 16464 */     Hashtable criticalActions = new Hashtable();
/* 16465 */     Hashtable warningActions = new Hashtable();
/* 16466 */     Hashtable clearActions = new Hashtable();
/* 16467 */     boolean deleteAndAddThresholds = request.getParameter("deleteexistingthresholds") != null;
/* 16468 */     boolean deleteAndAddAnomaly = request.getParameter("deleteexistinganomaly") != null;
/* 16469 */     boolean deleteAndAddActions = request.getParameter("deleteexistingactions") != null;
/* 16470 */     ArrayList<String> attribIDs = new ArrayList();
/* 16471 */     ArrayList resIDs = new ArrayList();
/* 16472 */     ArrayList resDisplayNames = new ArrayList();
/* 16473 */     String commaSepResIDs = "";
/* 16474 */     String attribIDsQuery = "select ATTRIBUTEID from AM_ATTRIBUTES where RESOURCETYPE='" + templateResourceType + "'";
/* 16475 */     AMConnectionPool.getInstance();ResultSet attrIDsRes = AMConnectionPool.executeQueryStmt(attribIDsQuery);
/* 16476 */     while (attrIDsRes.next())
/*       */     {
/* 16478 */       attribIDs.add("" + attrIDsRes.getInt(1));
/* 16479 */       System.out.println("attrIDsRes.getInt(1)  " + attrIDsRes.getInt(1));
/*       */     }
/* 16481 */     AMConnectionPool.closeStatement(attrIDsRes);
/* 16482 */     String threshQuery = "select ATTRIBUTE,THRESHOLDCONFIGURATIONID from AM_ATTRIBUTETHRESHOLDMAPPER where ID=" + templateResourceId;
/* 16483 */     AMConnectionPool.getInstance();ResultSet res = AMConnectionPool.executeQueryStmt(threshQuery);
/* 16484 */     while (res.next())
/*       */     {
/* 16486 */       if (res.getInt(2) != 403)
/*       */       {
/* 16488 */         attribIDVsThresholdID.put("" + res.getInt(1), "" + res.getInt(2));
/*       */       }
/*       */     }
/* 16491 */     AMConnectionPool.closeStatement(res);
/* 16492 */     String anomalyQuery = "select ATTRIBUTEID,ANOMALYID from AM_ANOMALYTHRESHOLDMAPPER where ID=" + templateResourceId;
/* 16493 */     AMConnectionPool.getInstance();ResultSet rs1 = AMConnectionPool.executeQueryStmt(anomalyQuery);
/* 16494 */     while (rs1.next())
/*       */     {
/* 16496 */       if (rs1.getInt(2) != 403)
/*       */       {
/* 16498 */         attribIDVsAnomalyID.put("" + rs1.getInt(1), "" + rs1.getInt(2));
/*       */       }
/*       */     }
/*       */     
/* 16502 */     AMConnectionPool.closeStatement(rs1);
/* 16503 */     String resIDsQuery = "select RESOURCEID,DISPLAYNAME from AM_ManagedObject where RESOURCEID in (" + listToApply + ")";
/* 16504 */     AMConnectionPool.getInstance();ResultSet res1 = AMConnectionPool.executeQueryStmt(resIDsQuery);
/* 16505 */     while (res1.next())
/*       */     {
/*       */ 
/* 16508 */       int teResId = res1.getInt(1);
/* 16509 */       resIDs.add("" + teResId);
/* 16510 */       resDisplayNames.add(res1.getString(2));
/* 16511 */       commaSepResIDs = commaSepResIDs + "'" + teResId + "',";
/*       */     }
/* 16513 */     AMConnectionPool.closeStatement(res1);
/* 16514 */     if (resIDs.size() == 0)
/*       */     {
/*       */ 
/*       */ 
/* 16518 */       return new ActionForward("/jsp/FaultTemplateOptionsResult.jsp?result=No Monitors of this type");
/*       */     }
/*       */     
/*       */ 
/* 16522 */     commaSepResIDs = commaSepResIDs.substring(0, commaSepResIDs.length() - 1);
/*       */     
/* 16524 */     if (deleteAndAddThresholds)
/*       */     {
/* 16526 */       String deleteQuery = "delete from AM_ATTRIBUTETHRESHOLDMAPPER where ID in (" + commaSepResIDs + ") and ATTRIBUTE!=403";
/*       */       
/*       */ 
/*       */ 
/*       */ 
/* 16531 */       AMConnectionPool.getInstance();AMConnectionPool.executeUpdateStmt(deleteQuery);
/* 16532 */       String entity = null;
/* 16533 */       String[] resIds = commaSepResIDs.replaceAll("'", "").split(",");
/* 16534 */       String resId; for (resId : resIds)
/*       */       {
/* 16536 */         for (String attribID : attribIDs)
/*       */         {
/*       */ 
/* 16539 */           if ((!AMAttributesCache.isHealthAttribute(attribID)) && (!AMAttributesCache.isAvailabilityAttribute(attribID)) && (!"403".equals(attribID)))
/*       */           {
/* 16541 */             AMLog.audit("AdminActions : applyTemplateSettings : Removed Configurations :  resId=" + resId + " attribID=" + attribID);
/* 16542 */             AMCacheHandler.removeThresholdConfiguration(resId, attribID);
/* 16543 */             com.adventnet.appmanager.util.Constants.removeThresholdEntry(attribID, resId);
/* 16544 */             entity = resId + "_" + attribID;
/* 16545 */             FaultUtil.deleteAlertsForEntity(entity);
/*       */           }
/*       */         }
/*       */       }
/*       */     }
/*       */     
/* 16551 */     if (deleteAndAddAnomaly)
/*       */     {
/* 16553 */       String deleteQuery = "delete from AM_ANOMALYTHRESHOLDMAPPER where ID in (" + commaSepResIDs + ") and ATTRIBUTEID!=403";
/*       */       
/* 16555 */       AMConnectionPool.getInstance();AMConnectionPool.executeUpdateStmt(deleteQuery);
/*       */     }
/*       */     
/* 16558 */     if (deleteAndAddActions)
/*       */     {
/* 16560 */       String deleteQuery = "delete from AM_ATTRIBUTEACTIONMAPPER where ID in (" + commaSepResIDs + ")";
/* 16561 */       AMConnectionPool.getInstance();AMConnectionPool.executeUpdateStmt(deleteQuery);
/*       */     }
/* 16563 */     String actQuery = "select ATTRIBUTE,SEVERITY,ACTIONID from AM_ATTRIBUTEACTIONMAPPER where ID=" + templateResourceId;
/* 16564 */     AMConnectionPool.getInstance();ResultSet res3 = AMConnectionPool.executeQueryStmt(actQuery);
/* 16565 */     while (res3.next())
/*       */     {
/* 16567 */       String attrID = "" + res3.getInt(1);
/* 16568 */       int severity = res3.getInt(2);
/* 16569 */       int actID = res3.getInt(3);
/* 16570 */       if (severity == 1)
/*       */       {
/* 16572 */         ArrayList criref = (ArrayList)criticalActions.get(attrID);
/* 16573 */         if (criref == null)
/*       */         {
/* 16575 */           criticalActions.put(attrID, new ArrayList());
/* 16576 */           criref = (ArrayList)criticalActions.get(attrID);
/*       */         }
/*       */         
/* 16579 */         criref.add("" + actID);
/*       */       }
/* 16581 */       else if (severity == 4)
/*       */       {
/* 16583 */         ArrayList warnref = (ArrayList)warningActions.get(attrID);
/* 16584 */         if (warnref == null)
/*       */         {
/* 16586 */           warningActions.put(attrID, new ArrayList());
/* 16587 */           warnref = (ArrayList)warningActions.get(attrID);
/*       */         }
/* 16589 */         warnref.add("" + actID);
/*       */       }
/* 16591 */       else if (severity == 5)
/*       */       {
/* 16593 */         ArrayList cleref = (ArrayList)clearActions.get(attrID);
/* 16594 */         if (cleref == null)
/*       */         {
/* 16596 */           clearActions.put(attrID, new ArrayList());
/* 16597 */           cleref = (ArrayList)clearActions.get(attrID);
/*       */         }
/* 16599 */         cleref.add("" + actID);
/*       */       }
/*       */     }
/* 16602 */     AMConnectionPool.closeStatement(res3);
/* 16603 */     for (int i = 0; i < resIDs.size(); i++)
/*       */     {
/* 16605 */       String resourceIDToApply = (String)resIDs.get(i);
/* 16606 */       for (int j = 0; j < attribIDs.size(); j++)
/*       */       {
/* 16608 */         String attributeIDToApply = (String)attribIDs.get(j);
/* 16609 */         String thresh = (String)attribIDVsThresholdID.get(attribIDs.get(j));
/* 16610 */         String aid = (String)attribIDVsAnomalyID.get(attribIDs.get(j));
/* 16611 */         if (thresh != null)
/*       */         {
/* 16613 */           String q = "insert into AM_ATTRIBUTETHRESHOLDMAPPER (ID,ATTRIBUTE,THRESHOLDCONFIGURATIONID) values (" + resourceIDToApply + "," + attributeIDToApply + "," + thresh + ")";
/*       */           try
/*       */           {
/* 16616 */             if (!attributeIDToApply.equals("403"))
/*       */             {
/* 16618 */               AMConnectionPool.getInstance();AMConnectionPool.executeUpdateStmt(q);
/* 16619 */               AMCacheHandler.setThresholdconfiguration(resourceIDToApply, attributeIDToApply, thresh);
/*       */             }
/*       */           }
/*       */           catch (SQLException ee) {}
/*       */         }
/*       */         
/*       */ 
/*       */ 
/* 16627 */         if (aid != null)
/*       */         {
/* 16629 */           String q = "insert into AM_ANOMALYTHRESHOLDMAPPER (ID,ATTRIBUTEID,ANOMALYID) values (" + resourceIDToApply + "," + attributeIDToApply + "," + aid + ")";
/*       */           try
/*       */           {
/* 16632 */             if (!attributeIDToApply.equals("403"))
/*       */             {
/*       */ 
/* 16635 */               AMConnectionPool.getInstance();AMConnectionPool.executeUpdateStmt(q);
/*       */             }
/*       */           }
/*       */           catch (Exception ee)
/*       */           {
/* 16640 */             ee.printStackTrace();
/*       */           }
/*       */         }
/* 16643 */         Object criref = criticalActions.get(attributeIDToApply);
/* 16644 */         if (criref != null)
/*       */         {
/* 16646 */           ArrayList cri = (ArrayList)criref;
/* 16647 */           for (int k = 0; k < cri.size(); k++)
/*       */           {
/* 16649 */             String crQ = "insert into AM_ATTRIBUTEACTIONMAPPER (ID,ATTRIBUTE,SEVERITY,ACTIONID) values(" + resourceIDToApply + "," + attributeIDToApply + "," + 1 + "," + cri.get(k) + ")";
/*       */             try
/*       */             {
/* 16652 */               AMConnectionPool.getInstance();AMConnectionPool.executeUpdateStmt(crQ);
/*       */             }
/*       */             catch (SQLException ee) {}
/*       */           }
/*       */           
/*       */ 
/*       */ 
/* 16659 */           if (AMAttributesCache.isHealthAttribute(attributeIDToApply))
/*       */           {
/* 16661 */             String crQ = "insert into AM_ATTRIBUTEACTIONSTATUS (RESOURCEID, ATTRIBUTEID, SEVERITY, ACTIONTRIGGEREDCOUNT) values(" + resourceIDToApply + "," + attributeIDToApply + "," + 1 + ",0)";
/*       */             try
/*       */             {
/* 16664 */               AMConnectionPool.getInstance();AMConnectionPool.executeUpdateStmt(crQ);
/*       */             }
/*       */             catch (SQLException ee) {}
/*       */           }
/*       */         }
/*       */         
/*       */ 
/*       */ 
/* 16672 */         Object warnref = warningActions.get(attributeIDToApply);
/* 16673 */         if (warnref != null)
/*       */         {
/* 16675 */           ArrayList warn = (ArrayList)warnref;
/* 16676 */           for (int kl = 0; kl < warn.size(); kl++)
/*       */           {
/* 16678 */             String warnQ = "insert into AM_ATTRIBUTEACTIONMAPPER (ID,ATTRIBUTE,SEVERITY,ACTIONID) values(" + resourceIDToApply + "," + attributeIDToApply + "," + 4 + "," + warn.get(kl) + ")";
/*       */             try
/*       */             {
/* 16681 */               AMConnectionPool.getInstance();AMConnectionPool.executeUpdateStmt(warnQ);
/*       */             }
/*       */             catch (SQLException ee) {}
/*       */           }
/*       */           
/*       */ 
/*       */ 
/* 16688 */           if (AMAttributesCache.isHealthAttribute(attributeIDToApply))
/*       */           {
/* 16690 */             String crQ = "insert into AM_ATTRIBUTEACTIONSTATUS (RESOURCEID, ATTRIBUTEID, SEVERITY, ACTIONTRIGGEREDCOUNT) values(" + resourceIDToApply + "," + attributeIDToApply + "," + 4 + ",0)";
/*       */             try
/*       */             {
/* 16693 */               AMConnectionPool.getInstance();AMConnectionPool.executeUpdateStmt(crQ);
/*       */             }
/*       */             catch (SQLException ee) {}
/*       */           }
/*       */         }
/*       */         
/*       */ 
/*       */ 
/*       */ 
/* 16702 */         Object clrref = clearActions.get(attributeIDToApply);
/* 16703 */         if (clrref != null)
/*       */         {
/* 16705 */           ArrayList clr = (ArrayList)clrref;
/* 16706 */           for (int m = 0; m < clr.size(); m++)
/*       */           {
/* 16708 */             String clrQ = "insert into AM_ATTRIBUTEACTIONMAPPER (ID,ATTRIBUTE,SEVERITY,ACTIONID) values(" + resourceIDToApply + "," + attributeIDToApply + "," + 5 + "," + clr.get(m) + ")";
/*       */             try
/*       */             {
/* 16711 */               AMConnectionPool.getInstance();AMConnectionPool.executeUpdateStmt(clrQ);
/*       */             }
/*       */             catch (SQLException ee) {}
/*       */           }
/*       */         }
/*       */       }
/*       */     }
/*       */     
/*       */ 
/*       */ 
/* 16721 */     request.setAttribute("resultresids", resDisplayNames);
/* 16722 */     return new ActionForward("/jsp/FaultTemplateOptionsResult.jsp");
/*       */   }
/*       */   
/*       */   public void getMonitorsDetails()
/*       */   {
/*       */     try
/*       */     {
/* 16729 */       String query = "";
/* 16730 */       long conf = 0L;
/* 16731 */       long unconf = 0L;
/* 16732 */       long total = 0L;
/* 16733 */       long datalength = 0L;
/* 16734 */       long indexlength = 0L;
/* 16735 */       int nooftables = 0;
/* 16736 */       ResultSet rs = null;
/* 16737 */       AMConnectionPool cp = AMConnectionPool.getInstance();
/* 16738 */       query = "select  TYPE,count(IF(DCSTARTED=2,DCSTARTED,null)) as CONFIGURED,count(IF(DCSTARTED=1,DCSTARTED,null)) as UNCONFIGURED,count(DCSTARTED) as TOTAL from AM_ManagedObject where TYPE in " + this.types + " group by TYPE order by TYPE";
/*       */       try
/*       */       {
/* 16741 */         rs = AMConnectionPool.executeQueryStmt(query);
/* 16742 */         while (rs.next())
/*       */         {
/*       */ 
/* 16745 */           System.out.println(rs.getString("TYPE"));
/*       */           
/* 16747 */           if ((rs.getString("TYPE").equals("JBOSS-server")) || (rs.getString("TYPE").equals("Tomcat-server")) || (rs.getString("TYPE").equals("WEBLOGIC-server")) || (rs.getString("TYPE").equals("DB2-server")) || (rs.getString("TYPE").equals("MYSQL-DB-server")) || (rs.getString("TYPE").equals("ORACLE-DB-server")) || (rs.getString("TYPE").equals("MSSQL-DB-server")) || (rs.getString("TYPE").equals("SYBASE-DB-server")) || (rs.getString("TYPE").equals("Linux")) || (rs.getString("TYPE").toLowerCase().indexOf("novell") != -1) || (rs.getString("TYPE").equals("SUN")) || (rs.getString("TYPE").equals("SUN PC")) || (rs.getString("TYPE").equals("Windows 2000")) || (rs.getString("TYPE").equals("Windows 2003")) || (rs.getString("TYPE").equals("Windows XP")) || (rs.getString("TYPE").equals("Windows Vista")) || (rs.getString("TYPE").equals("Windows 2008")) || (rs.getString("TYPE").equals("Windows 7")) || (rs.getString("TYPE").equals("Windows95")) || (rs.getString("TYPE").equals("WindowsNT")) || (rs.getString("TYPE").equals("WindowsNT_Server")) || (rs.getString("TYPE").equals("Windows 8")) || (rs.getString("TYPE").equals("Windows 10")) || (rs.getString("TYPE").equals("Windows 2012")))
/*       */           {
/* 16749 */             System.out.println("Configured   : " + rs.getLong("CONFIGURED"));
/* 16750 */             System.out.println("UnConfigured : " + rs.getLong("UNCONFIGURED"));
/* 16751 */             System.out.println("Total        : " + rs.getLong("TOTAL"));
/* 16752 */             conf += rs.getLong("CONFIGURED");
/* 16753 */             unconf += rs.getLong("UNCONFIGURED");
/* 16754 */             total += rs.getLong("TOTAL");
/*       */           }
/* 16756 */           else if (rs.getString("TYPE").equals("HAI"))
/*       */           {
/* 16758 */             System.out.println("Total BA     : " + rs.getLong("UNCONFIGURED"));
/*       */           }
/*       */           else
/*       */           {
/* 16762 */             System.out.println("Configured   : " + (rs.getLong("CONFIGURED") + rs.getLong("UNCONFIGURED")));
/* 16763 */             System.out.println("Total        : " + rs.getLong("TOTAL"));
/* 16764 */             conf = conf + rs.getLong("CONFIGURED") + rs.getLong("UNCONFIGURED");
/* 16765 */             total += rs.getLong("TOTAL");
/*       */           }
/*       */         }
/* 16768 */         AMConnectionPool.closeStatement(rs);
/*       */       }
/*       */       catch (Exception e)
/*       */       {
/* 16772 */         rs = null;
/* 16773 */         e.printStackTrace();
/*       */       }
/* 16775 */       System.out.println("--------------------------");
/* 16776 */       System.out.println("TOTAL");
/* 16777 */       System.out.println("Data Collecting : " + conf);
/* 16778 */       System.out.println("Status Polling  : " + unconf);
/* 16779 */       System.out.println("Total           : " + total);
/* 16780 */       query = "show table status";
/*       */       try
/*       */       {
/* 16783 */         rs = AMConnectionPool.executeQueryStmt(query);
/* 16784 */         while (rs.next())
/*       */         {
/* 16786 */           nooftables += 1;
/* 16787 */           datalength += rs.getLong("Data_length");
/* 16788 */           indexlength += rs.getLong("Index_length");
/*       */         }
/* 16790 */         AMConnectionPool.closeStatement(rs);
/*       */       }
/*       */       catch (Exception e)
/*       */       {
/* 16794 */         rs = null;
/* 16795 */         e.printStackTrace();
/*       */       }
/* 16797 */       System.out.println("--------------------------");
/* 16798 */       System.out.println("DB Details");
/* 16799 */       System.out.println("Number of Tables  : " + nooftables);
/* 16800 */       System.out.println("Total Data Length : " + datalength / 1048576.0D + " (MB)");
/* 16801 */       System.out.println("Index Data Length : " + indexlength / 1048576.0D + " (MB)");
/* 16802 */       System.out.println("Total Size        : " + (datalength + indexlength) / 1048576.0D + " (MB)");
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 16806 */       e.printStackTrace();
/*       */     }
/*       */   }
/*       */   
/*       */   private void closeStatement(ResultSet rs)
/*       */   {
/*       */     try {
/* 16813 */       AMConnectionPool.closeStatement(rs);
/*       */     }
/*       */     catch (Exception ee)
/*       */     {
/* 16817 */       ee.printStackTrace();
/*       */     }
/*       */   }
/*       */   
/*       */   public class MyThread
/*       */     extends Thread
/*       */   {
/*       */     private String mailMsg;
/*       */     private String fileName;
/* 16826 */     private String customerName = "Not Given";
/* 16827 */     private String customermail = "Not Given";
/* 16828 */     private String contact = "Not Given";
/*       */     private boolean upload;
/*       */     
/*       */     public MyThread() {}
/*       */     
/* 16833 */     public void setmailMsg(String mailMsg) { this.mailMsg = mailMsg; }
/*       */     
/*       */ 
/*       */     public void setfileName(String fileName)
/*       */     {
/* 16838 */       this.fileName = fileName;
/*       */     }
/*       */     
/*       */     public void run()
/*       */     {
/*       */       try {
/* 16844 */         com.adventnet.appmanager.util.SupportZipUtil.createSupportZip(this.mailMsg, this.fileName);
/* 16845 */         if (this.upload)
/*       */         {
/* 16847 */           com.adventnet.appmanager.util.SupportFileUploader.doUpload(this.fileName, this.customermail, this.mailMsg, this.customerName, this.contact);
/*       */         }
/*       */       }
/*       */       catch (Exception e) {
/* 16851 */         e.printStackTrace();
/*       */       }
/*       */     }
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */   public ActionForward createPatternAction(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 16861 */     ActionMessages messages = new ActionMessages();
/* 16862 */     String displayName1 = "";
/* 16863 */     request.setAttribute("displayName1", request.getParameter("displayname"));
/* 16864 */     String type = request.getParameter("cancel");
/* 16865 */     String returnpath = request.getParameter("returnpath");
/* 16866 */     String displayname = request.getParameter("displayname");
/* 16867 */     if (DBQueryUtil.getDBType().equals("mssql"))
/*       */     {
/* 16869 */       displayname = displayname.replaceAll("'", "''");
/*       */     }
/*       */     else
/*       */     {
/* 16873 */       displayname = displayname.replaceAll("'", "\\\\'");
/*       */     }
/* 16875 */     if (type.equals("false"))
/*       */     {
/*       */ 
/* 16878 */       boolean isThresholdFloat = false;
/* 16879 */       boolean isThresholdString = true;
/* 16880 */       String thresholdType = "3";
/* 16881 */       if ((request.getParameter("select") != null) && (request.getParameter("select").equals("thresholdFloat")))
/*       */       {
/* 16883 */         isThresholdFloat = true;
/* 16884 */         isThresholdString = false;
/* 16885 */         thresholdType = "4";
/*       */       }
/* 16887 */       String checkquery = "select * from AM_THRESHOLDCONFIG where NAME='" + displayname + "'";
/* 16888 */       ArrayList list = this.mo.getRows(checkquery);
/* 16889 */       if (list.size() == 0)
/*       */       {
/* 16891 */         insertThreshold(request, isThresholdString, false, isThresholdFloat);
/*       */         
/* 16893 */         String id = null;
/* 16894 */         if ("true".equals(request.getParameter("adminAPIRequest"))) {
/* 16895 */           id = request.getParameter("thresholdid");
/* 16896 */           AMCacheHandler.setThresholdProfileinCache(id);
/*       */         } else {
/* 16898 */           id = updateThresholdProfileinCache();
/*       */         }
/*       */         
/*       */         try
/*       */         {
/* 16903 */           String tableName = isThresholdFloat ? "AM_FLOAT_THRESHOLDCONFIG" : "AM_PATTERNMATCHERCONFIG";
/* 16904 */           PreparedStatement ps = AMConnectionPool.getConnection().prepareStatement("insert into " + tableName + " (ID, CRITICALTHRESHOLDVALUE,WARNINGTHRESHOLDVALUE,INFOTHRESHOLDVALUE) values (?,?,?,?)");
/* 16905 */           if (isThresholdFloat) {
/* 16906 */             float criticalThreshold = request.getParameter("criticalthresholdvalue") == null ? 0.0F : Float.valueOf(request.getParameter("criticalthresholdvalue")).floatValue();
/* 16907 */             float warningThreshold = request.getParameter("warningthresholdvalue") == null ? 0.0F : Float.valueOf(request.getParameter("warningthresholdvalue")).floatValue();
/* 16908 */             float infoThreshold = request.getParameter("infothresholdvalue") == null ? 0.0F : Float.valueOf(request.getParameter("infothresholdvalue")).floatValue();
/* 16909 */             ps.setInt(1, Integer.parseInt(id));
/* 16910 */             ps.setFloat(2, criticalThreshold);
/* 16911 */             ps.setFloat(3, warningThreshold);
/* 16912 */             ps.setFloat(4, infoThreshold);
/*       */           }
/*       */           else {
/* 16915 */             ps.setInt(1, Integer.parseInt(id));
/* 16916 */             ps.setString(2, request.getParameter("criticalthresholdvalue"));
/* 16917 */             ps.setString(3, request.getParameter("warningthresholdvalue"));
/* 16918 */             ps.setString(4, request.getParameter("infothresholdvalue"));
/*       */           }
/* 16920 */           ps.executeUpdate();
/*       */         }
/*       */         catch (Exception ex)
/*       */         {
/* 16924 */           ex.printStackTrace();
/*       */         }
/*       */         
/*       */ 
/* 16928 */         if (EnterpriseUtil.isAdminServer()) {
/* 16929 */           ThresholdActionsAPIUtil.addThresholdProfiletoSynch(request, id, thresholdType, false);
/*       */         }
/* 16931 */         DelegatedUserRoleUtil.addEntryToConfigUserTable(request, Integer.parseInt(id), 1);
/* 16932 */         messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("patternprofile.create.success.message1"));
/* 16933 */         messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("patternprofile.create.success.message2"));
/* 16934 */         saveMessages(request, messages);
/*       */       }
/*       */       else
/*       */       {
/* 16938 */         messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("patternprofile.create.alreadyexists", request.getParameter("displayname")));
/* 16939 */         saveMessages(request, messages);
/* 16940 */         if (isThresholdFloat)
/*       */         {
/* 16942 */           return new ActionForward("/showTile.do?TileName=.ThresholdConf");
/*       */         }
/*       */         
/*       */ 
/* 16946 */         return new ActionForward("/showTile.do?TileName=.PatternConf");
/*       */       }
/*       */       
/*       */ 
/* 16950 */       if (returnpath != null)
/*       */       {
/* 16952 */         return new ActionForward(returnpath);
/*       */       }
/*       */       
/*       */ 
/* 16956 */       return mapping.findForward("thresholdlist");
/*       */     }
/*       */     
/*       */ 
/*       */ 
/* 16961 */     if (returnpath != null)
/*       */     {
/* 16963 */       return new ActionForward(returnpath);
/*       */     }
/*       */     
/*       */ 
/* 16967 */     return mapping.findForward("thresholdlist");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward editPatternAction(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 16978 */     AMActionForm amform = (AMActionForm)form;
/* 16979 */     ActionMessages messages = new ActionMessages();
/* 16980 */     String update = request.getParameter("update");
/* 16981 */     String thresholdType = "3";
/* 16982 */     if ((request.getParameter("type") != null) && (request.getParameter("type").equals("4")))
/*       */     {
/* 16984 */       thresholdType = "4";
/*       */     }
/* 16986 */     Vector updateStatus = ThresholdUtil.updateOnEditStringThreshold(amform.getId(), request.getParameterMap());
/* 16987 */     if ((updateStatus.get(0) != null) && ("Success".equals(updateStatus.get(0))))
/*       */     {
/* 16989 */       if (EnterpriseUtil.isAdminServer()) {
/* 16990 */         ThresholdActionsAPIUtil.addThresholdProfiletoSynch(request, amform.getId() + "", thresholdType, true);
/*       */       }
/* 16992 */       AMCacheHandler.setThresholdProfileinCache(String.valueOf(amform.getId()));
/* 16993 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("pattern.edit.success"));
/* 16994 */       saveMessages(request, messages);
/*       */     }
/*       */     else
/*       */     {
/* 16998 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage(updateStatus.get(1) != null ? updateStatus.get(1).toString() : FormatUtil.getString("patternprofile.create.alreadyexist", new String[] { request.getParameter("displayname") })));
/*       */       
/* 17000 */       saveMessages(request, messages);
/* 17001 */       if (update == null) {
/* 17002 */         return new ActionForward("/adminAction.do?method=showPatternAction&thresholdID=" + amform.getId() + "&haid=null");
/*       */       }
/* 17004 */       if (request.getParameter("popupNewThreshold") == null)
/*       */       {
/* 17006 */         return new ActionForward("/showActionProfiles.do?method=getPatternDetails&thresholdid=" + amform.getId());
/*       */       }
/* 17008 */       return new ActionForward("/showActionProfiles.do?method=getPatternDetails&popupNewThreshold=failed&thresholdid=" + amform.getId());
/*       */     }
/*       */     
/*       */ 
/* 17012 */     if ("true".equals(request.getParameter("adminAPIRequest"))) {
/* 17013 */       return null;
/*       */     }
/*       */     
/* 17016 */     if (update == null) {
/* 17017 */       return mapping.findForward("thresholdlist");
/*       */     }
/* 17019 */     if (request.getParameter("popupNewThreshold") == null)
/*       */     {
/* 17021 */       return new ActionForward("/showActionProfiles.do?method=getPatternDetails&thresholdid=" + amform.getId());
/*       */     }
/* 17023 */     return new ActionForward("/showActionProfiles.do?method=getPatternDetails&popupNewThreshold=true&thresholdid=" + amform.getId());
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward showPatternAction(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 17035 */     int thresholdID = Integer.parseInt(request.getParameter("thresholdID"));
/* 17036 */     ArrayList rows = ThresholdUtil.getDetailsofStringThreshold(thresholdID);
/* 17037 */     ArrayList row = (ArrayList)rows.get(0);
/*       */     
/* 17039 */     AMActionForm amform = (AMActionForm)form;
/* 17040 */     amform.setId(thresholdID);
/* 17041 */     amform.setDisplayname((String)row.get(0));
/* 17042 */     amform.setDescription((String)row.get(1));
/*       */     
/* 17044 */     amform.setCriticalthresholdcondition((String)row.get(2));
/* 17045 */     amform.setCriticalthresholdvalue((String)row.get(3));
/* 17046 */     amform.setCriticalthresholdmessage((String)row.get(4));
/*       */     
/* 17048 */     amform.setWarningthresholdcondition((String)row.get(5));
/* 17049 */     amform.setWarningthresholdvalue((String)row.get(6));
/* 17050 */     amform.setWarningthresholdmessage((String)row.get(7));
/*       */     
/* 17052 */     amform.setInfothresholdcondition((String)row.get(8));
/* 17053 */     amform.setInfothresholdvalue((String)row.get(9));
/* 17054 */     amform.setInfothresholdmessage((String)row.get(10));
/*       */     
/* 17056 */     String critical_polls = String.valueOf(row.get(11)).equals("0") ? "" : (String)row.get(11);
/* 17057 */     String warning_polls = String.valueOf(row.get(12)).equals("0") ? "" : (String)row.get(12);
/* 17058 */     String clear_polls = String.valueOf(row.get(13)).equals("0") ? "" : (String)row.get(13);
/* 17059 */     String min_critical_polls = String.valueOf(row.get(14)).equals("0") ? "" : (String)row.get(14);
/* 17060 */     String min_warning_polls = String.valueOf(row.get(15)).equals("0") ? "" : (String)row.get(15);
/* 17061 */     String min_clear_polls = String.valueOf(row.get(16)).equals("0") ? "" : (String)row.get(16);
/*       */     
/* 17063 */     amform.setConsecutive_criticalpolls(critical_polls);
/* 17064 */     amform.setConsecutive_warningpolls(warning_polls);
/* 17065 */     amform.setConsecutive_clearpolls(clear_polls);
/* 17066 */     amform.setConsecutive_mincriticalpolls(min_critical_polls);
/* 17067 */     amform.setConsecutive_minwarningpolls(min_warning_polls);
/* 17068 */     amform.setConsecutive_minclearpolls(min_clear_polls);
/* 17069 */     if ((EnterpriseUtil.isManagedServer()) && (thresholdID >= 10000) && (thresholdID < 10000000)) {
/* 17070 */       request.setAttribute("adminThresholdConfig", Boolean.valueOf(true));
/*       */     }
/* 17072 */     amform.setMethod("editPatternAction");
/* 17073 */     amform.setIsEditAllowed(DelegatedUserRoleUtil.isOwnedByDelegatedUser(thresholdID, DelegatedUserRoleUtil.getLoginUserid(request), 1));
/* 17074 */     return mapping.findForward("PatternForm");
/*       */   }
/*       */   
/*       */   public ActionForward listTrapListener(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
/*       */   {
/* 17079 */     if (com.adventnet.appmanager.util.Constants.isPrivilegedUser(request)) {
/* 17080 */       return new ActionForward("/jsp/formpages/AccessRestricted.jsp");
/*       */     }
/*       */     
/* 17083 */     AMConnectionPool cp = AMConnectionPool.getInstance();
/*       */     
/* 17085 */     String checkquery = "";
/*       */     
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/* 17098 */     checkquery = DBQueryUtil.getDBQuery("am.traplistner.listtrap.query");
/* 17099 */     String thresholdQuery = "SELECT AM_THRESHOLDCONFIG.ID,NAME,CASE CRITICALTHRESHOLDCONDITION when 'LT' then '<' WHEN 'GT' THEN '>' when 'EQ' then '=' WHEN 'NE' THEN '!=' when 'LE' then '<=' WHEN 'GE' THEN '>=' WHEN 'CT' THEN 'contains' WHEN 'DC' THEN 'does not contain' WHEN 'QL' THEN 'equals' WHEN 'NQ' THEN 'not equal to' WHEN 'DC' THEN 'does not contain' WHEN 'SW' THEN 'starts with' WHEN 'EW' THEN 'ends with' END as criticalcondition, AM_PATTERNMATCHERCONFIG.CRITICALTHRESHOLDVALUE ,CASE WARNINGTHRESHOLDCONDITION when 'LT' then '<' WHEN 'GT' THEN '>' when 'EQ' then '=' WHEN 'NE' THEN '!=' when 'LE' then '<=' WHEN 'GE' THEN '>=' WHEN 'CT' THEN 'contains' WHEN 'DC' THEN 'does not contain' WHEN 'QL' THEN 'equals' WHEN 'NQ' THEN 'not equal to' WHEN 'DC' THEN 'does not contain' WHEN 'SW' THEN 'starts with' WHEN 'EW' THEN 'ends with' END as warningcondition,AM_PATTERNMATCHERCONFIG.WARNINGTHRESHOLDVALUE,CASE INFOTHRESHOLDCONDITION when 'LT' then '<' WHEN 'GT' THEN '>' when 'EQ' then '=' WHEN 'NE' THEN '!=' when 'LE' then '<=' WHEN 'GE' THEN '>=' WHEN 'CT' THEN 'contains' WHEN 'DC' THEN 'does not contain' WHEN 'QL' THEN 'equals' WHEN 'NQ' THEN 'not equal to' WHEN 'DC' THEN 'does not contain' WHEN 'SW' THEN 'starts with' WHEN 'EW' THEN 'ends with' END  as clearcondition,AM_PATTERNMATCHERCONFIG.INFOTHRESHOLDVALUE  FROM  AM_THRESHOLDCONFIG LEFT OUTER JOIN AM_PATTERNMATCHERCONFIG ON AM_THRESHOLDCONFIG.ID  = AM_PATTERNMATCHERCONFIG.ID  WHERE TYPE=3 and DESCRIPTION  <> '##Threshod for URL##'";
/*       */     
/* 17101 */     ResultSet rs = null;
/*       */     
/* 17103 */     HashMap threshold = new HashMap();
/*       */     try
/*       */     {
/* 17106 */       rs = AMConnectionPool.executeQueryStmt(thresholdQuery);
/*       */       
/* 17108 */       while (rs.next())
/*       */       {
/* 17110 */         ArrayList thresholdDetails = new ArrayList();
/* 17111 */         thresholdDetails.add(rs.getString(2));
/* 17112 */         thresholdDetails.add(rs.getString(3));
/* 17113 */         thresholdDetails.add(rs.getString(4));
/* 17114 */         thresholdDetails.add(rs.getString(5));
/* 17115 */         thresholdDetails.add(rs.getString(6));
/* 17116 */         thresholdDetails.add(rs.getString(7));
/* 17117 */         thresholdDetails.add(rs.getString(8));
/*       */         
/* 17119 */         threshold.put(rs.getString(1), thresholdDetails);
/*       */       }
/*       */       
/*       */     }
/*       */     catch (Exception ex)
/*       */     {
/* 17125 */       ex.printStackTrace();
/*       */     }
/*       */     finally
/*       */     {
/* 17129 */       AMConnectionPool.closeStatement(rs);
/*       */     }
/*       */     
/*       */ 
/* 17133 */     ArrayList list = this.mo.getPropertiesList(checkquery);
/* 17134 */     request.setAttribute("list", list);
/* 17135 */     request.setAttribute("threshold", threshold);
/* 17136 */     return new ActionForward("/jsp/TrapListenerView.jsp");
/*       */   }
/*       */   
/*       */   public ActionForward editTrapListener(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
/*       */   {
/* 17141 */     ResultSet rs = null;
/* 17142 */     ArrayList rows = new ArrayList();
/* 17143 */     String trapid = request.getParameter("trapid");
/* 17144 */     String all = "select AM_ACTIONPROFILE.ID ,AM_ACTIONPROFILE.NAME from AM_ACTIONPROFILE where AM_ACTIONPROFILE.TYPE not in (11,12,13) and AM_ACTIONPROFILE.NAME not in ('Restart The Service','Marker')";
/*       */     
/*       */ 
/* 17147 */     AMActionForm amform = (AMActionForm)form;
/* 17148 */     AMConnectionPool cp = AMConnectionPool.getInstance();
/* 17149 */     if ((trapid != null) && (!trapid.equalsIgnoreCase("null")))
/*       */     {
/*       */ 
/* 17152 */       String checkquery = "SELECT AM_TRAPLISTENERCONFIG.TRAPID,AM_TRAPLISTENERCONFIG.TRAPNAME,CASE WHEN AM_TRAPLISTENERCONFIG.TRAPSTATUS = '1' THEN 'enable' ELSE 'disable' END as TRAPSTATUS,CASE WHEN AM_TRAPLISTENERCONFIG.TRAPVERSION = '0'  THEN 'v1'  WHEN AM_TRAPLISTENERCONFIG.TRAPVERSION = '1' THEN 'v2c' ELSE 'v3' END as TRAPVERSION, AM_TRAPLISTENERCONFIG.TRAPSEVERITY, AM_TRAPLISTENERCONFIG.TRAPHOST,AM_TRAPLISTENERCONFIG.TRAPVARBINDS,AM_TRAPLISTENERCONFIG.ASSOCIATE_TRAPSEVERITY,AM_V1TRAPCONFIG.GENERICTYPE,AM_V1TRAPCONFIG.SPECIFICTYPE,AM_V1TRAPCONFIG.ENTERPRISEOID,AM_V2CTRAPCONFIG.TRAPOID,AM_V3TRAPCONFIG.USERNAME  FROM  AM_TRAPLISTENERCONFIG LEFT OUTER JOIN AM_V1TRAPCONFIG ON AM_V1TRAPCONFIG.TRAPID  = AM_TRAPLISTENERCONFIG.TRAPID  LEFT OUTER JOIN AM_V2CTRAPCONFIG ON AM_V2CTRAPCONFIG.TRAPID  = AM_TRAPLISTENERCONFIG.TRAPID LEFT OUTER JOIN AM_V3TRAPCONFIG ON AM_V3TRAPCONFIG.TRAPID = AM_TRAPLISTENERCONFIG.TRAPID WHERE AM_TRAPLISTENERCONFIG.TRAPID=" + trapid;
/*       */       try
/*       */       {
/* 17155 */         rs = AMConnectionPool.executeQueryStmt(checkquery);
/* 17156 */         while (rs.next())
/*       */         {
/* 17158 */           amform.setTrapName(rs.getString("TRAPNAME"));
/* 17159 */           amform.setTrapStatus(rs.getString("TRAPSTATUS"));
/* 17160 */           amform.setTrapVersion(rs.getString("TRAPVERSION"));
/*       */           
/* 17162 */           amform.setThresholdList(rs.getString("TRAPSEVERITY"));
/* 17163 */           request.setAttribute("thresholdId", rs.getString("TRAPSEVERITY"));
/*       */           
/* 17165 */           if (rs.getString("TRAPHOST").equalsIgnoreCase("-1"))
/*       */           {
/* 17167 */             amform.setChkTrapHost("true");
/*       */           }
/*       */           else
/*       */           {
/* 17171 */             amform.setChkTrapHost("false");
/* 17172 */             amform.setTrapHost(rs.getString("TRAPHOST"));
/*       */           }
/* 17174 */           String trapVarbindStr = rs.getString("TRAPVARBINDS");
/* 17175 */           if ((trapVarbindStr == null) || (trapVarbindStr.equals("")))
/*       */           {
/* 17177 */             amform.setChkCustomizeVarbinds("false");
/*       */           }
/*       */           else
/*       */           {
/* 17181 */             amform.setChkCustomizeVarbinds("true");
/* 17182 */             amform.setTrapCustomVarbinds(rs.getString("TRAPVARBINDS"));
/*       */           }
/* 17184 */           if (rs.getBoolean("ASSOCIATE_TRAPSEVERITY"))
/*       */           {
/* 17186 */             amform.setChkAssociateTrapSeverity("true");
/*       */           }
/*       */           else
/*       */           {
/* 17190 */             amform.setChkAssociateTrapSeverity("false");
/*       */           }
/* 17192 */           if (rs.getString("TRAPVERSION").equalsIgnoreCase("v1"))
/*       */           {
/* 17194 */             amform.setTrapType(rs.getString("GENERICTYPE"));
/* 17195 */             amform.setSpecificType(rs.getString("SPECIFICTYPE"));
/* 17196 */             amform.setEnterpriseOID(rs.getString("ENTERPRISEOID"));
/*       */           }
/*       */           else
/*       */           {
/* 17200 */             amform.setTrapOID(rs.getString("TRAPOID"));
/* 17201 */             if (rs.getString("TRAPVERSION").equalsIgnoreCase("v3"))
/*       */             {
/* 17203 */               amform.setV3UserName(rs.getString("USERNAME"));
/*       */             }
/*       */           }
/*       */         }
/* 17207 */         AMConnectionPool.closeStatement(rs);
/*       */       }
/*       */       catch (Exception e)
/*       */       {
/* 17211 */         rs = null;
/* 17212 */         e.printStackTrace();
/*       */       }
/*       */     }
/*       */     
/* 17216 */     return new ActionForward("/jsp/TrapListener.jsp");
/*       */   }
/*       */   
/*       */   public ActionForward createTrapListener(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
/*       */   {
/* 17221 */     String trapid = "";
/* 17222 */     String trapname = request.getParameter("trapName");
/* 17223 */     String trapstatus = request.getParameter("trapStatus");
/* 17224 */     String trapversion = request.getParameter("trapVersion");
/* 17225 */     String severity = request.getParameter("thresholdList");
/* 17226 */     String chktraphost = request.getParameter("chkTrapHost");
/* 17227 */     String thresholdVal = request.getParameter("thresholdList");
/* 17228 */     String traphost = "";
/* 17229 */     String chkCustomizeVarbinds = request.getParameter("chkCustomizeVarbinds");
/* 17230 */     String chkAssociateTrapSeverity = request.getParameter("chkAssociateTrapSeverity");
/* 17231 */     String trapCustomVarbinds = "";
/* 17232 */     String v3UserName = "";
/* 17233 */     ActionMessages messages = new ActionMessages();
/* 17234 */     int status = 1;
/* 17235 */     int version = 0;
/* 17236 */     if (!trapstatus.equalsIgnoreCase("enable"))
/*       */     {
/* 17238 */       status = 0;
/*       */     }
/* 17240 */     if (trapversion.equalsIgnoreCase("v2c"))
/*       */     {
/* 17242 */       version = 1;
/*       */     }
/* 17244 */     if (trapversion.equalsIgnoreCase("v3"))
/*       */     {
/* 17246 */       version = 2;
/* 17247 */       v3UserName = request.getParameter("v3UserName");
/*       */     }
/* 17249 */     if ((chktraphost == null) || (chktraphost.equalsIgnoreCase("null")))
/*       */     {
/* 17251 */       traphost = InetAddress.getByName(request.getParameter("trapHost")).getCanonicalHostName();
/*       */     }
/*       */     else
/*       */     {
/* 17255 */       traphost = "-1";
/*       */     }
/* 17257 */     if ((chkCustomizeVarbinds != null) && ((chkCustomizeVarbinds.equalsIgnoreCase("true")) || (chkCustomizeVarbinds.equalsIgnoreCase("on"))))
/*       */     {
/* 17259 */       trapCustomVarbinds = request.getParameter("trapCustomVarbinds");
/* 17260 */       if (trapCustomVarbinds != null)
/*       */       {
/* 17262 */         trapCustomVarbinds = trapCustomVarbinds.trim();
/*       */       }
/*       */     }
/*       */     else
/*       */     {
/* 17267 */       trapCustomVarbinds = "";
/*       */     }
/* 17269 */     int associateTrapSeverity = 0;
/* 17270 */     if ((chkAssociateTrapSeverity != null) && ((chkAssociateTrapSeverity.equalsIgnoreCase("true")) || (chkAssociateTrapSeverity.equalsIgnoreCase("on"))))
/*       */     {
/* 17272 */       associateTrapSeverity = 1;
/*       */     }
/* 17274 */     AMConnectionPool cp = AMConnectionPool.getInstance();
/*       */     
/*       */ 
/* 17277 */     boolean name_exist = false;
/* 17278 */     ResultSet rst = null;
/*       */     try
/*       */     {
/* 17281 */       rst = AMConnectionPool.executeQueryStmt("select * from AM_TRAPLISTENERCONFIG where TRAPNAME='" + trapname + "' and " + DBQueryUtil.castasVarchar("TRAPID") + " <> '" + trapid + "'");
/* 17282 */       if (rst.next())
/*       */       {
/* 17284 */         name_exist = true;
/*       */       }
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 17289 */       e.printStackTrace();
/*       */     }
/*       */     finally {
/* 17292 */       AMConnectionPool.closeStatement(rst);
/*       */     }
/* 17294 */     if (name_exist)
/*       */     {
/* 17296 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("appmanager.error", "The given trap listener name " + trapname + " already exist."));
/* 17297 */       saveMessages(request, messages);
/* 17298 */       return new ActionForward("/adminAction.do?method=editTrapListener");
/*       */     }
/*       */     
/*       */ 
/*       */     try
/*       */     {
/* 17304 */       AMManagedObjectDao dao = AMManagedObjectDao.getAMManagedObjectDao();
/* 17305 */       AMManagedObject ammo = new AMManagedObject();
/* 17306 */       ammo.setRESOURCENAME(trapname);
/* 17307 */       ammo.setType("Trap");
/* 17308 */       ammo.setDISPLAYNAME(trapname);
/* 17309 */       ammo.setDESCRIPTION("SNMP Trap Listener is added");
/* 17310 */       dao.create(ammo);
/* 17311 */       trapid = ammo.getRESOURCEID() + "";
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 17315 */       e.printStackTrace();
/*       */     }
/*       */     
/* 17318 */     if ((thresholdVal != null) && (!thresholdVal.equals("nothingSelected")))
/*       */     {
/* 17320 */       if ((thresholdVal.equals("Newfalse")) || (thresholdVal.equals("Newtrue")))
/*       */       {
/* 17322 */         String displayname = request.getParameter("displayname");
/* 17323 */         if (DBQueryUtil.getDBType().equals("mssql"))
/*       */         {
/* 17325 */           displayname = displayname.replaceAll("'", "''");
/*       */         }
/*       */         else
/*       */         {
/* 17329 */           displayname = displayname.replaceAll("'", "\\\\'");
/*       */         }
/* 17331 */         String checkquery = "select * from AM_THRESHOLDCONFIG where NAME='" + displayname + "'";
/* 17332 */         ArrayList list = this.mo.getRows(checkquery);
/* 17333 */         if (list.size() == 0)
/*       */         {
/* 17335 */           boolean stringpattern = false;
/* 17336 */           Statement stmt = null;
/* 17337 */           ResultSet rs = null;
/*       */           try {
/* 17339 */             stmt = AMConnectionPool.getConnection().createStatement();
/* 17340 */             if (thresholdVal.equals("Newfalse"))
/*       */             {
/* 17342 */               insertThreshold(request, false, true);
/*       */             }
/*       */             else
/*       */             {
/* 17346 */               stringpattern = true;
/* 17347 */               insertThreshold(request, true, true);
/*       */             }
/*       */             
/*       */ 
/* 17351 */             thresholdVal = updateThresholdProfileinCache();
/*       */             
/*       */ 
/* 17354 */             AMCacheHandler.setThresholdProfileinCache(thresholdVal);
/*       */           }
/*       */           catch (Exception ex)
/*       */           {
/* 17358 */             ex.printStackTrace();
/*       */           }
/*       */           finally
/*       */           {
/* 17362 */             stmt.close();
/* 17363 */             AMConnectionPool.closeStatement(rs);
/*       */           }
/*       */           
/*       */ 
/*       */ 
/* 17368 */           if (stringpattern)
/*       */           {
/*       */             try
/*       */             {
/* 17372 */               PreparedStatement ps = AMConnectionPool.getConnection().prepareStatement("insert into AM_PATTERNMATCHERCONFIG(ID, CRITICALTHRESHOLDVALUE,WARNINGTHRESHOLDVALUE,INFOTHRESHOLDVALUE) values (?,?,?,?)");
/* 17373 */               ps.setInt(1, Integer.parseInt(thresholdVal));
/* 17374 */               ps.setString(2, request.getParameter("criticalthresholdvalue"));
/* 17375 */               ps.setString(3, request.getParameter("warningthresholdvalue"));
/* 17376 */               ps.setString(4, request.getParameter("infothresholdvalue"));
/* 17377 */               ps.executeUpdate();
/*       */             }
/*       */             catch (Exception ex) {
/* 17380 */               ex.printStackTrace();
/*       */             }
/*       */             
/*       */           }
/*       */           
/*       */ 
/*       */         }
/*       */         else
/*       */         {
/*       */ 
/* 17390 */           messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("thresholdprofile.create.alreadyexists", request.getParameter("displayname")));
/* 17391 */           saveMessages(request, messages);
/* 17392 */           return new ActionForward("/adminAction.do?method=editTrapListener");
/*       */         }
/*       */       }
/*       */     }
/*       */     
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/* 17405 */     String query = "insert into AM_TRAPLISTENERCONFIG (TRAPID,TRAPNAME,TRAPSTATUS,TRAPVERSION,TRAPSEVERITY,TRAPHOST, TRAPVARBINDS, ASSOCIATE_TRAPSEVERITY) values(" + trapid + ",'" + trapname + "'," + status + "," + version + ",'" + thresholdVal + "','" + traphost + "','" + trapCustomVarbinds + "'," + associateTrapSeverity + ")";
/*       */     try
/*       */     {
/* 17408 */       AMConnectionPool.executeUpdateStmt(query);
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 17412 */       e.printStackTrace();
/*       */     }
/*       */     
/*       */ 
/* 17416 */     String mapperQuery = "insert into AM_ATTRIBUTETHRESHOLDMAPPER values (" + trapid + ",3200," + thresholdVal + ")";
/*       */     try
/*       */     {
/* 17419 */       AMConnectionPool.executeUpdateStmt(mapperQuery);
/*       */     }
/*       */     catch (Exception ex)
/*       */     {
/* 17423 */       ex.printStackTrace();
/*       */     }
/*       */     
/* 17426 */     AMCacheHandler.setThresholdconfiguration(trapid, "3200", thresholdVal);
/*       */     
/*       */ 
/* 17429 */     addActions(Integer.parseInt(trapid), 3200, 1, request.getParameterValues("selectedactions_critical"));
/* 17430 */     addActions(Integer.parseInt(trapid), 3200, 4, request.getParameterValues("selectedactions_warning"));
/* 17431 */     addActions(Integer.parseInt(trapid), 3200, 5, request.getParameterValues("selectedactions_clear"));
/*       */     
/*       */ 
/*       */ 
/* 17435 */     if ((trapversion != null) && (trapversion.equalsIgnoreCase("v1")))
/*       */     {
/* 17437 */       String generictype = request.getParameter("trapType");
/* 17438 */       String enterprise = request.getParameter("enterpriseOID");
/* 17439 */       String specifictype = "0";
/* 17440 */       if (generictype.equals("6"))
/* 17441 */         specifictype = request.getParameter("specificType");
/* 17442 */       query = "insert into AM_V1TRAPCONFIG values(" + trapid + "," + generictype + ",'" + specifictype + "','" + enterprise + "')";
/*       */     }
/* 17444 */     else if (trapversion != null)
/*       */     {
/* 17446 */       String trapOID = request.getParameter("trapOID");
/* 17447 */       query = "insert into AM_V2CTRAPCONFIG values(" + trapid + ",'" + trapOID + "')";
/* 17448 */       if (trapversion.equalsIgnoreCase("v3"))
/*       */       {
/* 17450 */         String v3_insert_query = "insert into AM_V3TRAPCONFIG values(" + trapid + ",'" + v3UserName + "')";
/*       */         try
/*       */         {
/* 17453 */           AMConnectionPool.executeUpdateStmt(v3_insert_query);
/*       */         }
/*       */         catch (Exception ex)
/*       */         {
/* 17457 */           ex.printStackTrace();
/*       */         }
/*       */       }
/*       */     }
/*       */     
/*       */     try
/*       */     {
/* 17464 */       AMConnectionPool.executeUpdateStmt(query);
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 17468 */       e.printStackTrace();
/*       */     }
/*       */     
/*       */ 
/*       */ 
/* 17473 */     String[] temp = request.getParameterValues("trapActionsCombo2");
/* 17474 */     if ((temp != null) && (!temp.equals("null")))
/*       */     {
/* 17476 */       String associate = "";
/*       */       
/* 17478 */       for (int i = 0; i < temp.length - 1; i++)
/*       */       {
/* 17480 */         associate = associate + "('" + trapid + "',3200,'" + severity + "','" + temp[i] + "'),";
/*       */       }
/* 17482 */       associate = associate + "('" + trapid + "',3200,'" + severity + "','" + temp[i] + "')";
/*       */       try
/*       */       {
/* 17485 */         query = "insert into AM_ATTRIBUTEACTIONMAPPER values " + associate;
/* 17486 */         AMConnectionPool.executeUpdateStmt(query);
/*       */       }
/*       */       catch (Exception e)
/*       */       {
/* 17490 */         e.printStackTrace();
/*       */       }
/*       */     }
/*       */     
/* 17494 */     return new ActionForward("/adminAction.do?method=listTrapListener", true);
/*       */   }
/*       */   
/*       */   public ActionForward updateTrapListener(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
/*       */   {
/* 17499 */     ResultSet rs = null;
/* 17500 */     ArrayList rows = new ArrayList();
/* 17501 */     String trapversion = "v1";
/* 17502 */     AMActionForm amform = (AMActionForm)form;
/* 17503 */     AMConnectionPool cp = AMConnectionPool.getInstance();
/* 17504 */     String trapid = request.getParameter("trapid");
/* 17505 */     String trapname = request.getParameter("trapName");
/* 17506 */     String trapstatus = request.getParameter("trapStatus");
/* 17507 */     trapversion = request.getParameter("trapVersion");
/* 17508 */     String chktraphost = request.getParameter("chkTrapHost");
/*       */     
/* 17510 */     String severity = request.getParameter("thresholdList");
/* 17511 */     String thresholdVal = request.getParameter("thresholdList");
/* 17512 */     String generictype = "";
/* 17513 */     String enterprise = "";
/* 17514 */     String specifictype = "0";
/* 17515 */     String trapOID = "";
/* 17516 */     String traphost = "";
/* 17517 */     String chkCustomizeVarbinds = request.getParameter("chkCustomizeVarbinds");
/* 17518 */     String chkAssociateTrapSeverity = request.getParameter("chkAssociateTrapSeverity");
/* 17519 */     String trapCustomVarbinds = "";
/* 17520 */     String previous_trapname = "";
/* 17521 */     String previous_trapversion = "";
/* 17522 */     int status = 1;
/* 17523 */     String v3UserName = "";
/* 17524 */     ActionMessages messages = new ActionMessages();
/* 17525 */     if (trapstatus.equalsIgnoreCase("disable"))
/*       */     {
/* 17527 */       status = 0;
/*       */     }
/*       */     
/* 17530 */     int version = 0;
/* 17531 */     if (trapversion.equalsIgnoreCase("v2c"))
/*       */     {
/* 17533 */       version = 1;
/* 17534 */       trapOID = request.getParameter("trapOID");
/*       */     }
/* 17536 */     else if (trapversion.equalsIgnoreCase("v1"))
/*       */     {
/* 17538 */       generictype = request.getParameter("trapType");
/* 17539 */       enterprise = request.getParameter("enterpriseOID");
/* 17540 */       if (generictype.equals("6")) {
/* 17541 */         specifictype = request.getParameter("specificType");
/*       */       }
/* 17543 */     } else if (trapversion.equalsIgnoreCase("v3"))
/*       */     {
/* 17545 */       version = 2;
/* 17546 */       v3UserName = request.getParameter("v3UserName");
/*       */     }
/* 17548 */     if ((chktraphost == null) || (chktraphost.equalsIgnoreCase("null")))
/*       */     {
/* 17550 */       traphost = InetAddress.getByName(request.getParameter("trapHost")).getCanonicalHostName();
/*       */     }
/*       */     else
/*       */     {
/* 17554 */       traphost = "-1";
/*       */     }
/* 17556 */     if ((chkCustomizeVarbinds != null) && ((chkCustomizeVarbinds.equalsIgnoreCase("true")) || (chkCustomizeVarbinds.equalsIgnoreCase("on"))))
/*       */     {
/* 17558 */       trapCustomVarbinds = request.getParameter("trapCustomVarbinds");
/* 17559 */       if (trapCustomVarbinds != null)
/*       */       {
/* 17561 */         trapCustomVarbinds = trapCustomVarbinds.trim();
/*       */       }
/*       */     }
/*       */     else
/*       */     {
/* 17566 */       trapCustomVarbinds = "";
/*       */     }
/*       */     
/* 17569 */     int associateTrapSeverity = 0;
/* 17570 */     if ((chkAssociateTrapSeverity != null) && ((chkAssociateTrapSeverity.equalsIgnoreCase("true")) || (chkAssociateTrapSeverity.equalsIgnoreCase("on"))))
/*       */     {
/* 17572 */       associateTrapSeverity = 1;
/*       */     }
/*       */     
/*       */ 
/*       */ 
/* 17577 */     String query = " select TRAPNAME, CASE WHEN AM_TRAPLISTENERCONFIG.TRAPVERSION = '0'  THEN 'v1' WHEN AM_TRAPLISTENERCONFIG.TRAPVERSION= '1' THEN 'v2c' ELSE 'v3' END as TRAPVERSION from AM_TRAPLISTENERCONFIG where TRAPID=" + trapid;
/*       */     try
/*       */     {
/* 17580 */       rs = AMConnectionPool.executeQueryStmt(query);
/* 17581 */       while (rs.next())
/*       */       {
/* 17583 */         previous_trapname = rs.getString("TRAPNAME");
/* 17584 */         previous_trapversion = rs.getString("TRAPVERSION");
/*       */       }
/* 17586 */       AMConnectionPool.closeStatement(rs);
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 17590 */       e.printStackTrace();
/* 17591 */       rs = null;
/*       */     }
/*       */     
/*       */ 
/* 17595 */     if (!previous_trapname.equals(trapname))
/*       */     {
/* 17597 */       boolean name_exist = false;
/*       */       try
/*       */       {
/* 17600 */         rs = AMConnectionPool.executeQueryStmt("select * from AM_TRAPLISTENERCONFIG where TRAPNAME='" + trapname + "'");
/* 17601 */         if (rs.next())
/*       */         {
/* 17603 */           name_exist = true;
/*       */         }
/* 17605 */         AMConnectionPool.closeStatement(rs);
/*       */       }
/*       */       catch (Exception e)
/*       */       {
/* 17609 */         rs = null;
/* 17610 */         e.printStackTrace();
/*       */       }
/* 17612 */       if (name_exist)
/*       */       {
/* 17614 */         messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("appmanager.error", "The given trap listener name " + trapname + " already exist."));
/* 17615 */         saveMessages(request, messages);
/* 17616 */         return new ActionForward("/adminAction.do?method=editTrapListener&edit=true&trapid=" + trapid);
/*       */       }
/*       */     }
/*       */     
/*       */ 
/* 17621 */     if ((thresholdVal != null) && (!thresholdVal.equals("nothingSelected")))
/*       */     {
/* 17623 */       if ((thresholdVal.equals("Newfalse")) || (thresholdVal.equals("Newtrue")))
/*       */       {
/* 17625 */         String displayname = request.getParameter("displayname");
/* 17626 */         if (DBQueryUtil.getDBType().equals("mssql"))
/*       */         {
/* 17628 */           displayname = displayname.replaceAll("'", "''");
/*       */         }
/*       */         else
/*       */         {
/* 17632 */           displayname = displayname.replaceAll("'", "\\\\'");
/*       */         }
/* 17634 */         String checkquery = "select * from AM_THRESHOLDCONFIG where NAME='" + displayname + "'";
/* 17635 */         ArrayList list = this.mo.getRows(checkquery);
/* 17636 */         if (list.size() == 0)
/*       */         {
/* 17638 */           boolean stringpattern = false;
/* 17639 */           Statement stmt = null;
/* 17640 */           ResultSet rsId = null;
/*       */           try {
/* 17642 */             stmt = AMConnectionPool.getConnection().createStatement();
/* 17643 */             if (thresholdVal.equals("Newfalse"))
/*       */             {
/* 17645 */               insertThreshold(request, false, true);
/*       */             }
/*       */             else
/*       */             {
/* 17649 */               stringpattern = true;
/* 17650 */               insertThreshold(request, true, true);
/*       */             }
/*       */             
/*       */ 
/* 17654 */             thresholdVal = updateThresholdProfileinCache();
/*       */ 
/*       */           }
/*       */           catch (Exception ex)
/*       */           {
/* 17659 */             ex.printStackTrace();
/*       */           }
/*       */           finally
/*       */           {
/* 17663 */             stmt.close();
/* 17664 */             AMConnectionPool.closeStatement(rsId);
/*       */           }
/*       */           
/*       */ 
/* 17668 */           if (stringpattern)
/*       */           {
/*       */             try
/*       */             {
/*       */ 
/* 17673 */               PreparedStatement ps = AMConnectionPool.getConnection().prepareStatement("insert into AM_PATTERNMATCHERCONFIG(ID, CRITICALTHRESHOLDVALUE,WARNINGTHRESHOLDVALUE,INFOTHRESHOLDVALUE) values (?,?,?,?)");
/* 17674 */               ps.setInt(1, Integer.parseInt(thresholdVal));
/* 17675 */               ps.setString(2, request.getParameter("criticalthresholdvalue"));
/* 17676 */               ps.setString(3, request.getParameter("warningthresholdvalue"));
/* 17677 */               ps.setString(4, request.getParameter("infothresholdvalue"));
/* 17678 */               ps.executeUpdate();
/*       */             }
/*       */             catch (Exception ex) {
/* 17681 */               ex.printStackTrace();
/*       */             }
/*       */           }
/*       */           
/*       */ 
/*       */ 
/* 17687 */           String insertquery = "insert into AM_TRAPLISTENERCONFIG (TRAPID,TRAPNAME,TRAPSTATUS,TRAPVERSION,TRAPSEVERITY,TRAPHOST, TRAPVARBINDS, ASSOCIATE_TRAPSEVERITY) values(" + trapid + ",'" + trapname + "'," + status + "," + version + ",'" + thresholdVal + "','" + traphost + "','" + trapCustomVarbinds + "'," + associateTrapSeverity + ")";
/*       */           try
/*       */           {
/* 17690 */             AMConnectionPool.executeUpdateStmt(insertquery);
/*       */           }
/*       */           catch (Exception e)
/*       */           {
/* 17694 */             e.printStackTrace();
/*       */ 
/*       */           }
/*       */           
/*       */ 
/*       */         }
/*       */         else
/*       */         {
/*       */ 
/* 17703 */           messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("thresholdprofile.create.alreadyexists", request.getParameter("displayname")));
/* 17704 */           saveMessages(request, messages);
/* 17705 */           return new ActionForward("/adminAction.do?method=editTrapListener");
/*       */         }
/*       */       }
/*       */     }
/*       */     
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/* 17718 */     query = "update AM_TRAPLISTENERCONFIG set TRAPNAME='" + trapname + "',TRAPSTATUS=" + status + ",TRAPVERSION=" + version + ",TRAPSEVERITY='" + thresholdVal + "',TRAPHOST='" + traphost + "',TRAPVARBINDS='" + trapCustomVarbinds + "',ASSOCIATE_TRAPSEVERITY=" + associateTrapSeverity + " where TRAPID=" + trapid;
/*       */     
/*       */ 
/*       */ 
/*       */     try
/*       */     {
/* 17724 */       AMConnectionPool.executeUpdateStmt(query);
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 17728 */       e.printStackTrace();
/*       */     }
/*       */     
/* 17731 */     String mapperQuery = "update AM_ATTRIBUTETHRESHOLDMAPPER set THRESHOLDCONFIGURATIONID=" + thresholdVal + " where ID=" + trapid;
/*       */     try
/*       */     {
/* 17734 */       AMConnectionPool.executeUpdateStmt(mapperQuery);
/*       */     }
/*       */     catch (Exception ex)
/*       */     {
/* 17738 */       ex.printStackTrace();
/*       */     }
/*       */     
/*       */ 
/*       */ 
/*       */ 
/* 17744 */     if (previous_trapversion.equals(trapversion))
/*       */     {
/* 17746 */       if (trapversion.equalsIgnoreCase("v1"))
/*       */       {
/* 17748 */         query = "update AM_V1TRAPCONFIG set GENERICTYPE=" + generictype + ", SPECIFICTYPE='" + specifictype + "', ENTERPRISEOID='" + enterprise + "' where TRAPID=" + trapid;
/*       */       }
/*       */       else
/*       */       {
/* 17752 */         query = "update AM_V2CTRAPCONFIG set TRAPOID='" + trapOID + "' where TRAPID=" + trapid;
/* 17753 */         if (trapversion.equalsIgnoreCase("v3"))
/*       */         {
/* 17755 */           String v3_update_query = "update AM_V3TRAPCONFIG set USERNAME='" + v3UserName + "' where TRAPID=" + trapid;
/*       */           try
/*       */           {
/* 17758 */             AMConnectionPool.executeUpdateStmt(v3_update_query);
/*       */           }
/*       */           catch (Exception ex)
/*       */           {
/* 17762 */             ex.printStackTrace();
/*       */           }
/*       */           
/*       */         }
/*       */       }
/*       */     }
/*       */     else
/*       */     {
/* 17770 */       if (previous_trapversion.equals("v1"))
/*       */       {
/* 17772 */         query = "delete from AM_V1TRAPCONFIG where TRAPID=" + trapid;
/*       */       }
/*       */       else
/*       */       {
/* 17776 */         query = "delete from AM_V2CTRAPCONFIG where TRAPID=" + trapid;
/*       */       }
/*       */       try
/*       */       {
/* 17780 */         AMConnectionPool.executeUpdateStmt(query);
/*       */       }
/*       */       catch (Exception e)
/*       */       {
/* 17784 */         e.printStackTrace();
/*       */       }
/*       */       
/* 17787 */       if (trapversion.equals("v1"))
/*       */       {
/* 17789 */         query = "insert into AM_V1TRAPCONFIG values(" + trapid + "," + generictype + ",'" + specifictype + "','" + enterprise + "')";
/*       */       }
/*       */       else
/*       */       {
/* 17793 */         query = "insert into AM_V2CTRAPCONFIG values(" + trapid + ",'" + trapOID + "')";
/*       */       }
/*       */     }
/*       */     try
/*       */     {
/* 17798 */       AMConnectionPool.executeUpdateStmt(query);
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 17802 */       e.printStackTrace();
/*       */     }
/*       */     
/*       */ 
/*       */     try
/*       */     {
/* 17808 */       query = "delete from AM_ATTRIBUTEACTIONMAPPER where ID=" + trapid;
/* 17809 */       AMConnectionPool.executeUpdateStmt(query);
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 17813 */       e.printStackTrace();
/*       */     }
/*       */     
/*       */ 
/*       */ 
/*       */ 
/* 17819 */     addActions(Integer.parseInt(trapid), 3200, 1, request.getParameterValues("selectedactions_critical"));
/* 17820 */     addActions(Integer.parseInt(trapid), 3200, 4, request.getParameterValues("selectedactions_warning"));
/* 17821 */     addActions(Integer.parseInt(trapid), 3200, 5, request.getParameterValues("selectedactions_clear"));
/* 17822 */     String[] temp = request.getParameterValues("trapActionsCombo2");
/* 17823 */     if ((temp != null) && (!temp.equals("null")))
/*       */     {
/* 17825 */       String associate = "";
/*       */       
/* 17827 */       for (int i = 0; i < temp.length - 1; i++)
/*       */       {
/* 17829 */         associate = associate + "('" + trapid + "',3200,'" + severity + "','" + temp[i] + "'),";
/*       */       }
/* 17831 */       associate = associate + "('" + trapid + "',3200,'" + severity + "','" + temp[i] + "')";
/*       */       try
/*       */       {
/* 17834 */         query = "insert into AM_ATTRIBUTEACTIONMAPPER values " + associate;
/* 17835 */         AMConnectionPool.executeUpdateStmt(query);
/*       */       }
/*       */       catch (Exception e)
/*       */       {
/* 17839 */         e.printStackTrace();
/*       */       }
/*       */     }
/*       */     
/*       */ 
/* 17844 */     return new ActionForward("/adminAction.do?method=listTrapListener");
/*       */   }
/*       */   
/*       */ 
/*       */   public ActionForward deleteTrapListener(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 17851 */     ResultSet rs = null;
/* 17852 */     AMConnectionPool cp = AMConnectionPool.getInstance();
/* 17853 */     AMConnectionPool.getInstance();Statement todelete = AMConnectionPool.getConnection().createStatement();
/* 17854 */     todelete.setQueryTimeout(600);
/* 17855 */     String trapversion = "";
/* 17856 */     String[] id = request.getParameterValues("checkbox");
/* 17857 */     String trapid = "";
/* 17858 */     for (int i = 0; i < id.length; i++)
/*       */     {
/* 17860 */       trapid = id[i];
/* 17861 */       String query = "select CASE WHEN AM_TRAPLISTENERCONFIG.TRAPVERSION = '0'  THEN 'v1'  ELSE 'v2c' END  as TRAPVERSION from AM_TRAPLISTENERCONFIG where TRAPID=" + trapid;
/*       */       try
/*       */       {
/* 17864 */         rs = AMConnectionPool.executeQueryStmt(query);
/* 17865 */         while (rs.next())
/*       */         {
/* 17867 */           trapversion = rs.getString("TRAPVERSION");
/*       */         }
/* 17869 */         AMConnectionPool.closeStatement(rs);
/*       */       }
/*       */       catch (Exception e)
/*       */       {
/* 17873 */         e.printStackTrace();
/* 17874 */         rs = null;
/*       */       }
/* 17876 */       FaultUtil.deleteEventFromCache(trapid);
/* 17877 */       query = "delete from AM_TRAPLISTENERCONFIG where TRAPID=" + trapid;
/* 17878 */       todelete.addBatch(query);
/*       */       
/* 17880 */       query = "delete from AM_ManagedObject where RESOURCEID=" + trapid;
/* 17881 */       todelete.addBatch(query);
/*       */       
/* 17883 */       query = "delete from AM_ATTRIBUTEACTIONMAPPER where ID=" + trapid;
/* 17884 */       todelete.addBatch(query);
/*       */       
/* 17886 */       query = "delete from Alert where SOURCE=" + trapid;
/* 17887 */       todelete.addBatch(query);
/*       */       
/* 17889 */       query = "delete from Event where SOURCE=" + trapid;
/* 17890 */       todelete.addBatch(query);
/*       */       
/* 17892 */       if (trapversion.equals("v1"))
/*       */       {
/* 17894 */         query = "delete from AM_V1TRAPCONFIG where TRAPID=" + trapid;
/*       */       }
/*       */       else
/*       */       {
/* 17898 */         query = "delete from AM_V2CTRAPCONFIG where TRAPID=" + trapid;
/*       */       }
/* 17900 */       todelete.addBatch(query);
/* 17901 */       query = "delete from AM_ATTRIBUTETHRESHOLDMAPPER where ID=" + trapid;
/* 17902 */       todelete.addBatch(query);
/*       */     }
/*       */     try
/*       */     {
/* 17906 */       todelete.executeBatch();
/* 17907 */       todelete.clearBatch();
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 17911 */       todelete = null;
/* 17912 */       e.printStackTrace();
/*       */     }
/* 17914 */     return new ActionForward("/adminAction.do?method=listTrapListener", true);
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward addJMXNotificationProfile(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 17924 */     String returnpath = request.getParameter("redirectto");
/* 17925 */     String popupParam = request.getParameter("popup");
/* 17926 */     boolean popup = (popupParam != null) && (popupParam.equals("true"));
/* 17927 */     String trapid = "";
/* 17928 */     String actionName = request.getParameter("trapName");
/* 17929 */     String trapstatus = request.getParameter("trapStatus");
/* 17930 */     String severity = request.getParameter("severity");
/* 17931 */     String resourceid = request.getParameter("actionresourceid");
/* 17932 */     String mbeanname = Translate.decode(request.getParameter("mbeanname"));
/* 17933 */     String trapName = request.getParameter("trapName");
/* 17934 */     if (DBQueryUtil.getDBType().equals("mssql"))
/*       */     {
/* 17936 */       trapName = trapName.replaceAll("'", "''");
/*       */     }
/*       */     else
/*       */     {
/* 17940 */       trapName = trapName.replaceAll("'", "\\\\'");
/*       */     }
/* 17942 */     String checkquery = "select * from AM_JMXNOTIFICATION_PROFILES where NAME='" + trapName + "'";
/* 17943 */     boolean name_exist = false;
/* 17944 */     AMConnectionPool cp = AMConnectionPool.getInstance();
/* 17945 */     ResultSet set = AMConnectionPool.executeQueryStmt(checkquery);
/* 17946 */     if (set.next())
/*       */     {
/* 17948 */       set.close();
/* 17949 */       ActionMessages messages = new ActionMessages();
/* 17950 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("jmxnotification.create.alreadyexists", request.getParameter("actionname")));
/* 17951 */       saveMessages(request, messages);
/* 17952 */       name_exist = true;
/*       */     }
/* 17954 */     AMConnectionPool.closeStatement(set);
/* 17955 */     if (name_exist)
/*       */     {
/* 17957 */       return new ActionForward("/MBeanOperationAction.do?method=showJMXNotificationProfileCreateScreen&actionresourceid=" + resourceid);
/*       */     }
/*       */     
/* 17960 */     int status = 1;
/* 17961 */     if (!trapstatus.equalsIgnoreCase("enable"))
/*       */     {
/* 17963 */       status = 0;
/*       */     }
/*       */     
/* 17966 */     ResultSet rs = null;
/*       */     try
/*       */     {
/* 17969 */       rs = AMConnectionPool.executeQueryStmt("select NAME from AM_JMXNOTIFICATION_PROFILES where OBJECTNAME='" + mbeanname + "' and RESOURCEID=" + resourceid);
/* 17970 */       if (rs.next())
/*       */       {
/* 17972 */         name_exist = true;
/*       */       }
/* 17974 */       AMConnectionPool.closeStatement(rs);
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 17978 */       e.printStackTrace();
/*       */     }
/* 17980 */     if (name_exist)
/*       */     {
/* 17982 */       ActionMessages messages = new ActionMessages();
/* 17983 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("appmanager.error", "The given listener configuration already exists with name " + rs.getString(1)));
/* 17984 */       saveMessages(request, messages);
/* 17985 */       return new ActionForward("/MBeanOperationAction.do?method=showDomainsForJMXNotifications&actionresourceid=" + resourceid);
/*       */     }
/*       */     
/*       */ 
/*       */     try
/*       */     {
/* 17991 */       AMManagedObjectDao dao = AMManagedObjectDao.getAMManagedObjectDao();
/* 17992 */       AMManagedObject ammo = new AMManagedObject();
/* 17993 */       ammo.setRESOURCENAME(actionName);
/* 17994 */       ammo.setType("JMXNotification");
/* 17995 */       ammo.setDISPLAYNAME(actionName);
/* 17996 */       ammo.setDESCRIPTION("JMX Notification Listener is added");
/* 17997 */       dao.create(ammo);
/* 17998 */       trapid = ammo.getRESOURCEID() + "";
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 18002 */       e.printStackTrace();
/*       */     }
/* 18004 */     String query = "insert into AM_JMXNOTIFICATION_PROFILES(ID,NAME,RESOURCEID,MBEANRESOURCEID,OBJECTNAME,STATUS,SEVERITY) values(" + DBQueryUtil.getIncrementedID("ID", "AM_JMXNOTIFICATION_PROFILES") + ",'" + actionName + "'," + trapid + "," + resourceid + ",'" + mbeanname + "'," + status + "," + severity + ")";
/*       */     try
/*       */     {
/* 18007 */       AMConnectionPool.executeUpdateStmt(query);
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 18011 */       e.printStackTrace();
/*       */     }
/*       */     
/*       */ 
/*       */     try
/*       */     {
/* 18017 */       DBUtil.insertParentChildMapper(Integer.parseInt(resourceid), Integer.parseInt(trapid));
/* 18018 */       AMAttributesDependencyAdder adder = new AMAttributesDependencyAdder();
/* 18019 */       adder.addDependentAttributes(Integer.parseInt(resourceid), Integer.parseInt(trapid));
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 18023 */       e.printStackTrace();
/*       */     }
/*       */     
/*       */ 
/* 18027 */     String[] temp = request.getParameterValues("trapActionsCombo2");
/* 18028 */     if ((temp != null) && (!temp.equals("null")))
/*       */     {
/* 18030 */       String associate = "";
/*       */       
/* 18032 */       for (int i = 0; i < temp.length - 1; i++)
/*       */       {
/* 18034 */         associate = associate + "('" + trapid + "',3300,'" + severity + "','" + temp[i] + "'),";
/*       */       }
/* 18036 */       associate = associate + "('" + trapid + "',3300,'" + severity + "','" + temp[i] + "')";
/*       */       try
/*       */       {
/* 18039 */         query = "insert into AM_ATTRIBUTEACTIONMAPPER values " + associate;
/* 18040 */         AMConnectionPool.executeUpdateStmt(query);
/*       */       }
/*       */       catch (Exception e)
/*       */       {
/* 18044 */         e.printStackTrace();
/*       */       }
/*       */     }
/*       */     
/*       */ 
/* 18049 */     ResultSet rrs = AMConnectionPool.executeQueryStmt("select MAX(ID) from AM_JMXNOTIFICATION_PROFILES");
/* 18050 */     if (rrs.next())
/*       */     {
/*       */       try
/*       */       {
/* 18054 */         CAMJMX12Util.registerNewListenersForNotificationProfile(rrs.getInt(1));
/*       */       }
/*       */       catch (Exception e)
/*       */       {
/* 18058 */         AMLog.debug("Exception when registering JMX notification listeners");
/* 18059 */         ActionMessages messages = new ActionMessages();
/* 18060 */         messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("appmanager.error", "The notification listener has been successfully created. Registration with the agent has failed. Please check if the agent is running"));
/* 18061 */         saveMessages(request, messages);
/* 18062 */         return new ActionForward("/showresource.do?resourceid=" + resourceid + "&method=showResourceForResourceID");
/*       */       }
/*       */     }
/* 18065 */     AMConnectionPool.closeStatement(rrs);
/* 18066 */     ActionMessages messages = new ActionMessages();
/* 18067 */     messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("jmxnotification.add.success"));
/* 18068 */     saveMessages(request, messages);
/* 18069 */     return new ActionForward("/showresource.do?resourceid=" + resourceid + "&method=showResourceForResourceID");
/*       */   }
/*       */   
/*       */   public ActionForward editJMXNotificationListener(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
/*       */   {
/* 18074 */     ResultSet rs = null;
/* 18075 */     ArrayList rows = new ArrayList();
/* 18076 */     String notificationID = request.getParameter("notificationid");
/* 18077 */     String resourceid = request.getParameter("resourceid");
/* 18078 */     String all = "select AM_ACTIONPROFILE.ID ,AM_ACTIONPROFILE.NAME from AM_ACTIONPROFILE where AM_ACTIONPROFILE.NAME not in ('Restart The Service','Marker')";
/* 18079 */     String toconfigure = "select AM_ACTIONPROFILE.ID ,AM_ACTIONPROFILE.NAME, AM_ATTRIBUTEACTIONMAPPER.ACTIONID from AM_ACTIONPROFILE left outer join AM_ATTRIBUTEACTIONMAPPER on AM_ATTRIBUTEACTIONMAPPER.ACTIONID=AM_ACTIONPROFILE.ID and AM_ATTRIBUTEACTIONMAPPER.ID = " + resourceid + " where ACTIONID is null and AM_ACTIONPROFILE.NAME not in ('Restart The Service','Marker')";
/* 18080 */     String configured = "select AM_ACTIONPROFILE.ID ,AM_ACTIONPROFILE.NAME, AM_ATTRIBUTEACTIONMAPPER.ACTIONID from AM_ACTIONPROFILE left outer join AM_ATTRIBUTEACTIONMAPPER on AM_ATTRIBUTEACTIONMAPPER.ACTIONID=AM_ACTIONPROFILE.ID and AM_ATTRIBUTEACTIONMAPPER.ID = " + resourceid + " where ACTIONID is not null";
/* 18081 */     AMActionForm amform = new AMActionForm();
/* 18082 */     AMConnectionPool cp = AMConnectionPool.getInstance();
/* 18083 */     int resourceID = -1;
/* 18084 */     if ((notificationID != null) && (!notificationID.equalsIgnoreCase("null")))
/*       */     {
/* 18086 */       String checkquery = "select AM_JMXNOTIFICATION_PROFILES.ID,AM_JMXNOTIFICATION_PROFILES.NAME,AM_ManagedObject.RESOURCEID,AM_ManagedObject.DISPLAYNAME,AM_JMXNOTIFICATION_PROFILES.OBJECTNAME,AM_JMXNOTIFICATION_PROFILES.SEVERITY as SEVERITY,(case when AM_JMXNOTIFICATION_PROFILES.STATUS='1' then 'enable' else 'disable' end) as STATUS from AM_JMXNOTIFICATION_PROFILES,AM_ManagedObject where AM_JMXNOTIFICATION_PROFILES.MBEANRESOURCEID=AM_ManagedObject.RESOURCEID and AM_JMXNOTIFICATION_PROFILES.ID=" + notificationID;
/*       */       try
/*       */       {
/* 18089 */         rs = AMConnectionPool.executeQueryStmt(checkquery);
/* 18090 */         while (rs.next())
/*       */         {
/* 18092 */           amform.setTrapName(rs.getString("NAME"));
/* 18093 */           amform.setTrapStatus(rs.getString("STATUS"));
/* 18094 */           amform.setSeverity(rs.getString("SEVERITY"));
/* 18095 */           resourceID = rs.getInt("RESOURCEID");
/* 18096 */           Map agentInfo = com.adventnet.appmanager.cam.CAMDBUtil.getAMMOInfo(resourceID);
/* 18097 */           String hostName = (String)agentInfo.get("TARGETNAME");
/* 18098 */           String portNumber = (String)agentInfo.get("PORTNO");
/* 18099 */           String resourceType = (String)agentInfo.get("TYPE");
/* 18100 */           request.setAttribute("actionname", rs.getString("NAME"));
/* 18101 */           request.setAttribute("actionresourceid", "" + resourceID);
/* 18102 */           request.setAttribute("hostname", hostName);
/* 18103 */           request.setAttribute("resourcetype", resourceType);
/* 18104 */           request.setAttribute("portnumber", portNumber);
/* 18105 */           request.setAttribute("mbeanname", rs.getString("OBJECTNAME"));
/*       */         }
/* 18107 */         AMConnectionPool.closeStatement(rs);
/*       */       }
/*       */       catch (Exception e)
/*       */       {
/* 18111 */         rs = null;
/* 18112 */         e.printStackTrace();
/*       */       }
/*       */       
/*       */       try
/*       */       {
/* 18117 */         rs = AMConnectionPool.executeQueryStmt(toconfigure);
/* 18118 */         while (rs.next())
/*       */         {
/* 18120 */           Properties p = new Properties();
/* 18121 */           p.setProperty("label", rs.getString("NAME"));
/* 18122 */           p.setProperty("value", rs.getString("ID"));
/* 18123 */           rows.add(p);
/*       */         }
/* 18125 */         AMConnectionPool.closeStatement(rs);
/*       */       }
/*       */       catch (Exception e)
/*       */       {
/* 18129 */         e.printStackTrace();
/* 18130 */         rs = null;
/*       */       }
/* 18132 */       amform.setToAdd(rows);
/* 18133 */       rows = new ArrayList();
/*       */       
/*       */       try
/*       */       {
/* 18137 */         rs = AMConnectionPool.executeQueryStmt(configured);
/* 18138 */         while (rs.next())
/*       */         {
/* 18140 */           Properties p = new Properties();
/* 18141 */           p.setProperty("label", rs.getString("NAME"));
/* 18142 */           p.setProperty("value", rs.getString("ID"));
/* 18143 */           rows.add(p);
/*       */         }
/* 18145 */         AMConnectionPool.closeStatement(rs);
/*       */       }
/*       */       catch (Exception e)
/*       */       {
/* 18149 */         e.printStackTrace();
/* 18150 */         rs = null;
/*       */       }
/* 18152 */       amform.setPresent(rows);
/*       */ 
/*       */     }
/*       */     else
/*       */     {
/*       */ 
/*       */       try
/*       */       {
/* 18160 */         rs = AMConnectionPool.executeQueryStmt(all);
/* 18161 */         while (rs.next())
/*       */         {
/* 18163 */           Properties p = new Properties();
/* 18164 */           p.setProperty("label", rs.getString("NAME"));
/* 18165 */           p.setProperty("value", rs.getString("ID"));
/* 18166 */           rows.add(p);
/*       */         }
/* 18168 */         AMConnectionPool.closeStatement(rs);
/*       */       }
/*       */       catch (Exception e)
/*       */       {
/* 18172 */         e.printStackTrace();
/* 18173 */         rs = null;
/*       */       }
/* 18175 */       amform.setToAdd(rows);
/*       */     }
/* 18177 */     request.setAttribute("AMActionForm", amform);
/* 18178 */     return mapping.findForward("jmxNotification4");
/*       */   }
/*       */   
/*       */   public ActionForward updateJMXNotificationProfile(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 18184 */     ResultSet rs = null;
/* 18185 */     ArrayList rows = new ArrayList();
/* 18186 */     AMActionForm amform = (AMActionForm)form;
/* 18187 */     AMConnectionPool cp = AMConnectionPool.getInstance();
/* 18188 */     String notificationid = request.getParameter("trapid");
/* 18189 */     String notificationname = request.getParameter("trapName");
/* 18190 */     String notificationstatus = request.getParameter("trapStatus");
/* 18191 */     String severity = request.getParameter("severity");
/* 18192 */     int status = 1;
/* 18193 */     if (notificationstatus.equalsIgnoreCase("disable"))
/*       */     {
/* 18195 */       status = 0;
/* 18196 */       CAMJMX12Util.deRegisterListenersForNotificationProfile(Integer.parseInt(notificationid));
/*       */     }
/*       */     else
/*       */     {
/* 18200 */       CAMJMX12Util.deRegisterAndRegisterListenersForNotificationProfile(Integer.parseInt(notificationid));
/*       */     }
/* 18202 */     String mbeanresourceid = "";
/* 18203 */     String resourceID = "";
/* 18204 */     String query = "select MBEANRESOURCEID,RESOURCEID from AM_JMXNOTIFICATION_PROFILES where ID=" + notificationid;
/*       */     try
/*       */     {
/* 18207 */       rs = AMConnectionPool.executeQueryStmt(query);
/* 18208 */       while (rs.next())
/*       */       {
/* 18210 */         mbeanresourceid = "" + rs.getInt(1);
/* 18211 */         resourceID = "" + rs.getInt(2);
/*       */       }
/* 18213 */       AMConnectionPool.closeStatement(rs);
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 18217 */       e.printStackTrace();
/* 18218 */       rs = null;
/*       */     }
/*       */     
/* 18221 */     boolean name_exist = false;
/*       */     try
/*       */     {
/* 18224 */       rs = AMConnectionPool.executeQueryStmt("select * from AM_JMXNOTIFICATION_PROFILES where NAME='" + notificationname + "' and ID!=" + notificationid);
/* 18225 */       if (rs.next())
/*       */       {
/* 18227 */         name_exist = true;
/*       */       }
/* 18229 */       AMConnectionPool.closeStatement(rs);
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 18233 */       rs = null;
/* 18234 */       e.printStackTrace();
/*       */     }
/* 18236 */     if (name_exist)
/*       */     {
/* 18238 */       ActionMessages messages = new ActionMessages();
/* 18239 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("appmanager.error", "The given notification listener name " + notificationname + " already exists"));
/* 18240 */       saveMessages(request, messages);
/* 18241 */       return new ActionForward("/adminAction.do?method=editJMXNotificationListener&edit=true&notificationid=" + notificationid + "&resourceid=" + mbeanresourceid);
/*       */     }
/*       */     
/*       */ 
/* 18245 */     query = "update AM_JMXNOTIFICATION_PROFILES set NAME='" + notificationname + "',STATUS=" + status + ",SEVERITY=" + severity + " where ID=" + notificationid;
/*       */     try
/*       */     {
/* 18248 */       AMConnectionPool.executeUpdateStmt(query);
/*       */ 
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 18253 */       e.printStackTrace();
/*       */     }
/*       */     
/* 18256 */     query = "update AM_ManagedObject set DISPLAYNAME='" + notificationname + "' where  RESOURCEID=" + resourceID;
/*       */     try
/*       */     {
/* 18259 */       System.out.println("query to update=======" + query);
/* 18260 */       AMConnectionPool.executeUpdateStmt(query);
/*       */ 
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 18265 */       e.printStackTrace();
/*       */     }
/*       */     
/*       */     try
/*       */     {
/* 18270 */       query = "delete from AM_ATTRIBUTEACTIONMAPPER where ID=" + resourceID;
/* 18271 */       AMConnectionPool.executeUpdateStmt(query);
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 18275 */       e.printStackTrace();
/*       */     }
/*       */     
/* 18278 */     String[] temp = request.getParameterValues("trapActionsCombo2");
/* 18279 */     if ((temp != null) && (!temp.equals("null")))
/*       */     {
/* 18281 */       String associate = "";
/*       */       
/* 18283 */       for (int i = 0; i < temp.length - 1; i++)
/*       */       {
/* 18285 */         associate = associate + "('" + resourceID + "',3300,'" + severity + "','" + temp[i] + "'),";
/*       */       }
/* 18287 */       associate = associate + "('" + resourceID + "',3300,'" + severity + "','" + temp[i] + "')";
/*       */       try
/*       */       {
/* 18290 */         query = "insert into AM_ATTRIBUTEACTIONMAPPER values " + associate;
/* 18291 */         AMConnectionPool.executeUpdateStmt(query);
/*       */       }
/*       */       catch (Exception e)
/*       */       {
/* 18295 */         e.printStackTrace();
/*       */       }
/*       */     }
/*       */     
/* 18299 */     ActionMessages messages = new ActionMessages();
/* 18300 */     messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("jmxnotification.edit.success"));
/* 18301 */     saveMessages(request, messages);
/* 18302 */     return new ActionForward("/showresource.do?resourceid=" + mbeanresourceid + "&method=showResourceForResourceID");
/*       */   }
/*       */   
/*       */   public ActionForward deleteJMXNotificationListener(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
/*       */   {
/* 18307 */     int resourceIDWhichHasDeletedNotifications = -1;
/*       */     try
/*       */     {
/* 18310 */       String[] id = request.getParameterValues("checkbox");
/* 18311 */       ArrayList list = new ArrayList(id.length);
/* 18312 */       for (int i = 0; i < id.length; i++)
/*       */       {
/* 18314 */         list.add(id[i]);
/*       */       }
/* 18316 */       resourceIDWhichHasDeletedNotifications = CAMJMX12Util.deleteJMXNotifications(list);
/* 18317 */       AMRCAnalyser analyser = new AMRCAnalyser();
/* 18318 */       analyser.applyRCA(resourceIDWhichHasDeletedNotifications, 1861, System.currentTimeMillis());
/*       */     }
/*       */     catch (Exception exx)
/*       */     {
/* 18322 */       ActionErrors errors = new ActionErrors();
/* 18323 */       errors.add("org.apache.struts.action.GLOBAL_ERROR", new ActionError("jmxnotification.delete.failed"));
/* 18324 */       saveErrors(request, errors);
/* 18325 */       return new ActionForward("/showresource.do?resourceid=" + resourceIDWhichHasDeletedNotifications + "&method=showResourceForResourceID");
/*       */     }
/* 18327 */     ActionMessages messages = new ActionMessages();
/* 18328 */     messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("jmxnotification.delete.success"));
/* 18329 */     saveMessages(request, messages);
/* 18330 */     return new ActionForward("/showresource.do?resourceid=" + resourceIDWhichHasDeletedNotifications + "&method=showResourceForResourceID");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward changeServerTypeToManaged(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 18339 */     AMActionForm amform = (AMActionForm)form;
/* 18340 */     ActionMessages messages = new ActionMessages();
/* 18341 */     String localhostName = "";
/* 18342 */     String portNumber = System.getProperty("webserver.port");
/* 18343 */     String sslPort = com.adventnet.appmanager.server.framework.AMAutomaticPortChanger.getsslport();
/*       */     try
/*       */     {
/* 18346 */       localhostName = InetAddress.getLocalHost().getHostName();
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 18350 */       localhostName = "localhost";
/*       */     }
/* 18352 */     long time = System.currentTimeMillis();
/* 18353 */     String adminHost = amform.getDisplayname();
/* 18354 */     if (DBQueryUtil.getDBType().equals("mssql"))
/*       */     {
/* 18356 */       adminHost = adminHost.replaceAll("'", "''");
/*       */     }
/*       */     else
/*       */     {
/* 18360 */       adminHost = adminHost.replaceAll("'", "\\\\'");
/*       */     }
/* 18362 */     String adminPort = amform.getPort();
/* 18363 */     String serverName = adminHost + "_" + adminPort;
/*       */     try
/*       */     {
/* 18366 */       String urlStr = "https://" + adminHost + ":" + adminPort + "/jsp/ManagedServers.jsp";
/* 18367 */       URL url = new URL(urlStr);
/* 18368 */       HTTPConnection con = new HTTPConnection(url);
/* 18369 */       HTTPResponse rsp = con.Get(url.getFile(), "");
/* 18370 */       String responseAsString = rsp.getText();
/* 18371 */       if (responseAsString.indexOf("~#sb#~") == -1)
/*       */       {
/*       */ 
/* 18374 */         String errorMessage = FormatUtil.getString("1007", new String[] { adminHost, adminPort, OEMUtil.getOEMString("product.name") });
/* 18375 */         request.setAttribute("errorMessage", errorMessage);
/* 18376 */         return new ActionForward("/jsp/AdminServerDetails.jsp");
/*       */       }
/*       */     }
/*       */     catch (Exception e) {}
/*       */     
/*       */ 
/*       */ 
/* 18383 */     String nmshome = System.getProperty("webnms.rootdir");
/* 18384 */     int startresidrange = EnterpriseUtil.RANGE;
/* 18385 */     Communication comm = new Communication("Register_Me_MAS", time, adminHost, Integer.parseInt(adminPort), "TOAAM");
/* 18386 */     Map qryStr = comm.getQueryString();
/* 18387 */     qryStr.put("host", localhostName);
/* 18388 */     qryStr.put("port", portNumber);
/* 18389 */     qryStr.put("sslport", sslPort);
/* 18390 */     qryStr.put("registerOnly", "true");
/* 18391 */     File etonpropsFile = null;
/* 18392 */     String errorMessage = "";
/*       */     try
/*       */     {
/* 18395 */       etonpropsFile = new File(nmshome + File.separator + "html" + File.separator + "en" + File.separator + "EnglishToNative.properties");
/* 18396 */       Properties p = new Properties();
/* 18397 */       FileInputStream fis = new FileInputStream(etonpropsFile);
/* 18398 */       p.load(fis);
/* 18399 */       qryStr.put("bn", p.getProperty("product.build.number"));
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 18403 */       e.printStackTrace();
/* 18404 */       errorMessage = FormatUtil.getString("1006");
/* 18405 */       request.setAttribute("errorMessage", errorMessage);
/* 18406 */       return new ActionForward("/jsp/AdminServerDetails.jsp");
/*       */     }
/*       */     try
/*       */     {
/* 18410 */       com.adventnet.appmanager.server.framework.comm.HClient.sendRequest(comm);
/* 18411 */       Map returned = comm.getResponseMap();
/* 18412 */       AMLog.debug("Enterprise : Returned Response in Standalone for changing to Managed Server" + returned);
/* 18413 */       if (returned.get("errorcode") != null)
/*       */       {
/* 18415 */         int errorCode = Integer.parseInt("" + returned.get("errorcode"));
/*       */         
/*       */ 
/*       */ 
/*       */ 
/* 18420 */         if ((errorCode == 2005) || (errorCode == 2004) || (errorCode == 2007))
/*       */         {
/* 18422 */           errorMessage = FormatUtil.getString("" + errorCode);
/*       */         }
/*       */         else
/*       */         {
/* 18426 */           errorMessage = FormatUtil.getString("" + errorCode, new String[] { serverName });
/*       */         }
/* 18428 */         request.setAttribute("errorMessage", errorMessage);
/* 18429 */         return new ActionForward("/jsp/AdminServerDetails.jsp");
/*       */       }
/*       */     }
/*       */     catch (ConnectException ce)
/*       */     {
/* 18434 */       ce.printStackTrace();
/* 18435 */       errorMessage = FormatUtil.getString("1002", new String[] { serverName });
/* 18436 */       request.setAttribute("errorMessage", errorMessage);
/* 18437 */       return new ActionForward("/jsp/AdminServerDetails.jsp");
/*       */     }
/*       */     catch (NoRouteToHostException ne)
/*       */     {
/* 18441 */       ne.printStackTrace();
/* 18442 */       errorMessage = FormatUtil.getString("2008", new String[] { serverName });
/* 18443 */       request.setAttribute("errorMessage", errorMessage);
/* 18444 */       return new ActionForward("/jsp/AdminServerDetails.jsp");
/*       */     }
/*       */     catch (UnknownHostException ue)
/*       */     {
/* 18448 */       ue.printStackTrace();
/* 18449 */       errorMessage = FormatUtil.getString("2009", new String[] { serverName });
/* 18450 */       request.setAttribute("errorMessage", errorMessage);
/* 18451 */       return new ActionForward("/jsp/AdminServerDetails.jsp");
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 18455 */       e.printStackTrace();
/*       */       
/* 18457 */       errorMessage = FormatUtil.getString("am.webclient.managedserver.changetype.error.message");
/* 18458 */       request.setAttribute("errorMessage", errorMessage);
/* 18459 */       return new ActionForward("/jsp/AdminServerDetails.jsp");
/*       */     }
/* 18461 */     EnterpriseUtil.setServerType(EnterpriseUtil.MANAGED_SERVER);
/* 18462 */     EnterpriseUtil.setAdminServerHost(adminHost);
/* 18463 */     EnterpriseUtil.setAdminServerPort(adminPort);
/* 18464 */     EnterpriseUtil.isManagedServer = true;
/*       */     try
/*       */     {
/* 18467 */       com.adventnet.appmanager.server.framework.AMAutomaticPortChanger.createLatestPortPropertiesFile();
/*       */     }
/*       */     catch (Exception ee)
/*       */     {
/* 18471 */       ee.printStackTrace();
/*       */     }
/* 18473 */     return new ActionForward("/jsp/AdminServerDetails.jsp?reloadParentWindow=true");
/*       */   }
/*       */   
/*       */   private void updateManagedServerDetails(HttpServletRequest request)
/*       */   {
/* 18478 */     String query = "SELECT pri.ID AS ID, pri.DISPLAYNAME AS DISPLAYNAME, pri.HOST AS HOST, pri.PORT AS PORT, pri.SSLPORT AS SSLPORT , pri.POLLTOTRY AS POLLTOTRY , pri.LASTDC AS LASTDC, pri.ENABLE AS ENABLE, pri.ALLOTED_GLOBAL_RANGE AS ALLOTED_GLOBAL_RANGE, pri.STATE AS PY_STATE ,pri.LOADFACTOR AS LOADFACTOR, pri.SERVERTYPE AS SERVERTYPE,pri.MASGROUPNAME AS MASGROUPNAME,sec.ID AS SY_ID, sec.HOST AS SY_HOST, sec.SSLPORT AS SY_SSLPORT, sec.STATE AS SY_STATE FROM AM_MAS_SERVER as pri LEFT OUTER JOIN AM_MAS_SERVER as sec ON pri.ID=(sec.ID-10000) WHERE pri.SERVERTYPE='PY' ORDER BY ALLOTED_GLOBAL_RANGE";
/* 18479 */     ResultSet rs = null;
/* 18480 */     ArrayList masServer = new ArrayList();
/*       */     try {
/* 18482 */       rs = AMConnectionPool.executeQueryStmt(query);
/* 18483 */       while (rs.next()) {
/* 18484 */         ArrayList mas = new ArrayList();
/* 18485 */         mas.add(rs.getString("ID"));
/* 18486 */         mas.add(rs.getString("DISPLAYNAME"));
/* 18487 */         mas.add(rs.getString("HOST"));
/* 18488 */         mas.add(rs.getString("PORT"));
/* 18489 */         mas.add(rs.getString("SSLPORT"));
/* 18490 */         mas.add(rs.getString("POLLTOTRY"));
/* 18491 */         mas.add(rs.getString("LASTDC"));
/* 18492 */         mas.add(rs.getString("ENABLE"));
/* 18493 */         mas.add(rs.getString("ALLOTED_GLOBAL_RANGE"));
/* 18494 */         mas.add(rs.getString("PY_STATE"));
/* 18495 */         mas.add(rs.getString("LOADFACTOR"));
/* 18496 */         mas.add(rs.getString("SERVERTYPE"));
/* 18497 */         String masGroupName = rs.getString("MASGROUPNAME");
/* 18498 */         if ((masGroupName == null) || (masGroupName.trim().length() == 0) || ("null".equals(masGroupName))) {
/* 18499 */           mas.add("-");
/*       */         } else {
/* 18501 */           mas.add(rs.getString("MASGROUPNAME"));
/*       */         }
/* 18503 */         String secServerID = rs.getString("SY_ID");
/* 18504 */         if ((secServerID == null) || (secServerID.trim().length() == 0) || ("null".equals(secServerID))) {
/* 18505 */           mas.add("-");
/*       */         } else {
/* 18507 */           mas.add(rs.getString("SY_ID"));
/*       */         }
/* 18509 */         String secServerHost = rs.getString("SY_HOST");
/* 18510 */         if ((secServerHost == null) || (secServerHost.trim().length() == 0) || ("null".equals(secServerHost))) {
/* 18511 */           mas.add("-");
/*       */         } else {
/* 18513 */           mas.add(rs.getString("SY_HOST"));
/*       */         }
/* 18515 */         String secServerPort = rs.getString("SY_SSLPORT");
/* 18516 */         if ((secServerPort == null) || (secServerPort.trim().length() == 0) || ("null".equals(secServerPort))) {
/* 18517 */           mas.add("-");
/*       */         } else {
/* 18519 */           mas.add(rs.getString("SY_SSLPORT"));
/*       */         }
/* 18521 */         String secServerState = rs.getString("SY_STATE");
/* 18522 */         if ((secServerState == null) || (secServerState.trim().length() == 0) || ("null".equals(secServerState))) {
/* 18523 */           mas.add("-");
/*       */         } else {
/* 18525 */           mas.add(rs.getString("SY_STATE"));
/*       */         }
/* 18527 */         if (!mas.isEmpty()) {
/* 18528 */           masServer.add(mas);
/*       */         }
/*       */       }
/*       */     } catch (Exception ex) {
/* 18532 */       ex.printStackTrace();
/*       */     } finally {
/* 18534 */       if (rs != null) {
/* 18535 */         AMConnectionPool.closeStatement(rs);
/*       */       }
/*       */     }
/* 18538 */     if (masServer.size() > 0)
/*       */     {
/* 18540 */       request.setAttribute("ManagedServerDetails", masServer);
/*       */     }
/*       */   }
/*       */   
/*       */   public void insertThreshold(HttpServletRequest request, boolean isPattern, boolean isPopup)
/*       */   {
/* 18546 */     insertThreshold(request, isPattern, isPopup, false);
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   public void insertThreshold(HttpServletRequest request, boolean isPattern, boolean isPopup, boolean isFloat)
/*       */   {
/* 18554 */     String critCount = request.getParameter("consecutive_criticalpolls");
/* 18555 */     String warnCount = request.getParameter("consecutive_warningpolls");
/* 18556 */     String clearCount = request.getParameter("consecutive_clearpolls");
/* 18557 */     String min_critCount = request.getParameter("consecutive_mincriticalpolls");
/* 18558 */     String min_warnCount = request.getParameter("consecutive_minwarningpolls");
/* 18559 */     String min_clearCount = request.getParameter("consecutive_minclearpolls");
/* 18560 */     PreparedStatement pS = null;
/* 18561 */     String insertThresholdConfigQuery = null;
/*       */     try {
/* 18563 */       if ((critCount == null) || (critCount.trim().equals(""))) {
/* 18564 */         critCount = "-1";
/*       */       }
/* 18566 */       if ((warnCount == null) || (warnCount.trim().equals(""))) {
/* 18567 */         warnCount = "-1";
/*       */       }
/* 18569 */       if ((clearCount == null) || (clearCount.trim().equals(""))) {
/* 18570 */         clearCount = "-1";
/*       */       }
/* 18572 */       if ((min_critCount == null) || (min_critCount.trim().equals(""))) {
/* 18573 */         min_critCount = "-1";
/*       */       }
/* 18575 */       if ((min_warnCount == null) || (min_warnCount.trim().equals(""))) {
/* 18576 */         min_warnCount = "-1";
/*       */       }
/* 18578 */       if ((min_clearCount == null) || (min_clearCount.trim().equals(""))) {
/* 18579 */         min_clearCount = "-1";
/*       */       }
/* 18581 */       int id = -1;
/* 18582 */       if ("true".equals(request.getParameter("adminAPIRequest"))) {
/* 18583 */         String thresholdid = null;
/* 18584 */         if (("newfalse".equalsIgnoreCase(request.getParameter("thresholdid"))) || ("newtrue".equalsIgnoreCase(request.getParameter("thresholdid")))) {
/* 18585 */           thresholdid = request.getParameter("newthresholdid").trim();
/*       */         } else {
/* 18587 */           thresholdid = request.getParameter("thresholdid").trim();
/*       */         }
/* 18589 */         id = Integer.parseInt(thresholdid);
/*       */       } else {
/* 18591 */         id = DBQueryUtil.getIncrementedID("ID", "AM_THRESHOLDCONFIG");
/*       */       }
/* 18593 */       if ((EnterpriseUtil.isAdminServer()) && (id < 10000)) {
/* 18594 */         id = 10000;
/*       */       }
/*       */       
/* 18597 */       String displayname = request.getParameter("displayname");
/* 18598 */       String description = request.getParameter("description") == null ? "" : request.getParameter("description");
/* 18599 */       if (DBQueryUtil.getDBType().equals("mssql")) {
/* 18600 */         displayname = displayname.replaceAll("'", "''");
/* 18601 */         description = description.replaceAll("'", "''");
/*       */       } else {
/* 18603 */         displayname = displayname.replaceAll("'", "\\\\'");
/* 18604 */         description = description.replaceAll("'", "\\\\'");
/*       */       }
/* 18606 */       insertThresholdConfigQuery = "insert into AM_THRESHOLDCONFIG (ID,NAME, TYPE, DESCRIPTION, CRITICALTHRESHOLDCONDITION, CRITICALTHRESHOLDVALUE, CRITICALTHRESHOLDMESSAGE, WARNINGTHRESHOLDCONDITION, WARNINGTHRESHOLDVALUE, WARNINGTHRESHOLDMESSAGE, INFOTHRESHOLDCONDITION, INFOTHRESHOLDVALUE, INFOTHRESHOLDMESSAGE,CRITICAL_POLLSTOTRY,WARNING_POLLSTOTRY,CLEAR_POLLSTOTRY,MIN_CRITICAL_POLLSTOTRY,MIN_WARNING_POLLSTOTRY,MIN_CLEAR_POLLSTOTRY) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
/* 18607 */       pS = AMConnectionPool.getConnection().prepareStatement(insertThresholdConfigQuery);
/* 18608 */       pS.setInt(1, id);
/* 18609 */       pS.setString(2, displayname);
/* 18610 */       int thresholdType = isFloat ? 4 : isPattern ? 3 : 1;
/* 18611 */       pS.setInt(3, thresholdType);
/* 18612 */       pS.setString(4, description);
/*       */       
/* 18614 */       String secondaryCExist = request.getParameter("secondarycriticalexist");
/* 18615 */       String critcalThresholdValue = (isPattern) || (isFloat) || (request.getParameter("criticalthresholdvalue") == null) ? "-1" : request.getParameter("criticalthresholdvalue");
/* 18616 */       if ((secondaryCExist != null) && ("true".equalsIgnoreCase(secondaryCExist))) {
/* 18617 */         appendSecondaryCondition(pS, 5, request, 1);
/*       */       } else {
/* 18619 */         pS.setString(5, request.getParameter("criticalthresholdcondition"));
/* 18620 */         pS.setInt(6, Integer.parseInt(critcalThresholdValue));
/*       */       }
/*       */       
/* 18623 */       String criticalThresholdMessage = isPopup ? "" : request.getParameter("criticalthresholdmessage");
/* 18624 */       pS.setString(7, criticalThresholdMessage);
/* 18625 */       String secondaryWExist = request.getParameter("secondarywarningexist");
/* 18626 */       String warningThresholdValue = (isPattern) || (isFloat) || (request.getParameter("warningthresholdvalue") == null) ? "-1" : request.getParameter("warningthresholdvalue");
/* 18627 */       if ((secondaryWExist != null) && ("true".equalsIgnoreCase(secondaryWExist))) {
/* 18628 */         appendSecondaryCondition(pS, 8, request, 4);
/*       */       } else {
/* 18630 */         pS.setString(8, request.getParameter("warningthresholdcondition"));
/* 18631 */         pS.setInt(9, Integer.parseInt(warningThresholdValue));
/*       */       }
/*       */       
/* 18634 */       String warningThresholdMessage = isPopup ? "" : request.getParameter("warningthresholdmessage");
/* 18635 */       pS.setString(10, warningThresholdMessage);
/* 18636 */       String secondaryIExist = request.getParameter("secondaryinfoexist");
/* 18637 */       String clearThresholdValue = (isPattern) || (isFloat) || (request.getParameter("infothresholdvalue") == null) ? "-1" : request.getParameter("infothresholdvalue");
/* 18638 */       if ((secondaryIExist != null) && ("true".equalsIgnoreCase(secondaryIExist))) {
/* 18639 */         appendSecondaryCondition(pS, 11, request, 5);
/*       */       } else {
/* 18641 */         pS.setString(11, request.getParameter("infothresholdcondition"));
/* 18642 */         pS.setInt(12, Integer.parseInt(clearThresholdValue));
/*       */       }
/*       */       
/* 18645 */       String clearThresholdMessage = isPopup ? "" : request.getParameter("infothresholdmessage");
/* 18646 */       pS.setString(13, clearThresholdMessage);
/* 18647 */       pS.setInt(14, Integer.parseInt(critCount));
/* 18648 */       pS.setInt(15, Integer.parseInt(warnCount));
/* 18649 */       pS.setInt(16, Integer.parseInt(clearCount));
/* 18650 */       pS.setInt(17, Integer.parseInt(min_critCount));
/* 18651 */       pS.setInt(18, Integer.parseInt(min_warnCount));
/* 18652 */       pS.setInt(19, Integer.parseInt(min_clearCount));
/*       */       
/* 18654 */       pS.executeUpdate(); return;
/*       */     } catch (SQLException e) {
/* 18656 */       e.printStackTrace();
/*       */     } finally {
/* 18658 */       if (pS != null) {
/*       */         try {
/* 18660 */           pS.close();
/*       */         } catch (Exception ex) {
/* 18662 */           ex.printStackTrace();
/*       */         }
/*       */       }
/*       */     }
/*       */   }
/*       */   
/*       */   public void appendSecondaryCondition(PreparedStatement pS, int count, HttpServletRequest request, int severity) {
/*       */     try {
/* 18670 */       String severitystr = "critical";
/* 18671 */       if (severity == 4) {
/* 18672 */         severitystr = "warning";
/* 18673 */       } else if (severity == 5) {
/* 18674 */         severitystr = "info";
/*       */       }
/* 18676 */       String primarycondition = request.getParameter(severitystr + "thresholdcondition");
/* 18677 */       String primarythvalue = request.getParameter(severitystr + "thresholdvalue");
/* 18678 */       String secondarycondition = request.getParameter("secondary" + severitystr + "thresholdcondition");
/* 18679 */       String secondarythvalue = request.getParameter("secondary" + severitystr + "thresholdvalue");
/* 18680 */       String conditionjoiner = request.getParameter(severitystr + "conditionjoiner");
/* 18681 */       String patternCondition = primarycondition + primarythvalue + conditionjoiner + secondarycondition + secondarythvalue;
/* 18682 */       pS.setString(count, patternCondition);
/* 18683 */       pS.setInt(++count, -1);
/*       */     } catch (SQLException e) {
/* 18685 */       e.printStackTrace();
/*       */     }
/*       */   }
/*       */   
/*       */ 
/*       */   public int daysRemainingForCustomer()
/*       */   {
/* 18692 */     int days = 0;
/*       */     try
/*       */     {
/* 18695 */       AMConnectionPool pool = AMConnectionPool.getInstance();
/* 18696 */       String query = "select VALUE from AM_GLOBALCONFIG where NAME='NTM'";
/* 18697 */       ResultSet set = AMConnectionPool.executeQueryStmt(query);
/* 18698 */       if (set.next())
/*       */       {
/* 18700 */         String valuefromtablestr = set.getString("VALUE");
/* 18701 */         long valuefromtable = Long.parseLong(valuefromtablestr);
/* 18702 */         long convertmillis = valuefromtable * 1000L;
/* 18703 */         days = new java.util.Date(System.currentTimeMillis()).compareTo(new java.util.Date(convertmillis));
/*       */       }
/*       */       
/* 18706 */       AMConnectionPool.closeStatement(set);
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 18710 */       e.printStackTrace();
/*       */     }
/* 18712 */     return days;
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public String getQengineHome()
/*       */   {
/* 18721 */     return this.qengineHome;
/*       */   }
/*       */   
/*       */ 
/*       */   public void setQengineHome(String qengineHome)
/*       */   {
/* 18727 */     this.qengineHome = qengineHome;
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward showPrerequisitesConfiguration(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 18736 */     AMServerFramework.toXtraMonitorsPage = true;
/* 18737 */     String user_type = FreeEditionDetails.getFreeEditionDetails().getUserType();
/* 18738 */     request.setAttribute("user_type", user_type);
/*       */     
/*       */ 
/* 18741 */     if (!"true".equals(request.getParameter("isAjax"))) {
/* 18742 */       boolean hideSettingsWizard = DBUtil.getGlobalConfigValueasBoolean("hideSettingsWizard");
/* 18743 */       AMLog.info("The hidesettingsWizard:" + hideSettingsWizard);
/* 18744 */       if (!hideSettingsWizard)
/*       */       {
/* 18746 */         request.setAttribute("showSettingsWizard", "true");
/* 18747 */         if ("true".equals((String)request.getSession().getAttribute("remindmeLater")))
/*       */         {
/* 18749 */           request.setAttribute("showSettingsWizard", "false");
/*       */         }
/*       */       }
/*       */       else
/*       */       {
/* 18754 */         request.setAttribute("showSettingsWizard", "false");
/*       */       }
/*       */       
/*       */ 
/* 18758 */       String redirectionUrl = "/jsp/GettingStarted.jsp?tabtoselect=5";
/* 18759 */       redirectionUrl = redirectionUrl + "&showPreRequisites=true";
/* 18760 */       return new ActionForward(redirectionUrl);
/*       */     }
/*       */     
/*       */     try
/*       */     {
/* 18765 */       boolean smtpStatus = false;boolean proxyStatus = true;boolean adminStatus = false;
/* 18766 */       String globalEmail = null;String secGlobalEmail = null;String adminEmail = null;
/* 18767 */       Hashtable globalConfig = (Hashtable)request.getSession().getServletContext().getAttribute("globalconfig");
/*       */       
/* 18769 */       HashMap<String, String> smtpDetails = new HashMap();
/* 18770 */       HashMap<String, String> proxyDetails = new HashMap();
/* 18771 */       HashMap<String, String> adminDetails = new HashMap();
/* 18772 */       Properties mailProps = SmtpEMailer.getSmtpProperties();
/* 18773 */       for (String name : mailProps.stringPropertyNames()) {
/* 18774 */         smtpDetails.put(name, mailProps.getProperty(name));
/*       */       }
/* 18776 */       com.adventnet.appmanager.util.Constants.initAdminEmailID();
/* 18777 */       adminEmail = com.adventnet.appmanager.util.Constants.ADMIN_EMAIL_ADDRESS;
/* 18778 */       adminDetails.put("adminEmail", adminEmail);
/*       */       
/* 18780 */       adminStatus = (adminEmail != null) && (adminEmail.length() > 0);
/* 18781 */       adminDetails.put("adminStatus", Boolean.toString(adminStatus));
/*       */       
/* 18783 */       boolean registerForTechSupport = DBUtil.getGlobalConfigValueasBoolean("am.technicalsupportrequired");
/* 18784 */       AMLog.info("registerForTechSupport:" + registerForTechSupport);
/* 18785 */       AMLog.info("user_type:" + user_type.equals("R"));
/* 18786 */       registerForTechSupport = (!user_type.equals("R")) && (!registerForTechSupport);
/* 18787 */       AMLog.info("registerForTechSupport:" + registerForTechSupport);
/* 18788 */       adminDetails.put("showRegisterTechSupport", Boolean.toString(registerForTechSupport));
/* 18789 */       String user = request.getRemoteUser();
/* 18790 */       if (!DBUtil.username_userid_mapping.containsKey(user))
/*       */       {
/* 18792 */         DBUtil.getUserIdForUserName();
/*       */       }
/* 18794 */       String userId = DBUtil.username_userid_mapping.get(user).toString();
/* 18795 */       adminDetails.put("userImagePath", DBUtil.getImageStatus(user, userId).replaceAll("icon_user.gif", "vcard.png"));
/*       */       
/* 18797 */       String proxyEnabled = DBUtil.getGlobalConfigValue("useproxy");
/* 18798 */       if (proxyEnabled.equals("true"))
/*       */       {
/* 18800 */         Properties proxyProps = this.mo.getProxyProps("root");
/* 18801 */         if (proxyProps != null)
/*       */         {
/* 18803 */           proxyDetails.put("proxyHost", proxyProps.getProperty("host"));
/* 18804 */           proxyDetails.put("proxyPort", proxyProps.getProperty("port"));
/* 18805 */           proxyDetails.put("proxyUsername", proxyProps.getProperty("username"));
/*       */         }
/*       */         
/* 18808 */         proxyDetails.put("proxyEnabled", proxyEnabled);
/* 18809 */         proxyDetails.put("bypassProxy", DBUtil.getGlobalConfigValue("bypassproxyforlocal"));
/* 18810 */         proxyDetails.put("proxyBypass", DBUtil.getGlobalConfigValue("bypassproxyaddress"));
/*       */       }
/* 18812 */       proxyDetails.put("proxyStatus", Boolean.toString(proxyStatus));
/*       */       
/* 18814 */       HashMap<String, HashMap<String, String>> dataMap = new HashMap();
/* 18815 */       dataMap.put("smtpDetails", smtpDetails);
/* 18816 */       dataMap.put("proxyDetails", proxyDetails);
/* 18817 */       dataMap.put("adminDetails", adminDetails);
/* 18818 */       JSONObject data = new JSONObject(dataMap);
/* 18819 */       PrintWriter output = response.getWriter();
/* 18820 */       ClientDBUtil.sendResponse(data.toString(), response);
/*       */       
/* 18822 */       if ((adminStatus) && (smtpStatus)) {
/* 18823 */         DBUtil.updateGlobalConfigValue("hideSettingsWizard", "true");
/*       */       }
/*       */     }
/*       */     catch (Exception e) {
/* 18827 */       e.printStackTrace();
/*       */     }
/* 18829 */     return null;
/*       */   }
/*       */   
/*       */   public ActionForward uploadUserImage(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
/*       */   {
/*       */     try
/*       */     {
/* 18836 */       PrintWriter writer = null;
/* 18837 */       InputStream is = null;
/* 18838 */       FileOutputStream fos = null;
/* 18839 */       OutputStream bos = null;
/* 18840 */       String username = request.getRemoteUser();
/* 18841 */       String userId = null;
/* 18842 */       boolean isMultipartRequest = org.apache.commons.fileupload.servlet.ServletFileUpload.isMultipartContent(request);
/*       */       
/* 18844 */       if (!DBUtil.username_userid_mapping.containsKey(request.getRemoteUser()))
/*       */       {
/* 18846 */         DBUtil.getUserIdForUserName();
/*       */       }
/* 18848 */       AMLog.info("UploadUserImage: User_ID Mappings:" + DBUtil.username_userid_mapping);
/* 18849 */       userId = DBUtil.username_userid_mapping.get(username).toString();
/*       */       
/* 18851 */       String filePath = File.separator + "users" + File.separator + username + File.separator;
/* 18852 */       File userImageStoragePath = new File(System.getProperty("webnms.rootdir") + filePath);
/*       */       try
/*       */       {
/* 18855 */         writer = response.getWriter();
/* 18856 */         if (!userImageStoragePath.exists())
/*       */         {
/* 18858 */           userImageStoragePath.mkdirs();
/*       */         }
/*       */       }
/*       */       catch (IOException ex) {
/* 18862 */         AMLog.debug("UploadUserImage method has thrown an exception: " + ex.getMessage());
/*       */       }
/*       */       catch (Exception ex) {
/* 18865 */         AMLog.debug("UploadUserImage method has thrown an exception: " + ex.getMessage());
/* 18866 */         ex.printStackTrace();
/*       */       }
/*       */       
/*       */       try
/*       */       {
/* 18871 */         String uploadDir = System.getProperty("webnms.rootdir") + filePath;
/*       */         try
/*       */         {
/* 18874 */           if (!isMultipartRequest)
/*       */           {
/* 18876 */             is = request.getInputStream();
/* 18877 */             fos = new FileOutputStream(new File(uploadDir + userId + ".jpg"));
/* 18878 */             org.apache.commons.io.IOUtils.copy(is, fos);
/*       */           }
/*       */           else
/*       */           {
/* 18882 */             AMActionForm amform = (AMActionForm)form;
/* 18883 */             FormFile imgfile = amform.getQqfile();
/*       */             
/* 18885 */             String fileName = imgfile.getFileName();
/* 18886 */             if ((imgfile != null) && (fileName != null) && (fileName.length() > 0))
/*       */             {
/* 18888 */               is = imgfile.getInputStream();
/* 18889 */               Boolean dirCreated = Boolean.valueOf(new File(uploadDir).mkdir());
/*       */               
/* 18891 */               bos = new FileOutputStream(uploadDir + userId + ".jpg");
/* 18892 */               int bytesRead = 0;
/* 18893 */               byte[] buffer = new byte[' '];
/* 18894 */               while ((bytesRead = is.read(buffer, 0, 8192)) != -1) {
/* 18895 */                 bos.write(buffer, 0, bytesRead);
/*       */               }
/* 18897 */               AMLog.info("The file has been written to \"" + uploadDir + userId + ".jpg\"");
/*       */             }
/*       */           }
/* 18900 */           response.setStatus(200);
/* 18901 */           writer.print("{success: true, imgpath:\"" + DBUtil.getImageStatus(username, userId).replaceAll("icon_user.gif", "vcard.png") + "\"}");
/*       */         }
/*       */         catch (FileNotFoundException ex)
/*       */         {
/* 18905 */           ex.printStackTrace();
/* 18906 */           response.setStatus(500);
/* 18907 */           writer.print("{success: false, imgpath:\"../images/vcard.png\"}");
/* 18908 */           AMLog.debug("UploadUserImage method has thrown an exception: " + ex.getMessage());
/*       */         }
/*       */         catch (IOException ex)
/*       */         {
/* 18912 */           ex.printStackTrace();
/* 18913 */           response.setStatus(500);
/* 18914 */           writer.print("{success: false, imgpath:\"../images/vcard.png\"}");
/* 18915 */           AMLog.debug("UploadUserImage method has thrown an exception: " + ex.getMessage());
/*       */         }
/*       */         finally
/*       */         {
/*       */           try
/*       */           {
/* 18921 */             if (fos != null)
/*       */             {
/* 18923 */               fos.close();
/*       */             }
/* 18925 */             if (is != null)
/*       */             {
/* 18927 */               is.close();
/*       */             }
/* 18929 */             if (bos != null)
/*       */             {
/* 18931 */               bos.close();
/*       */             }
/*       */           }
/*       */           catch (IOException ignored)
/*       */           {
/* 18936 */             AMLog.info("IO Exception :" + ignored.getMessage());
/*       */           }
/*       */         }
/*       */         
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/* 18944 */         writer.flush();
/*       */       }
/*       */       catch (Exception ex)
/*       */       {
/* 18941 */         ex.printStackTrace();
/*       */       }
/*       */       
/*       */ 
/* 18945 */       writer.close();
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 18949 */       e.printStackTrace();
/*       */     }
/* 18951 */     return null;
/*       */   }
/*       */   
/*       */   public ActionForward preRequisitesConfiguration(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
/*       */   {
/* 18956 */     response.setContentType("text/html;charset=UTF-8");
/* 18957 */     AMActionForm amform = (AMActionForm)form;
/* 18958 */     String message = FormatUtil.getString("mailserver.config.Success");
/* 18959 */     request.setAttribute("gettingStarted", "true");
/* 18960 */     if (!DBUtil.hasGlobalConfigValue("hideSettingsWizard"))
/*       */     {
/* 18962 */       if ("true".equals((String)request.getSession().getAttribute("remindmeLater")))
/*       */       {
/* 18964 */         DBUtil.insertIntoGlobalConfig("hideSettingsWizard", "false");
/*       */       }
/*       */       else
/*       */       {
/* 18968 */         DBUtil.insertIntoGlobalConfig("hideSettingsWizard", "true");
/*       */       }
/*       */     }
/*       */     
/*       */ 
/* 18973 */     String preferredAction = request.getParameter("preference");
/* 18974 */     if (("admin".equals(preferredAction)) || (preferredAction == null))
/*       */     {
/* 18976 */       message = "AdminStatus:failed,";
/* 18977 */       String adminMsg = "Admin mail details not updated.";
/* 18978 */       String adminEmail = request.getParameter("adminEmailId");
/* 18979 */       adminEmail = adminEmail != null ? adminEmail.trim() : "";
/*       */       try
/*       */       {
/* 18982 */         if (adminEmail.length() > 0)
/*       */         {
/* 18984 */           com.adventnet.appmanager.util.Constants.ADMIN_EMAIL_ADDRESS = adminEmail;
/* 18985 */           AMConnectionPool.executeUpdateStmt("Update AM_UserPasswordTable set EMAILID='" + adminEmail + "' where USERNAME='admin'");
/* 18986 */           message = "AdminStatus:Success,";
/* 18987 */           request.setAttribute("adminStatus", "true");
/* 18988 */           adminMsg = FormatUtil.getString("Admin mail details updated successfully");
/*       */         }
/*       */       }
/*       */       catch (Exception e)
/*       */       {
/* 18993 */         e.printStackTrace();
/*       */       }
/* 18995 */       message = message + "AdminProfile:" + adminMsg;
/* 18996 */       if (preferredAction != null)
/*       */       {
/* 18998 */         ClientDBUtil.sendResponse(message, response);
/* 18999 */         return null;
/*       */       }
/*       */     }
/* 19002 */     if (("proxy".equals(preferredAction)) || (preferredAction == null)) {
/* 19003 */       Properties proxyProps = new Properties();
/* 19004 */       String proxypass = request.getParameter("proxyPassword") != null ? request.getParameter("proxyPassword") : "";
/* 19005 */       proxyProps.setProperty("useproxy", "on".equals(request.getParameter("useproxy")) ? "true" : "false");
/* 19006 */       proxyProps.setProperty("bypassproxy", request.getParameter("bypassproxy") != null ? "true" : "false");
/* 19007 */       proxyProps.setProperty("host", request.getParameter("proxyHost"));
/* 19008 */       proxyProps.setProperty("port", request.getParameter("proxyPort"));
/* 19009 */       proxyProps.setProperty("username", request.getParameter("proxyUserName"));
/* 19010 */       proxyProps.setProperty("password", request.getParameter("proxyPassword"));
/* 19011 */       proxyProps.setProperty("updateCredentials", proxypass.length() > 0 ? "true" : request.getParameter("updateCredentials") != null ? request.getParameter("updateCredentials") : "false");
/* 19012 */       proxyProps.setProperty("dontProxyList", request.getParameter("dontProxyList") != null ? request.getParameter("dontProxyList") : "127.0.0.1");
/*       */       
/* 19014 */       boolean proxyStatus = ProxyUtil.setProxyConfiguration(request, proxyProps);
/* 19015 */       String proxyMsg = (String)request.getAttribute("proxyMessage");
/* 19016 */       message = message + ",ProxyStatus:" + proxyStatus + ",ProxyMessage:" + proxyMsg;
/* 19017 */       if (preferredAction != null)
/*       */       {
/* 19019 */         ClientDBUtil.sendResponse(message, response);
/* 19020 */         return null;
/*       */       }
/*       */     }
/* 19023 */     request.setAttribute("message", message);
/* 19024 */     return new ActionForward("/adminAction.do?method=mailServerConfiguration");
/*       */   }
/*       */   
/*       */   public ActionForward deleteHostFromTables(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
/*       */   {
/* 19029 */     AMConnectionPool cp = AMConnectionPool.getInstance();
/* 19030 */     String[] tables = request.getParameterValues("tableNameCheckbox");
/* 19031 */     String hostName = request.getParameter("hostName");
/* 19032 */     String tableName = "";
/* 19033 */     String query = "";
/* 19034 */     for (int i = 0; i < tables.length; i++)
/*       */     {
/* 19036 */       tableName = tables[i];
/*       */       
/* 19038 */       if ((tableName.equals("Node")) || (tableName.equals("IpAddress")) || (tableName.equals("ManagedObject")) || (tableName.equals("TopoObject")) || (tableName.equals("SnmpNode")) || (tableName.equals("SnmpInterface")))
/*       */       {
/* 19040 */         query = "delete from " + tableName + " where NAME like '%" + hostName + "%'";
/*       */       }
/* 19042 */       else if ((tableName.equals("CollectData")) || (tableName.equals("HostDetails")) || (tableName.equals("AM_ManagedObject")))
/*       */       {
/* 19044 */         query = "delete from " + tableName + " where RESOURCENAME like '%" + hostName + "%'";
/*       */       }
/* 19046 */       else if (tableName.equals("InetService"))
/*       */       {
/* 19048 */         query = "delete from " + tableName + " where TARGETNAME like '%" + hostName + "%'";
/*       */       }
/*       */       try
/*       */       {
/* 19052 */         AMConnectionPool.executeUpdateStmt(query);
/*       */       }
/*       */       catch (Exception e) {}
/*       */     }
/*       */     
/*       */ 
/*       */ 
/*       */ 
/* 19060 */     return new ActionForward("/jsp/showDiagnosticOutput.jsp?deleted=true");
/*       */   }
/*       */   
/*       */   public ActionForward getAllDetailsOfHost(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
/*       */   {
/* 19065 */     String type = request.getParameter("type");
/* 19066 */     request.setAttribute("monitorType", type);
/* 19067 */     String hostName = request.getParameter("hostName");
/* 19068 */     String hostIp = null;
/* 19069 */     if (hostName != null)
/*       */     {
/*       */       try
/*       */       {
/* 19073 */         hostIp = InetAddress.getByName(hostName).getHostAddress();
/* 19074 */         request.setAttribute("hostIp", hostIp);
/*       */       }
/*       */       catch (Exception e)
/*       */       {
/* 19078 */         String pingErrMessage = e.getMessage() + " - " + FormatUtil.getString("am.webclient.hostdiscovery.invalidhost");
/* 19079 */         request.setAttribute("pingResult", "false");
/* 19080 */         request.setAttribute("pingMessage", pingErrMessage);
/* 19081 */         return mapping.findForward("showdetailsofhost");
/*       */       }
/*       */       
/* 19084 */       new com.adventnet.appmanager.util.AppManagerPing();Properties result = com.adventnet.appmanager.util.AppManagerPing.getExecPingProps(hostName, 0);
/* 19085 */       String output = result.getProperty("output");
/* 19086 */       String pingResult = result.getProperty("result");
/* 19087 */       request.setAttribute("pingMessage", output);
/* 19088 */       request.setAttribute("pingResult", pingResult);
/* 19089 */       request.setAttribute("hostName", hostName);
/*       */     }
/* 19091 */     String portNumber = request.getParameter("portNumber");
/* 19092 */     int portInt = 0;
/*       */     try
/*       */     {
/* 19095 */       portInt = Integer.parseInt(portNumber);
/*       */     }
/*       */     catch (Exception e) {}
/*       */     
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/* 19104 */     if (portNumber != null)
/*       */     {
/*       */ 
/* 19107 */       request.setAttribute("portNumber", portNumber);
/*       */     }
/*       */     
/* 19110 */     String community = request.getParameter("community");
/* 19111 */     String snmpVersion = request.getParameter("snmpVersionValue");
/* 19112 */     if (community == null)
/*       */     {
/* 19114 */       community = "$";
/*       */     }
/* 19116 */     if (type.equals("SYSTEM:9999"))
/*       */     {
/* 19118 */       String serverType = request.getParameter("serverType");
/* 19119 */       String modeOfMonitor = request.getParameter("modeOfMonitor");
/* 19120 */       String userName = request.getParameter("userName");
/* 19121 */       String password = request.getParameter("password");
/* 19122 */       if (password != null) {
/* 19123 */         password = Translate.decode(password);
/*       */       }
/* 19125 */       String sshKey = request.getParameter("sshKey");
/*       */       
/* 19127 */       String prompt = Translate.decode(request.getParameter("prompt"));
/* 19128 */       if (modeOfMonitor != null)
/*       */       {
/* 19130 */         request.setAttribute("MODE", modeOfMonitor);
/*       */       }
/*       */       
/* 19133 */       if ((modeOfMonitor.equals("TELNET")) || (modeOfMonitor.equals("SSH")) || (modeOfMonitor.equals("SNMP")))
/*       */       {
/*       */ 
/* 19136 */         Properties authProp = new Properties();
/* 19137 */         authProp.setProperty("HOST", hostIp);
/* 19138 */         authProp.setProperty("PORT", portNumber);
/* 19139 */         authProp.setProperty("username", userName);
/* 19140 */         authProp.setProperty("password", password);
/* 19141 */         authProp.setProperty("os", serverType);
/* 19142 */         authProp.setProperty("MODE", modeOfMonitor);
/* 19143 */         authProp.setProperty("TELNETPORT", portNumber);
/*       */         
/* 19145 */         Properties snmpProperties = setSnmpValuesFromRequest(hostIp, request);
/* 19146 */         authProp.putAll(snmpProperties);
/*       */         
/* 19148 */         authProp.setProperty("prompt", prompt);
/* 19149 */         authProp.setProperty("checkAuthOnly", "true");
/* 19150 */         authProp.setProperty("prompt", prompt);
/* 19151 */         Properties authresult = null;
/* 19152 */         AMDCInf amdc = (AMDCInf)Class.forName("com.adventnet.appmanager.server.hostresources.datacollection.ScheduleHostDataCollection").newInstance();
/* 19153 */         authresult = amdc.CheckAuthentication(authProp);
/* 19154 */         String serverError = authresult.getProperty("error");
/* 19155 */         String serverAuthResult = authresult.getProperty("authentication");
/* 19156 */         request.setAttribute("serverAuthResult", serverAuthResult);
/* 19157 */         request.setAttribute("serverError", serverError);
/*       */         
/* 19159 */         if (modeOfMonitor.equals("SNMP"))
/*       */         {
/* 19161 */           new DiagnosticsUtil();HashMap output2 = DiagnosticsUtil.checkAgentRunningAndGetSystemValues(authProp);
/* 19162 */           String snmpRunning = (String)output2.get("isRunning");
/* 19163 */           request.setAttribute("snmpRunning", snmpRunning);
/* 19164 */           String snmpMessage = "";
/*       */           
/* 19166 */           if (snmpRunning.equals("true"))
/*       */           {
/* 19168 */             new DiagnosticsUtil();Properties output1 = DiagnosticsUtil.checkIpBySNMP(hostIp);
/* 19169 */             snmpMessage = output1.getProperty("message");
/* 19170 */             request.setAttribute("HOSTIP", output1.getProperty("hostIP"));
/* 19171 */             request.setAttribute("SNMPIP", output1.getProperty("ipfromsnmp"));
/* 19172 */             request.setAttribute("snmpMessage", snmpMessage);
/*       */           }
/*       */           else
/*       */           {
/* 19176 */             snmpMessage = (String)output2.get("error");
/* 19177 */             request.setAttribute("snmpMessage", snmpMessage);
/*       */           }
/*       */         }
/*       */         
/* 19181 */         if (modeOfMonitor.equals("TELNET"))
/*       */         {
/* 19183 */           if (authresult.getProperty("handShakeMessage") != null)
/*       */           {
/* 19185 */             request.setAttribute("handShakeMessage", authresult.getProperty("handShakeMessage"));
/*       */           }
/*       */         }
/* 19188 */         if (modeOfMonitor.equals("SSH"))
/*       */         {
/* 19190 */           byte[] buff = new byte['Ā'];
/* 19191 */           int n = 0;
/* 19192 */           Socket socket = null;
/*       */           try {
/* 19194 */             socket = new Socket(hostName, Integer.parseInt(portNumber));
/* 19195 */             InputStream in = socket.getInputStream();
/* 19196 */             n = in.read(buff);
/* 19197 */             int boffset = 0;
/*       */             
/* 19199 */             String idstr = "";
/* 19200 */             if (n > 0)
/*       */             {
/* 19202 */               while (boffset < buff.length)
/*       */               {
/* 19204 */                 byte b = buff[(boffset++)];
/* 19205 */                 idstr = idstr + (char)b;
/* 19206 */                 if (b == 10)
/*       */                 {
/* 19208 */                   if (!idstr.substring(0, 4).equals("SSH-"))
/*       */                   {
/*       */ 
/* 19211 */                     System.out.println("SshSession: Received invalid ID string: " + idstr.substring(0, 4));
/*       */                   }
/*       */                   else
/*       */                   {
/* 19215 */                     double sshVersion = Double.parseDouble(idstr.substring(4, idstr.indexOf("-", 5)));
/* 19216 */                     request.setAttribute("sshVersion", Double.valueOf(sshVersion));
/*       */                   }
/*       */                 }
/*       */               }
/*       */             }
/* 19221 */             socket.close();
/*       */           }
/*       */           catch (Exception e) {}
/*       */         }
/*       */       }
/*       */       
/*       */ 
/*       */ 
/*       */ 
/* 19230 */       int port = 0;
/*       */       try
/*       */       {
/* 19233 */         port = Integer.parseInt(portNumber);
/*       */       }
/*       */       catch (Exception e) {}
/*       */       
/*       */ 
/*       */ 
/* 19239 */       ArrayList tableList = new ArrayList();
/* 19240 */       new DiagnosticsUtil();tableList = DiagnosticsUtil.getTablesList(hostName);
/* 19241 */       request.setAttribute("tableList", tableList);
/*       */     }
/* 19243 */     if (type.equals("UrlMonitor"))
/*       */     {
/* 19245 */       String urlstr = request.getParameter("urlName");
/* 19246 */       new DiagnosticsUtil();Properties proxyProp = DiagnosticsUtil.testProxy(urlstr);
/* 19247 */       if (proxyProp.getProperty("proxyError") != null)
/*       */       {
/* 19249 */         request.setAttribute("proxyError", proxyProp.getProperty("proxyError"));
/*       */       }
/* 19251 */       if (proxyProp.getProperty("proxyConfigured") != null)
/*       */       {
/* 19253 */         request.setAttribute("proxyConfigured", proxyProp.getProperty("proxyConfigured"));
/*       */       }
/* 19255 */       request.setAttribute("errorReason", proxyProp.getProperty("errorReason"));
/* 19256 */       if (proxyProp.getProperty("header") != null)
/*       */       {
/* 19258 */         request.setAttribute("header", proxyProp.getProperty("header"));
/*       */       }
/*       */     }
/*       */     
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/* 19274 */     if ((type.equals("WEBLOGIC:7001")) || (type.equals("WEBSPHERE:9080")) || (type.equals("JBoss:8080")) || (type.equals("Tomcat:8080")) || (type.equals("APACHE:80")) || (type.equals("IIS:80")) || (type.equals("WEB:80")))
/*       */     {
/* 19276 */       String resourceType = "";
/* 19277 */       String discClass = "";
/* 19278 */       String scheduleClass = "";
/* 19279 */       String soapPort = "";
/* 19280 */       String nwMode = "";
/* 19281 */       String ndHost = "";
/* 19282 */       String ndPort = "";
/* 19283 */       String version = null;
/* 19284 */       String username = null;
/* 19285 */       String password = null;
/* 19286 */       if (request.getParameter("version") != null)
/*       */       {
/* 19288 */         version = request.getParameter("version");
/*       */       }
/* 19290 */       if (request.getParameter("userName") != null)
/*       */       {
/* 19292 */         username = request.getParameter("userName");
/*       */       }
/* 19294 */       if (request.getParameter("password") != null)
/*       */       {
/* 19296 */         password = request.getParameter("password");
/*       */       }
/* 19298 */       DiscoveryInfo discInfo = new DiscoveryInfo();
/* 19299 */       if (type.equals("WEBLOGIC:7001"))
/*       */       {
/* 19301 */         resourceType = "WEBLOGIC-server";
/* 19302 */         discClass = "com.adventnet.appmanager.server.discovery.wlogic.WebLogicDiscovery";
/* 19303 */         scheduleClass = "com.adventnet.appmanager.server.framework.datacollection.ScheduleWebLogicDataCollection";
/*       */       }
/* 19305 */       if (type.equals("JBoss:8080"))
/*       */       {
/* 19307 */         resourceType = "JBOSS-server";
/* 19308 */         discClass = "com.adventnet.appmanager.server.discovery.jb.JBossDiscovery";
/* 19309 */         scheduleClass = "com.adventnet.appmanager.server.framework.datacollection.ScheduleWebLogicDataCollection";
/*       */       }
/* 19311 */       if (type.equals("Tomcat:8080"))
/*       */       {
/* 19313 */         resourceType = "Tomcat-server";
/* 19314 */         discClass = "com.adventnet.appmanager.server.tomcat.discovery.TomcatDiscovery";
/* 19315 */         scheduleClass = "com.adventnet.appmanager.server.tomcat.datacollection.ScheduleTomcatDataCollection";
/*       */       }
/* 19317 */       if (type.equals("APACHE:80"))
/*       */       {
/* 19319 */         resourceType = "Apache-server";
/* 19320 */         discClass = "com.adventnet.appmanager.server.discovery.ApacheDiscovery";
/*       */       }
/* 19322 */       if (type.equals("IIS:80"))
/*       */       {
/* 19324 */         resourceType = "IIS-server";
/* 19325 */         discClass = "com.adventnet.appmanager.server.discovery.IISDiscovery";
/*       */       }
/* 19327 */       if (type.equals("WEB:80"))
/*       */       {
/* 19329 */         resourceType = "WEB-server";
/* 19330 */         discClass = "com.adventnet.appmanager.server.discovery.WebserverDiscovery";
/*       */       }
/* 19332 */       ResourceTypeIfc resTypeIfc = (ResourceTypeIfc)Class.forName(discClass).newInstance();
/* 19333 */       boolean serviceRunning = true;
/* 19334 */       if (version != null)
/*       */       {
/* 19336 */         discInfo.setUserProperty("protocolVersion", version);
/*       */       }
/* 19338 */       discInfo.setTargetAddress(hostName);
/* 19339 */       discInfo.setResourceType(resourceType);
/* 19340 */       discInfo.setPortNo(Integer.parseInt(portNumber));
/* 19341 */       if (request.getParameter("sslEnabled") != null)
/*       */       {
/* 19343 */         discInfo.setUserProperty("sslenabled", request.getParameter("sslEnabled"));
/*       */       }
/* 19345 */       serviceRunning = resTypeIfc.checkResourceType(discInfo, 5);
/* 19346 */       request.setAttribute("serviceRunning", String.valueOf(serviceRunning));
/*       */       try
/*       */       {
/* 19349 */         String protocol = "http";
/* 19350 */         if ((request.getParameter("sslEnabled") != null) && (request.getParameter("sslEnabled").equals("true")))
/*       */         {
/* 19352 */           protocol = "https";
/*       */         }
/* 19354 */         String urlstr = protocol + "://" + hostName + ":" + portNumber;
/* 19355 */         if (type.equals("WEBSPHERE:9080"))
/*       */         {
/* 19357 */           ndHost = request.getParameter("ndHost");
/* 19358 */           ndPort = request.getParameter("ndPort");
/* 19359 */           nwMode = request.getParameter("mode");
/* 19360 */           soapPort = request.getParameter("soapPort");
/* 19361 */           if (request.getParameter("mode").equals("BASE"))
/*       */           {
/* 19363 */             urlstr = protocol + "://" + hostName + ":" + portNumber + "/wasPerfTool/servlet/perfservlet?connector=SOAP&port=" + soapPort;
/*       */           }
/*       */           else
/*       */           {
/* 19367 */             urlstr = protocol + "://" + hostName + ":" + portNumber + "/wasPerfTool/servlet/perfservlet?connector=SOAP&port=" + ndPort + "&host=" + ndHost + "&username=" + username + "&password=" + password;
/*       */           }
/*       */         }
/* 19370 */         if (type.equals("JBoss:8080"))
/*       */         {
/* 19372 */           urlstr = protocol + "://" + hostName + ":" + portNumber + "/invoker/JNDIFactory";
/*       */         }
/*       */         
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/* 19383 */         HTTPResponse rsp = null;
/* 19384 */         URL url = new URL(urlstr);
/* 19385 */         HTTPConnection con = new HTTPConnection(url);
/* 19386 */         rsp = con.Get(url.getFile(), "");
/* 19387 */         BufferedReader br = new BufferedReader(new java.io.InputStreamReader(rsp.getInputStream()));
/* 19388 */         if (type.equals("JBoss:8080")) {
/* 19389 */           request.setAttribute("urlStr", urlstr);
/* 19390 */           request.setAttribute("statusCode", "" + rsp.getStatusCode());
/*       */         }
/* 19392 */         request.setAttribute("bufferRead", br);
/* 19393 */         String header = rsp.getHeader("Server");
/* 19394 */         if ((type.equals("APACHE:80")) || (type.equals("IIS:80")) || (type.equals("WEB:80")))
/*       */         {
/* 19396 */           request.setAttribute("header", header);
/*       */         }
/* 19398 */         if (discInfo.getUserProperty("error_message") != null)
/*       */         {
/* 19400 */           request.setAttribute("wlsConnectError", FormatUtil.getString(discInfo.getUserProperty("error_message")));
/*       */         }
/*       */       }
/*       */       catch (Exception e)
/*       */       {
/* 19405 */         if (discInfo.getUserProperty("error_message") != null)
/*       */         {
/* 19407 */           request.setAttribute("wlsConnectError", FormatUtil.getString(discInfo.getUserProperty("error_message")));
/*       */         }
/* 19409 */         else if (e.getMessage() != null)
/*       */         {
/* 19411 */           request.setAttribute("wlsConnectError", e.getMessage());
/*       */         }
/*       */         else
/*       */         {
/* 19415 */           request.setAttribute("wlsConnectError", "Service is not Running");
/*       */         }
/*       */       }
/* 19418 */       if ((!type.equals("APACHE:80")) && (!type.equals("IIS:80")) && (!type.equals("WEB:80")))
/*       */       {
/* 19420 */         AMDCInf amdc = (AMDCInf)Class.forName(scheduleClass).newInstance();
/* 19421 */         Properties dcprop = new Properties();
/* 19422 */         dcprop.setProperty("resourceType", resourceType);
/* 19423 */         if (!username.equals(""))
/*       */         {
/* 19425 */           dcprop.setProperty("username", username);
/*       */         }
/* 19427 */         if (!password.equals(""))
/*       */         {
/* 19429 */           dcprop.setProperty("password", password);
/*       */         }
/* 19431 */         dcprop.setProperty("HOST", hostName);
/* 19432 */         dcprop.setProperty("PORT", portNumber);
/* 19433 */         dcprop.setProperty("soapport", soapPort);
/* 19434 */         dcprop.setProperty("version", version);
/* 19435 */         if ((type.equals("JBoss:8080")) || (type.equals("Tomcat:8080")))
/*       */         {
/* 19437 */           dcprop.setProperty("sslenabled", request.getParameter("sslEnabled"));
/*       */         }
/* 19439 */         if (type.equals("WEBSPHERE:9080"))
/*       */         {
/* 19441 */           if (ndHost == null)
/*       */           {
/* 19443 */             ndHost = "";
/*       */           }
/* 19445 */           if (ndPort == null)
/*       */           {
/* 19447 */             ndPort = "";
/*       */           }
/* 19449 */           dcprop.setProperty("ndport", ndHost);
/* 19450 */           dcprop.setProperty("ndhost", ndPort);
/* 19451 */           dcprop.setProperty("MODE", nwMode);
/*       */         }
/* 19453 */         Properties authProp = amdc.CheckAuthentication(dcprop);
/* 19454 */         String authResult = authProp.getProperty("authentication");
/* 19455 */         String errorMessage = authProp.getProperty("error");
/* 19456 */         request.setAttribute("authResult", authResult);
/* 19457 */         if (errorMessage != null)
/*       */         {
/* 19459 */           request.setAttribute("errorMessage", FormatUtil.getString(errorMessage));
/*       */         }
/*       */         else
/*       */         {
/* 19463 */           request.setAttribute("errorMessage", "Authentication passed.");
/*       */         }
/* 19465 */         if (authProp.getProperty("exception") != null)
/*       */         {
/* 19467 */           request.setAttribute("exception", authProp.getProperty("exception"));
/*       */         }
/* 19469 */         if (authProp.getProperty("WLSstackTrace") != null)
/*       */         {
/* 19471 */           request.setAttribute("WLSstackTrace", authProp.getProperty("WLSstackTrace"));
/*       */         }
/*       */       }
/*       */     }
/* 19475 */     if (type.equals("ORACLEAS:7200"))
/*       */     {
/* 19477 */       DiscoveryInfo discInfo = new DiscoveryInfo();
/* 19478 */       String resourceType = "ORACLE-APP-server";
/* 19479 */       String discClass = "com.adventnet.appmanager.server.oracleas.discovery.OracleASDiscovery";
/* 19480 */       String scheduleClass = "com.adventnet.appmanager.server.oracleas.datacollection.ScheduleOracleASDataCollection";
/* 19481 */       ResourceTypeIfc resTypeIfc = (ResourceTypeIfc)Class.forName(discClass).newInstance();
/* 19482 */       boolean serviceRunning = true;
/* 19483 */       String version = request.getParameter("version");
/* 19484 */       discInfo.setTargetAddress(hostName);
/* 19485 */       discInfo.setResourceType(resourceType);
/* 19486 */       discInfo.setPortNo(Integer.parseInt(portNumber));
/* 19487 */       discInfo.setUserProperty("protocolVersion", version);
/* 19488 */       serviceRunning = resTypeIfc.checkResourceType(discInfo, 5);
/* 19489 */       request.setAttribute("serviceRunning", String.valueOf(serviceRunning));
/*       */       
/*       */       try
/*       */       {
/* 19493 */         String urlstr = "http://" + hostName + ":" + portNumber + "/dmsoc4j/AggreSpy?format=xml&table=opmn_host_statistics&cache=false";
/* 19494 */         URL url = new URL(urlstr);
/* 19495 */         HttpURLConnection con = null;
/* 19496 */         con = new HttpURLConnection(url);
/* 19497 */         con.setDoOutput(true);
/* 19498 */         con.setUseCaches(false);
/* 19499 */         con.setRequestProperty("Content-Type", "text/html");
/* 19500 */         BufferedReader br = new BufferedReader(new java.io.InputStreamReader(con.getInputStream()));
/* 19501 */         request.setAttribute("bufferRead", br);
/* 19502 */         if (discInfo.getUserProperty("error_message") != null)
/*       */         {
/* 19504 */           request.setAttribute("wlsConnectError", FormatUtil.getString(discInfo.getUserProperty("error_message")));
/*       */         }
/*       */       }
/*       */       catch (Exception e)
/*       */       {
/* 19509 */         if (discInfo.getUserProperty("error_message") != null)
/*       */         {
/* 19511 */           request.setAttribute("wlsConnectError", FormatUtil.getString(discInfo.getUserProperty("error_message")));
/*       */         }
/* 19513 */         else if (e.getMessage() != null)
/*       */         {
/* 19515 */           request.setAttribute("wlsConnectError", "e.getMessage");
/*       */         }
/*       */         else
/*       */         {
/* 19519 */           request.setAttribute("wlsConnectError", "Service is not Running");
/*       */         }
/*       */       }
/*       */     }
/*       */     
/* 19524 */     return mapping.findForward("showdetailsofhost");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward createMonitorGroup(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 19533 */     AMConnectionPool cp = AMConnectionPool.getInstance();
/* 19534 */     AMActionForm am = (AMActionForm)form;
/* 19535 */     ActionMessages messages = new ActionMessages();
/* 19536 */     ActionErrors errors = new ActionErrors();
/* 19537 */     response.setContentType("text/html;charset=UTF-8");
/* 19538 */     ResultSet rs = null;
/* 19539 */     String returnVal = null;
/* 19540 */     String groupName = null;
/* 19541 */     String resourceid = null;
/* 19542 */     groupName = request.getParameter("groupname");
/* 19543 */     String fromMapview = (String)request.getAttribute("fromMapview");
/* 19544 */     if (groupName != null)
/*       */     {
/* 19546 */       groupName = groupName.trim();
/*       */     }
/* 19548 */     if ("true".equalsIgnoreCase(fromMapview))
/*       */     {
/* 19550 */       groupName = (String)request.getAttribute("groupname");
/*       */     }
/* 19552 */     groupName = URLDecoder.decode(groupName);
/*       */     try {
/* 19554 */       PreparedStatement ps = AMConnectionPool.getConnection().prepareStatement("select RESOURCEID from AM_ManagedObject mo,AM_HOLISTICAPPLICATION ha where mo.RESOURCEID=ha.HAID and mo.RESOURCENAME=? and mo.TYPE='HAI' and ha.TYPE=0");
/* 19555 */       boolean name_exist = false;
/*       */       try
/*       */       {
/* 19558 */         ps.setString(1, groupName);
/* 19559 */         rs = ps.executeQuery();
/* 19560 */         if (rs.next())
/*       */         {
/* 19562 */           name_exist = true;
/*       */         }
/* 19564 */         AMConnectionPool.closeStatement(rs);
/*       */         
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */         try
/*       */         {
/* 19574 */           if (ps != null)
/*       */           {
/* 19576 */             ps.close();
/*       */           }
/*       */         }
/*       */         catch (Exception ex)
/*       */         {
/* 19581 */           ex.printStackTrace();
/*       */         }
/*       */         
/*       */ 
/* 19585 */         if (!name_exist) {
/*       */           break label293;
/*       */         }
/*       */       }
/*       */       catch (Exception e)
/*       */       {
/* 19568 */         e.printStackTrace();
/*       */       }
/*       */       finally
/*       */       {
/*       */         try
/*       */         {
/* 19574 */           if (ps != null)
/*       */           {
/* 19576 */             ps.close();
/*       */           }
/*       */         }
/*       */         catch (Exception ex)
/*       */         {
/* 19581 */           ex.printStackTrace();
/*       */         }
/*       */       }
/*       */       
/*       */ 
/*       */ 
/* 19587 */       returnVal = FormatUtil.getString("am.webclient.monitorgroup.errormsg.text");
/* 19588 */       PrintWriter pw = response.getWriter();
/* 19589 */       pw.print(returnVal);
/* 19590 */       AMConnectionPool.closeStatement(rs);
/*       */       break label782;
/*       */       try
/*       */       {
/*       */         label293:
/* 19595 */         AMManagedObject ammo = this.mo.createManagedApplication(groupName, "", "", null, null);
/* 19596 */         if (ammo != null)
/*       */         {
/* 19598 */           int haid = ammo.getRESOURCEID();
/*       */           try
/*       */           {
/* 19601 */             AMConnectionPool.executeUpdateStmt("insert into AM_MinMaxAvgData (ARCHIVEDTIME, RESID, DURATION, ATTRIBUTEID, MINVALUE, MAXVALUE, TOTAL, TOTALCOUNT) values('" + System.currentTimeMillis() + "', '" + haid + "', '-1','17','0','0','0','1')");
/*       */           } catch (Exception exp) {
/* 19603 */             exp.printStackTrace();
/*       */           }
/* 19605 */           if (ClientDBUtil.isPrivilegedUser(request)) {
/* 19606 */             int relationid = com.adventnet.appmanager.customfields.MyFields.getIncrementedID("RELATIONID", "AM_MYFIELDS_ENTITYDATA");
/* 19607 */             String localOwner = (String)DBUtil.username_userid_mapping.get(request.getRemoteUser());
/* 19608 */             String query = "insert into AM_HOLISTICAPPLICATION_OWNERS values(" + haid + "," + localOwner + ")";
/* 19609 */             String query1 = "insert into AM_MYFIELDS_ENTITYDATA values(" + relationid + "," + haid + ",'AM_UserPasswordTable'," + localOwner + ")";
/* 19610 */             com.adventnet.appmanager.util.RestrictedUsersViewUtil.insertIntoAMUserResourcesTable(Long.valueOf(localOwner), Long.valueOf(haid));
/* 19611 */             if ((com.adventnet.appmanager.server.framework.AMAutomaticPortChanger.isSsoEnabled()) && (EnterpriseUtil.isManagedServer) && (com.adventnet.appmanager.util.RestrictedUsersViewUtil.isRestrictedRole(localOwner)))
/*       */             {
/* 19613 */               EnterpriseUtil.addUpdateQueryToFile("insert into AM_USERRESOURCESTABLE  VALUES (" + Long.valueOf(localOwner) + "," + Long.valueOf(haid) + ")");
/* 19614 */               EnterpriseUtil.addUpdateQueryToFile("insert into AM_HOLISTICAPPLICATION_OWNERS values(" + haid + "," + localOwner + ")");
/*       */             }
/* 19616 */             this.mo.executeUpdateStmt(query);
/* 19617 */             this.mo.executeUpdateStmt(query1);
/*       */           }
/* 19619 */           if (am != null)
/*       */           {
/* 19621 */             am.setHaid(groupName);
/*       */           }
/* 19623 */           if ("true".equalsIgnoreCase(fromMapview))
/*       */           {
/* 19625 */             request.setAttribute("bsgId", Integer.valueOf(haid));
/* 19626 */             returnVal = "";
/*       */           }
/*       */           else
/*       */           {
/* 19630 */             returnVal = FormatUtil.getString("am.webclient.monitorgroup.smsg.text") + "," + URLEncoder.encode(groupName) + "," + haid;
/*       */           }
/* 19632 */           PrintWriter pw = response.getWriter();
/* 19633 */           pw.print(returnVal);
/*       */         }
/*       */         else
/*       */         {
/* 19637 */           returnVal = "Could not create the Monitor Group";
/* 19638 */           PrintWriter pw = response.getWriter();
/* 19639 */           pw.print(returnVal);
/*       */         }
/*       */       }
/*       */       catch (Exception e)
/*       */       {
/* 19644 */         e.printStackTrace();
/*       */       }
/*       */     }
/*       */     catch (Exception ex)
/*       */     {
/*       */       label782:
/* 19650 */       ex.printStackTrace();
/*       */     }
/* 19652 */     response.setContentType("text/plain");
/* 19653 */     return null;
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */   public ActionForward createSubGroup(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 19661 */     AMConnectionPool cp = AMConnectionPool.getInstance();
/* 19662 */     AMActionForm am = (AMActionForm)form;
/* 19663 */     ActionMessages messages = new ActionMessages();
/* 19664 */     ActionErrors errors = new ActionErrors();
/* 19665 */     response.setContentType("text/html;charset=UTF-8");
/* 19666 */     ResultSet rs = null;
/* 19667 */     String returnVal = null;
/* 19668 */     String subgroupName = null;
/* 19669 */     String groupName = null;
/* 19670 */     String haid = null;
/* 19671 */     subgroupName = request.getParameter("subgroupname");
/*       */     
/* 19673 */     if (subgroupName != null)
/*       */     {
/* 19675 */       subgroupName = subgroupName.trim();
/*       */     }
/*       */     
/* 19678 */     subgroupName = URLDecoder.decode(subgroupName);
/* 19679 */     haid = request.getParameter("haid");
/*       */     
/*       */     try
/*       */     {
/* 19683 */       PreparedStatement ps = AMConnectionPool.getConnection().prepareStatement("select am_mo.RESOURCEID from AM_PARENTCHILDMAPPER am_pcm,AM_ManagedObject am_mo,AM_HOLISTICAPPLICATION am_ha where am_mo.resourceid=am_pcm.childid and am_mo.RESOURCEID=am_ha.HAID and am_mo.TYPE='HAI' and  am_pcm.PARENTID IN (?) and am_mo.DISPLAYNAME=? and am_ha.GROUPTYPE=1");
/* 19684 */       boolean name_exist = false;
/*       */       try
/*       */       {
/* 19687 */         ps.setString(1, haid);
/* 19688 */         ps.setString(2, subgroupName);
/* 19689 */         rs = ps.executeQuery();
/* 19690 */         if (rs.next())
/*       */         {
/* 19692 */           name_exist = true;
/*       */         }
/* 19694 */         AMConnectionPool.closeStatement(rs);
/*       */         
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */         try
/*       */         {
/* 19704 */           if (ps != null)
/*       */           {
/* 19706 */             ps.close();
/*       */           }
/*       */         }
/*       */         catch (Exception ex)
/*       */         {
/* 19711 */           ex.printStackTrace();
/*       */         }
/*       */         
/*       */ 
/* 19715 */         if (!name_exist) {
/*       */           break label279;
/*       */         }
/*       */       }
/*       */       catch (Exception e)
/*       */       {
/* 19698 */         e.printStackTrace();
/*       */       }
/*       */       finally
/*       */       {
/*       */         try
/*       */         {
/* 19704 */           if (ps != null)
/*       */           {
/* 19706 */             ps.close();
/*       */           }
/*       */         }
/*       */         catch (Exception ex)
/*       */         {
/* 19711 */           ex.printStackTrace();
/*       */         }
/*       */       }
/*       */       
/*       */ 
/*       */ 
/* 19717 */       returnVal = FormatUtil.getString("am.webclient.subgroup.errormsg.text");
/* 19718 */       PrintWriter pw = response.getWriter();
/* 19719 */       pw.print(returnVal);
/* 19720 */       AMConnectionPool.closeStatement(rs);
/*       */       
/*       */       break label728;
/*       */       try
/*       */       {
/*       */         label279:
/* 19726 */         AMManagedObject ammo = this.mo.createManagedApplication(subgroupName, "", "", null, null, true);
/* 19727 */         if (ammo != null)
/*       */         {
/* 19729 */           int subhaid = ammo.getRESOURCEID();
/*       */           
/* 19731 */           if (ClientDBUtil.isPrivilegedUser(request)) {
/* 19732 */             int relationid = com.adventnet.appmanager.customfields.MyFields.getIncrementedID("RELATIONID", "AM_MYFIELDS_ENTITYDATA");
/* 19733 */             String localOwner = (String)DBUtil.username_userid_mapping.get(request.getRemoteUser());
/* 19734 */             String query = "insert into AM_HOLISTICAPPLICATION_OWNERS values(" + subhaid + "," + localOwner + ")";
/* 19735 */             String query1 = "insert into AM_MYFIELDS_ENTITYDATA values(" + relationid + "," + subhaid + ",'AM_UserPasswordTable'," + localOwner + ")";
/* 19736 */             this.mo.executeUpdateStmt(query);
/* 19737 */             this.mo.executeUpdateStmt(query1);
/*       */           }
/*       */           try
/*       */           {
/* 19741 */             AMConnectionPool.executeUpdateStmt("insert into AM_MinMaxAvgData (ARCHIVEDTIME, RESID, DURATION, ATTRIBUTEID, MINVALUE, MAXVALUE, TOTAL, TOTALCOUNT) values('" + System.currentTimeMillis() + "', '" + subhaid + "', '-1','17','0','0','0','1')");
/*       */           }
/*       */           catch (Exception exp)
/*       */           {
/* 19745 */             exp.printStackTrace();
/*       */           }
/*       */           
/*       */ 
/* 19749 */           int result1 = 0;
/*       */           
/*       */ 
/*       */           try
/*       */           {
/* 19754 */             Vector forUpdate = new Vector();
/* 19755 */             long id = DBUtil.insertParentChildMapper(Integer.parseInt(haid), subhaid);
/* 19756 */             String query = "insert into AM_PARENTCHILDMAPPER (RELATIONSHIPID,PARENTID, CHILDID) values(" + id + "," + haid + "," + subhaid + " )";
/* 19757 */             forUpdate.add(query);
/*       */             
/* 19759 */             AMAttributesDependencyAdder adder = new AMAttributesDependencyAdder();
/* 19760 */             added = adder.addDependentAttributes(Integer.parseInt(haid), subhaid);
/*       */           }
/*       */           catch (Exception exp)
/*       */           {
/*       */             boolean added;
/*       */             
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/* 19776 */             exp.printStackTrace();
/*       */           }
/*       */           
/* 19779 */           am.setHaid(subgroupName);
/* 19780 */           returnVal = FormatUtil.getString("am.webclient.monitorsubgroup.smsg.text") + "," + URLEncoder.encode(subgroupName) + "," + subhaid;
/* 19781 */           PrintWriter pw = response.getWriter();
/* 19782 */           pw.print(returnVal);
/*       */         }
/*       */         else
/*       */         {
/* 19786 */           returnVal = "Could not create the Monitor Group";
/* 19787 */           PrintWriter pw = response.getWriter();
/* 19788 */           pw.print(returnVal);
/*       */         }
/*       */       }
/*       */       catch (Exception e)
/*       */       {
/* 19793 */         e.printStackTrace();
/*       */       }
/*       */     }
/*       */     catch (Exception ex)
/*       */     {
/*       */       label728:
/* 19799 */       ex.printStackTrace();
/*       */     }
/* 19801 */     response.setContentType("text/plain");
/* 19802 */     return null;
/*       */   }
/*       */   
/*       */   public AdminActions()
/*       */   {
/*   150 */     this.mo = new ManagedApplication();
/*   151 */     this.mibName = "./mibs/RFC1213-MIB";
/*   152 */     this.types = com.adventnet.appmanager.util.Constants.resourceTypes;
/*       */     
/*   154 */     this.seccheck = false;
/*   155 */     this.qengineHome = null;
/*   156 */     this.isOPMConfigured = ExtProdUtil.isServiceConfigured("OpManager");
/*   157 */     this.isLogATicketToBePostedToOPM = OEMUtil.isRemove("enable.postLogTicketToOPM");
/*   158 */     this.credUtil = new CredentialManagerUtil();
/*   159 */     this.preConfParser = new com.adventnet.appmanager.server.framework.confparser.PreConfMonitorXMLParser();
/*   160 */     this.preConfMap = this.preConfParser.getPreConfMonitorListSupported();
/*       */     
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/* 11485 */     this.attrbIdsForSimilarResourceType = null;
/*       */     
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/* 19807 */     this.jsms = null; }
/*       */   
/* 19809 */   private static final String CONFIG_FILE = "conf" + File.separator + "SMSServer.conf";
/*       */   private static final String QUERYFORMAXTHRESHOLD = "select max(ID) from AM_THRESHOLDCONFIG";
/*       */   private static final String URLTORESOURCEPROFILES = "/showActionProfiles.do?method=getResourceProfiles&admin=true&monitor=true";
/*       */   private static final String ATTRIBUTELIST = "attributeList";
/*       */   private static final String THRESHOLDLIST = "thresholdList";
/*       */   private static final String WARNINGACTION = "selectedactions_warning";
/*       */   
/* 19816 */   public ActionForward SMSServerConfiguration(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception { if (DBUtil.isDelegatedAdmin(request.getRemoteUser()))
/*       */     {
/* 19818 */       return new ActionForward("/jsp/formpages/AccessRestricted.jsp");
/*       */     }
/*       */     
/* 19821 */     Properties p = new Properties();
/* 19822 */     AMActionForm amform = (AMActionForm)form;
/* 19823 */     ActionErrors errors = new ActionErrors();
/*       */     
/*       */ 
/* 19826 */     String port = "";
/* 19827 */     FreeEditionDetails free = FreeEditionDetails.getFreeEditionDetails();
/* 19828 */     String usrtype = free.getUserType();
/* 19829 */     ActionMessages messages = new ActionMessages();
/* 19830 */     boolean isaddonEnabled = FreeEditionDetails.getFreeEditionDetails().isModemAllowed();
/*       */     
/*       */     try
/*       */     {
/* 19834 */       if (request.getParameter("OK") != null) {
/*       */         try
/*       */         {
/* 19837 */           String portno = request.getParameter("SMSPort");
/* 19838 */           portno = portno.toUpperCase();
/* 19839 */           System.out.println("the portno:" + portno);
/* 19840 */           writePortToFile(portno);
/* 19841 */           request.setAttribute("portno", portno);
/* 19842 */           p = modemDetails(portno, request);
/* 19843 */           DBUtil.insertIntoGlobalConfig("SMSMailServer", amform.getSmsMailServer());
/*       */         }
/*       */         catch (Exception e) {
/* 19846 */           e.printStackTrace();
/*       */         }
/*       */         
/*       */       }
/*       */       else {
/*       */         try
/*       */         {
/* 19853 */           Properties prp = new Properties();
/* 19854 */           prp.load(new FileInputStream(CONFIG_FILE));
/* 19855 */           port = prp.getProperty("serial.port");
/* 19856 */           request.setAttribute("portno", port);
/* 19857 */           p = modemDetails(port, request);
/*       */         } catch (Exception e) {
/* 19859 */           e.printStackTrace();
/*       */         }
/*       */       }
/*       */       
/*       */ 
/*       */ 
/* 19865 */       if (p.size() != 0)
/*       */       {
/*       */ 
/* 19868 */         ((Hashtable)request.getSession().getServletContext().getAttribute("globalconfig")).put("modemconfigured", "true");
/*       */       }
/*       */       else
/*       */       {
/* 19872 */         ((Hashtable)request.getSession().getServletContext().getAttribute("globalconfig")).put("modemconfigured", "false");
/* 19873 */         errors.add("org.apache.struts.action.GLOBAL_ERROR", new ActionError("appmanager.error", FormatUtil.getString("am.webclient.adminmodem.alert")));
/* 19874 */         saveErrors(request, errors);
/*       */       }
/*       */     }
/*       */     catch (Exception ex) {
/* 19878 */       ex.printStackTrace();
/* 19879 */       ((Hashtable)request.getSession().getServletContext().getAttribute("globalconfig")).put("modemconfigured", "false");
/* 19880 */       errors.add("org.apache.struts.action.GLOBAL_ERROR", new ActionError("appmanager.error", FormatUtil.getString("am.webclient.adminmodem.alert")));
/* 19881 */       saveErrors(request, errors);
/*       */     }
/* 19883 */     request.setAttribute("modemProps", p);
/* 19884 */     Properties prp = new Properties();
/* 19885 */     prp.load(new FileInputStream(CONFIG_FILE));
/* 19886 */     port = prp.getProperty("serial.port", "");
/* 19887 */     request.setAttribute("portno", port);
/* 19888 */     amform.setSMSPort(port);
/*       */     
/* 19890 */     request.setAttribute("sms", "true");
/*       */     
/* 19892 */     ArrayList mailServerList = new ArrayList();
/*       */     
/*       */ 
/* 19895 */     HashMap<String, Properties> mailServerMap = SmtpEMailer.getSmtpList();
/* 19896 */     if (mailServerMap != null) {
/* 19897 */       Iterator<String> iterator = mailServerMap.keySet().iterator();
/* 19898 */       while (iterator.hasNext()) {
/* 19899 */         String key = (String)iterator.next();
/* 19900 */         Properties msProps = (Properties)mailServerMap.get(key);
/* 19901 */         String property = msProps.getProperty("HOST") + "_" + msProps.getProperty("PORT");
/* 19902 */         mailServerList.add(new org.apache.struts.util.LabelValueBean(property, key));
/*       */       }
/* 19904 */       request.setAttribute("mailServerList", mailServerList);
/* 19905 */       amform.setSmsMailServer(DBUtil.getGlobalConfigValue("SMSMailServer"));
/*       */     }
/*       */     
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/* 19932 */     return new ActionForward("/jsp/MailServerConfig.jsp");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */   public void writePortToFile(String portno)
/*       */   {
/*       */     try
/*       */     {
/* 19941 */       Properties prop = new Properties();
/* 19942 */       prop.load(new FileInputStream(CONFIG_FILE));
/* 19943 */       prop.put("serial.port", portno);
/*       */       
/* 19945 */       FileOutputStream os = new FileOutputStream(CONFIG_FILE);
/*       */       
/* 19947 */       prop.save(os, "SMSServer. Do not edit this file.");
/* 19948 */       os.close();
/*       */       
/*       */ 
/*       */ 
/* 19952 */       if (OEMUtil.getOEMString("product.name").equals("IT360"))
/*       */       {
/* 19954 */         String apmDir = System.getProperty("user.dir");
/* 19955 */         String nwDir = apmDir + File.separator + ".." + File.separator + ".." + File.separator + "networks" + File.separator + "conf" + File.separator + "SMSServer.conf";
/* 19956 */         File opmFile = new File(nwDir);
/* 19957 */         if (opmFile.exists())
/*       */         {
/* 19959 */           AMServerFramework.it360smsModemconf(nwDir, prop);
/*       */         }
/*       */         else
/*       */         {
/* 19963 */           new File(nwDir).createNewFile();
/* 19964 */           AMServerFramework.it360smsModemconf(nwDir, prop);
/*       */         }
/*       */       }
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 19970 */       e.printStackTrace();
/* 19971 */       System.out.println("Exception while writing to the smsserver.conf");
/*       */     }
/*       */   }
/*       */   
/*       */ 
/*       */   public String signalLevel(int signal)
/*       */   {
/* 19978 */     if (signal > 90)
/*       */     {
/* 19980 */       return "SMS_EXCELLENT.gif";
/*       */     }
/* 19982 */     if (signal > 75)
/*       */     {
/* 19984 */       return "SMS_GOOD.gif";
/*       */     }
/* 19986 */     if (signal > 50)
/*       */     {
/* 19988 */       return "SMS_NORMAL.gif";
/*       */     }
/* 19990 */     if (signal > 30)
/*       */     {
/* 19992 */       return "SMS_LOW.gif";
/*       */     }
/* 19994 */     if (signal == 0)
/*       */     {
/* 19996 */       return "SMS_NO.gif";
/*       */     }
/*       */     
/*       */ 
/* 20000 */     return "SMS_POOR.gif";
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   public Properties modemDetails(String port, HttpServletRequest request)
/*       */   {
/* 20008 */     String errorMessage = null;
/*       */     
/* 20010 */     Properties prp = new Properties();
/* 20011 */     CMainThread mainThread = null;
/*       */     
/*       */     try
/*       */     {
/* 20015 */       this.jsms = org.jsmsengine.server.SMSServer.getInstance();
/* 20016 */       mainThread = this.jsms.getMainThread();
/* 20017 */       CService srv = mainThread.getService();
/*       */       
/*       */ 
/* 20020 */       if (!srv.getConnected())
/*       */       {
/* 20022 */         String osName = System.getProperty("os.name");
/*       */         
/*       */ 
/* 20025 */         if ((osName.toLowerCase().indexOf("windows") != -1) && (!port.equals("")))
/*       */         {
/* 20027 */           gnu.io.RXTXCommDriver driv = new gnu.io.RXTXCommDriver();
/* 20028 */           driv.initialize();
/* 20029 */           gnu.io.CommPortIdentifier.addPortName(port, 1, driv);
/*       */         }
/*       */         
/*       */ 
/*       */         try
/*       */         {
/* 20035 */           srv = mainThread.getService();
/* 20036 */           if (!srv.getConnected())
/*       */           {
/* 20038 */             System.out.println("Modem not connected");
/* 20039 */             errorMessage = "webclient.admin.smsserver.errormessage";
/* 20040 */             request.setAttribute("Error", FormatUtil.getString(errorMessage));
/* 20041 */             return prp;
/*       */           }
/*       */         }
/*       */         catch (Exception exp)
/*       */         {
/* 20046 */           System.out.println("Modem not connected");
/* 20047 */           errorMessage = "webclient.admin.smsserver.errormessage";
/* 20048 */           request.setAttribute("Error", FormatUtil.getString(errorMessage));
/* 20049 */           return prp;
/*       */         }
/* 20051 */         prp.setProperty("ModemManufacturer", srv.getDeviceInfo().getManufacturer());
/* 20052 */         prp.setProperty("ModemModel", srv.getDeviceInfo().getModel());
/* 20053 */         prp.setProperty("IMSI", srv.getDeviceInfo().getImsi());
/* 20054 */         prp.setProperty("BatteryStatus", srv.getDeviceInfo().getBatteryLevel() + "%");
/* 20055 */         String signalImage = signalLevel(srv.getDeviceInfo().getSignalLevel());
/* 20056 */         prp.setProperty("SignalImage", signalImage);
/* 20057 */         prp.setProperty("SignalStatus", srv.getDeviceInfo().getSignalLevel() + "%");
/* 20058 */         prp.setProperty("Status", FormatUtil.getString("am.webclient.modem.connected"));
/*       */ 
/*       */       }
/*       */       else
/*       */       {
/*       */ 
/* 20064 */         System.out.println("inside the else part");
/* 20065 */         prp.setProperty("ModemManufacturer", srv.getDeviceInfo().getManufacturer());
/* 20066 */         prp.setProperty("ModemModel", srv.getDeviceInfo().getModel());
/* 20067 */         prp.setProperty("IMSI", srv.getDeviceInfo().getImsi());
/* 20068 */         prp.setProperty("BatteryStatus", srv.getDeviceInfo().getBatteryLevel() + "%");
/* 20069 */         String signalImage = signalLevel(srv.getDeviceInfo().getSignalLevel());
/* 20070 */         prp.setProperty("SignalImage", signalImage);
/* 20071 */         prp.setProperty("SignalStatus", srv.getDeviceInfo().getSignalLevel() + "%");
/* 20072 */         prp.setProperty("Status", FormatUtil.getString("am.webclient.modem.connected"));
/*       */       }
/*       */       
/*       */ 
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 20079 */       mainThread.disconnect(true);
/* 20080 */       System.out.println("Modem not connected");
/* 20081 */       errorMessage = "webclient.admin.smsserver.errormessage";
/* 20082 */       request.setAttribute("Error", FormatUtil.getString(errorMessage));
/* 20083 */       e.printStackTrace();
/*       */     }
/*       */     catch (Error e) {
/* 20086 */       mainThread.disconnect(true);
/* 20087 */       errorMessage = "webclient.admin.smsserver.errormessage";
/* 20088 */       request.setAttribute("Error", FormatUtil.getString(errorMessage));
/* 20089 */       e.printStackTrace();
/*       */     }
/* 20091 */     System.out.println("the properties from the modem connectivity:" + prp);
/* 20092 */     return prp;
/*       */   }
/*       */   
/*       */   public ActionForward updateServiceDiscovery(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
/*       */   {
/* 20097 */     AMConnectionPool pool = AMConnectionPool.getInstance();
/* 20098 */     String[] enableservices = request.getParameterValues("discoverservice");
/* 20099 */     System.out.println("UPDATE SERVICE DISCOVERY INVOKED" + enableservices);
/* 20100 */     String resourcetypes = null;
/*       */     try
/*       */     {
/* 20103 */       if (!isTokenValid(request))
/*       */       {
/* 20105 */         return mapping.findForward("NWDiscoveryService");
/*       */       }
/*       */       
/*       */ 
/*       */ 
/* 20110 */       resetToken(request);
/* 20111 */       int rspCode; if (enableservices != null)
/*       */       {
/* 20113 */         ApplnDiscovery.clearDiscoveryTable();
/* 20114 */         ArrayList<String> serviceName = new ArrayList();
/* 20115 */         for (int i = 0; i < enableservices.length; i++)
/*       */         {
/* 20117 */           String type = enableservices[i];
/* 20118 */           if (i == 0) {
/* 20119 */             resourcetypes = "'" + type + "'";
/*       */           }
/*       */           else {
/* 20122 */             resourcetypes = resourcetypes + "," + "'" + type + "'";
/*       */           }
/*       */           
/* 20125 */           if (com.adventnet.appmanager.util.Constants.isIt360)
/*       */           {
/* 20127 */             ResultSet rs = null;
/* 20128 */             String qry = "select DISPLAYNAME from AM_ManagedResourceType where RESOURCETYPE='" + type + "'";
/*       */             try
/*       */             {
/* 20131 */               rs = AMConnectionPool.executeQueryStmt(qry);
/* 20132 */               if (rs.next())
/*       */               {
/*       */ 
/*       */ 
/* 20136 */                 serviceName.add(rs.getString("DISPLAYNAME"));
/*       */               }
/*       */               
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */               try
/*       */               {
/* 20150 */                 AMConnectionPool.closeStatement(rs);
/*       */               }
/*       */               catch (Exception e1)
/*       */               {
/* 20154 */                 e1.printStackTrace();
/*       */               }
/*       */               
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/* 20161 */               selectQry = "select port from AM_SERVICE_DISCOVERY where resourcetype='" + type + "'";
/*       */             }
/*       */             catch (Exception e)
/*       */             {
/* 20144 */               e.printStackTrace();
/*       */             }
/*       */             finally
/*       */             {
/*       */               try
/*       */               {
/* 20150 */                 AMConnectionPool.closeStatement(rs);
/*       */               }
/*       */               catch (Exception e1)
/*       */               {
/* 20154 */                 e1.printStackTrace();
/*       */               }
/*       */             }
/*       */           }
/*       */           
/*       */ 
/*       */           String selectQry;
/*       */           
/* 20162 */           ResultSet set = AMConnectionPool.executeQueryStmt(selectQry);
/* 20163 */           String multiport = null;
/* 20164 */           while (set.next())
/*       */           {
/* 20166 */             String port = set.getString(1);
/* 20167 */             if (multiport != null) {
/* 20168 */               multiport = multiport + "," + port;
/*       */             } else
/* 20170 */               multiport = port;
/*       */           }
/* 20172 */           System.out.println("APPLNDISCOVERY " + type + " PORT = " + multiport);
/* 20173 */           if (multiport != null) {
/* 20174 */             ApplnDiscovery.setServiceDiscovery(type, multiport);
/*       */           }
/*       */         }
/*       */         
/* 20178 */         if (com.adventnet.appmanager.util.Constants.isIt360)
/*       */         {
/* 20180 */           String csvServiceName = com.adventnet.appmanager.util.Constants.convertArrayListToCSV(serviceName);
/* 20181 */           String encodedService = URLEncoder.encode(csvServiceName);
/* 20182 */           String serviceUrl = ExtProdUtil.getServiceUrl("OpManager");
/* 20183 */           String url = serviceUrl + "/servlets/IT360UtilitiesServlet?action=updateNmapServices&serviceName=" + encodedService;
/* 20184 */           GetMethod get = new GetMethod(url);
/* 20185 */           rspCode = com.adventnet.appmanager.util.ConcurrentHttpClient.getHttpClient().executeMethod(get);
/*       */         }
/*       */         
/*       */ 
/*       */       }
/*       */       else
/*       */       {
/* 20192 */         ApplnDiscovery.clearDiscoveryTable();
/*       */       }
/*       */       
/*       */ 
/* 20196 */       if (resourcetypes != null)
/*       */       {
/* 20198 */         String updEnable = "update AM_SERVICE_DISCOVERY set ENABLEDISCOVERY=1 where RESOURCETYPE IN (" + resourcetypes + ")";
/* 20199 */         System.out.println("UPDATE QUERY============" + updEnable);
/* 20200 */         AMConnectionPool.executeUpdateStmt(updEnable);
/* 20201 */         String updDisable = "update AM_SERVICE_DISCOVERY set ENABLEDISCOVERY=0 where RESOURCETYPE NOT IN (" + resourcetypes + ")";
/* 20202 */         AMConnectionPool.executeUpdateStmt(updDisable);
/*       */       }
/*       */       else
/*       */       {
/* 20206 */         String updDisable = "update AM_SERVICE_DISCOVERY set ENABLEDISCOVERY=0 ";
/* 20207 */         AMConnectionPool.executeUpdateStmt(updDisable);
/*       */       }
/*       */     }
/*       */     catch (Exception exc)
/*       */     {
/* 20212 */       exc.printStackTrace(); }
/* 20213 */     ActionMessages messages = new ActionMessages();
/* 20214 */     messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("am.webclient.serviceupdate.txt"));
/* 20215 */     saveMessages(request, messages);
/* 20216 */     if (com.adventnet.appmanager.util.Constants.isIt360)
/*       */     {
/* 20218 */       return new ActionForward("/jsp/DiscoveryProfiles.jsp?showlink=services&isAppTemplates=true");
/*       */     }
/*       */     
/* 20221 */     return mapping.findForward("NWDiscoveryService");
/*       */   }
/*       */   
/*       */   public ActionForward modifyServicePort(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
/*       */   {
/* 20226 */     String resourcetype = request.getParameter("type");
/* 20227 */     String displayname = request.getParameter("displayname");
/* 20228 */     String enablediscovery = request.getParameter("enablediscovery");
/* 20229 */     String port = request.getParameter("port");
/*       */     try
/*       */     {
/* 20232 */       StringTokenizer porttokenizer = new StringTokenizer(port, ",");
/* 20233 */       while (porttokenizer.hasMoreTokens())
/*       */       {
/*       */         try
/*       */         {
/* 20237 */           String singleport = porttokenizer.nextToken();
/* 20238 */           int rspCode; if (com.adventnet.appmanager.util.Constants.isIt360)
/*       */           {
/* 20240 */             String displayname1 = URLEncoder.encode(displayname);
/* 20241 */             String serviceUrl = ExtProdUtil.getServiceUrl("OpManager");
/* 20242 */             String url = serviceUrl + "/servlets/IT360UtilitiesServlet?action=modifyServicePort&displayname=" + displayname1 + "&port=" + port;
/* 20243 */             GetMethod get = new GetMethod(url);
/* 20244 */             rspCode = com.adventnet.appmanager.util.ConcurrentHttpClient.getHttpClient().executeMethod(get);
/*       */           }
/*       */           
/* 20247 */           String insert = "insert into AM_SERVICE_DISCOVERY values('" + resourcetype + "','" + displayname + "'," + singleport + ",'',''," + enablediscovery + ")";
/* 20248 */           AMConnectionPool.executeUpdateStmt(insert);
/*       */         }
/*       */         catch (Exception exc)
/*       */         {
/* 20252 */           exc.printStackTrace();
/*       */         }
/*       */       }
/*       */       
/* 20256 */       String deleteQry = "delete from AM_SERVICE_DISCOVERY where RESOURCETYPE='" + resourcetype + "' and PORT NOT IN(" + port + ")";
/* 20257 */       AMConnectionPool.executeUpdateStmt(deleteQry);
/*       */     }
/*       */     catch (Exception exc)
/*       */     {
/* 20261 */       exc.printStackTrace();
/*       */     }
/* 20263 */     ActionMessages messages = new ActionMessages();
/* 20264 */     messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("am.webclient.portupdate.txt"));
/* 20265 */     saveMessages(request, messages);
/* 20266 */     if (com.adventnet.appmanager.util.Constants.isIt360)
/*       */     {
/* 20268 */       return new ActionForward("/jsp/DiscoveryProfiles.jsp?showlink=services&isAppTemplates=true");
/*       */     }
/*       */     
/* 20271 */     return mapping.findForward("NWDiscoveryService");
/*       */   }
/*       */   
/*       */ 
/*       */   private static int PostLogATickDetailsToOPM(Map ticketMap, Properties moreDetails, HttpServletRequest request)
/*       */     throws Exception
/*       */   {
/* 20278 */     String propFileName = "." + File.separator + "conf" + File.separator + "ticket_map.properties";
/*       */     
/* 20280 */     Properties tickProps = new Properties();
/*       */     try
/*       */     {
/* 20283 */       InputStream propsFile = new FileInputStream(propFileName);
/* 20284 */       tickProps.load(propsFile);
/* 20285 */       propsFile.close();
/*       */     }
/*       */     catch (FileNotFoundException fnfe)
/*       */     {
/* 20289 */       fnfe.printStackTrace();
/* 20290 */       return 0;
/*       */     }
/*       */     catch (IOException ioe) {
/* 20293 */       ioe.printStackTrace();
/* 20294 */       return 0;
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 20298 */       e.printStackTrace();
/*       */     }
/* 20300 */     tickProps.list(System.out);
/*       */     
/* 20302 */     int respCode = -1;
/* 20303 */     String operation = moreDetails.getProperty("operation");
/*       */     
/* 20305 */     javax.servlet.http.Cookie[] cookies = request.getCookies();
/* 20306 */     String cookie_ticket = "";
/* 20307 */     String cookieName = ExtProdUtil.getIAMTicketCookieName().trim();
/* 20308 */     AMLog.debug("IAMTicket cookieName = " + cookieName);
/* 20309 */     for (int i = 0; i < cookies.length; i++)
/*       */     {
/* 20311 */       if ((!cookieName.equals("")) && (cookies[i].getName().equals(cookieName)))
/*       */       {
/* 20313 */         cookie_ticket = cookies[i].getValue();
/*       */       }
/*       */     }
/*       */     
/* 20317 */     String opmUrl = ExtProdUtil.getServiceUrl("OpManager");
/* 20318 */     StringBuffer url = new StringBuffer(opmUrl);
/* 20319 */     if (operation.equals("delete")) {
/* 20320 */       url = url.append("/admin/Profiles.do?ticket=" + cookie_ticket);
/*       */     }
/*       */     else {
/* 20323 */       url = url.append("/admin/AddModifyTickets.do?ticket=" + cookie_ticket);
/*       */     }
/* 20325 */     AMLog.debug("PostLogATickDetailsToOPM - operation :" + operation + " ::: cookie_ticket :" + cookie_ticket + " :::url : " + url);
/* 20326 */     PostMethod method = new PostMethod(url.toString());
/* 20327 */     org.apache.commons.httpclient.HostConfiguration hostConfig = method.getHostConfiguration();
/* 20328 */     org.apache.commons.httpclient.HttpState initialState = new org.apache.commons.httpclient.HttpState();
/* 20329 */     org.apache.commons.httpclient.Cookie c1 = new org.apache.commons.httpclient.Cookie();
/* 20330 */     c1.setName(cookieName);
/* 20331 */     c1.setValue(cookie_ticket);
/* 20332 */     initialState.addCookie(c1);
/*       */     
/* 20334 */     method.addParameter("operation", operation);
/* 20335 */     method.addParameter("profiletype", "Log a Ticket");
/* 20336 */     if (operation.equals("delete"))
/*       */     {
/* 20338 */       String pfname = moreDetails.getProperty("ticketname");
/* 20339 */       if (pfname != null) {
/* 20340 */         AMLog.debug("profile to be deleted ::: " + pfname);
/* 20341 */         method.addParameter(tickProps.getProperty("displayname"), pfname);
/* 20342 */         respCode = com.adventnet.appmanager.util.ConcurrentHttpClient.getHttpClient().executeMethod(hostConfig, method, initialState);
/*       */       }
/*       */     }
/*       */     else
/*       */     {
/* 20347 */       String[] displayname = (String[])ticketMap.get("displayname");
/* 20348 */       if ((displayname != null) && (displayname.length > 0)) {
/* 20349 */         method.addParameter(tickProps.getProperty("displayname"), displayname[0]);
/*       */       }
/* 20351 */       String[] category = (String[])ticketMap.get("category");
/* 20352 */       if ((category != null) && (category.length > 0)) {
/* 20353 */         method.addParameter(tickProps.getProperty("category"), category[0]);
/*       */       }
/* 20355 */       String[] scategory = (String[])ticketMap.get("scategory");
/* 20356 */       if ((scategory != null) && (scategory.length > 0)) {
/* 20357 */         method.addParameter(tickProps.getProperty("scategory"), scategory[0]);
/*       */       }
/* 20359 */       String[] group = (String[])ticketMap.get("group");
/* 20360 */       if ((group != null) && (group.length > 0)) {
/* 20361 */         method.addParameter(tickProps.getProperty("group"), group[0]);
/*       */       }
/* 20363 */       String[] item = (String[])ticketMap.get("item");
/* 20364 */       if ((item != null) && (item.length > 0)) {
/* 20365 */         method.addParameter(tickProps.getProperty("item"), item[0]);
/*       */       }
/* 20367 */       String[] subject = (String[])ticketMap.get("subject");
/* 20368 */       if ((subject != null) && (subject.length > 0)) {
/* 20369 */         method.addParameter(tickProps.getProperty("subject"), "$stringseverity - $displayName");
/*       */       }
/* 20371 */       String[] message = (String[])ticketMap.get("message");
/* 20372 */       if ((message != null) && (message.length > 0)) {
/* 20373 */         method.addParameter(tickProps.getProperty("message"), "\nMessage: $message   \nDevice: $displayName   \nCategory: $category   \nError Condition: $stringseverity   \nGenerated at: $strModTime");
/*       */       }
/* 20375 */       String[] priority = (String[])ticketMap.get("priority");
/* 20376 */       if ((priority != null) && (priority.length > 0)) {
/* 20377 */         method.addParameter(tickProps.getProperty("priority"), priority[0]);
/*       */       }
/* 20379 */       String[] technician = (String[])ticketMap.get("technician");
/* 20380 */       if ((technician != null) && (technician.length > 0)) {
/* 20381 */         method.addParameter(tickProps.getProperty("technician"), technician[0]);
/*       */       }
/* 20383 */       method.addParameter("fromAddress", moreDetails.getProperty("fromAddress"));
/* 20384 */       method.addParameter("toAddress", moreDetails.getProperty("toAddress"));
/* 20385 */       method.addParameter("firstTime", "false");
/* 20386 */       if (operation.equals("add"))
/*       */       {
/* 20388 */         method.addParameter("server", moreDetails.getProperty("smtpServer"));
/* 20389 */         method.addParameter("portNumber", moreDetails.getProperty("smtpPort"));
/* 20390 */         method.addParameter("smtpUserName", moreDetails.getProperty("smtpServerUserName"));
/* 20391 */         method.addParameter("smtpPassword", moreDetails.getProperty("smtpServerPassword"));
/*       */       }
/* 20393 */       method.addParameter("Save", "");
/* 20394 */       respCode = com.adventnet.appmanager.util.ConcurrentHttpClient.getHttpClient().executeMethod(hostConfig, method, initialState);
/*       */     }
/* 20396 */     return respCode;
/*       */   }
/*       */   
/*       */   private static String getProfileName(String profileId)
/*       */   {
/* 20401 */     String name = "";
/*       */     try
/*       */     {
/* 20404 */       AMConnectionPool cp = AMConnectionPool.getInstance();
/* 20405 */       ResultSet rs = null;
/* 20406 */       String query = "select NAME from AM_ACTIONPROFILE where ID='" + profileId + "'";
/* 20407 */       rs = AMConnectionPool.executeQueryStmt(query);
/* 20408 */       if (rs.next())
/*       */       {
/* 20410 */         name = rs.getString("NAME");
/*       */       }
/* 20412 */       AMConnectionPool.closeStatement(rs);
/*       */     }
/*       */     catch (Exception exc)
/*       */     {
/* 20416 */       exc.printStackTrace();
/*       */     }
/* 20418 */     return name;
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */   public ActionForward editAnomalyProfileAction(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 20426 */     AMActionForm amform = (AMActionForm)form;
/* 20427 */     ActionMessages messages = new ActionMessages();
/*       */     
/* 20429 */     String updateactionquery = null;
/* 20430 */     String displayname = request.getParameter("anomalyName");
/* 20431 */     if (DBQueryUtil.getDBType().equals("mssql"))
/*       */     {
/* 20433 */       displayname = displayname.replaceAll("'", "''");
/*       */ 
/*       */     }
/*       */     else
/*       */     {
/* 20438 */       displayname = displayname.replaceAll("'", "\\\\'");
/*       */     }
/*       */     
/* 20441 */     String checkquery = "select * from AM_ANOMALYDETECTIONDETAILS where NAME='" + displayname + "' and ID!=" + amform.getAnomalyId();
/* 20442 */     ArrayList list = this.mo.getRows(checkquery);
/* 20443 */     if (list.size() == 0)
/*       */     {
/* 20445 */       int anomalyid = Integer.parseInt(amform.getAnomalyId());
/* 20446 */       String anomalyname = amform.getAnomalyName();
/* 20447 */       int baseweek = (amform.getBaseWeek() != null) && (!amform.getBaseWeek().trim().equals("")) ? Integer.parseInt(amform.getBaseWeek()) : 0;
/* 20448 */       String monthYears = (amform.getMonthYears() != null) && (!amform.getMonthYears().trim().equals("")) ? amform.getMonthYears() : "0-0";
/* 20449 */       String[] t1 = monthYears.split("-");
/* 20450 */       int month = Integer.parseInt(t1[0]);
/* 20451 */       int year = Integer.parseInt(t1[1]);
/* 20452 */       int HPR = Integer.parseInt(request.getParameter("percentagevalue"));
/* 20453 */       int HV = Integer.parseInt(amform.getHigherValue());
/* 20454 */       int LV = Integer.parseInt(amform.getLowerValue());
/* 20455 */       int HALARM = Integer.parseInt(amform.getAlarmType());
/* 20456 */       int LALARM = Integer.parseInt(amform.getLoweralarmType());
/* 20457 */       int HALARMEXP = Integer.parseInt(amform.getAlarmTypeExpression());
/* 20458 */       int LALARMEXP = Integer.parseInt(amform.getLoweralarmTypeExpression());
/* 20459 */       int actid = 0;
/* 20460 */       if (amform.getSendmail() != null) {
/* 20461 */         actid = Integer.parseInt(amform.getSendmail());
/*       */       }
/* 20463 */       int ctype = Integer.parseInt(amform.getComparisonType());
/* 20464 */       int btype = Integer.parseInt(amform.getBaselineType());
/* 20465 */       int ftype = Integer.parseInt(amform.getBaseformulaType());
/* 20466 */       String lexp1 = amform.getLeftexp1();
/* 20467 */       String lexp2 = amform.getLeftexp2();
/* 20468 */       String lselect = amform.getLeftselect();
/* 20469 */       String rselect = amform.getRightselect();
/* 20470 */       String rexp1 = amform.getRightexp1();
/* 20471 */       String rexp2 = amform.getRightexp2();
/* 20472 */       if ((ftype == 0) && ((!isValidAnomalyExpression(lexp1)) || (!isValidAnomalyExpression(lexp2)) || (!isValidAnomalyExpression(rexp1)) || (!isValidAnomalyExpression(rexp2)))) {
/* 20473 */         messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("am.webclient.anomaly.expression.jsalert.text"));
/* 20474 */         saveMessages(request, messages);
/* 20475 */         return new ActionForward("/adminAction.do?method=showAnomalyAction&anomalyID=" + amform.getAnomalyId() + "&haid=null&isanomaly=true");
/*       */       }
/* 20477 */       String exp1 = Translate.decode(lexp1 + lselect + rexp1);
/*       */       
/* 20479 */       String exp2 = Translate.decode(lexp2 + rselect + rexp2);
/*       */       
/* 20481 */       if (ftype == 1) {
/* 20482 */         if (btype == 0) {
/* 20483 */           year = 0;
/*       */         }
/*       */         
/* 20486 */         boolean isdata = ReportDataUtilities.getDataTime(baseweek, month, year);
/* 20487 */         if (!isdata) {
/* 20488 */           messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("am.webclient.anomaly.nodataweek.text"));
/* 20489 */           saveMessages(request, messages);
/* 20490 */           return new ActionForward("/adminAction.do?method=showAnomalyAction&anomalyID=" + amform.getAnomalyId() + "&haid=null&isanomaly=true");
/*       */         }
/*       */       }
/* 20493 */       if (ftype == 0) {
/* 20494 */         HALARM = HALARMEXP;
/* 20495 */         LALARM = LALARMEXP;
/*       */       }
/*       */       
/*       */ 
/* 20499 */       updateactionquery = "update AM_ANOMALYDETECTIONDETAILS set NAME='" + anomalyname + "',BASELINETYPE=" + btype + ",BASELINEWEEK=" + baseweek + ",BASELINEMONTH=" + month + ",BASELINEYEAR=" + year + ",TYPEOFCALCULATION=" + HPR + ",UPPERLIMIT=" + HV + ",LOWERLIMIT=" + LV + ",UPPERLIMITALARM=" + HALARM + ",LOWERLIMITALARM=" + LALARM + ",ACTIONID=" + actid + ",TYPEOFCOMPARISON=" + ctype + ",BASEFORMULATYPE=" + ftype + ",UPPEREXPRESSION='" + exp1 + "',LOWEREXPRESSION='" + exp2 + "' where ID =" + anomalyid;
/* 20500 */       this.mo.executeUpdateStmt(updateactionquery);
/* 20501 */       updateactionquery = "update AM_ATTRIBUTES set DISPLAYNAME='Anomaly Profile:" + anomalyname + "' where ATTRIBUTEID =" + anomalyid;
/* 20502 */       this.mo.executeUpdateStmt(updateactionquery);
/* 20503 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("am.webclient.anomalydetails.updatesuccess.text"));
/* 20504 */       saveMessages(request, messages);
/* 20505 */       ReportDataUtilities.getAllAnomalyDetailsFromTable();
/*       */ 
/*       */     }
/*       */     else
/*       */     {
/* 20510 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("am.webclient.anomalydetails.nameexists.text", request.getParameter("anomalyName")));
/* 20511 */       saveMessages(request, messages);
/*       */       
/* 20513 */       return new ActionForward("/adminAction.do?method=showAnomalyAction&anomalyID=" + amform.getAnomalyId() + "&haid=null&isanomaly=true");
/*       */     }
/*       */     
/* 20516 */     request.setAttribute("isanomaly", "true");
/* 20517 */     request.setAttribute("iseditanomaly", request.getParameter("editanomaly"));
/*       */     
/* 20519 */     return mapping.findForward("thresholdlist");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward showAnomalyAction(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 20529 */     int anomalyID = Integer.parseInt(request.getParameter("anomalyID"));
/* 20530 */     ArrayList rows = ThresholdUtil.getDetailsOfAnomalyProfile(anomalyID);
/*       */     try
/*       */     {
/* 20533 */       ArrayList row = (ArrayList)rows.get(0);
/*       */       
/* 20535 */       AMActionForm amform = (AMActionForm)form;
/* 20536 */       amform.setAnomalyId(anomalyID + "");
/* 20537 */       amform.setAnomalyName(FormatUtil.getString((String)row.get(1)));
/* 20538 */       amform.setBaselineType((String)row.get(2));
/* 20539 */       amform.setBaseWeek((String)row.get(3));
/* 20540 */       amform.setMonthYears((String)row.get(4) + "-" + (String)row.get(5));
/* 20541 */       amform.setHigherPercentage((String)row.get(6));
/* 20542 */       amform.setHigherValue((String)row.get(7));
/* 20543 */       amform.setLowerValue((String)row.get(8));
/* 20544 */       amform.setAlarmType((String)row.get(9));
/* 20545 */       amform.setLoweralarmType((String)row.get(10));
/* 20546 */       amform.setSendmail((String)row.get(11));
/* 20547 */       amform.setComparisonType((String)row.get(12));
/* 20548 */       amform.setBaseformulaType((String)row.get(13));
/* 20549 */       String exp1 = Translate.decode((String)row.get(14));
/* 20550 */       String exp2 = Translate.decode((String)row.get(15));
/* 20551 */       if ("0".equals((String)row.get(13))) {
/* 20552 */         List t1 = CustomExpressionUtil.getExpressionForEdit(exp1);
/* 20553 */         amform.setLeftexp1(t1.get(0).toString());
/* 20554 */         amform.setRightexp1(t1.get(1).toString());
/* 20555 */         amform.setLeftselect(t1.get(2).toString());
/* 20556 */         List t2 = CustomExpressionUtil.getExpressionForEdit(exp2);
/* 20557 */         amform.setLeftexp2(t2.get(0).toString());
/* 20558 */         amform.setRightexp2(t2.get(1).toString());
/* 20559 */         amform.setRightselect(t2.get(2).toString());
/* 20560 */         amform.setAlarmTypeExpression((String)row.get(9));
/* 20561 */         amform.setLoweralarmTypeExpression((String)row.get(10));
/*       */       }
/* 20563 */       amform.setMethod("editAnomalyProfileAction");
/* 20564 */       if ("0".equals((String)row.get(13))) {
/* 20565 */         request.setAttribute("formulatype", "expression");
/*       */       } else {
/* 20567 */         request.setAttribute("formulatype", "predefined");
/*       */       }
/* 20569 */       request.setAttribute("nexttab", "true");
/* 20570 */       amform.setIsEditAllowed(DelegatedUserRoleUtil.isOwnedByDelegatedUser(anomalyID, DelegatedUserRoleUtil.getLoginUserid(request), 3));
/*       */     }
/*       */     catch (Exception ee) {
/* 20573 */       ee.printStackTrace();
/*       */     }
/* 20575 */     return mapping.findForward("ThresholdForm");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward deleteAnomalyProfiles(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 20584 */     String[] applications = request.getParameterValues("anomalycheckbox");
/* 20585 */     String[] applications1 = request.getParameterValues("anomalyexpressioncheckbox");
/* 20586 */     int userID = DelegatedUserRoleUtil.getLoginUserid(request);
/* 20587 */     Properties deleteStatus = new Properties();
/* 20588 */     if (applications != null)
/*       */     {
/* 20590 */       deleteStatus = ReportDataUtilities.deleteAnomalyProfile(applications, userID);
/*       */     }
/*       */     
/* 20593 */     if (applications1 != null)
/*       */     {
/*       */ 
/*       */ 
/* 20597 */       deleteStatus = ReportDataUtilities.deleteAnomalyProfile(applications1, userID);
/*       */     }
/*       */     
/* 20600 */     int deleteCount = Integer.parseInt(deleteStatus.get("deleteCount").toString());
/* 20601 */     int nonAuthCount = Integer.parseInt(deleteStatus.get("nonAuthCount").toString());
/* 20602 */     ActionMessages messages = new ActionMessages();
/* 20603 */     if ((deleteCount > 0) && (nonAuthCount == 0))
/*       */     {
/* 20605 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("am.webclient.anomalydetails.deletesuccess.text"));
/*       */     }
/* 20607 */     else if ((deleteCount > 0) && (nonAuthCount > 0))
/*       */     {
/* 20609 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("am.webclient.configuration.delete.unauthorisedalso.success.message"));
/*       */     }
/* 20611 */     else if ((deleteCount == 0) && (nonAuthCount > 0))
/*       */     {
/* 20613 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("am.webclient.configuration.delete.unauthorised.message"));
/*       */     }
/*       */     else
/*       */     {
/* 20617 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("am.webclient.configuration.delete.error.message"));
/*       */     }
/* 20619 */     request.setAttribute("isanomaly", "true");
/* 20620 */     saveMessages(request, messages);
/* 20621 */     return mapping.findForward("thresholdlist");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */   public ActionForward createAnomalyProfileAction(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 20629 */     ActionMessages messages = new ActionMessages();
/* 20630 */     AMActionForm amform = (AMActionForm)form;
/* 20631 */     String type = request.getParameter("cancel");
/* 20632 */     String returnpath = request.getParameter("returnpath");
/* 20633 */     String displayName1 = "";
/* 20634 */     request.setAttribute("anomalyName1", request.getParameter("anomalyName"));
/* 20635 */     String displayname = request.getParameter("anomalyName");
/*       */     
/* 20637 */     if (DBQueryUtil.getDBType().equals("mssql")) {
/* 20638 */       displayname = displayname.replaceAll("'", "''");
/*       */     }
/*       */     else {
/* 20641 */       displayname = displayname.replaceAll("'", "\\\\'");
/*       */     }
/*       */     
/*       */ 
/* 20645 */     String checkquery = "select * from AM_ANOMALYDETECTIONDETAILS where NAME='" + displayname + "'";
/*       */     
/* 20647 */     ArrayList list = this.mo.getRows(checkquery);
/* 20648 */     if (list.size() == 0)
/*       */     {
/* 20650 */       String bweek = request.getParameter("baseWeek");
/* 20651 */       String monthyears = request.getParameter("monthYears");
/* 20652 */       String btype = request.getParameter("baselineType");
/* 20653 */       if (("0".equals(btype)) && (monthyears == null)) {
/* 20654 */         monthyears = "0-0";
/*       */       }
/* 20656 */       String[] temp = monthyears.split("-");
/*       */       
/* 20658 */       String bmonth = temp[0];
/* 20659 */       String byear = temp[1];
/* 20660 */       String HP = request.getParameter("higherPercentage");
/* 20661 */       String HV = request.getParameter("higherValue");
/* 20662 */       String HVA = request.getParameter("alarmType");
/* 20663 */       String HVAEX = request.getParameter("alarmTypeExpression");
/* 20664 */       String LV = request.getParameter("lowerValue");
/* 20665 */       String LVA = request.getParameter("loweralarmType");
/* 20666 */       String LVAEX = request.getParameter("loweralarmTypeExpression");
/* 20667 */       String AID = request.getParameter("sendmail");
/* 20668 */       String ftype = request.getParameter("baseformulaType");
/* 20669 */       String lexp1 = request.getParameter("leftexp1");
/* 20670 */       String lexp2 = request.getParameter("leftexp2");
/* 20671 */       String lselect = request.getParameter("leftselect");
/* 20672 */       String rselect = request.getParameter("rightselect");
/* 20673 */       String rexp1 = request.getParameter("rightexp1");
/* 20674 */       String rexp2 = request.getParameter("rightexp2");
/*       */       
/* 20676 */       if (("0".equals(ftype)) && ((!isValidAnomalyExpression(lexp1)) || (!isValidAnomalyExpression(lexp2)) || (!isValidAnomalyExpression(rexp1)) || (!isValidAnomalyExpression(rexp2)))) {
/* 20677 */         messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("am.webclient.anomaly.expression.jsalert.text"));
/* 20678 */         saveMessages(request, messages);
/* 20679 */         return new ActionForward("/showTile.do?TileName=.ThresholdConf&haid=null&isanomaly=true");
/*       */       }
/* 20681 */       String exp1 = Translate.decode(lexp1 + lselect + rexp1);
/*       */       
/* 20683 */       String exp2 = Translate.decode(lexp2 + rselect + rexp2);
/*       */       
/* 20685 */       if (AID == null) {
/* 20686 */         AID = "0";
/*       */       }
/*       */       
/* 20689 */       String CT = request.getParameter("comparisonType");
/* 20690 */       if (CT == null) {
/* 20691 */         CT = "1";
/*       */       }
/* 20693 */       if (HP == null) {
/* 20694 */         HP = "0";
/*       */       }
/* 20696 */       if (("0".equals(btype)) || ("0".equals(ftype))) {
/* 20697 */         bweek = "0";
/* 20698 */         bmonth = "0";
/* 20699 */         byear = "0";
/*       */       }
/*       */       
/* 20702 */       if ("1".equals(ftype)) {
/* 20703 */         boolean isdata = ReportDataUtilities.getDataTime(Integer.parseInt(bweek), Integer.parseInt(bmonth), Integer.parseInt(byear));
/* 20704 */         if (!isdata) {
/* 20705 */           messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("am.webclient.anomaly.nodataweek.text"));
/* 20706 */           saveMessages(request, messages);
/* 20707 */           request.setAttribute("isanomaly", "true");
/* 20708 */           return new ActionForward("/showTile.do?TileName=.ThresholdConf&haid=null&isanomaly=true");
/*       */         }
/*       */       }
/*       */       
/* 20712 */       if ("0".equals(ftype)) {
/* 20713 */         HVA = HVAEX;
/* 20714 */         LVA = LVAEX;
/*       */       }
/*       */       
/* 20717 */       int temp_attid = NewMonitorUtil.getAttributeId();
/* 20718 */       List l2 = new ArrayList();
/* 20719 */       l2.add(displayname);
/* 20720 */       l2.add(bweek);
/* 20721 */       l2.add(bmonth);
/* 20722 */       l2.add(byear);
/* 20723 */       l2.add(HP);
/* 20724 */       l2.add(HV);
/* 20725 */       l2.add(HVA);
/* 20726 */       l2.add(LV);
/* 20727 */       l2.add(LVA);
/* 20728 */       l2.add(AID);
/* 20729 */       l2.add(CT);
/* 20730 */       l2.add(Integer.valueOf(temp_attid));
/* 20731 */       l2.add(btype);
/* 20732 */       l2.add(ftype);
/* 20733 */       l2.add(exp1);
/* 20734 */       l2.add(exp2);
/*       */       
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/* 20740 */       ReportDataUtilities.createAnomalyProfile(l2);
/* 20741 */       DelegatedUserRoleUtil.addEntryToConfigUserTable(request, temp_attid, 3);
/* 20742 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("am.webclient.anomalydetails.createdsuccess.text"));
/*       */       
/* 20744 */       request.setAttribute("isanomaly", "true");
/* 20745 */       saveMessages(request, messages);
/*       */     } else {
/* 20747 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("am.webclient.anomalydetails.nameexists.text", request.getParameter("anomalyName")));
/* 20748 */       saveMessages(request, messages);
/* 20749 */       return new ActionForward("/showTile.do?TileName=.ThresholdConf&haid=null&isanomaly=true");
/*       */     }
/*       */     
/* 20752 */     if (returnpath != null) {
/* 20753 */       return new ActionForward(returnpath);
/*       */     }
/* 20755 */     return mapping.findForward("thresholdlist");
/*       */   }
/*       */   
/*       */ 
/*       */   public boolean isValidAnomalyExpression(String expression)
/*       */   {
/* 20761 */     StringTokenizer st = new StringTokenizer(expression, "+-*/");
/* 20762 */     while (st.hasMoreTokens()) {
/* 20763 */       boolean isValidToken = false;
/* 20764 */       String token = st.nextToken();
/* 20765 */       if ((token.equals("$10D_MVA")) || (token.equals("$30D_MVA")) || (token.equals("$6H_MVA")) || (token.equals("$7D_MVA")) || (token.equals("$LastHourValue")) || (token.equals("$10H_MVA")))
/*       */       {
/* 20767 */         isValidToken = true;
/*       */       }
/* 20769 */       if (!isValidToken) {
/*       */         try {
/* 20771 */           double d = Double.parseDouble(token);
/* 20772 */           isValidToken = true;
/*       */         }
/*       */         catch (NumberFormatException nfe) {
/* 20775 */           return false;
/*       */         }
/*       */       }
/*       */     }
/* 20779 */     return true;
/*       */   }
/*       */   
/*       */   public ActionForward sendAnomalyDetails(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
/*       */   {
/* 20784 */     ActionMessages messages = new ActionMessages();
/* 20785 */     ActionErrors errors = new ActionErrors();
/*       */     
/* 20787 */     String anomid = null;
/*       */     try {
/* 20789 */       anomid = request.getParameter("anomid");
/*       */       
/* 20791 */       if (anomid != null)
/*       */       {
/* 20793 */         ReportDataUtilities.getAllAnomalyDetailsFromTable();
/*       */         
/* 20795 */         List anomalyValues = ReportDataUtilities.getAnomalyDataDetailsFromMap(anomid);
/*       */         
/* 20797 */         String anomalyName = anomalyValues.get(1).toString();
/* 20798 */         String anomalyweek = anomalyValues.get(3).toString();
/* 20799 */         String anomalymonth = anomalyValues.get(4).toString();
/* 20800 */         String anomalyyear = anomalyValues.get(5).toString();
/* 20801 */         String upperpercent = anomalyValues.get(7).toString();
/* 20802 */         String lowerpercent = anomalyValues.get(8).toString();
/* 20803 */         String btype = anomalyValues.get(2).toString();
/* 20804 */         String upperpercentalarm = anomalyValues.get(9).toString();
/* 20805 */         String lowerpercentalarm = anomalyValues.get(10).toString();
/* 20806 */         String weeks = ReportDataUtilities.returnWeek(Integer.parseInt(anomalyweek));
/* 20807 */         String months = ReportDataUtilities.retrunMonth(Integer.parseInt(anomalymonth));
/* 20808 */         String years = weeks + " , " + months + anomalyyear;
/* 20809 */         String typecalc = anomalyValues.get(6).toString();
/* 20810 */         int ftype = Integer.parseInt(anomalyValues.get(15).toString());
/*       */         
/* 20812 */         String exp1 = anomalyValues.get(13).toString();
/*       */         
/* 20814 */         String exp2 = anomalyValues.get(14).toString();
/*       */         
/* 20816 */         String alarm1 = CustomExpressionUtil.getAlarmTypeAsString(upperpercentalarm);
/*       */         
/* 20818 */         String alarm2 = CustomExpressionUtil.getAlarmTypeAsString(lowerpercentalarm);
/*       */         
/* 20820 */         if ("1".equals(typecalc)) {
/* 20821 */           typecalc = "%";
/*       */         } else {
/* 20823 */           typecalc = " ";
/*       */         }
/*       */         
/*       */ 
/* 20827 */         if ("0".equals(btype)) {
/* 20828 */           years = FormatUtil.getString("am.webclient.anomaly.previous.message");
/*       */         }
/* 20830 */         String text = "";
/*       */         
/* 20832 */         if (ftype == 0)
/*       */         {
/* 20834 */           text = " <table width='100%' cellpadding='5' cellspacing='0'  border='0' height='40'> ";
/* 20835 */           text = text + "<tr><td class='bodytext'><input type='hidden' name='editname' id='edname' value='" + anomalyName + "'><b>" + FormatUtil.getString("am.webclient.hometab.highcpuservers.columnheader.name") + "</b> : " + anomalyName + "</td> </tr> <tr><td class='bodytext' title='" + exp1 + "'><b>" + FormatUtil.getString("am.webclient.anomaly.severity.general.text", new String[] { alarm1 }) + "</b> : " + FormatUtil.getTrimmedText(exp1, 50) + " </td></tr> <tr><td class='bodytext' title='" + exp2 + "'><b>" + FormatUtil.getString("am.webclient.anomaly.severity.general.text", new String[] { alarm2 }) + "</b> : " + FormatUtil.getTrimmedText(exp2, 50) + "</td></tr><tr><td><input name='button' class='buttons' value=" + FormatUtil.getString("am.webclient.maintenance.edit") + " onclick='showAnomalyEdit(" + anomid + ")' type='button'></td></tr></table>";
/*       */ 
/*       */         }
/*       */         else
/*       */         {
/* 20840 */           text = " <table width='100%' cellpadding='5' cellspacing='0'  border='0' height='40'> ";
/* 20841 */           text = text + "<tr><td class='bodytext'><input type='hidden' name='editname' id='edname' value='" + anomalyName + "'><b>" + FormatUtil.getString("am.webclient.hometab.highcpuservers.columnheader.name") + "</b> : " + anomalyName + "</td></tr> <tr> <td class='bodytext'><b>" + FormatUtil.getString("am.webclient.anomalyprofile.baselinerange.text") + "</b> : " + years + " </td></tr> <tr><td class='bodytext'><b>" + FormatUtil.getString("am.webclient.anomaly.severity.general.text", new String[] { alarm1 }) + "</b> : " + upperpercent + " " + typecalc + "</td></tr> <tr><td class='bodytext'><b>" + FormatUtil.getString("am.webclient.anomaly.severity.general.text", new String[] { alarm2 }) + "</b> : " + lowerpercent + " " + typecalc + "</td></tr> <tr><td><input name='button' class='buttons' value=" + FormatUtil.getString("am.webclient.maintenance.edit") + " onclick='showAnomalyEdit(" + anomid + ")' type='button'></td></tr></table>";
/*       */         }
/* 20843 */         response.setContentType("text/html; charset=UTF-8");
/* 20844 */         PrintWriter pw = response.getWriter();
/*       */         
/* 20846 */         pw.print(text);
/*       */       }
/*       */     }
/*       */     catch (Exception ex) {
/* 20850 */       ex.printStackTrace();
/*       */     }
/* 20852 */     return null;
/*       */   }
/*       */   
/*       */   public ActionForward sendAnomalyIDDetails(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
/*       */   {
/* 20857 */     ActionMessages messages = new ActionMessages();
/* 20858 */     ActionErrors errors = new ActionErrors();
/*       */     
/* 20860 */     String resid = null;
/* 20861 */     String attid = null;
/* 20862 */     String text = "no";
/* 20863 */     ResultSet rs = null;
/* 20864 */     AMConnectionPool pool = AMConnectionPool.getInstance();
/*       */     try {
/* 20866 */       resid = request.getParameter("resid");
/* 20867 */       attid = request.getParameter("attid");
/*       */       
/* 20869 */       rs = AMConnectionPool.executeQueryStmt("select ANOMALYID from AM_ANOMALYTHRESHOLDMAPPER where ID='" + resid + "' and ATTRIBUTEID = '" + attid + "'");
/*       */       
/* 20871 */       if (rs.next())
/*       */       {
/* 20873 */         text = rs.getString("ANOMALYID");
/*       */       }
/*       */       
/*       */ 
/* 20877 */       PrintWriter pw = response.getWriter();
/*       */       
/* 20879 */       pw.print(text);
/*       */     }
/*       */     catch (Exception ex)
/*       */     {
/* 20883 */       ex.printStackTrace();
/*       */     }
/* 20885 */     return null;
/*       */   }
/*       */   
/*       */   public ActionForward saveAnomalyDetails(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
/*       */   {
/* 20890 */     ActionMessages messages = new ActionMessages();
/* 20891 */     ActionErrors errors = new ActionErrors();
/* 20892 */     String forwardPage = "";
/* 20893 */     StringBuffer selectedMonitorsId = new StringBuffer();
/* 20894 */     String[] selectedMonitors = null;
/* 20895 */     ArrayList selectedMonitorsList = new ArrayList();
/* 20896 */     String multimonitors = request.getParameter("multimonitors");
/*       */     
/* 20898 */     boolean applySelected = (multimonitors != null) && (multimonitors.equals("applyselected"));
/*       */     
/* 20900 */     if (applySelected)
/*       */     {
/*       */ 
/*       */ 
/* 20904 */       selectedMonitors = request.getParameterValues("similarmonitors_selected");
/*       */       
/* 20906 */       if ((selectedMonitors != null) && (selectedMonitors.length > 0))
/*       */       {
/*       */ 
/* 20909 */         selectedMonitorsId.append(request.getParameter("resourceid"));
/* 20910 */         selectedMonitorsList.add(request.getParameter("resourceid"));
/* 20911 */         for (int i = 0; i < selectedMonitors.length; i++)
/*       */         {
/* 20913 */           selectedMonitorsId.append(",");
/* 20914 */           selectedMonitorsId.append(selectedMonitors[i]);
/* 20915 */           selectedMonitorsList.add(selectedMonitors[i]);
/*       */         }
/*       */       }
/*       */       else
/*       */       {
/* 20920 */         applySelected = false;
/* 20921 */         selectedMonitorsId.append(request.getParameter("resourceid"));
/* 20922 */         selectedMonitorsList.add(request.getParameter("resourceid"));
/*       */       }
/*       */     }
/* 20925 */     AMConnectionPool pool = AMConnectionPool.getInstance();
/* 20926 */     int attributeID = 0;
/* 20927 */     if (request.getParameter("attributeList") != null)
/*       */     {
/* 20929 */       attributeID = Integer.parseInt(request.getParameter("attributeList"));
/*       */     }
/*       */     else
/*       */     {
/* 20933 */       return new ActionForward("/showActionProfiles.do?method=getResourceProfiles&admin=true&monitor=true", true);
/*       */     }
/* 20935 */     ResultSet result = AMConnectionPool.executeQueryStmt("select TYPE,RESOURCETYPE from AM_ATTRIBUTES where ATTRIBUTEID = " + attributeID);
/*       */     
/* 20937 */     int requesttype = Integer.parseInt(request.getParameter("requesttype"));
/*       */     
/* 20939 */     String thresholdparams = request.getParameter("thresholdactionparams");
/*       */     
/* 20941 */     String redirectTo = request.getParameter("redirectto");
/* 20942 */     if ((requesttype == 2) || (requesttype == 3))
/*       */     {
/*       */ 
/* 20945 */       forwardPage = "/jsp/ThresholdActionConfiguration.jsp?" + thresholdparams;
/* 20946 */       forwardPage = forwardPage + "&redirectto=" + redirectTo;
/*       */     }
/* 20948 */     else if ((requesttype == 1) || (requesttype == 4) || (requesttype == 5))
/*       */     {
/*       */ 
/* 20951 */       forwardPage = redirectTo;
/*       */     }
/* 20953 */     int attribType = -1;
/* 20954 */     if (result.next())
/*       */     {
/* 20956 */       attribType = result.getInt(1);
/*       */     }
/* 20958 */     AMConnectionPool.closeStatement(result);
/* 20959 */     String query = "";
/* 20960 */     int resourceid = Integer.parseInt(request.getParameter("resourceid"));
/* 20961 */     boolean isHealth = attribType == 2;
/*       */     
/* 20963 */     if ((requesttype == 3) || (requesttype == 4))
/*       */     {
/*       */ 
/*       */ 
/*       */ 
/* 20968 */       String anomalyVal1 = request.getParameter("anomalyProfiles");
/* 20969 */       String tabname1 = request.getParameter("tabname");
/*       */       
/* 20971 */       if ((!"reset".equalsIgnoreCase(anomalyVal1)) && ("anomaly".equalsIgnoreCase(tabname1)))
/*       */       {
/* 20973 */         if (selectedMonitorsList.size() > 0) {
/* 20974 */           for (int i = 0; i < selectedMonitorsList.size(); i++) {
/* 20975 */             String resid1 = (String)selectedMonitorsList.get(i);
/* 20976 */             query = "delete from AM_ANOMALYTHRESHOLDMAPPER where ANOMALYID=" + anomalyVal1 + " and ID=" + resid1 + " and attributeid=" + attributeID;
/* 20977 */             AMConnectionPool.executeUpdateStmt(query);
/* 20978 */             FaultUtil.deleteAlertsForEntity(resid1 + "_" + anomalyVal1);
/*       */           }
/*       */         }
/*       */         else
/*       */         {
/* 20983 */           query = "delete from AM_ANOMALYTHRESHOLDMAPPER where ANOMALYID=" + anomalyVal1 + " and ID=" + resourceid + " and attributeid=" + attributeID;
/* 20984 */           AMConnectionPool.executeUpdateStmt(query);
/* 20985 */           FaultUtil.deleteAlertsForEntity(resourceid + "_" + anomalyVal1);
/*       */         }
/*       */       }
/*       */       
/* 20989 */       request.setAttribute("savedConfiguration", "true");
/* 20990 */       request.setAttribute("isanomaly", "true");
/* 20991 */       messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("am.webclient.anomalydetails.removesuccess.text"));
/* 20992 */       saveMessages(request, messages);
/* 20993 */       return new ActionForward(forwardPage);
/*       */     }
/*       */     
/*       */ 
/* 20997 */     String anomalyVal = request.getParameter("anomalyProfiles");
/* 20998 */     String tabname = request.getParameter("tabname");
/*       */     
/*       */ 
/*       */ 
/*       */ 
/* 21003 */     if ((!"reset".equalsIgnoreCase(anomalyVal)) && ("anomaly".equalsIgnoreCase(tabname)))
/*       */     {
/* 21005 */       if (selectedMonitorsList.size() > 0)
/*       */       {
/* 21007 */         for (int i = 0; i < selectedMonitorsList.size(); i++)
/*       */         {
/* 21009 */           String resid1 = (String)selectedMonitorsList.get(i);
/* 21010 */           ResultSet result1 = AMConnectionPool.executeQueryStmt("select ANOMALYID from AM_ANOMALYTHRESHOLDMAPPER where ID=" + resid1 + " and ATTRIBUTEID = " + attributeID);
/* 21011 */           if (result1.next())
/*       */           {
/* 21013 */             String anmid = result1.getString("ANOMALYID");
/* 21014 */             query = "delete from AM_ANOMALYTHRESHOLDMAPPER where ANOMALYID=" + anmid + " and ID=" + resid1 + " and attributeid=" + attributeID;
/* 21015 */             AMConnectionPool.executeUpdateStmt(query);
/*       */             
/* 21017 */             FaultUtil.deleteAlertsForEntity(resid1 + "_" + anmid);
/*       */             
/* 21019 */             AMConnectionPool.executeUpdateStmt("delete from AM_RCAMAPPER where PARENTRESOURCEID=" + resid1 + " AND PARENT_RESOURCEATTRIBUTEMAPPERID=" + attributeID + " AND CHILDRESOURCEID=" + resid1 + " AND CHILD_RESOURCEATTRIBUTEMAPPERID=" + anmid);
/*       */           }
/* 21021 */           query = "insert into AM_ANOMALYTHRESHOLDMAPPER (ID, ATTRIBUTEID,ANOMALYID) values (" + resid1 + "," + attributeID + "," + anomalyVal + ")";
/*       */           
/* 21023 */           AMConnectionPool.executeUpdateStmt(query);
/* 21024 */           ReportDataUtilities.insertRCAMapper(String.valueOf(resid1), String.valueOf(attributeID), String.valueOf(anomalyVal));
/*       */         }
/*       */       }
/*       */       else {
/* 21028 */         ResultSet result1 = AMConnectionPool.executeQueryStmt("select ANOMALYID from AM_ANOMALYTHRESHOLDMAPPER where ID='" + resourceid + "' and ATTRIBUTEID = " + attributeID);
/* 21029 */         String qu = "select ANOMALYID from AM_ANOMALYTHRESHOLDMAPPER where ID=" + resourceid + " and ATTRIBUTEID = " + attributeID;
/*       */         
/* 21031 */         if (result1.next())
/*       */         {
/* 21033 */           String anmid = result1.getString("ANOMALYID");
/* 21034 */           query = "delete from AM_ANOMALYTHRESHOLDMAPPER where ANOMALYID=" + anmid + " and ID=" + resourceid + " and attributeid=" + attributeID;
/*       */           
/* 21036 */           AMConnectionPool.executeUpdateStmt(query);
/*       */           
/*       */ 
/* 21039 */           FaultUtil.deleteAlertsForEntity(resourceid + "_" + anmid);
/* 21040 */           AMConnectionPool.executeUpdateStmt("delete from AM_RCAMAPPER where PARENTRESOURCEID=" + resourceid + " AND PARENT_RESOURCEATTRIBUTEMAPPERID=" + attributeID + " AND CHILDRESOURCEID=" + resourceid + " AND CHILD_RESOURCEATTRIBUTEMAPPERID=" + anmid);
/*       */         }
/*       */         
/*       */ 
/* 21044 */         query = "insert into AM_ANOMALYTHRESHOLDMAPPER (ID, ATTRIBUTEID,ANOMALYID) values (" + resourceid + "," + attributeID + "," + anomalyVal + ")";
/*       */         
/* 21046 */         AMConnectionPool.executeUpdateStmt(query);
/* 21047 */         ReportDataUtilities.insertRCAMapper(String.valueOf(resourceid), String.valueOf(attributeID), String.valueOf(anomalyVal));
/*       */       }
/*       */     }
/*       */     
/* 21051 */     request.setAttribute("savedConfiguration", "true");
/* 21052 */     request.setAttribute("isanomaly", "true");
/* 21053 */     messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("am.webclient.anomalydetails.associationsuccess.text"));
/* 21054 */     saveMessages(request, messages);
/* 21055 */     return new ActionForward(forwardPage);
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward getAPIKey(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 21064 */     if ((com.adventnet.appmanager.util.Constants.getUserType() != null) && (com.adventnet.appmanager.util.Constants.getUserType().equals("F")))
/*       */     {
/* 21066 */       request.setAttribute("tabtoselect", "6");
/* 21067 */       request.setAttribute("helpkey", "getAPIKey");
/* 21068 */       return new ActionForward("/jsp/helpmessages_container.jsp");
/*       */     }
/*       */     
/* 21071 */     AMConnectionPool cp = AMConnectionPool.getInstance();
/* 21072 */     ResultSet rs = null;
/* 21073 */     String UserName = request.getRemoteUser();
/* 21074 */     String APIKey = null;
/* 21075 */     String Message = null;
/*       */     try
/*       */     {
/* 21078 */       String checkquery = "select * from AM_UserPasswordTable where USERNAME ='" + UserName + "'";
/* 21079 */       rs = AMConnectionPool.executeQueryStmt(checkquery);
/* 21080 */       if (rs.next())
/*       */       {
/* 21082 */         System.out.println("inside if");
/* 21083 */         APIKey = rs.getString("APIKEY");
/* 21084 */         Message = FormatUtil.getString("The API Key is ");
/*       */       }
/*       */       
/* 21087 */       rs.close();
/* 21088 */       request.setAttribute("UserName", UserName);
/* 21089 */       request.setAttribute("Message", Message);
/* 21090 */       request.setAttribute("APIKey", APIKey);
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 21094 */       e.printStackTrace();
/*       */     }
/* 21096 */     return new ActionForward("/jsp/AdminApiKey.jsp");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward updateReportsSettings(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 21105 */     AMActionForm amform = (AMActionForm)form;
/* 21106 */     AMConnectionPool pool = AMConnectionPool.getInstance();
/* 21107 */     AMConnectionPool.getInstance();Statement stmt = AMConnectionPool.getConnection().createStatement();
/* 21108 */     String updateQuery = "";
/*       */     
/* 21110 */     String atype = request.getParameter("addmaintenance");
/* 21111 */     if (atype == null)
/*       */     {
/* 21113 */       atype = "false";
/*       */     }
/*       */     
/* 21116 */     ResultSet availRs = null;
/*       */     try
/*       */     {
/* 21119 */       String Query = "select * from AM_GLOBALCONFIG where NAME='AddSchedMaintenancetoAvail'";
/* 21120 */       AMConnectionPool.getInstance();availRs = AMConnectionPool.executeQueryStmt(Query);
/* 21121 */       if (availRs.next())
/*       */       {
/* 21123 */         updateQuery = "update AM_GLOBALCONFIG set VALUE ='" + atype + "' where NAME='AddSchedMaintenancetoAvail'";
/* 21124 */         stmt.addBatch(updateQuery);
/*       */ 
/*       */       }
/*       */       else
/*       */       {
/* 21129 */         String insertQuery1 = "insert into AM_GLOBALCONFIG (NAME, VALUE) values ('AddSchedMaintenancetoAvail','" + atype + "')";
/* 21130 */         stmt.addBatch(insertQuery1);
/*       */       }
/*       */       
/* 21133 */       com.adventnet.appmanager.util.Constants.addMaintenanceToAvailablity = atype;
/*       */     }
/*       */     catch (Exception exp3) {
/* 21136 */       exp3.printStackTrace();
/*       */     }
/*       */     finally {
/* 21139 */       AMConnectionPool.closeStatement(availRs);
/*       */     }
/*       */     
/*       */ 
/* 21143 */     String graphtype = request.getParameter("graphType");
/* 21144 */     if (graphtype == null)
/*       */     {
/* 21146 */       graphtype = "true";
/*       */     }
/*       */     
/* 21149 */     ResultSet graphRs = null;
/*       */     try
/*       */     {
/* 21152 */       String query = "select * from AM_GLOBALCONFIG where NAME='BarchartForAttributeReport'";
/* 21153 */       AMConnectionPool.getInstance();graphRs = AMConnectionPool.executeQueryStmt(query);
/* 21154 */       if (graphRs.next())
/*       */       {
/* 21156 */         updateQuery = "update AM_GLOBALCONFIG set VALUE ='" + graphtype + "' where NAME='BarchartForAttributeReport'";
/* 21157 */         stmt.addBatch(updateQuery);
/*       */ 
/*       */       }
/*       */       else
/*       */       {
/* 21162 */         String insertQuery1 = "insert into AM_GLOBALCONFIG (NAME, VALUE) values ('BarchartForAttributeReport','" + graphtype + "')";
/* 21163 */         stmt.addBatch(insertQuery1);
/*       */       }
/*       */       
/* 21166 */       com.adventnet.appmanager.util.Constants.attributesReportGraphType = graphtype;
/*       */     }
/*       */     catch (Exception exp3) {
/* 21169 */       exp3.printStackTrace();
/*       */     }
/*       */     finally {
/* 21172 */       AMConnectionPool.closeStatement(graphRs);
/*       */     }
/* 21174 */     ResultSet rs = null;
/*       */     
/* 21176 */     String gtype = request.getParameter("mtype");
/* 21177 */     if (gtype == null)
/*       */     {
/* 21179 */       gtype = "false";
/*       */     }
/*       */     
/*       */ 
/*       */     try
/*       */     {
/* 21185 */       String Query = "select * from AM_GLOBALCONFIG where NAME='PlotGraph'";
/* 21186 */       AMConnectionPool.getInstance();rs = AMConnectionPool.executeQueryStmt(Query);
/* 21187 */       if (rs.next())
/*       */       {
/* 21189 */         updateQuery = "update AM_GLOBALCONFIG set VALUE ='" + gtype + "' where NAME='PlotGraph'";
/* 21190 */         stmt.addBatch(updateQuery);
/*       */ 
/*       */       }
/*       */       else
/*       */       {
/* 21195 */         String insertQuery1 = "insert into AM_GLOBALCONFIG (NAME, VALUE) values ('PlotGraph','" + gtype + "')";
/* 21196 */         stmt.addBatch(insertQuery1);
/*       */       }
/* 21198 */       com.adventnet.awolf.chart.ChartInfo.plotGraphValue = gtype;
/*       */     }
/*       */     catch (Exception exp3) {
/* 21201 */       exp3.printStackTrace();
/*       */     }
/*       */     
/*       */ 
/*       */     try
/*       */     {
/* 21207 */       String sevenMAvalue = request.getParameter("seventhirtyMA");
/* 21208 */       updateQuery = "update AM_GLOBALCONFIG set VALUE ='" + sevenMAvalue + "' where NAME='sevenThirtyMAValue'";
/*       */       
/* 21210 */       stmt.addBatch(updateQuery);
/* 21211 */       com.adventnet.awolf.chart.ChartInfo.sevenThirtyMAValue = sevenMAvalue;
/*       */ 
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 21216 */       e.printStackTrace();
/*       */     }
/*       */     
/*       */ 
/* 21220 */     String Mgtype = request.getParameter("rulefrom");
/* 21221 */     if (Mgtype == null)
/*       */     {
/* 21223 */       Mgtype = "false";
/*       */     }
/*       */     
/*       */ 
/*       */     try
/*       */     {
/* 21229 */       String Query = "select * from AM_GLOBALCONFIG where NAME='MGServiceAvailability'";
/* 21230 */       AMConnectionPool.getInstance();rs = AMConnectionPool.executeQueryStmt(Query);
/* 21231 */       if (rs.next())
/*       */       {
/* 21233 */         updateQuery = "update AM_GLOBALCONFIG set VALUE ='" + Mgtype + "' where NAME='MGServiceAvailability'";
/* 21234 */         stmt.addBatch(updateQuery);
/* 21235 */         DBUtil.MonitorGroupCalculation = Mgtype;
/*       */ 
/*       */       }
/*       */       else
/*       */       {
/* 21240 */         String insertQuery1 = "insert into AM_GLOBALCONFIG (NAME, VALUE) values ('MGServiceAvailability','" + Mgtype + "')";
/* 21241 */         stmt.addBatch(insertQuery1);
/*       */       }
/*       */       
/*       */     }
/*       */     catch (Exception exp3)
/*       */     {
/* 21247 */       exp3.printStackTrace();
/*       */     }
/*       */     finally {
/* 21250 */       AMConnectionPool.closeStatement(rs);
/*       */     }
/*       */     
/*       */     try
/*       */     {
/* 21255 */       stmt.executeBatch();
/* 21256 */       stmt.clearBatch();
/*       */ 
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 21261 */       stmt = null;
/* 21262 */       e.printStackTrace();
/*       */     }
/*       */     finally {
/* 21265 */       stmt.close();
/*       */     }
/* 21267 */     setReportsSettings(mapping, form, request, response);
/* 21268 */     request.setAttribute("sucess", FormatUtil.getString("am.webclient.dbretention.sucess.text"));
/* 21269 */     request.setAttribute("tabtoLoad", "reportssetting");
/* 21270 */     return new ActionForward("/jsp/DataCleanUp.jsp");
/*       */   }
/*       */   
/*       */   private void setReportsSettings(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
/* 21274 */     ResultSet result = null;
/* 21275 */     AMActionForm amform = (AMActionForm)form;
/*       */     try {
/* 21277 */       AMConnectionPool.getInstance();result = AMConnectionPool.executeQueryStmt("select * from AM_GLOBALCONFIG ");
/* 21278 */       while (result.next())
/*       */       {
/*       */ 
/* 21281 */         if (result.getString(1).equals("PlotGraph"))
/*       */         {
/* 21283 */           amform.setMtype(result.getString(2));
/*       */         }
/* 21285 */         else if (result.getString(1).equals("AddSchedMaintenancetoAvail"))
/*       */         {
/* 21287 */           amform.setAddmaintenance(result.getString(2));
/*       */         }
/* 21289 */         else if (result.getString(1).equals("BarchartForAttributeReport"))
/*       */         {
/* 21291 */           amform.setGraphType(result.getString(2));
/*       */ 
/*       */         }
/* 21294 */         else if (result.getString(1).equals("MGServiceAvailability"))
/*       */         {
/* 21296 */           amform.setRulefrom(result.getString(2));
/*       */         }
/* 21298 */         else if (result.getString(1).equals("sevenThirtyMAValue"))
/*       */         {
/* 21300 */           amform.setSeventhirtyMA(result.getString(2));
/*       */         }
/*       */       }
/*       */     }
/*       */     catch (Exception exp3) {
/* 21305 */       exp3.printStackTrace();
/*       */     }
/*       */     finally {
/* 21308 */       AMConnectionPool.closeStatement(result);
/*       */     }
/*       */     
/* 21311 */     AMConnectionPool.closeStatement(result);
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward getSiteNames(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 21320 */     response.setContentType("text/plain; charset=UTF-8");
/* 21321 */     PrintWriter out = response.getWriter();
/* 21322 */     StringBuffer temp = new StringBuffer();
/*       */     try
/*       */     {
/* 21325 */       String account_name = request.getParameter("accName");
/* 21326 */       StringTokenizer strtoken = new StringTokenizer(account_name, "_");
/* 21327 */       strtoken.nextToken("_");
/* 21328 */       String accountName = strtoken.nextToken("_");
/*       */       
/*       */ 
/* 21331 */       ArrayList itemList = APMHelpDeskUtil.getSiteNames(accountName);
/*       */       
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/* 21337 */       if (itemList != null)
/*       */       {
/*       */ 
/* 21340 */         for (Object obj : itemList)
/*       */         {
/* 21342 */           Properties props = (Properties)obj;
/* 21343 */           temp.append(props.getProperty("value")).append(",");
/*       */         }
/*       */       }
/*       */       else
/*       */       {
/* 21348 */         String accName = request.getParameter("accName");
/* 21349 */         RetreiveFeedHandler RFH = new RetreiveFeedHandler();
/*       */         try
/*       */         {
/* 21352 */           RssConnector rssConnector = RssConnector.getInstance();
/* 21353 */           rssConnector.fetchRss(RFH);
/*       */         }
/*       */         catch (Exception e)
/*       */         {
/* 21357 */           e.printStackTrace();
/*       */         }
/* 21359 */         JSONObject asuObj = RFH.asuObj;
/* 21360 */         JSONArray siteNames = asuObj.getJSONArray(accName);
/* 21361 */         if (siteNames != null)
/*       */         {
/* 21363 */           for (int i = 0; i < siteNames.length(); i++)
/*       */           {
/* 21365 */             JSONObject siteNamesItemObj = (JSONObject)siteNames.get(i);
/* 21366 */             JSONArray namesArr = new JSONArray();
/* 21367 */             namesArr = siteNamesItemObj.names();
/* 21368 */             if (namesArr != null)
/*       */             {
/* 21370 */               for (int j = 0; j < namesArr.length(); j++)
/*       */               {
/* 21372 */                 String eachName = (String)namesArr.get(j);
/* 21373 */                 temp.append(eachName + ",");
/*       */               }
/*       */             }
/*       */           }
/*       */         }
/*       */       }
/* 21379 */       out.println(temp);
/* 21380 */       out.flush();
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 21384 */       e.printStackTrace();
/*       */     }
/* 21386 */     return null;
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward getCategNames(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 21395 */     response.setContentType("text/plain; charset=UTF-8");
/* 21396 */     PrintWriter out = response.getWriter();
/* 21397 */     AMActionForm amform = (AMActionForm)form;
/* 21398 */     StringBuffer temp = new StringBuffer();
/*       */     try
/*       */     {
/* 21401 */       String account_name = request.getParameter("accName");
/* 21402 */       if (!account_name.equalsIgnoreCase("Choose a Value")) {
/* 21403 */         StringTokenizer strtoken = new StringTokenizer(account_name, "_");
/* 21404 */         strtoken.nextToken("_");
/* 21405 */         account_name = strtoken.nextToken("_");
/*       */       }
/* 21407 */       ArrayList CategoryList = APMHelpDeskUtil.getCategories(account_name);
/* 21408 */       amform.setToAdd(CategoryList);
/* 21409 */       if (CategoryList != null)
/*       */       {
/*       */ 
/* 21412 */         for (Object obj : CategoryList)
/*       */         {
/* 21414 */           Properties props = (Properties)obj;
/* 21415 */           temp.append(props.getProperty("value")).append(",");
/*       */         }
/*       */       }
/*       */       else
/*       */       {
/* 21420 */         String accName = request.getParameter("accName");
/* 21421 */         RetreiveFeedHandler RFH = new RetreiveFeedHandler();
/*       */         try
/*       */         {
/* 21424 */           RssConnector rssConnector = RssConnector.getInstance();
/* 21425 */           rssConnector.fetchRss(RFH);
/*       */         }
/*       */         catch (Exception e)
/*       */         {
/* 21429 */           e.printStackTrace();
/*       */         }
/* 21431 */         JSONObject asuObj = RFH.asuObj;
/* 21432 */         JSONArray siteNames = asuObj.getJSONArray(accName);
/* 21433 */         if (siteNames != null)
/*       */         {
/* 21435 */           for (int i = 0; i < siteNames.length(); i++)
/*       */           {
/* 21437 */             JSONObject siteNamesItemObj = (JSONObject)siteNames.get(i);
/* 21438 */             JSONArray namesArr = new JSONArray();
/* 21439 */             namesArr = siteNamesItemObj.names();
/* 21440 */             if (namesArr != null)
/*       */             {
/* 21442 */               for (int j = 0; j < namesArr.length(); j++)
/*       */               {
/* 21444 */                 String eachName = (String)namesArr.get(j);
/* 21445 */                 temp.append(eachName + ",");
/*       */               }
/*       */             }
/*       */           }
/*       */         }
/*       */       }
/* 21451 */       out.println(temp);
/* 21452 */       out.flush();
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 21456 */       e.printStackTrace();
/*       */     }
/* 21458 */     return null;
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward getTechgroupNames(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 21467 */     response.setContentType("text/plain; charset=UTF-8");
/* 21468 */     PrintWriter out = response.getWriter();
/* 21469 */     AMActionForm amform = (AMActionForm)form;
/* 21470 */     StringBuffer temp = new StringBuffer();
/* 21471 */     StringBuffer tempCateg = new StringBuffer();
/*       */     try
/*       */     {
/* 21474 */       String account_name = request.getParameter("accName");
/* 21475 */       String site_name = request.getParameter("siteName");
/* 21476 */       if ((!account_name.equalsIgnoreCase("Choose a Value")) && (!site_name.equalsIgnoreCase("Choose a Value"))) {
/* 21477 */         StringTokenizer strtoken = new StringTokenizer(account_name, "_");
/* 21478 */         strtoken.nextToken("_");
/* 21479 */         account_name = strtoken.nextToken("_");
/* 21480 */         StringTokenizer strtoken1 = new StringTokenizer(site_name, "_");
/* 21481 */         strtoken1.nextToken("_");
/* 21482 */         site_name = strtoken1.nextToken("_");
/*       */       }
/* 21484 */       ArrayList CategoryList = APMHelpDeskUtil.getSupportgroups(account_name, site_name);
/* 21485 */       amform.setToAdd(CategoryList);
/* 21486 */       if (CategoryList != null)
/*       */       {
/*       */ 
/* 21489 */         for (Object obj : CategoryList)
/*       */         {
/* 21491 */           Properties props = (Properties)obj;
/* 21492 */           temp.append(props.getProperty("value")).append(",");
/*       */         }
/*       */       }
/*       */       else
/*       */       {
/* 21497 */         String accName = request.getParameter("accName");
/* 21498 */         RetreiveFeedHandler RFH = new RetreiveFeedHandler();
/*       */         try
/*       */         {
/* 21501 */           RssConnector rssConnector = RssConnector.getInstance();
/* 21502 */           rssConnector.fetchRss(RFH);
/*       */         }
/*       */         catch (Exception e)
/*       */         {
/* 21506 */           e.printStackTrace();
/*       */         }
/* 21508 */         JSONObject asuObj = RFH.asuObj;
/* 21509 */         JSONArray siteNames = asuObj.getJSONArray(accName);
/* 21510 */         if (siteNames != null)
/*       */         {
/* 21512 */           for (int i = 0; i < siteNames.length(); i++)
/*       */           {
/* 21514 */             JSONObject siteNamesItemObj = (JSONObject)siteNames.get(i);
/* 21515 */             JSONArray namesArr = new JSONArray();
/* 21516 */             namesArr = siteNamesItemObj.names();
/* 21517 */             if (namesArr != null)
/*       */             {
/* 21519 */               for (int j = 0; j < namesArr.length(); j++)
/*       */               {
/* 21521 */                 String eachName = (String)namesArr.get(j);
/* 21522 */                 temp.append(eachName + ",");
/*       */               }
/*       */             }
/*       */           }
/*       */         }
/*       */       }
/* 21528 */       out.println(temp);
/* 21529 */       out.flush();
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 21533 */       e.printStackTrace();
/*       */     }
/* 21535 */     return null;
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */   public ActionForward getRequesterNames(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 21543 */     String accName = request.getParameter("accName");
/* 21544 */     String stName = request.getParameter("stName");
/* 21545 */     System.out.println("AdminActions - (getRequesterNames) accName : " + accName + ", stName : " + stName);
/* 21546 */     PrintWriter out = response.getWriter();
/* 21547 */     StringBuffer temp = new StringBuffer();
/* 21548 */     RetreiveFeedHandler RFH = new RetreiveFeedHandler();
/*       */     try
/*       */     {
/* 21551 */       RssConnector rssConnector = RssConnector.getInstance();
/* 21552 */       rssConnector.fetchRss(RFH);
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 21556 */       e.printStackTrace();
/*       */     }
/* 21558 */     JSONObject asuObj = RFH.asuObj;
/* 21559 */     JSONArray siteNames = asuObj.getJSONArray(accName);
/* 21560 */     if (siteNames != null)
/*       */     {
/* 21562 */       for (int i = 0; i < siteNames.length(); i++)
/*       */       {
/*       */         try
/*       */         {
/* 21566 */           JSONObject requesters = (JSONObject)siteNames.get(i);
/* 21567 */           JSONArray requestersArray = (JSONArray)requesters.get(stName);
/* 21568 */           if (requestersArray != null)
/*       */           {
/* 21570 */             for (int j = 0; j < requestersArray.length(); j++)
/*       */             {
/* 21572 */               temp.append(requestersArray.get(j) + ",");
/*       */             }
/*       */           }
/*       */         }
/*       */         catch (Exception e) {}
/*       */       }
/*       */     }
/*       */     
/*       */ 
/*       */ 
/* 21582 */     out.println(temp);
/* 21583 */     out.flush();
/* 21584 */     response.setContentType("text/plain");
/* 21585 */     return null;
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward showVMAction(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */   {
/* 21593 */     AMConnectionPool cp = AMConnectionPool.getInstance();
/* 21594 */     ResultSet set = null;
/*       */     try {
/* 21596 */       AMActionForm amform = (AMActionForm)form;
/* 21597 */       ActionMessages messages = new ActionMessages();
/* 21598 */       ArrayList rows = new ArrayList();
/* 21599 */       String actionID = request.getParameter("actionID");
/* 21600 */       boolean isContainerAction = request.getParameter("isContainerAction") != null;
/*       */       
/*       */ 
/*       */ 
/*       */ 
/* 21605 */       if ((request.getParameter("save") == null) || (request.getParameter("save").equals("null"))) {
/* 21606 */         ((AMActionForm)form).setLogConfig("0");
/* 21607 */         amform.setMethod("createVMAction");
/*       */         
/* 21609 */         if ((request.getParameter("type") != null) && (request.getParameter("type").equals("102"))) {
/* 21610 */           ((AMActionForm)form).setJtaskMethod("StopVM");
/* 21611 */         } else if ((request.getParameter("type") != null) && (request.getParameter("type").equals("103"))) {
/* 21612 */           ((AMActionForm)form).setJtaskMethod("RestartVM");
/*       */         }
/*       */         else {
/* 21615 */           ((AMActionForm)form).setJtaskMethod("StartVM");
/*       */         }
/*       */       }
/*       */       
/*       */ 
/*       */ 
/* 21621 */       String query = "SELECT AM_ACTIONPROFILE.ID,AM_ACTIONPROFILE.NAME,TOADDRESS FROM AM_ACTIONPROFILE,AM_EMAILACTION where AM_EMAILACTION.ID=AM_ACTIONPROFILE.ID AND AM_ACTIONPROFILE.TYPE=1";
/*       */       
/* 21623 */       if (EnterpriseUtil.isAdminServer()) {
/* 21624 */         query = "SELECT AM_ACTIONPROFILE.ID,AM_ACTIONPROFILE.NAME,TOADDRESS FROM AM_ACTIONPROFILE,AM_EMAILACTION where AM_EMAILACTION.ID=AM_ACTIONPROFILE.ID AND AM_ACTIONPROFILE.TYPE=1 and AM_ACTIONPROFILE.NAME !='ADMINEMAIL'";
/*       */       }
/*       */       try
/*       */       {
/* 21628 */         set = AMConnectionPool.executeQueryStmt(query);
/* 21629 */         AMLog.debug("VM Action : " + query);
/* 21630 */         while (set.next())
/*       */         {
/* 21632 */           String labelvalue = set.getString(2) + ":(" + set.getString(3) + ")";
/* 21633 */           Properties dataProps = new Properties();
/* 21634 */           dataProps.setProperty("label", labelvalue);
/* 21635 */           dataProps.setProperty("value", String.valueOf(set.getInt(1)));
/*       */           
/* 21637 */           rows.add(dataProps);
/*       */         }
/* 21639 */         set.close();
/*       */         
/* 21641 */         ((AMActionForm)form).setMaillist(rows);
/* 21642 */         ((AMActionForm)form).setTdcount(2);
/* 21643 */         ((AMActionForm)form).setTddelay(30);
/*       */       }
/*       */       catch (Exception exp)
/*       */       {
/* 21647 */         exp.printStackTrace();
/* 21648 */         throw new Exception(exp);
/*       */       }
/*       */       
/*       */ 
/* 21652 */       ArrayList applications = new ArrayList();
/* 21653 */       boolean isPrivelegeUser = false;
/* 21654 */       boolean isUserResourceEnabled = false;
/* 21655 */       String adminUserCondition = "";
/* 21656 */       String loginUserid = null;
/* 21657 */       if (ClientDBUtil.isPrivilegedUser(request)) {
/* 21658 */         isPrivelegeUser = true;
/* 21659 */         if (com.adventnet.appmanager.util.Constants.isUserResourceEnabled()) {
/* 21660 */           isUserResourceEnabled = true;
/* 21661 */           loginUserid = com.adventnet.appmanager.util.Constants.getLoginUserid(request);
/*       */         }
/* 21663 */         Vector resids = ClientDBUtil.getResourceIdentity(request.getRemoteUser());
/* 21664 */         adminUserCondition = " and " + EnterpriseUtil.getCondition("RESOURCEID", resids);
/*       */       }
/* 21666 */       if ((isPrivelegeUser) && (!EnterpriseUtil.isIt360MSPEdition())) {
/* 21667 */         applications = com.adventnet.appmanager.struts.beans.AlarmUtil.getApplicationsForOwner(request.getRemoteUser(), request);
/*       */       }
/* 21669 */       else if (EnterpriseUtil.isIt360MSPEdition())
/*       */       {
/* 21671 */         applications = com.adventnet.appmanager.struts.beans.AlarmUtil.getConfiguredGroups(request);
/*       */       }
/*       */       else
/*       */       {
/* 21675 */         applications = com.adventnet.appmanager.struts.beans.AlarmUtil.getConfiguredGroups();
/*       */       }
/*       */       
/* 21678 */       if (applications != null)
/*       */       {
/* 21680 */         request.setAttribute("applications", applications);
/*       */       }
/* 21682 */       String resourceType = isContainerAction ? "Docker Container" : "VirtualMachine";
/*       */       
/* 21684 */       if (isUserResourceEnabled) {
/* 21685 */         query = "select * from AM_ManagedObject,AM_USERRESOURCESTABLE  where AM_USERRESOURCESTABLE.RESOURCEID=AM_ManagedObject.RESOURCEID and AM_USERRESOURCESTABLE.USERID=" + loginUserid + " and TYPE='" + resourceType + "'";
/*       */       } else {
/* 21687 */         query = "select * from AM_ManagedObject where TYPE='" + resourceType + "'" + adminUserCondition;
/*       */       }
/*       */       
/* 21690 */       AMLog.debug("jrelist##" + query);
/* 21691 */       set = AMConnectionPool.executeQueryStmt(query);
/* 21692 */       rows = new ArrayList();
/* 21693 */       while (set.next())
/*       */       {
/* 21695 */         Properties dataProps = new Properties();
/* 21696 */         dataProps.setProperty("label", set.getString(4));
/* 21697 */         dataProps.setProperty("value", String.valueOf(set.getInt(1)));
/* 21698 */         rows.add(dataProps);
/*       */       }
/*       */       
/* 21701 */       set.close();
/* 21702 */       ((AMActionForm)form).setJrelist(rows);
/* 21703 */       request.setAttribute("jrelist", rows);
/* 21704 */       if (!isContainerAction)
/*       */       {
/* 21706 */         if (isUserResourceEnabled) {
/* 21707 */           query = "select * from AM_ManagedObject,AM_USERRESOURCESTABLE where TYPE='HyperVVirtualMachine' and AM_USERRESOURCESTABLE.RESOURCEID=AM_ManagedObject.RESOURCEID and AM_USERRESOURCESTABLE.USERID=" + loginUserid;
/*       */         } else {
/* 21709 */           query = "select * from AM_ManagedObject where TYPE='HyperVVirtualMachine'" + adminUserCondition;
/*       */         }
/*       */         
/* 21712 */         set = AMConnectionPool.executeQueryStmt(query);
/* 21713 */         rows = new ArrayList();
/* 21714 */         while (set.next())
/*       */         {
/* 21716 */           Properties dataProps = new Properties();
/* 21717 */           dataProps.setProperty("label", set.getString(4));
/* 21718 */           dataProps.setProperty("value", String.valueOf(set.getInt(1)));
/* 21719 */           rows.add(dataProps);
/*       */         }
/*       */         
/* 21722 */         set.close();
/* 21723 */         ((AMActionForm)form).setHypervVMList(rows);
/* 21724 */         AMLog.debug("(*) setHypervVMList is." + rows);
/* 21725 */         request.setAttribute("hypervVMList", rows);
/*       */       }
/* 21727 */       String hostResourceType = isContainerAction ? "Docker" : "VMWare ESX/ESXi";
/*       */       
/* 21729 */       if (isUserResourceEnabled) {
/* 21730 */         query = "select RESOURCEID,DISPLAYNAME from AM_ManagedObject,AM_USERRESOURCESTABLE where AM_USERRESOURCESTABLE.RESOURCEID=AM_ManagedObject.RESOURCEID and AM_USERRESOURCESTABLE.USERID=" + loginUserid + " and TYPE='" + hostResourceType + "' ORDER BY DISPLAYNAME";
/*       */       } else {
/* 21732 */         query = "select RESOURCEID,DISPLAYNAME from AM_ManagedObject where TYPE='" + hostResourceType + "' " + adminUserCondition + " ORDER BY DISPLAYNAME";
/*       */       }
/*       */       
/* 21735 */       set = AMConnectionPool.executeQueryStmt(query);
/* 21736 */       rows = new ArrayList();
/* 21737 */       while (set.next())
/*       */       {
/* 21739 */         Properties dataProps = new Properties();
/* 21740 */         dataProps.setProperty("label", set.getString(2));
/* 21741 */         dataProps.setProperty("value", String.valueOf(set.getInt(1)));
/* 21742 */         rows.add(dataProps);
/*       */       }
/* 21744 */       set.close();
/* 21745 */       ((AMActionForm)form).setHostlist(rows);
/* 21746 */       request.setAttribute("hostlist", rows);
/* 21747 */       if (!isContainerAction) {
/* 21748 */         if (isUserResourceEnabled) {
/* 21749 */           query = "select RESOURCEID,RESOURCENAME from AM_ManagedObject,AM_USERRESOURCESTABLE  where AM_USERRESOURCESTABLE.RESOURCEID=AM_ManagedObject.RESOURCEID and AM_USERRESOURCESTABLE.USERID=" + loginUserid + " and TYPE='Hyper-V-Server' ORDER BY RESOURCENAME";
/*       */         } else {
/* 21751 */           query = "select RESOURCEID,RESOURCENAME from AM_ManagedObject where TYPE='Hyper-V-Server' " + adminUserCondition + " ORDER BY RESOURCENAME";
/*       */         }
/*       */         
/*       */ 
/* 21755 */         set = AMConnectionPool.executeQueryStmt(query);
/* 21756 */         rows = new ArrayList();
/* 21757 */         while (set.next())
/*       */         {
/* 21759 */           Properties dataProps = new Properties();
/* 21760 */           dataProps.setProperty("label", set.getString(2));
/* 21761 */           dataProps.setProperty("value", String.valueOf(set.getInt(1)));
/* 21762 */           rows.add(dataProps);
/*       */         }
/*       */         
/* 21765 */         set.close();
/* 21766 */         ((AMActionForm)form).setHypervhostlist(rows);
/* 21767 */         request.setAttribute("hypervhostlist", rows);
/*       */         
/* 21769 */         if (isUserResourceEnabled) {
/* 21770 */           query = "SELECT RESOURCEID, DISPLAYNAME,TYPE FROM AM_ManagedObject,AM_USERRESOURCESTABLE WHERE AM_USERRESOURCESTABLE.RESOURCEID=AM_ManagedObject.RESOURCEID and AM_USERRESOURCESTABLE.USERID=" + loginUserid + " and TYPE IN ('XenServerHost','XenServerVM') ORDER BY TYPE,RESOURCEID";
/*       */         } else {
/* 21772 */           query = "SELECT RESOURCEID, DISPLAYNAME,TYPE FROM AM_ManagedObject WHERE TYPE IN ('XenServerHost','XenServerVM') " + adminUserCondition + " ORDER BY TYPE,RESOURCEID";
/*       */         }
/*       */         
/* 21775 */         set = AMConnectionPool.executeQueryStmt(query);
/* 21776 */         rows = new ArrayList();
/* 21777 */         ArrayList rows1 = new ArrayList();
/* 21778 */         while (set.next())
/*       */         {
/* 21780 */           Properties dataProps = new Properties();
/* 21781 */           dataProps.setProperty("label", set.getString(2));
/* 21782 */           dataProps.setProperty("value", String.valueOf(set.getInt(1)));
/* 21783 */           if (set.getString(3).equals("XenServerVM"))
/*       */           {
/* 21785 */             rows1.add(dataProps);
/*       */           }
/*       */           else
/*       */           {
/* 21789 */             rows.add(dataProps);
/*       */           }
/*       */         }
/* 21792 */         set.close();
/* 21793 */         ((AMActionForm)form).setXenHostList(rows);
/* 21794 */         ((AMActionForm)form).setXenVMList(rows1);
/* 21795 */         request.setAttribute("xenHostList", rows);
/* 21796 */         request.setAttribute("xenVMList", rows1);
/*       */       }
/*       */       
/* 21799 */       if (actionID != null)
/*       */       {
/* 21801 */         query = "select AM_ACTIONPROFILE.NAME,AM_JREACTIONS.DELAY,AM_JREACTIONS.COUNT,AM_JREACTIONS.EMAIL_ACTION_ID,AM_JREACTIONS.TYPE,AM_JREACTIONS.TARGET_RESID,AM_ACTIONPROFILE.TYPE from AM_JREACTIONS,AM_ACTIONPROFILE where AM_JREACTIONS.ID=AM_ACTIONPROFILE.ID  and AM_JREACTIONS.ID=" + actionID;
/* 21802 */         rows = this.mo.getRows(query);
/* 21803 */         if (rows != null)
/*       */         {
/* 21805 */           ArrayList row = (ArrayList)rows.get(0);
/* 21806 */           ((AMActionForm)form).setTdcount(Integer.parseInt((String)row.get(2)));
/* 21807 */           ((AMActionForm)form).setTddelay(Integer.parseInt((String)row.get(1)));
/* 21808 */           ((AMActionForm)form).setDisplayname((String)row.get(0));
/* 21809 */           ((AMActionForm)form).setLogConfig((String)row.get(4));
/* 21810 */           ((AMActionForm)form).setSendmail((String)row.get(3));
/* 21811 */           ((AMActionForm)form).setSelectedMG((String)row.get(5));
/* 21812 */           ((AMActionForm)form).setSelectedhost((String)row.get(5));
/* 21813 */           ((AMActionForm)form).setSelectedjre((String)row.get(5));
/* 21814 */           ((AMActionForm)form).setSelectedhypervhost((String)row.get(5));
/* 21815 */           ((AMActionForm)form).setSelectedHyperVVM((String)row.get(5));
/* 21816 */           ((AMActionForm)form).setSelectedXenVM((String)row.get(5));
/* 21817 */           ((AMActionForm)form).setSelectedXenHost((String)row.get(5));
/* 21818 */           ((AMActionForm)form).setId(Integer.parseInt(actionID));
/* 21819 */           amform.setMethod("editVMAction");
/* 21820 */           String type = (String)row.get(6);
/*       */           
/*       */ 
/* 21823 */           Integer typeInt = Integer.valueOf(type);
/* 21824 */           if ((852 == typeInt.intValue()) || (851 == typeInt.intValue()) || (850 == typeInt.intValue())) {
/* 21825 */             isContainerAction = true;
/* 21826 */             ((AMActionForm)form).setHostType("850");
/*       */           }
/* 21828 */           else if ((typeInt.intValue() - 100 > 100) && (typeInt.intValue() - 100 < 700))
/*       */           {
/* 21830 */             ((AMActionForm)form).setHostType("100");
/*       */           }
/* 21832 */           else if (typeInt.intValue() - 100 > 700)
/*       */           {
/* 21834 */             ((AMActionForm)form).setHostType("700");
/*       */           }
/*       */           
/*       */ 
/* 21838 */           if (((type != null) && ((type.equals("102")) || (type.equals("202")))) || (type.equals("851")))
/*       */           {
/* 21840 */             type = "StopVM";
/* 21841 */           } else if (((type != null) && ((type.equals("103")) || (type.equals("203")))) || (type.equals("852")))
/*       */           {
/* 21843 */             type = "RestartVM";
/*       */           }
/*       */           else
/*       */           {
/* 21847 */             type = "StartVM";
/*       */           }
/* 21849 */           ((AMActionForm)form).setJtaskMethod(type);
/*       */         }
/*       */       }
/* 21852 */       else if (isContainerAction) {
/* 21853 */         ((AMActionForm)form).setHostType("850");
/*       */       }
/* 21855 */       request.setAttribute("isContainerAction", Boolean.valueOf(isContainerAction));
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 21859 */       e.printStackTrace();
/*       */     }
/*       */     finally {
/* 21862 */       AMConnectionPool.closeStatement(set);
/*       */     }
/* 21864 */     String ext = request.getParameter("ext");
/* 21865 */     if (ext != null)
/*       */     {
/* 21867 */       return new ActionForward("/jsp/VMActionForm.jsp?haid=" + request.getParameter("haid") + "&global=" + request.getParameter("global"));
/*       */     }
/* 21869 */     return new ActionForward("/showTile.do?TileName=.VMActions");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward createVMAction(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */   {
/* 21879 */     if (!isTokenValid(request)) {
/* 21880 */       return new ActionForward("/adminAction.do?method=showActionProfiles");
/*       */     }
/* 21882 */     resetToken(request);
/* 21883 */     String returnpath = request.getParameter("returnpath");
/* 21884 */     String popupParam = request.getParameter("popup");
/* 21885 */     boolean popup = (popupParam != null) && (popupParam.equals("true"));
/* 21886 */     ActionMessages messages = new ActionMessages();
/* 21887 */     AMActionForm am = (AMActionForm)form;
/*       */     
/* 21889 */     String displayname = am.getDisplayname();
/* 21890 */     String hostType = request.getParameter("hostType");
/*       */     
/* 21892 */     int targetResid = 0;
/* 21893 */     String actionName = FormatUtil.getString("am.javaruntime.action.performgc");
/*       */     
/* 21895 */     boolean isContainerAction = false;
/*       */     try {
/* 21897 */       ((AMActionForm)form).setLogConfig(am.getLogConfig());
/* 21898 */       if ((am.getLogConfig().equals("2")) || (am.getLogConfig().equals("7"))) {
/* 21899 */         targetResid = Integer.parseInt(am.getSelectedMG());
/* 21900 */       } else if ((am.getLogConfig().equals("3")) || (am.getLogConfig().equals("8"))) {
/* 21901 */         targetResid = Integer.parseInt(am.getSelectedhost());
/* 21902 */       } else if (((am.getLogConfig().equals("4")) && (hostType.equals("0"))) || (am.getLogConfig().equals("9"))) {
/* 21903 */         targetResid = Integer.parseInt(am.getSelectedjre());
/*       */       }
/* 21905 */       else if ((am.getLogConfig().equals("4")) && (hostType.equals("100")))
/*       */       {
/* 21907 */         targetResid = Integer.parseInt(am.getSelectedHyperVVM());
/*       */       }
/* 21909 */       else if ((am.getLogConfig().equals("4")) && (hostType.equals("700")))
/*       */       {
/* 21911 */         targetResid = Integer.parseInt(am.getSelectedXenVM());
/*       */       }
/* 21913 */       else if (am.getLogConfig().equals("5")) {
/* 21914 */         targetResid = Integer.parseInt(am.getSelectedhypervhost());
/*       */       }
/* 21916 */       else if (am.getLogConfig().equals("6"))
/*       */       {
/* 21918 */         targetResid = Integer.parseInt(am.getSelectedXenHost());
/*       */       }
/*       */       
/* 21921 */       String timetogenerate = am.getJtaskMethod();
/* 21922 */       int type = 103;
/* 21923 */       if ((timetogenerate != null) && (timetogenerate.equalsIgnoreCase("StartVM")))
/*       */       {
/* 21925 */         type = 101;
/* 21926 */         actionName = FormatUtil.getString("am.vm.action.startvm");
/*       */       }
/* 21928 */       else if ((timetogenerate != null) && (timetogenerate.equalsIgnoreCase("StopVM"))) {
/* 21929 */         type = 102;
/* 21930 */         actionName = FormatUtil.getString("am.vm.action.stopvm");
/*       */       }
/*       */       
/*       */ 
/*       */ 
/*       */ 
/* 21936 */       if ((hostType != null) && (!hostType.trim().equals(""))) {
/* 21937 */         if (hostType.equals("850")) {
/* 21938 */           isContainerAction = true;
/* 21939 */           type = timetogenerate.equalsIgnoreCase("StopVM") ? 851 : timetogenerate.equalsIgnoreCase("StartVM") ? 850 : 852;
/*       */         } else {
/* 21941 */           hostType = hostType.trim();
/* 21942 */           Integer hostTypeInt = Integer.valueOf(hostType);
/* 21943 */           type += hostTypeInt.intValue();
/*       */         }
/*       */       }
/*       */       
/*       */ 
/* 21948 */       if (DBQueryUtil.getDBType().equals("mssql")) {
/* 21949 */         displayname = displayname.replaceAll("'", "''");
/*       */       } else {
/* 21951 */         displayname = displayname.replaceAll("'", "\\\\'");
/*       */       }
/*       */       
/* 21954 */       String checkquery = "select * from AM_ACTIONPROFILE where NAME='" + displayname + "'";
/* 21955 */       ArrayList list = this.mo.getRows(checkquery);
/* 21956 */       if (list.size() == 0)
/*       */       {
/* 21958 */         String insertquery = "insert into AM_ACTIONPROFILE (ID,NAME,TYPE) values(" + DBQueryUtil.getIncrementedID("ID", "AM_ACTIONPROFILE") + ",'" + displayname + "'," + type + ") ";
/* 21959 */         this.mo.executeUpdateStmt(insertquery);
/* 21960 */         ArrayList result = this.mo.getRows("select max(ID) from AM_ACTIONPROFILE");
/* 21961 */         if (result.size() > 0)
/*       */         {
/* 21963 */           String id = (String)((ArrayList)result.get(0)).get(0);
/* 21964 */           if (id == null) {
/* 21965 */             id = "1";
/*       */           }
/* 21967 */           DelegatedUserRoleUtil.addEntryToConfigUserTable(request, Integer.parseInt(id), 2);
/* 21968 */           PreparedStatement ps = AMConnectionPool.getConnection().prepareStatement("insert into  AM_JREACTIONS (ID,DELAY,COUNT,EMAIL_ACTION_ID,TYPE,TARGET_RESID) values (?,?,?,?,?,?)");
/*       */           try {
/* 21970 */             ps.setInt(1, Integer.parseInt(id));
/* 21971 */             ps.setInt(2, am.getTddelay());
/* 21972 */             ps.setInt(3, am.getTdcount());
/* 21973 */             ps.setInt(4, Integer.parseInt(am.getSendmail()));
/* 21974 */             ps.setInt(5, Integer.parseInt(am.getLogConfig()));
/* 21975 */             ps.setInt(6, targetResid);
/* 21976 */             ps.executeUpdate();
/*       */             
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */             try
/*       */             {
/* 21984 */               if (ps != null) {
/* 21985 */                 ps.close();
/*       */               }
/*       */             }
/*       */             catch (Exception ex) {
/* 21989 */               ex.printStackTrace();
/*       */             }
/*       */             
/*       */ 
/* 21993 */             if (!isContainerAction) {
/*       */               break label972;
/*       */             }
/*       */           }
/*       */           catch (Exception exp)
/*       */           {
/* 21980 */             exp.printStackTrace();
/*       */           }
/*       */           finally {
/*       */             try {
/* 21984 */               if (ps != null) {
/* 21985 */                 ps.close();
/*       */               }
/*       */             }
/*       */             catch (Exception ex) {
/* 21989 */               ex.printStackTrace();
/*       */             }
/*       */           }
/*       */           
/* 21993 */           tmpTernaryOp = FormatUtil.getString("Container"); label972: messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("am.vm.action.create.success", FormatUtil.getString("am.vm.action.vmmsg")));
/* 21994 */           saveMessages(request, messages);
/* 21995 */           if (popup)
/*       */           {
/* 21997 */             associateActions(request);
/* 21998 */             messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("emailaction.createandassociate.success"));
/* 21999 */             return new ActionForward("/jsp/ThresholdCreationForwarder.jsp" + getWizString(request));
/*       */           }
/* 22001 */           if (returnpath != null)
/*       */           {
/* 22003 */             return new ActionForward(returnpath);
/*       */           }
/*       */           
/*       */         }
/*       */       }
/*       */       else
/*       */       {
/* 22010 */         messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("am.javaruntime.action.alreadyexists", request.getParameter("displayname")));
/* 22011 */         saveMessages(request, messages);
/* 22012 */         if (popup) {
/* 22013 */           return new ActionForward("/jsp/VMActionForm.jsp");
/*       */         }
/* 22015 */         return new ActionForward("/adminAction.do?method=showVMAction&save='true'");
/*       */       }
/*       */     } catch (Exception e) {
/* 22018 */       e.printStackTrace();
/*       */     }
/* 22020 */     if (returnpath != null) {
/* 22021 */       return new ActionForward(returnpath);
/*       */     }
/* 22023 */     return new ActionForward("/adminAction.do?method=showActionProfiles");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward deleteVMAction(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 22032 */     String[] applications = request.getParameterValues("vmcheckbox");
/* 22033 */     String messg = "";
/* 22034 */     if (applications != null)
/*       */     {
/* 22036 */       for (int i = 0; i < applications.length; i++)
/*       */       {
/*       */ 
/*       */ 
/* 22040 */         FaultUtil.deleteAction(applications[i]);
/* 22041 */         DelegatedUserRoleUtil.deleteEntryFromConfigUserTable(Integer.parseInt(applications[i]), 2);
/*       */       }
/* 22043 */       messg = "am.vm.successdelete";
/*       */     }
/*       */     
/* 22046 */     ActionMessages messages = new ActionMessages();
/* 22047 */     messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage(messg));
/* 22048 */     saveMessages(request, messages);
/* 22049 */     return mapping.findForward("success");
/*       */   }
/*       */   
/*       */   public ActionForward deleteContainerAction(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 22055 */     String[] applications = request.getParameterValues("containerCheckbox");
/* 22056 */     String messg = "";
/* 22057 */     if (applications != null)
/*       */     {
/* 22059 */       for (int i = 0; i < applications.length; i++)
/*       */       {
/*       */ 
/*       */ 
/* 22063 */         FaultUtil.deleteAction(applications[i]);
/* 22064 */         DelegatedUserRoleUtil.deleteEntryFromConfigUserTable(Integer.parseInt(applications[i]), 2);
/*       */       }
/* 22066 */       messg = "am.docker.container.delete.message";
/*       */     }
/*       */     
/* 22069 */     ActionMessages messages = new ActionMessages();
/* 22070 */     messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage(messg));
/* 22071 */     saveMessages(request, messages);
/* 22072 */     return mapping.findForward("success");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward editVMAction(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 22083 */     String update = null;
/* 22084 */     AMActionForm am = (AMActionForm)form;
/* 22085 */     boolean isContainerAction = false;
/*       */     try {
/* 22087 */       ActionMessages messages = new ActionMessages();
/* 22088 */       String displayname = am.getDisplayname();
/* 22089 */       update = request.getParameter("update");
/* 22090 */       int targetResid = 0;
/* 22091 */       String hostType = request.getParameter("hostType");
/*       */       
/* 22093 */       String actionName = FormatUtil.getString("am.vm.action.restartvm");
/*       */       
/*       */ 
/* 22096 */       if (DBQueryUtil.getDBType().equals("mssql")) {
/* 22097 */         displayname = displayname.replaceAll("'", "''");
/*       */       }
/*       */       else {
/* 22100 */         displayname = displayname.replaceAll("'", "\\\\'");
/*       */       }
/*       */       
/* 22103 */       ((AMActionForm)form).setLogConfig(am.getLogConfig());
/* 22104 */       if ((am.getLogConfig().equals("2")) || (am.getLogConfig().equals("7"))) {
/* 22105 */         targetResid = Integer.parseInt(am.getSelectedMG());
/* 22106 */       } else if ((am.getLogConfig().equals("3")) || (am.getLogConfig().equals("8"))) {
/* 22107 */         targetResid = Integer.parseInt(am.getSelectedhost());
/* 22108 */       } else if (((am.getLogConfig().equals("4")) && (hostType.equals("0"))) || (am.getLogConfig().equals("9"))) {
/* 22109 */         targetResid = Integer.parseInt(am.getSelectedjre());
/*       */       }
/* 22111 */       else if ((am.getLogConfig().equals("4")) && (hostType.equals("100")))
/*       */       {
/* 22113 */         targetResid = Integer.parseInt(am.getSelectedHyperVVM());
/*       */ 
/*       */       }
/* 22116 */       else if (am.getLogConfig().equals("5")) {
/* 22117 */         targetResid = Integer.parseInt(am.getSelectedhypervhost());
/*       */       }
/* 22119 */       else if ((am.getLogConfig().equals("4")) && (hostType.equals("700")))
/*       */       {
/* 22121 */         targetResid = Integer.parseInt(am.getSelectedXenVM());
/*       */       }
/* 22123 */       else if (am.getLogConfig().equals("6"))
/*       */       {
/* 22125 */         targetResid = Integer.parseInt(am.getSelectedXenHost());
/*       */       }
/*       */       
/* 22128 */       String timetogenerate = am.getJtaskMethod();
/* 22129 */       int type = 103;
/* 22130 */       if ((timetogenerate != null) && (timetogenerate.equalsIgnoreCase("StartVM"))) {
/* 22131 */         type = 101;
/* 22132 */         actionName = FormatUtil.getString("am.vm.action.startvm");
/*       */       }
/* 22134 */       else if ((timetogenerate != null) && (timetogenerate.equalsIgnoreCase("StopVM"))) {
/* 22135 */         type = 102;
/* 22136 */         actionName = FormatUtil.getString("am.vm.action.stopvm");
/*       */       }
/*       */       
/*       */ 
/* 22140 */       if ((hostType != null) && (!hostType.trim().equals("")))
/*       */       {
/* 22142 */         if (hostType.equals("850")) {
/* 22143 */           isContainerAction = true;
/* 22144 */           type = timetogenerate.equalsIgnoreCase("StopVM") ? 851 : timetogenerate.equalsIgnoreCase("StartVM") ? 850 : 852;
/*       */         } else {
/* 22146 */           hostType = hostType.trim();
/* 22147 */           Integer hostTypeInt = Integer.valueOf(hostType);
/* 22148 */           type += hostTypeInt.intValue();
/*       */         }
/*       */       }
/*       */       
/*       */ 
/*       */ 
/* 22154 */       String checkquery = "select * from AM_ACTIONPROFILE where NAME='" + displayname + "' and ID!=" + am.getId();
/* 22155 */       ArrayList list = this.mo.getRows(checkquery);
/* 22156 */       if (list.size() == 0) {
/* 22157 */         String updateactionquery = "update AM_ACTIONPROFILE set NAME='" + displayname + "',TYPE=" + type + " where ID = " + am.getId();
/* 22158 */         this.mo.executeUpdateStmt(updateactionquery);
/*       */         
/* 22160 */         PreparedStatement ps = null;
/*       */         try {
/* 22162 */           ps = AMConnectionPool.getConnection().prepareStatement("update AM_JREACTIONS set DELAY=?,EMAIL_ACTION_ID =?,TYPE=?,TARGET_RESID=? where ID =?");
/*       */           try {
/* 22164 */             ps.setInt(1, am.getTddelay());
/*       */             
/* 22166 */             ps.setInt(2, Integer.parseInt(am.getSendmail()));
/* 22167 */             ps.setInt(3, Integer.parseInt(am.getLogConfig()));
/* 22168 */             ps.setInt(4, targetResid);
/* 22169 */             ps.setInt(5, am.getId());
/* 22170 */             ps.executeUpdate();
/*       */           }
/*       */           catch (Exception exp) {
/* 22173 */             exp.printStackTrace();
/*       */           }
/*       */           
/*       */ 
/*       */ 
/*       */ 
/*       */           try
/*       */           {
/* 22181 */             if (ps != null) {
/* 22182 */               ps.close();
/*       */             }
/*       */           }
/*       */           catch (Exception ex) {
/* 22186 */             ex.printStackTrace();
/*       */           }
/*       */           
/*       */ 
/* 22190 */           if (!isContainerAction) {
/*       */             break label856;
/*       */           }
/*       */         }
/*       */         catch (Exception exp)
/*       */         {
/* 22177 */           exp.printStackTrace();
/*       */         }
/*       */         finally {
/*       */           try {
/* 22181 */             if (ps != null) {
/* 22182 */               ps.close();
/*       */             }
/*       */           }
/*       */           catch (Exception ex) {
/* 22186 */             ex.printStackTrace();
/*       */           }
/*       */         }
/*       */         
/* 22190 */         tmpTernaryOp = "Container"; label856: messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("am.vm.action.update.success", FormatUtil.getString("am.vm.action.vmmsg")));
/* 22191 */         saveMessages(request, messages);
/*       */       }
/*       */       else {
/* 22194 */         messages.add("org.apache.struts.action.GLOBAL_MESSAGE", new ActionMessage("am.javaruntime.action.alreadyexists", request.getParameter("displayname")));
/* 22195 */         saveMessages(request, messages);
/* 22196 */         if (update == null) {
/* 22197 */           return new ActionForward("/adminAction.do?method=showVMAction&save='true'");
/*       */         }
/* 22199 */         return new ActionForward("/showActionProfiles.do?method=getActionDetails&actionid=" + am.getId());
/*       */       }
/*       */     }
/*       */     catch (Exception exc) {
/* 22203 */       exc.printStackTrace();
/*       */     }
/*       */     
/* 22206 */     if (update == null) {
/* 22207 */       return new ActionForward("/adminAction.do?method=showActionProfiles");
/*       */     }
/* 22209 */     return new ActionForward("/showActionProfiles.do?method=getActionDetails&actionid=" + am.getId());
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward saveReportLogo(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 22218 */     AMActionForm am = (AMActionForm)form;
/* 22219 */     FormFile file = am.getReportLogo();
/* 22220 */     AMLog.debug(" Logo image name : " + file);
/* 22221 */     String sourceFileName = request.getParameter("theFile");
/* 22222 */     String destFileName = System.getProperty("webnms.rootdir") + File.separator + "images" + File.separator + "report_logo.png";
/*       */     try {
/* 22224 */       InputStream inputStream = file.getInputStream();
/* 22225 */       BufferedImage buff = javax.imageio.ImageIO.read(inputStream);
/*       */       BufferedImage resizedImage;
/* 22227 */       BufferedImage resizedImage; if ((buff.getWidth() != 262) && (buff.getHeight() != 54))
/*       */       {
/* 22229 */         resizedImage = resizeImage(buff, buff.getType());
/*       */       }
/*       */       else
/*       */       {
/* 22233 */         resizedImage = buff;
/*       */       }
/*       */       
/* 22236 */       OutputStream outputStream = new FileOutputStream(destFileName);
/* 22237 */       javax.imageio.ImageIO.write(resizedImage, "png", outputStream);
/*       */     }
/*       */     catch (Exception err)
/*       */     {
/* 22241 */       err.printStackTrace();
/*       */     }
/*       */     
/* 22244 */     request.setAttribute("tabtoLoad", "reportlogosettings");
/* 22245 */     request.setAttribute("reportlogo", "/images/report_logo.png");
/* 22246 */     request.setAttribute("sucess", FormatUtil.getString("am.webclient.logosetting.updateSuccess.text"));
/* 22247 */     return new ActionForward("/jsp/DataCleanUp.jsp");
/*       */   }
/*       */   
/*       */   public ActionForward deleteReportLogo(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
/* 22251 */     File file = new File(System.getProperty("webnms.rootdir") + File.separator + "images" + File.separator + "report_logo.png");
/*       */     try {
/* 22253 */       if (file.exists()) {
/* 22254 */         if (file.delete()) {
/* 22255 */           request.setAttribute("sucess", FormatUtil.getString("am.webclient.logosetting.deleteSuccess.text"));
/* 22256 */           request.setAttribute("reportlogo", "/images/am_logo.png");
/*       */         }
/* 22258 */         request.setAttribute("tabtoLoad", "reportlogosettings");
/*       */       }
/*       */     } catch (Exception ept) {
/* 22261 */       ept.printStackTrace();
/*       */     }
/*       */     
/* 22264 */     return new ActionForward("/jsp/DataCleanUp.jsp");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   private static BufferedImage resizeImage(BufferedImage originalImage, int type)
/*       */   {
/* 22272 */     type = type == 0 ? 5 : type;
/* 22273 */     BufferedImage buffImage = new BufferedImage(262, 54, type);
/* 22274 */     Graphics2D graphImage = buffImage.createGraphics();
/* 22275 */     graphImage.drawImage(originalImage, 0, 0, 262, 54, null);
/* 22276 */     graphImage.setBackground(java.awt.Color.WHITE);
/* 22277 */     graphImage.dispose();
/* 22278 */     return buffImage;
/*       */   }
/*       */   
/*       */   public void sendMailforTechSupport(String emailId, String adminEmailID) {
/* 22282 */     SmtpEMailer mailer = null;
/* 22283 */     String transferEncoding = com.adventnet.appmanager.util.Constants.getTransferEncoding().trim();
/*       */     try {
/* 22285 */       String ccAddr = emailId + "," + FormatUtil.getString("product.talkback.mailid");
/* 22286 */       String toAddr = FormatUtil.getString("am.webclient.webmaster.emailid");
/* 22287 */       String fromAddr = emailId;
/*       */       
/* 22289 */       String licenseType = "Evaluation";
/* 22290 */       if ("F".equals(com.adventnet.appmanager.util.Constants.getUserType())) {
/* 22291 */         licenseType = "Free";
/* 22292 */       } else if ("R".equals(com.adventnet.appmanager.util.Constants.getUserType())) {
/* 22293 */         licenseType = "Registered";
/*       */       }
/*       */       
/* 22296 */       String productEdition = "Standalone";
/* 22297 */       if (EnterpriseUtil.isAdminServer()) {
/* 22298 */         productEdition = "Admin Server";
/* 22299 */       } else if (EnterpriseUtil.isManagedServer()) {
/* 22300 */         productEdition = "Managed Server";
/* 22301 */       } else if (EnterpriseUtil.isPlugin()) {
/* 22302 */         productEdition = "Plugin";
/*       */       }
/*       */       
/* 22305 */       StringBuilder os = new StringBuilder(System.getProperty("os.name"));
/* 22306 */       os.append(", ").append(System.getProperty("os.version"));
/*       */       
/* 22308 */       if (System.getProperty("sun.arch.data.model").equals("32")) {
/* 22309 */         os.append(" - 32 Bit");
/*       */       } else {
/* 22311 */         os.append(" - 64 Bit");
/*       */       }
/*       */       
/* 22314 */       String dbType = "PostgreSQL";
/* 22315 */       if ("mssql".equalsIgnoreCase(System.getProperty("am.dbserver.type"))) {
/* 22316 */         dbType = "Microsoft SQL Server";
/* 22317 */       } else if ("mysql".equalsIgnoreCase(System.getProperty("am.dbserver.type"))) {
/* 22318 */         dbType = "MySQL";
/*       */       }
/* 22320 */       String subject = FormatUtil.getString("am.webclient.techsupportmail.subject");
/* 22321 */       adminEmailID = "Admin EmailID : (" + adminEmailID + ")";
/* 22322 */       String bodyContent = FormatUtil.getString("am.webclient.techsupportmail.bodycontent", new String[] { emailId, FormatUtil.getString("product.build.number"), licenseType, productEdition, os.toString(), dbType, adminEmailID });
/* 22323 */       com.adventnet.appmanager.util.Constants.setTransferEncoding("quoted-printable");
/* 22324 */       mailer = new com.adventnet.appmanager.fault.SmtpMailer(fromAddr, toAddr, ccAddr, subject);
/* 22325 */       String returnVal = mailer.sendMessage(bodyContent, null, true, "", 1, null);
/* 22326 */       if (returnVal == null) {
/* 22327 */         AMLog.debug("Email Status : Email Id sent successfully");
/* 22328 */         com.adventnet.appmanager.util.Constants.setTransferEncoding(transferEncoding);
/* 22329 */         DBUtil.updateGlobalConfigValue("am.technicalsupportrequired", "true");
/*       */       }
/* 22331 */       mailer.close();
/*       */     }
/*       */     catch (Exception ioex)
/*       */     {
/* 22335 */       com.adventnet.appmanager.util.Constants.setTransferEncoding(transferEncoding);
/* 22336 */       AMLog.debug("Exception :" + ioex.getMessage());
/* 22337 */       registerTechnicalSupport register = new registerTechnicalSupport(emailId);
/* 22338 */       register.setName("registerTechnicalSupport-EmailID-" + emailId + "-Time-" + System.currentTimeMillis());
/* 22339 */       register.start();
/*       */     }
/*       */   }
/*       */   
/*       */   class registerTechnicalSupport extends Thread
/*       */   {
/*       */     String emailId;
/*       */     
/*       */     registerTechnicalSupport(String emailId)
/*       */     {
/* 22349 */       this.emailId = emailId;
/*       */     }
/*       */     
/*       */     public void run()
/*       */     {
/* 22354 */       String url = FormatUtil.getString("am.webclient.technicalsupport.url");
/* 22355 */       String internalUrl = FormatUtil.getString("am.webclient.technicalsupport.internalurl");
/*       */       try {
/* 22357 */         String mail_form_name = "";
/* 22358 */         String mail_form_mail = this.emailId;
/* 22359 */         String mail_form_phone = "";
/* 22360 */         String mail_form_country = "";
/* 22361 */         String mail_form_company = "";
/* 22362 */         String mail_message = "(userName)" + mail_form_name + "(emailID)" + mail_form_mail + "(tel)" + mail_form_phone + "(companyName)" + mail_form_company + "(country)" + mail_form_country;
/* 22363 */         String mail_subject = FormatUtil.getString("am.webclient.techsupportmail.subject");
/* 22364 */         String mail_nickname = FormatUtil.getString("am.webclient.mailform.nickname");
/* 22365 */         Properties props = ProxyUtil.getProxyProps();
/* 22366 */         if (!props.isEmpty())
/*       */         {
/* 22368 */           HTTPConnection.setProxyServer(props.getProperty("host"), Integer.parseInt(props.getProperty("port")));
/*       */         }
/*       */         
/* 22371 */         HTTPConnection con = new HTTPConnection(url);
/* 22372 */         con.setTimeout(20000);
/* 22373 */         NVPair[] form_data = new NVPair[3];
/* 22374 */         form_data[0] = new NVPair("subject", mail_subject);
/* 22375 */         form_data[1] = new NVPair("message", mail_message);
/* 22376 */         form_data[2] = new NVPair("nickname", mail_nickname);
/* 22377 */         HTTPResponse rsp = con.Post(internalUrl, form_data);
/* 22378 */         AMLog.debug("result of posting data is : " + rsp.getStatusCode() + ":" + rsp.getText());
/* 22379 */         if ((rsp.getStatusCode() == 200) && (rsp.getText().indexOf("WebMonitor-Email Sent") != -1)) {
/* 22380 */           DBUtil.updateGlobalConfigValue("am.technicalsupportrequired", "true");
/*       */         }
/*       */       }
/*       */       catch (Exception ext)
/*       */       {
/* 22385 */         AMLog.debug("Error in socket Connection :" + ext.getMessage());
/*       */       }
/*       */     }
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public void copyThreshAdditionToAppInstances(int resourceId, String attrName, String thresholdId, String[] criticalActions, String[] warningActions, String[] clearActions, int attribType)
/*       */     throws Exception
/*       */   {
/* 22401 */     ArrayList instancesResourceIds = DBUtil.getChildIdsFromParentChildMapper(resourceId);
/* 22402 */     int instanceAttrId = DBUtil.getAttributeId("APM-Insight-Instance", attrName);
/*       */     
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/* 22408 */     applyToSelectedMonitors(instanceAttrId, thresholdId, instancesResourceIds, null, null, null, attribType);
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public void deleteAppInstancesThresh(int appResourceId, String attrName)
/*       */     throws Exception
/*       */   {
/* 22418 */     ArrayList instancesResourceIds = DBUtil.getChildIdsFromParentChildMapper(appResourceId);
/* 22419 */     int instanceAttrId = DBUtil.getAttributeId("APM-Insight-Instance", attrName);
/* 22420 */     Statement apmStatement = null;
/*       */     try
/*       */     {
/* 22423 */       apmStatement = AMConnectionPool.getConnection().createStatement();
/* 22424 */       for (Object instanceResourceId : instancesResourceIds)
/*       */       {
/* 22426 */         String instanceResId = (String)instanceResourceId;
/* 22427 */         String query = "delete from AM_ATTRIBUTETHRESHOLDMAPPER where ID = " + instanceResId + " and ATTRIBUTE =" + instanceAttrId;
/* 22428 */         com.adventnet.appmanager.util.Constants.removeThresholdEntry(String.valueOf(instanceAttrId), String.valueOf(instanceResId));
/* 22429 */         apmStatement.addBatch(query);
/* 22430 */         AMCacheHandler.removeThresholdConfiguration(instanceResId + "_" + instanceAttrId);
/*       */         
/* 22432 */         query = "delete from AM_ATTRIBUTEACTIONMAPPER where ID = " + instanceResId + " and ATTRIBUTE =" + instanceAttrId;
/* 22433 */         apmStatement.addBatch(query);
/*       */         
/* 22435 */         query = "DELETE FROM AM_DEPENDENTMONITOR  WHERE CHILDID=" + instanceResId;
/* 22436 */         apmStatement.addBatch(query);
/* 22437 */         AMCacheHandler.removeDependentDevice(instanceResId);
/*       */         
/* 22439 */         FaultUtil.deleteAlertsForEntity(String.valueOf(instanceResId) + "_" + String.valueOf(instanceAttrId));
/*       */         
/* 22441 */         query = "delete from AM_RCAMAPPER where PARENTRESOURCEID = " + instanceResId + " and PARENT_RESOURCEATTRIBUTEMAPPERID = " + instanceAttrId;
/* 22442 */         apmStatement.addBatch(query);
/*       */         
/* 22444 */         query = "delete from AM_RCARULESMAPPER  where RESOURCEID=" + instanceResId + " and ATTRIBUTE=" + instanceAttrId;
/* 22445 */         apmStatement.addBatch(query);
/*       */       }
/* 22447 */       apmStatement.executeBatch();
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 22451 */       e.printStackTrace();
/*       */     }
/*       */     finally
/*       */     {
/* 22455 */       apmStatement.close();
/*       */     }
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */   public void copyDependencyAdditionToAppInstances(int appResourceId, int attrId, String[] attrDependencyList, int ruleValue)
/*       */     throws Exception
/*       */   {
/* 22465 */     if (attrDependencyList == null)
/*       */     {
/* 22467 */       return;
/*       */     }
/* 22469 */     Statement apmStatement = null;
/*       */     
/*       */     try
/*       */     {
/* 22473 */       ArrayList instancesResourceIds = DBUtil.getChildIdsFromParentChildMapper(appResourceId);
/*       */       
/* 22475 */       String instHealthAttrId = AMAttributesCache.getHealthId("APM-Insight-Instance");
/* 22476 */       String appHealthAttrId = AMAttributesCache.getHealthId("APM-Insight-Application");
/*       */       
/* 22478 */       apmStatement = AMConnectionPool.getConnection().createStatement();
/* 22479 */       for (Object instResIdObj : instancesResourceIds)
/*       */       {
/* 22481 */         String instResId = instResIdObj.toString();
/* 22482 */         for (String resourceAttrId : attrDependencyList)
/*       */         {
/* 22484 */           StringTokenizer token = new StringTokenizer(resourceAttrId, ":");
/* 22485 */           int dependentResourceId = Integer.parseInt(token.nextToken());
/* 22486 */           int dependentAttrId = Integer.parseInt(token.nextToken());
/*       */           
/*       */ 
/* 22489 */           String[] attrDetails = DBUtil.getAttributeDetails(dependentAttrId);
/* 22490 */           String dependentAttrName = attrDetails[3];
/* 22491 */           int similarInstanceAttrId = DBUtil.getAttributeId("APM-Insight-Instance", dependentAttrName);
/*       */           
/* 22493 */           String query = "insert into AM_RCAMAPPER (PARENTRESOURCEID, PARENT_RESOURCEATTRIBUTEMAPPERID, CHILDRESOURCEID, CHILD_RESOURCEATTRIBUTEMAPPERID) values (" + instResId + "," + instHealthAttrId + "," + instResId + "," + similarInstanceAttrId + ")";
/*       */           
/* 22495 */           apmStatement.addBatch(query);
/*       */         }
/*       */         
/* 22498 */         String query = "insert into AM_RCAMAPPER (PARENTRESOURCEID, PARENT_RESOURCEATTRIBUTEMAPPERID, CHILDRESOURCEID, CHILD_RESOURCEATTRIBUTEMAPPERID) values (" + appResourceId + "," + appHealthAttrId + "," + instResId + "," + instHealthAttrId + ")";
/*       */         
/* 22500 */         apmStatement.addBatch(query);
/*       */         
/*       */ 
/* 22503 */         query = "insert into AM_RCARULESMAPPER (RESOURCEID,ATTRIBUTE, ANYCONDITIONVALUE) values (" + instResId + "," + instHealthAttrId + "," + ruleValue + ")";
/*       */         
/* 22505 */         apmStatement.addBatch(query);
/*       */       }
/* 22507 */       apmStatement.executeBatch();
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 22511 */       e.printStackTrace();
/*       */     }
/*       */     finally
/*       */     {
/* 22515 */       apmStatement.close();
/*       */     }
/*       */   }
/*       */   
/*       */   public ActionForward it360LicenseValidation(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
/* 22520 */     if (com.adventnet.appmanager.util.Constants.isIt360)
/*       */     {
/* 22522 */       String resourceType = request.getParameter("resourceType");
/* 22523 */       String message = "";
/* 22524 */       if ((resourceType != null) && (!resourceType.trim().equals("")))
/*       */       {
/* 22526 */         message = ClientDBUtil.getLicenseViolationMessage(resourceType, "ADDITION");
/*       */       }
/* 22528 */       PrintWriter out = response.getWriter();
/* 22529 */       out.println(message);
/*       */     }
/* 22531 */     return null;
/*       */   }
/*       */   
/*       */   public ArrayList getTechniciansForRESTApi() throws Exception {
/* 22535 */     String techniciansQry = "select TECHNICIAN_NAME from SERVICEDESK_RESTAPI";
/* 22536 */     ResultSet techniciansRs = null;
/* 22537 */     StringBuilder temp = new StringBuilder();
/*       */     try
/*       */     {
/* 22540 */       techniciansRs = AMConnectionPool.executeQueryStmt(techniciansQry);
/* 22541 */       while (techniciansRs.next())
/*       */       {
/* 22543 */         temp.append(techniciansRs.getString("TECHNICIAN_NAME")).append(",");
/*       */       }
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 22548 */       e.printStackTrace();
/*       */     }
/*       */     finally
/*       */     {
/* 22552 */       AMConnectionPool.closeStatement(techniciansRs);
/*       */     }
/* 22554 */     return makeArrayList(temp.toString());
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   private void checkAndConfigureSDPCloseAction(ArrayList<String> resIdList, int attributeID, String[] criticalActions, String[] warningActions)
/*       */   {
/* 22570 */     if (!SDPIntegConfig.getInstance().isRestApiEnabled())
/*       */     {
/* 22572 */       return;
/*       */     }
/* 22574 */     ResultSet rs = null;
/*       */     try
/*       */     {
/* 22577 */       Vector<String> actionsVec = new Vector();
/*       */       
/* 22579 */       if ((criticalActions != null) && (criticalActions.length > 0))
/*       */       {
/* 22581 */         actionsVec.addAll(Arrays.asList(criticalActions));
/*       */       }
/* 22583 */       if ((warningActions != null) && (warningActions.length > 0))
/*       */       {
/* 22585 */         actionsVec.addAll(Arrays.asList(warningActions));
/*       */       }
/* 22587 */       if (!actionsVec.isEmpty())
/*       */       {
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/* 22593 */         String checkActionExistence = "select NAME from AM_ACTIONPROFILE where TYPE in (6,17) and " + com.adventnet.appmanager.reporting.ReportUtilities.getCondition("ID", actionsVec);
/* 22594 */         AMLog.debug("checkActionExistence query is :" + checkActionExistence);
/* 22595 */         rs = AMConnectionPool.executeQueryStmt(checkActionExistence);
/* 22596 */         if (rs.next())
/*       */         {
/* 22598 */           PreparedStatement actionPs = null;
/*       */           try
/*       */           {
/* 22601 */             actionPs = AMConnectionPool.getConnection().prepareStatement("insert into AM_ATTRIBUTEACTIONMAPPER(ID, ATTRIBUTE, SEVERITY, ACTIONID) values(?," + attributeID + "," + 5 + "," + (String)com.adventnet.appmanager.util.SDPIntegUtil.getDefaultCloseAction().get("actionId") + ")");
/* 22602 */             for (String resId : resIdList)
/*       */             {
/* 22604 */               actionPs.setInt(1, Integer.parseInt(resId));
/* 22605 */               actionPs.addBatch();
/*       */             }
/* 22607 */             actionPs.executeBatch();
/*       */             
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */             try
/*       */             {
/* 22617 */               actionPs.clearBatch();
/* 22618 */               actionPs.close();
/*       */             }
/*       */             catch (Exception e)
/*       */             {
/* 22622 */               e.printStackTrace();
/*       */             }
/*       */           }
/*       */           catch (java.sql.BatchUpdateException e)
/*       */           {
/* 22611 */             AMLog.debug("This exception is harmless : " + e.getMessage());
/*       */           }
/*       */           finally
/*       */           {
/*       */             try
/*       */             {
/* 22617 */               actionPs.clearBatch();
/* 22618 */               actionPs.close();
/*       */             }
/*       */             catch (Exception e)
/*       */             {
/* 22622 */               e.printStackTrace();
/*       */             }
/*       */           }
/*       */         }
/*       */       }
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 22630 */       e.printStackTrace();
/*       */     }
/*       */     finally
/*       */     {
/* 22634 */       AMConnectionPool.closeStatement(rs);
/*       */     }
/*       */   }
/*       */   
/*       */   private static com.adventnet.appmanager.server.framework.confparser.ConfMonitorParserAPI getParser()
/*       */   {
/* 22640 */     return new com.adventnet.appmanager.server.framework.confparser.ConfMonitorXMLParser();
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public void deleteMODetails(String[] resourceTypes)
/*       */   {
/* 22649 */     ResultSet rs = null;
/* 22650 */     ArrayList<String> listOfResIdsToDelete = null;
/*       */     try {
/* 22652 */       if ((resourceTypes == null) || (resourceTypes.length == 0)) {
/* 22653 */         AMLog.debug("Hardware Information: Disable: invalid resource type value."); return;
/*       */       }
/*       */       
/*       */ 
/* 22657 */       StringBuffer condition = new StringBuffer();
/* 22658 */       for (int i = 0; i < resourceTypes.length; i++) {
/* 22659 */         if (i == resourceTypes.length - 1) {
/* 22660 */           condition.append("'").append(resourceTypes[i]).append("'");
/*       */         } else {
/* 22662 */           condition.append("'").append(resourceTypes[i]).append("'").append(",");
/*       */         }
/*       */       }
/*       */       
/*       */ 
/* 22667 */       String query = "SELECT RESOURCEID from AM_ManagedObject where TYPE IN (" + condition + ")";
/* 22668 */       AMLog.debug("Hardware Information: Disable: query: " + query);
/* 22669 */       if (EnterpriseUtil.isAdminServer()) {
/* 22670 */         query = query + " AND AM_ManagedObject.RESOURCEID < " + EnterpriseUtil.RANGE;
/*       */       }
/* 22672 */       rs = AMConnectionPool.executeQueryStmt(query);
/* 22673 */       while (rs.next()) {
/* 22674 */         String id = rs.getString("RESOURCEID");
/* 22675 */         if (listOfResIdsToDelete == null) {
/* 22676 */           listOfResIdsToDelete = new ArrayList();
/*       */         }
/* 22678 */         listOfResIdsToDelete.add(id);
/*       */       }
/*       */     } catch (Exception ex) {
/* 22681 */       ex.printStackTrace();
/*       */     } finally {
/* 22683 */       AMConnectionPool.closeStatement(rs);
/*       */     }
/* 22685 */     if ((listOfResIdsToDelete == null) || (listOfResIdsToDelete.size() == 0)) {
/* 22686 */       AMLog.debug("Hardware Information: Disable: No resource exists to delete.");
/* 22687 */       return;
/*       */     }
/*       */     
/* 22690 */     Statement deldiskio = null;
/*       */     try {
/* 22692 */       AMLog.debug("Hardware Information: Disable: list of resource id's to delete  " + listOfResIdsToDelete);
/* 22693 */       deldiskio = AMConnectionPool.getConnection().createStatement();
/* 22694 */       String resIds = listOfResIdsToDelete.toString();
/* 22695 */       resIds = resIds.substring(1, resIds.length() - 1).replaceAll(", ", ",");
/* 22696 */       deldiskio.addBatch("delete from AM_ManagedObject where RESOURCEID IN (" + resIds + ")");
/* 22697 */       deldiskio.addBatch("delete from AM_PARENTCHILDMAPPER where CHILDID IN (" + resIds + ")");
/* 22698 */       deldiskio.addBatch("delete from AM_RCARULESMAPPER where RESOURCEID IN (" + resIds + ")");
/* 22699 */       deldiskio.addBatch("delete from AM_RCAMAPPER where PARENTRESOURCEID IN (" + resIds + ") OR CHILDRESOURCEID IN (" + resIds + ")");
/* 22700 */       for (int i = 0; i < listOfResIdsToDelete.size(); i++) {
/* 22701 */         String id = (String)listOfResIdsToDelete.get(i);
/* 22702 */         FaultUtil.deleteAlertsForResource(id);
/*       */       }
/* 22704 */       deldiskio.executeBatch();
/* 22705 */       EnterpriseUtil.handleDeletionInAAM((String[])listOfResIdsToDelete.toArray(new String[0])); return;
/*       */     } catch (ClassCastException cc) {
/* 22707 */       cc.printStackTrace();
/*       */     } catch (Exception ex) {
/* 22709 */       ex.printStackTrace();
/*       */     } finally {
/*       */       try {
/* 22712 */         if (deldiskio != null) {
/* 22713 */           deldiskio.close();
/*       */         }
/*       */       } catch (Exception ee) {
/* 22716 */         ee.printStackTrace();
/*       */       }
/*       */     }
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public ActionForward updateMasDomainName(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 22737 */     String returnMessge = "FAILED";
/*       */     try {
/* 22739 */       response.setContentType("text/plain;charset=UTF-8");
/* 22740 */       String oldMasGroupName = request.getParameter("oldMasGroupName");
/* 22741 */       String newMasGroupName = request.getParameter("newMasGroupName");
/* 22742 */       oldMasGroupName = Translate.decode(oldMasGroupName);
/* 22743 */       newMasGroupName = Translate.decode(newMasGroupName);
/* 22744 */       String query = "UPDATE AM_MAS_SERVER SET MASGROUPNAME='" + newMasGroupName + "' WHERE MASGROUPNAME='" + oldMasGroupName + "'";
/* 22745 */       int updateResult = AMConnectionPool.executeUpdateStmt(query);
/* 22746 */       if (updateResult != 0) {
/* 22747 */         returnMessge = "SUCCESS";
/* 22748 */       } else if (updateResult == 0) {
/* 22749 */         returnMessge = "NOTEXIST";
/*       */       }
/* 22751 */       PrintWriter out = response.getWriter();
/* 22752 */       out.print(returnMessge);
/* 22753 */       out.flush();
/*       */     }
/*       */     catch (Exception ex) {
/* 22756 */       ex.printStackTrace();
/*       */     }
/* 22758 */     return null;
/*       */   }
/*       */   
/*       */   public ActionForward showLicCustomReports(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
/*       */     throws Exception
/*       */   {
/* 22764 */     ActionMessages messages = new ActionMessages();
/* 22765 */     AMActionForm amform = (AMActionForm)form;
/* 22766 */     AMConnectionPool pool = AMConnectionPool.getInstance();
/* 22767 */     ResultSet rs = null;
/* 22768 */     ArrayList monthList = new ArrayList();
/* 22769 */     ArrayList yearList = new ArrayList();
/*       */     
/*       */     try
/*       */     {
/* 22773 */       String monthQuery = "select distinct MONTH from IT360MONTHLYCOLLECTION";
/* 22774 */       rs = AMConnectionPool.executeQueryStmt(monthQuery);
/* 22775 */       while (rs.next())
/*       */       {
/* 22777 */         String month = rs.getString("MONTH");
/* 22778 */         monthList.add(month);
/*       */       }
/* 22780 */       String yearQuery = "select distinct YEAR from IT360MONTHLYCOLLECTION";
/* 22781 */       rs = AMConnectionPool.executeQueryStmt(yearQuery);
/* 22782 */       while (rs.next())
/*       */       {
/* 22784 */         String year = rs.getString("YEAR");
/* 22785 */         yearList.add(year);
/*       */       }
/*       */     }
/*       */     catch (Exception ee)
/*       */     {
/* 22790 */       ee.printStackTrace();
/*       */     }
/*       */     finally
/*       */     {
/* 22794 */       AMConnectionPool.closeStatement(rs);
/*       */     }
/*       */     
/*       */ 
/* 22798 */     String[] months = { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" };
/* 22799 */     List list = Arrays.asList(months);
/* 22800 */     int[] numbers = new int[monthList.size()];
/* 22801 */     for (int i = 0; i < monthList.size(); i++)
/*       */     {
/* 22803 */       String month = (String)monthList.get(i);
/* 22804 */       int monthInNumber = list.indexOf(month);
/* 22805 */       numbers[i] = monthInNumber;
/*       */     }
/* 22807 */     bubbleSortInAscendingOrder(numbers);
/*       */     
/* 22809 */     ArrayList aList = new ArrayList();
/* 22810 */     for (int j = 0; j < numbers.length; j++)
/*       */     {
/* 22812 */       int num = numbers[j];
/* 22813 */       aList.add(months[num]);
/*       */     }
/*       */     
/* 22816 */     request.setAttribute("monthsList", aList);
/* 22817 */     request.setAttribute("yearsList", yearList);
/* 22818 */     return new ActionForward("/it360/jsp/LicCustomReports.jsp");
/*       */   }
/*       */   
/*       */ 
/*       */   public static void bubbleSortInAscendingOrder(int[] numbers)
/*       */   {
/* 22824 */     for (int i = 0; i < numbers.length; i++)
/*       */     {
/* 22826 */       for (int j = 1; j < numbers.length - i; j++)
/*       */       {
/*       */ 
/* 22829 */         if (numbers[(j - 1)] > numbers[j])
/*       */         {
/* 22831 */           int temp = numbers[(j - 1)];
/* 22832 */           numbers[(j - 1)] = numbers[j];
/* 22833 */           numbers[j] = temp;
/*       */         }
/*       */       }
/*       */     }
/*       */   }
/*       */   
/*       */   public ActionForward showLicConfiguration(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
/*       */   {
/* 22841 */     ActionMessages messages = new ActionMessages();
/* 22842 */     AMActionForm amform = (AMActionForm)form;
/* 22843 */     AMConnectionPool pool = AMConnectionPool.getInstance();
/*       */     
/*       */ 
/*       */     try
/*       */     {
/* 22848 */       String fromAddress = getValueFromGlobalConfig("FROM_ADDRESS");
/* 22849 */       String toAddress = getValueFromGlobalConfig("TO_ADDRESS");
/* 22850 */       AMLog.debug("fromAddress " + fromAddress + " toAddress " + toAddress);
/*       */       
/* 22852 */       if ((fromAddress != null) && (toAddress != null))
/*       */       {
/* 22854 */         amform.setLicFromAddress(fromAddress);
/* 22855 */         amform.setLicToAddress(toAddress);
/*       */       }
/*       */       else
/*       */       {
/* 22859 */         fromAddress = "";
/* 22860 */         toAddress = "";
/*       */       }
/* 22862 */       request.setAttribute("licFromAddress", fromAddress);
/* 22863 */       request.setAttribute("licToAddress", toAddress);
/*       */     }
/*       */     catch (Exception ee)
/*       */     {
/* 22867 */       ee.printStackTrace();
/*       */     }
/* 22869 */     return new ActionForward("/it360/jsp/LicUsageConfig.jsp");
/*       */   }
/*       */   
/*       */   public ActionForward updateLicConfiguration(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
/*       */   {
/* 22874 */     ActionMessages messages = new ActionMessages();
/* 22875 */     AMActionForm amform = (AMActionForm)form;
/* 22876 */     AMConnectionPool pool = AMConnectionPool.getInstance();
/*       */     
/*       */     try
/*       */     {
/* 22880 */       updateLicUsageGlobalValues("FROM_ADDRESS", amform.getLicFromAddress());
/* 22881 */       updateLicUsageGlobalValues("TO_ADDRESS", amform.getLicToAddress());
/*       */     }
/*       */     catch (Exception ee)
/*       */     {
/* 22885 */       ee.printStackTrace();
/*       */     }
/* 22887 */     showLicConfiguration(mapping, form, request, response);
/* 22888 */     request.setAttribute("sucess", FormatUtil.getString("am.webclient.dbretention.sucess.text"));
/*       */     
/* 22890 */     return new ActionForward("/it360/jsp/LicUsageConfig.jsp");
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   public static void updateLicUsageGlobalValues(String key, String value)
/*       */   {
/* 22903 */     ResultSet rs = null;
/*       */     try
/*       */     {
/* 22906 */       String selectQuery = "select * from AM_GLOBALCONFIG where NAME='" + key + "'";
/* 22907 */       rs = AMConnectionPool.executeQueryStmt(selectQuery);
/* 22908 */       if (rs.next())
/*       */       {
/* 22910 */         String updateQuery = "update AM_GLOBALCONFIG set VALUE ='" + value + "' where NAME='" + key + "'";
/* 22911 */         AMConnectionPool.executeUpdateStmt(updateQuery);
/*       */       }
/*       */       else
/*       */       {
/* 22915 */         String insertQuery = "insert into AM_GLOBALCONFIG (NAME, VALUE) values ('" + key + "','" + value + "')";
/* 22916 */         AMConnectionPool.executeUpdateStmt(insertQuery);
/*       */       }
/*       */     }
/*       */     catch (Exception ex)
/*       */     {
/* 22921 */       ex.printStackTrace();
/*       */     }
/*       */     finally
/*       */     {
/* 22925 */       AMConnectionPool.closeStatement(rs);
/*       */     }
/*       */   }
/*       */   
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */ 
/*       */   private static String getValueFromGlobalConfig(String key)
/*       */   {
/* 22938 */     ResultSet rs = null;
/* 22939 */     String value = null;
/*       */     
/*       */     try
/*       */     {
/* 22943 */       rs = AMConnectionPool.executeQueryStmt("select VALUE from AM_GLOBALCONFIG where NAME='" + key + "'");
/* 22944 */       if (rs.next())
/*       */       {
/* 22946 */         value = rs.getString("VALUE");
/*       */       }
/*       */     }
/*       */     catch (Exception ex)
/*       */     {
/* 22951 */       ex.printStackTrace();
/*       */     }
/*       */     finally
/*       */     {
/* 22955 */       AMConnectionPool.closeStatement(rs);
/*       */     }
/* 22957 */     return value;
/*       */   }
/*       */   
/*       */   public HashMap getCredListForFileDirAndScriptMon(String type) {
/* 22961 */     HashMap finalCredMap = new HashMap();
/* 22962 */     ResultSet rs = null;
/*       */     try {
/* 22964 */       String query = "select CREDENTIALID,NAME,TYPE from CREDENTIALMANAGER where TYPE IN ('SSH','TELNET','WMI')";
/* 22965 */       if (type.equals("Script Monitor")) {
/* 22966 */         query = "select CREDENTIALID,NAME,TYPE from CREDENTIALMANAGER where TYPE IN ('SSH','TELNET')";
/*       */       }
/* 22968 */       rs = AMConnectionPool.executeQueryStmt(query);
/* 22969 */       while (rs.next())
/*       */       {
/* 22971 */         type = rs.getString("TYPE");
/* 22972 */         HashMap modeDetails = new HashMap();
/* 22973 */         if (finalCredMap.containsKey(type)) {
/* 22974 */           modeDetails = (HashMap)finalCredMap.get(type);
/*       */         }
/*       */         
/* 22977 */         String credName = this.credUtil.escapeUnicodeChars(rs.getString("NAME"));
/* 22978 */         modeDetails.put(rs.getString("CREDENTIALID"), credName);
/*       */         
/* 22980 */         finalCredMap.put(type, modeDetails);
/*       */       }
/*       */     } catch (Exception e) {
/* 22983 */       e.printStackTrace();
/*       */     }
/*       */     finally {
/* 22986 */       if (rs != null) {
/* 22987 */         AMConnectionPool.closeStatement(rs);
/*       */       }
/*       */     }
/* 22990 */     return finalCredMap;
/*       */   }
/*       */   
/*       */   private String getGlobalDisableDataCollectionData(String monitorType, String compName) {
/* 22994 */     String status = "";
/* 22995 */     ResultSet rs = null;
/*       */     try
/*       */     {
/* 22998 */       String query = " select STATUS from AM_GLOBAL_DISABLECOLLECTION where MONITORTYPE ='" + monitorType + "' and COMPONENTNAME ='" + compName + "'";
/* 22999 */       AMLog.audit("getGlobalDisableDataCollectionData :: query :: " + query);
/* 23000 */       rs = AMConnectionPool.executeQueryStmt(query);
/* 23001 */       if (rs.next())
/*       */       {
/* 23003 */         status = rs.getString("STATUS");
/*       */       }
/*       */     }
/*       */     catch (Exception e)
/*       */     {
/* 23008 */       e.printStackTrace();
/*       */     }
/*       */     finally {
/* 23011 */       AMConnectionPool.closeStatement(rs);
/*       */     }
/* 23013 */     return status;
/*       */   }
/*       */ }


/* Location:              C:\Program Files (x86)\ManageEngine\AppManager12\working\WEB-INF\lib\AdventNetAppManagerWebClient.jar!\com\adventnet\appmanager\struts\actions\AdminActions.class
 * Java compiler version: 6 (50.0)
 * JD-Core Version:       0.7.1
 */