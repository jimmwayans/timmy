/*      */ package sun.awt.X11;
/*      */ 
/*      */ import java.awt.AWTEvent;
/*      */ import java.awt.AWTKeyStroke;
/*      */ import java.awt.Color;
/*      */ import java.awt.Component;
/*      */ import java.awt.Container;
/*      */ import java.awt.Cursor;
/*      */ import java.awt.Font;
/*      */ import java.awt.FontMetrics;
/*      */ import java.awt.Graphics;
/*      */ import java.awt.GraphicsConfiguration;
/*      */ import java.awt.Point;
/*      */ import java.awt.Rectangle;
/*      */ import java.awt.SystemColor;
/*      */ import java.awt.Toolkit;
/*      */ import java.awt.event.ComponentEvent;
/*      */ import java.awt.event.InputEvent;
/*      */ import java.awt.event.KeyEvent;
/*      */ import java.awt.event.MouseEvent;
/*      */ import java.awt.event.MouseWheelEvent;
/*      */ import java.awt.event.PaintEvent;
/*      */ import java.awt.image.ColorModel;
/*      */ import java.awt.peer.ComponentPeer;
/*      */ import java.lang.ref.WeakReference;
/*      */ import java.lang.reflect.Method;
/*      */ import sun.awt.AWTAccessor;
/*      */ import sun.awt.ExtendedKeyCodes;
/*      */ import sun.awt.PaintEventDispatcher;
/*      */ import sun.awt.PeerEvent;
/*      */ import sun.awt.SunToolkit;
/*      */ import sun.awt.X11ComponentPeer;
/*      */ import sun.awt.X11GraphicsConfig;
/*      */ import sun.java2d.SunGraphics2D;
/*      */ import sun.java2d.SurfaceData;
/*      */ import sun.util.logging.PlatformLogger;
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ class XWindow
/*      */   extends XBaseWindow
/*      */   implements X11ComponentPeer
/*      */ {
/*   47 */   private static PlatformLogger log = PlatformLogger.getLogger("sun.awt.X11.XWindow");
/*   48 */   private static PlatformLogger insLog = PlatformLogger.getLogger("sun.awt.X11.insets.XWindow");
/*   49 */   private static PlatformLogger eventLog = PlatformLogger.getLogger("sun.awt.X11.event.XWindow");
/*   50 */   private static final PlatformLogger focusLog = PlatformLogger.getLogger("sun.awt.X11.focus.XWindow");
/*   51 */   private static PlatformLogger keyEventLog = PlatformLogger.getLogger("sun.awt.X11.kye.XWindow");
/*      */ 
/*      */ 
/*      */   
/*      */   private static final int AWT_MULTICLICK_SMUDGE = 4;
/*      */ 
/*      */   
/*   58 */   static int lastX = 0; static int lastY = 0;
/*   59 */   static long lastTime = 0L;
/*   60 */   static long lastButton = 0L;
/*   61 */   static WeakReference lastWindowRef = null;
/*   62 */   static int clickCount = 0;
/*      */ 
/*      */   
/*   65 */   int oldWidth = -1;
/*   66 */   int oldHeight = -1;
/*      */   
/*      */   protected PropMwmHints mwm_hints;
/*      */   
/*      */   protected static XAtom wm_protocols;
/*      */   
/*      */   protected static XAtom wm_delete_window;
/*      */   
/*      */   protected static XAtom wm_take_focus;
/*      */   
/*      */   private boolean stateChanged;
/*      */   
/*      */   private int savedState;
/*      */   
/*      */   XWindowAttributesData winAttr;
/*      */   
/*      */   protected X11GraphicsConfig graphicsConfig;
/*      */   protected AwtGraphicsConfigData graphicsConfigData;
/*      */   private boolean reparented;
/*      */   XWindow parent;
/*      */   Component target;
/*   87 */   private static int JAWT_LOCK_ERROR = 1;
/*   88 */   private static int JAWT_LOCK_CLIP_CHANGED = 2;
/*   89 */   private static int JAWT_LOCK_BOUNDS_CHANGED = 4;
/*   90 */   private static int JAWT_LOCK_SURFACE_CHANGED = 8;
/*   91 */   private int drawState = JAWT_LOCK_CLIP_CHANGED | JAWT_LOCK_BOUNDS_CHANGED | JAWT_LOCK_SURFACE_CHANGED;
/*      */ 
/*      */   
/*      */   public static final String TARGET = "target";
/*      */   
/*      */   public static final String REPARENTED = "reparented";
/*      */   
/*      */   SurfaceData surfaceData;
/*      */   
/*      */   XRepaintArea paintArea;
/*      */   
/*      */   private static Font defaultFont;
/*      */ 
/*      */   
/*      */   static synchronized Font getDefaultFont() {
/*  106 */     if (null == defaultFont) {
/*  107 */       defaultFont = new Font("Dialog", 0, 12);
/*      */     }
/*  109 */     return defaultFont;
/*      */   }
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */   
/*  119 */   private int mouseButtonClickAllowed = 0;
/*      */   
/*      */   static Method m_sendMessage;
/*      */   
/*      */   Color backgroundColor;
/*      */   private boolean mouseAboveMe;
/*      */   private boolean fullScreenExclusiveModeState;
/*      */   
/*      */   static {
/*  128 */     initIDs();
/*      */   }
/*      */   
/*      */   XWindow(XCreateWindowParams paramXCreateWindowParams) {
/*  132 */     super(paramXCreateWindowParams);
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */ 
/*      */     
/* 1494 */     this.fullScreenExclusiveModeState = false; } XWindow(long paramLong, Rectangle paramRectangle) { super(new XCreateWindowParams(new Object[] { "bounds", paramRectangle, "parent window", Long.valueOf(paramLong) })); this.fullScreenExclusiveModeState = false; } XWindow(Component paramComponent, long paramLong, Rectangle paramRectangle) { super(new XCreateWindowParams(new Object[] { "bounds", paramRectangle, "parent window", Long.valueOf(paramLong), "target", paramComponent })); this.fullScreenExclusiveModeState = false; } XWindow(Component paramComponent, long paramLong) { this(paramComponent, paramLong, new Rectangle(paramComponent.getBounds())); } XWindow(Component paramComponent) { this(paramComponent, (paramComponent.getParent() == null) ? 0L : getParentWindowID(paramComponent), new Rectangle(paramComponent.getBounds())); } XWindow(Object paramObject) { this((Component)null, 0L, (Rectangle)null); } protected void initGraphicsConfiguration() { this.graphicsConfig = (X11GraphicsConfig)this.target.getGraphicsConfiguration(); this.graphicsConfigData = new AwtGraphicsConfigData(this.graphicsConfig.getAData()); } void preInit(XCreateWindowParams paramXCreateWindowParams) { super.preInit(paramXCreateWindowParams); this.reparented = Boolean.TRUE.equals(paramXCreateWindowParams.get("reparented")); this.target = (Component)paramXCreateWindowParams.get("target"); initGraphicsConfiguration(); AwtGraphicsConfigData awtGraphicsConfigData = getGraphicsConfigurationData(); X11GraphicsConfig x11GraphicsConfig = (X11GraphicsConfig)getGraphicsConfiguration(); XVisualInfo xVisualInfo = awtGraphicsConfigData.get_awt_visInfo(); paramXCreateWindowParams.putIfNull("event mask", 2269311L); if (this.target != null) { paramXCreateWindowParams.putIfNull("bounds", new Rectangle(this.target.getBounds())); } else { paramXCreateWindowParams.putIfNull("bounds", new Rectangle(0, 0, 1, 1)); }  paramXCreateWindowParams.putIfNull("border pixel", Long.valueOf(0L)); getColorModel(); paramXCreateWindowParams.putIfNull("color map", awtGraphicsConfigData.get_awt_cmap()); paramXCreateWindowParams.putIfNull("visual depth", awtGraphicsConfigData.get_awt_depth()); paramXCreateWindowParams.putIfNull("visual class", Integer.valueOf(1)); paramXCreateWindowParams.putIfNull("visual", xVisualInfo.get_visual()); paramXCreateWindowParams.putIfNull("value mask", 10248L); Long long_ = (Long)paramXCreateWindowParams.get("parent window"); if (long_ == null || long_.longValue() == 0L) { XToolkit.awtLock(); try { int i = xVisualInfo.get_screen(); if (i != -1) { paramXCreateWindowParams.add("parent window", XlibWrapper.RootWindow(XToolkit.getDisplay(), i)); } else { paramXCreateWindowParams.add("parent window", XToolkit.getDefaultRootWindow()); }  } finally { XToolkit.awtUnlock(); }  }  this.paintArea = new XRepaintArea(); if (this.target != null) this.parent = getParentXWindowObject(this.target.getParent());  paramXCreateWindowParams.putIfNull("backing store", XToolkit.getBackingStoreType()); XToolkit.awtLock(); try { if (wm_protocols == null) { wm_protocols = XAtom.get("WM_PROTOCOLS"); wm_delete_window = XAtom.get("WM_DELETE_WINDOW"); wm_take_focus = XAtom.get("WM_TAKE_FOCUS"); }  } finally { XToolkit.awtUnlock(); }  this.winAttr = new XWindowAttributesData(); this.savedState = 0; } void postInit(XCreateWindowParams paramXCreateWindowParams) { super.postInit(paramXCreateWindowParams); setWMClass(getWMClass()); this.surfaceData = this.graphicsConfig.createSurfaceData(this); Color color; if (this.target != null && (color = this.target.getBackground()) != null) xSetBackground(color);  } public GraphicsConfiguration getGraphicsConfiguration() { if (this.graphicsConfig == null) initGraphicsConfiguration();  return (GraphicsConfiguration)this.graphicsConfig; } public AwtGraphicsConfigData getGraphicsConfigurationData() { if (this.graphicsConfigData == null) initGraphicsConfiguration();  return this.graphicsConfigData; } protected String[] getWMClass() { return new String[] { XToolkit.getCorrectXIDString(getClass().getName()), XToolkit.getAWTAppClassName() }; } void setReparented(boolean paramBoolean) { this.reparented = paramBoolean; } boolean isReparented() { return this.reparented; } static long getParentWindowID(Component paramComponent) { ComponentPeer componentPeer = paramComponent.getParent().getPeer(); Container container = paramComponent.getParent(); while (!(componentPeer instanceof XWindow)) { container = container.getParent(); componentPeer = container.getPeer(); }  if (componentPeer != null && componentPeer instanceof XWindow) return ((XWindow)componentPeer).getContentWindow();  return 0L; } static XWindow getParentXWindowObject(Component paramComponent) { if (paramComponent == null) return null;  Container container = paramComponent.getParent(); if (container == null) return null;  ComponentPeer componentPeer = container.getPeer(); if (componentPeer == null) return null;  while (componentPeer != null && !(componentPeer instanceof XWindow)) { container = container.getParent(); componentPeer = container.getPeer(); }  if (componentPeer != null && componentPeer instanceof XWindow) return (XWindow)componentPeer;  return null; } boolean isParentOf(XWindow paramXWindow) { if (!(this.target instanceof Container) || paramXWindow == null || paramXWindow.getTarget() == null) return false;  Container container = AWTAccessor.getComponentAccessor().getParent(paramXWindow.target); while (container != null && container != this.target) container = AWTAccessor.getComponentAccessor().getParent(container);  return (container == this.target); } public Object getTarget() { return this.target; } public Component getEventSource() { return this.target; } public ColorModel getColorModel(int paramInt) { return this.graphicsConfig.getColorModel(paramInt); } public ColorModel getColorModel() { if (this.graphicsConfig != null) return this.graphicsConfig.getColorModel();  return XToolkit.getStaticColorModel(); } Graphics getGraphics(SurfaceData paramSurfaceData, Color paramColor1, Color paramColor2, Font paramFont) { if (paramSurfaceData == null) return null;  Component component = this.target; Color color1 = paramColor2; if (color1 == null) color1 = SystemColor.window;  Color color2 = paramColor1; if (color2 == null) color2 = SystemColor.windowText;  Font font = paramFont; if (font == null) font = getDefaultFont();  return new SunGraphics2D(paramSurfaceData, color2, color1, font); } public Graphics getGraphics() { return getGraphics(this.surfaceData, this.target.getForeground(), this.target.getBackground(), this.target.getFont()); } public FontMetrics getFontMetrics(Font paramFont) { return Toolkit.getDefaultToolkit().getFontMetrics(paramFont); } public Rectangle getTargetBounds() { return this.target.getBounds(); } boolean prePostEvent(AWTEvent paramAWTEvent) { return false; } static void sendEvent(final AWTEvent e) { SunToolkit.setSystemGenerated(e); PeerEvent peerEvent = new PeerEvent(Toolkit.getDefaultToolkit(), new Runnable() { public void run() { AWTAccessor.getAWTEventAccessor().setPosted(e); ((Component)e.getSource()).dispatchEvent(e); } }, 2L); if (focusLog.isLoggable(PlatformLogger.Level.FINER) && e instanceof java.awt.event.FocusEvent) focusLog.finer("Sending " + e);  XToolkit.postEvent(XToolkit.targetToAppContext(e.getSource()), peerEvent); } void postEvent(AWTEvent paramAWTEvent) { XToolkit.postEvent(XToolkit.targetToAppContext(paramAWTEvent.getSource()), paramAWTEvent); } XWindow(long paramLong) { super(new XCreateWindowParams(new Object[] { "parent window", Long.valueOf(paramLong), "reparented", Boolean.TRUE, "embedded", Boolean.TRUE })); this.fullScreenExclusiveModeState = false; } static void postEventStatic(AWTEvent paramAWTEvent) { XToolkit.postEvent(XToolkit.targetToAppContext(paramAWTEvent.getSource()), paramAWTEvent); } public void postEventToEventQueue(AWTEvent paramAWTEvent) { if (!prePostEvent(paramAWTEvent)) postEvent(paramAWTEvent);  } protected boolean doEraseBackground() { return true; } public final void xSetBackground(Color paramColor) { XToolkit.awtLock(); try { winBackground(paramColor); if (!doEraseBackground()) return;  int i = this.surfaceData.pixelFor(paramColor.getRGB()); XlibWrapper.XSetWindowBackground(XToolkit.getDisplay(), getContentWindow(), i); XlibWrapper.XClearWindow(XToolkit.getDisplay(), getContentWindow()); } finally { XToolkit.awtUnlock(); }  } public void setBackground(Color paramColor) { xSetBackground(paramColor); } void winBackground(Color paramColor) { this.backgroundColor = paramColor; } public Color getWinBackground() { Color color = null; if (this.backgroundColor != null) { color = this.backgroundColor; } else if (this.parent != null) { color = this.parent.getWinBackground(); }  if (color instanceof SystemColor) color = new Color(color.getRGB());  return color; } public boolean isEmbedded() { return this.embedded; } public final void repaint(int paramInt1, int paramInt2, int paramInt3, int paramInt4) { if (!isVisible() || getWidth() == 0 || getHeight() == 0) return;  Graphics graphics = getGraphics(); if (graphics != null) try { graphics.setClip(paramInt1, paramInt2, paramInt3, paramInt4); if (SunToolkit.isDispatchThreadForAppContext(getTarget())) { paint(graphics); } else { paintPeer(graphics); postPaintEvent(this.target, paramInt1, paramInt2, paramInt3, paramInt4); }  } finally { graphics.dispose(); }   } void repaint() { repaint(0, 0, getWidth(), getHeight()); } public void paint(Graphics paramGraphics) { paintPeer(paramGraphics); } void paintPeer(Graphics paramGraphics) {} protected void flush() { XToolkit.awtLock(); try { XlibWrapper.XFlush(XToolkit.getDisplay()); } finally { XToolkit.awtUnlock(); }  } public void popup(int paramInt1, int paramInt2, int paramInt3, int paramInt4) { xSetBounds(paramInt1, paramInt2, paramInt3, paramInt4); } public void handleExposeEvent(XEvent paramXEvent) { super.handleExposeEvent(paramXEvent); XExposeEvent xExposeEvent = paramXEvent.get_xexpose(); if (isEventDisabled(paramXEvent)) return;  int i = xExposeEvent.get_x(); int j = xExposeEvent.get_y(); int k = xExposeEvent.get_width(); int m = xExposeEvent.get_height(); Component component = getEventSource(); AWTAccessor.ComponentAccessor componentAccessor = AWTAccessor.getComponentAccessor(); if (!componentAccessor.getIgnoreRepaint(component) && componentAccessor.getWidth(component) != 0 && componentAccessor.getHeight(component) != 0) postPaintEvent(component, i, j, k, m);  } public void postPaintEvent(Component paramComponent, int paramInt1, int paramInt2, int paramInt3, int paramInt4) { PaintEvent paintEvent = PaintEventDispatcher.getPaintEventDispatcher().createPaintEvent(paramComponent, paramInt1, paramInt2, paramInt3, paramInt4); if (paintEvent != null) postEventToEventQueue(paintEvent);  } static int getModifiers(int paramInt1, int paramInt2, int paramInt3) { int i = 0; if (((((paramInt1 & 0x1) != 0) ? 1 : 0) ^ ((paramInt3 == 16) ? 1 : 0)) != 0) i |= 0x40;  if (((((paramInt1 & 0x4) != 0) ? 1 : 0) ^ ((paramInt3 == 17) ? 1 : 0)) != 0) i |= 0x80;  if (((((paramInt1 & XToolkit.metaMask) != 0) ? 1 : 0) ^ ((paramInt3 == 157) ? 1 : 0)) != 0) i |= 0x100;  if (((((paramInt1 & XToolkit.altMask) != 0) ? 1 : 0) ^ ((paramInt3 == 18) ? 1 : 0)) != 0) i |= 0x200;  if (((((paramInt1 & XToolkit.modeSwitchMask) != 0) ? 1 : 0) ^ ((paramInt3 == 65406) ? 1 : 0)) != 0) i |= 0x2000;  for (byte b = 0; b < XConstants.buttons.length; b++) { if ((((paramInt1 & XlibUtil.getButtonMask(b + 1)) != 0) ? true : false) != ((paramInt2 == XConstants.buttons[b]) ? true : false)) if (!isWheel(XConstants.buttons[b])) i |= InputEvent.getMaskForButton(b + 1);   }  return i; } static boolean isWheel(int paramInt) { return (paramInt == XConstants.buttons[3] || paramInt == XConstants.buttons[4]); } static int getXModifiers(AWTKeyStroke paramAWTKeyStroke) { int i = paramAWTKeyStroke.getModifiers(); int j = 0; if ((i & 0x41) != 0) j |= 0x1;  if ((i & 0x82) != 0) j |= 0x4;  if ((i & 0x208) != 0) j |= XToolkit.altMask;  if ((i & 0x104) != 0) j |= XToolkit.metaMask;  if ((i & 0x2020) != 0) j |= XToolkit.modeSwitchMask;  return j; } static int getMouseMovementSmudge() { return 4; } public void handleButtonPressRelease(XEvent paramXEvent) { super.handleButtonPressRelease(paramXEvent); XButtonEvent xButtonEvent = paramXEvent.get_xbutton(); if (isEventDisabled(paramXEvent)) return;  if (eventLog.isLoggable(PlatformLogger.Level.FINE)) eventLog.fine(xButtonEvent.toString());  boolean bool = false; int j = 0; int k = xButtonEvent.get_button(); if (k > 20) return;  int m = paramXEvent.get_type(); long l1 = xButtonEvent.get_time(); long l2 = XToolkit.nowMillisUTC_offset(l1); int n = xButtonEvent.get_x(); int i1 = xButtonEvent.get_y(); if (paramXEvent.get_xany().get_window() != this.window) { Point point = toLocal(xButtonEvent.get_x_root(), xButtonEvent.get_y_root()); n = point.x; i1 = point.y; }  if (m == 4) { this.mouseButtonClickAllowed |= XlibUtil.getButtonMask(k); XWindow xWindow = (lastWindowRef != null) ? lastWindowRef.get() : null; if (eventLog.isLoggable(PlatformLogger.Level.FINEST)) eventLog.finest("lastWindow = " + xWindow + ", lastButton " + lastButton + ", lastTime " + lastTime + ", multiClickTime " + XToolkit.getMultiClickTime());  if (xWindow == this && lastButton == k && l1 - lastTime < XToolkit.getMultiClickTime()) { clickCount++; } else { clickCount = 1; lastWindowRef = new WeakReference<>(this); lastButton = k; lastX = n; lastY = i1; }  lastTime = l1; bool = (k == 3) ? true : false; }  j = XConstants.buttons[k - 1]; if (j > XConstants.buttons[4] && !Toolkit.getDefaultToolkit().areExtraMouseButtonsEnabled()) return;  if (j > XConstants.buttons[4]) j -= 2;  int i = getModifiers(xButtonEvent.get_state(), j, 0); if (!isWheel(k)) { MouseEvent mouseEvent = new MouseEvent(getEventSource(), (m == 4) ? 501 : 502, l2, i, n, i1, xButtonEvent.get_x_root(), xButtonEvent.get_y_root(), clickCount, bool, j); postEventToEventQueue(mouseEvent); if (m == 5 && (this.mouseButtonClickAllowed & XlibUtil.getButtonMask(k)) != 0) postEventToEventQueue(mouseEvent = new MouseEvent(getEventSource(), 500, l2, i, n, i1, xButtonEvent.get_x_root(), xButtonEvent.get_y_root(), clickCount, false, j));  } else if (paramXEvent.get_type() == 4) { MouseWheelEvent mouseWheelEvent = new MouseWheelEvent(getEventSource(), 507, l2, i, n, i1, xButtonEvent.get_x_root(), xButtonEvent.get_y_root(), 1, false, 0, 3, (j == 4) ? -1 : 1); postEventToEventQueue(mouseWheelEvent); }  if (m == 5) this.mouseButtonClickAllowed &= XlibUtil.getButtonMask(k) ^ 0xFFFFFFFF;  } public void handleMotionNotify(XEvent paramXEvent) { super.handleMotionNotify(paramXEvent); XMotionEvent xMotionEvent = paramXEvent.get_xmotion(); if (isEventDisabled(paramXEvent)) return;  int i = 0; int j = XToolkit.getNumberOfButtonsForMask(); byte b; for (b = 0; b < j; b++) { if (b != 4 && b != 5) i |= xMotionEvent.get_state() & XlibUtil.getButtonMask(b + 1);  }  b = (i != 0) ? 1 : 0; char c = Character.MIN_VALUE; if (b != 0) { c = 'Ǻ'; } else { c = 'Ƿ'; }  int k = xMotionEvent.get_x(); int m = xMotionEvent.get_y(); XWindow xWindow = (lastWindowRef != null) ? lastWindowRef.get() : null; if (xWindow != this || xMotionEvent.get_time() - lastTime >= XToolkit.getMultiClickTime() || Math.abs(lastX - k) >= 4 || Math.abs(lastY - m) >= 4) { clickCount = 0; lastWindowRef = null; this.mouseButtonClickAllowed = 0; lastTime = 0L; lastX = 0; lastY = 0; }  long l = XToolkit.nowMillisUTC_offset(xMotionEvent.get_time()); int n = getModifiers(xMotionEvent.get_state(), 0, 0); boolean bool = false; Component component = getEventSource(); if (xMotionEvent.get_window() != this.window) { Point point = toLocal(xMotionEvent.get_x_root(), xMotionEvent.get_y_root()); k = point.x; m = point.y; }  if ((b != 0 && clickCount == 0) || b == 0) { MouseEvent mouseEvent = new MouseEvent(component, c, l, n, k, m, xMotionEvent.get_x_root(), xMotionEvent.get_y_root(), clickCount, bool, 0); postEventToEventQueue(mouseEvent); }  } XWindow() { this.fullScreenExclusiveModeState = false; } public boolean isMouseAbove() { synchronized (getStateLock()) { return this.mouseAboveMe; }  } protected void setMouseAbove(boolean paramBoolean) { synchronized (getStateLock()) { this.mouseAboveMe = paramBoolean; }  } protected void enterNotify(long paramLong) { if (paramLong == getWindow()) setMouseAbove(true);  } protected void leaveNotify(long paramLong) { if (paramLong == getWindow()) setMouseAbove(false);  } public void handleXCrossingEvent(XEvent paramXEvent) { super.handleXCrossingEvent(paramXEvent); XCrossingEvent xCrossingEvent = paramXEvent.get_xcrossing(); if (eventLog.isLoggable(PlatformLogger.Level.FINEST)) eventLog.finest(xCrossingEvent.toString());  if (xCrossingEvent.get_type() == 7) { enterNotify(xCrossingEvent.get_window()); } else { leaveNotify(xCrossingEvent.get_window()); }  XWindowPeer xWindowPeer = getToplevelXWindow(); if (xWindowPeer != null && !xWindowPeer.isModalBlocked() && xCrossingEvent.get_mode() != 0) { if (xCrossingEvent.get_type() == 7) { XAwtState.setComponentMouseEntered(getEventSource()); XGlobalCursorManager.nativeUpdateCursor(getEventSource()); } else { XAwtState.setComponentMouseEntered(null); }  return; }  long l1 = xCrossingEvent.get_subwindow(); if (l1 != 0L) { XBaseWindow xBaseWindow = XToolkit.windowToXWindow(l1); if (xBaseWindow != null && xBaseWindow instanceof XWindow && !xBaseWindow.isEventDisabled(paramXEvent)) return;  }  Component component = XAwtState.getComponentMouseEntered(); if (xWindowPeer != null) if (!xWindowPeer.isModalBlocked()) { if (xCrossingEvent.get_type() == 7) { XAwtState.setComponentMouseEntered(getEventSource()); XGlobalCursorManager.nativeUpdateCursor(getEventSource()); } else { XAwtState.setComponentMouseEntered(null); }  } else { ((XComponentPeer)AWTAccessor.getComponentAccessor().<XComponentPeer>getPeer(this.target)).pSetCursor(Cursor.getPredefinedCursor(0)); }   if (isEventDisabled(paramXEvent)) return;  long l2 = XToolkit.nowMillisUTC_offset(xCrossingEvent.get_time()); int i = getModifiers(xCrossingEvent.get_state(), 0, 0); boolean bool1 = false; boolean bool2 = false; int j = xCrossingEvent.get_x(); int k = xCrossingEvent.get_y(); if (xCrossingEvent.get_window() != this.window) { Point point = toLocal(xCrossingEvent.get_x_root(), xCrossingEvent.get_y_root()); j = point.x; k = point.y; }  if (component != null) { MouseEvent mouseEvent = new MouseEvent(component, 505, l2, i, xCrossingEvent.get_x(), xCrossingEvent.get_y(), xCrossingEvent.get_x_root(), xCrossingEvent.get_y_root(), bool1, bool2, 0); postEventToEventQueue(mouseEvent); eventLog.finest("Clearing last window ref"); lastWindowRef = null; }  if (xCrossingEvent.get_type() == 7) { MouseEvent mouseEvent = new MouseEvent(getEventSource(), 504, l2, i, xCrossingEvent.get_x(), xCrossingEvent.get_y(), xCrossingEvent.get_x_root(), xCrossingEvent.get_y_root(), bool1, bool2, 0); postEventToEventQueue(mouseEvent); }  } public void doLayout(int paramInt1, int paramInt2, int paramInt3, int paramInt4) {} public void handleConfigureNotifyEvent(XEvent paramXEvent) { Rectangle rectangle1 = getBounds(); super.handleConfigureNotifyEvent(paramXEvent); if (insLog.isLoggable(PlatformLogger.Level.FINER)) insLog.finer("Configure, {0}, event disabled: {1}", new Object[] { paramXEvent.get_xconfigure(), Boolean.valueOf(isEventDisabled(paramXEvent)) });  if (isEventDisabled(paramXEvent)) return;  Rectangle rectangle2 = getBounds(); if (!rectangle2.getSize().equals(rectangle1.getSize())) postEventToEventQueue(new ComponentEvent(getEventSource(), 101));  if (!rectangle2.getLocation().equals(rectangle1.getLocation())) postEventToEventQueue(new ComponentEvent(getEventSource(), 100));  } public void handleMapNotifyEvent(XEvent paramXEvent) { super.handleMapNotifyEvent(paramXEvent); if (log.isLoggable(PlatformLogger.Level.FINE)) log.fine("Mapped {0}", new Object[] { this });  if (isEventDisabled(paramXEvent)) return;  ComponentEvent componentEvent = new ComponentEvent(getEventSource(), 102); postEventToEventQueue(componentEvent); } public void handleUnmapNotifyEvent(XEvent paramXEvent) { super.handleUnmapNotifyEvent(paramXEvent); if (isEventDisabled(paramXEvent)) return;  ComponentEvent componentEvent = new ComponentEvent(this.target, 103); postEventToEventQueue(componentEvent); } private void dumpKeysymArray(XKeyEvent paramXKeyEvent) { if (keyEventLog.isLoggable(PlatformLogger.Level.FINE)) keyEventLog.fine("  " + Long.toHexString(XlibWrapper.XKeycodeToKeysym(XToolkit.getDisplay(), paramXKeyEvent.get_keycode(), 0)) + "\n        " + Long.toHexString(XlibWrapper.XKeycodeToKeysym(XToolkit.getDisplay(), paramXKeyEvent.get_keycode(), 1)) + "\n        " + Long.toHexString(XlibWrapper.XKeycodeToKeysym(XToolkit.getDisplay(), paramXKeyEvent.get_keycode(), 2)) + "\n        " + Long.toHexString(XlibWrapper.XKeycodeToKeysym(XToolkit.getDisplay(), paramXKeyEvent.get_keycode(), 3)));  } int keysymToUnicode(long paramLong, int paramInt) { return XKeysym.convertKeysym(paramLong, paramInt); } int keyEventType2Id(int paramInt) { return (paramInt == 2) ? 401 : ((paramInt == 3) ? 402 : 0); } private static long xkeycodeToKeysym(XKeyEvent paramXKeyEvent) { return XKeysym.getKeysym(paramXKeyEvent); } private long xkeycodeToPrimaryKeysym(XKeyEvent paramXKeyEvent) { return XKeysym.xkeycode2primary_keysym(paramXKeyEvent); } private static int primaryUnicode2JavaKeycode(int paramInt) { return (paramInt > 0) ? ExtendedKeyCodes.getExtendedKeyCodeForChar(paramInt) : 0; } void logIncomingKeyEvent(XKeyEvent paramXKeyEvent) { if (keyEventLog.isLoggable(PlatformLogger.Level.FINE)) keyEventLog.fine("--XWindow.java:handleKeyEvent:" + paramXKeyEvent);  dumpKeysymArray(paramXKeyEvent); if (keyEventLog.isLoggable(PlatformLogger.Level.FINE)) keyEventLog.fine("XXXXXXXXXXXXXX javakeycode will be most probably:0x" + Integer.toHexString(XKeysym.getJavaKeycodeOnly(paramXKeyEvent)));  } public void handleKeyPress(XEvent paramXEvent) { super.handleKeyPress(paramXEvent); XKeyEvent xKeyEvent = paramXEvent.get_xkey(); if (eventLog.isLoggable(PlatformLogger.Level.FINE)) eventLog.fine(xKeyEvent.toString());  if (isEventDisabled(paramXEvent)) return;  handleKeyPress(xKeyEvent); } final void handleKeyPress(XKeyEvent paramXKeyEvent) { long[] arrayOfLong = new long[2]; int i = 0; arrayOfLong[0] = 0L; if (keyEventLog.isLoggable(PlatformLogger.Level.FINE)) logIncomingKeyEvent(paramXKeyEvent);  if (haveCurrentX11InputMethodInstance()) { if (x11inputMethodLookupString(paramXKeyEvent.pData, arrayOfLong)) { if (keyEventLog.isLoggable(PlatformLogger.Level.FINE)) keyEventLog.fine("--XWindow.java XIM did process event; return; dec keysym processed:" + arrayOfLong[0] + "; hex keysym processed:" + Long.toHexString(arrayOfLong[0]));  return; }  i = keysymToUnicode(arrayOfLong[0], paramXKeyEvent.get_state()); if (keyEventLog.isLoggable(PlatformLogger.Level.FINE)) keyEventLog.fine("--XWindow.java XIM did NOT process event, hex keysym:" + Long.toHexString(arrayOfLong[0]) + "\n                                         unicode key:" + Integer.toHexString(i));  } else { arrayOfLong[0] = xkeycodeToKeysym(paramXKeyEvent); i = keysymToUnicode(arrayOfLong[0], paramXKeyEvent.get_state()); if (keyEventLog.isLoggable(PlatformLogger.Level.FINE)) keyEventLog.fine("--XWindow.java XIM is absent;             hex keysym:" + Long.toHexString(arrayOfLong[0]) + "\n                                         unicode key:" + Integer.toHexString(i));  }  boolean bool = isDeadKey(arrayOfLong[0]); XKeysym.Keysym2JavaKeycode keysym2JavaKeycode = bool ? XKeysym.getJavaKeycode(arrayOfLong[0]) : XKeysym.getJavaKeycode(paramXKeyEvent); if (keysym2JavaKeycode == null) keysym2JavaKeycode = new XKeysym.Keysym2JavaKeycode(0, 0);  int j = keysymToUnicode(xkeycodeToPrimaryKeysym(paramXKeyEvent), 0); if (keyEventLog.isLoggable(PlatformLogger.Level.FINE)) keyEventLog.fine(">>>Fire Event:" + ((paramXKeyEvent.get_type() == 2) ? "KEY_PRESSED; " : "KEY_RELEASED; ") + "jkeycode:decimal=" + keysym2JavaKeycode.getJavaKeycode() + ", hex=0x" + Integer.toHexString(keysym2JavaKeycode.getJavaKeycode()) + ";  legacy jkeycode: decimal=" + XKeysym.getLegacyJavaKeycodeOnly(paramXKeyEvent) + ", hex=0x" + Integer.toHexString(XKeysym.getLegacyJavaKeycodeOnly(paramXKeyEvent)) + "; ");  int k = XKeysym.getLegacyJavaKeycodeOnly(paramXKeyEvent); int m = (keysym2JavaKeycode.getJavaKeycode() == 0) ? primaryUnicode2JavaKeycode(j) : keysym2JavaKeycode.getJavaKeycode(); postKeyEvent(401, paramXKeyEvent.get_time(), bool ? m : k, (i == 0) ? 65535 : i, keysym2JavaKeycode.getKeyLocation(), paramXKeyEvent.get_state(), paramXKeyEvent.getPData(), XKeyEvent.getSize(), paramXKeyEvent.get_keycode(), j, m); if (i > 0 && !bool) { if (keyEventLog.isLoggable(PlatformLogger.Level.FINE)) keyEventLog.fine("fire _TYPED on " + i);  postKeyEvent(400, paramXKeyEvent.get_time(), 0, i, 0, paramXKeyEvent.get_state(), paramXKeyEvent.getPData(), XKeyEvent.getSize(), 0L, j, 0); }  } public void handleKeyRelease(XEvent paramXEvent) { super.handleKeyRelease(paramXEvent); XKeyEvent xKeyEvent = paramXEvent.get_xkey(); if (eventLog.isLoggable(PlatformLogger.Level.FINE)) eventLog.fine(xKeyEvent.toString());  if (isEventDisabled(paramXEvent)) return;  handleKeyRelease(xKeyEvent); } private void handleKeyRelease(XKeyEvent paramXKeyEvent) { int i = 0; if (keyEventLog.isLoggable(PlatformLogger.Level.FINE)) logIncomingKeyEvent(paramXKeyEvent);  long l = xkeycodeToKeysym(paramXKeyEvent); boolean bool = isDeadKey(l); XKeysym.Keysym2JavaKeycode keysym2JavaKeycode = bool ? XKeysym.getJavaKeycode(l) : XKeysym.getJavaKeycode(paramXKeyEvent); if (keysym2JavaKeycode == null) keysym2JavaKeycode = new XKeysym.Keysym2JavaKeycode(0, 0);  if (keyEventLog.isLoggable(PlatformLogger.Level.FINE)) keyEventLog.fine(">>>Fire Event:" + ((paramXKeyEvent.get_type() == 2) ? "KEY_PRESSED; " : "KEY_RELEASED; ") + "jkeycode:decimal=" + keysym2JavaKeycode.getJavaKeycode() + ", hex=0x" + Integer.toHexString(keysym2JavaKeycode.getJavaKeycode()) + ";  legacy jkeycode: decimal=" + XKeysym.getLegacyJavaKeycodeOnly(paramXKeyEvent) + ", hex=0x" + Integer.toHexString(XKeysym.getLegacyJavaKeycodeOnly(paramXKeyEvent)) + "; ");  i = keysymToUnicode(xkeycodeToKeysym(paramXKeyEvent), paramXKeyEvent.get_state()); int j = keysymToUnicode(xkeycodeToPrimaryKeysym(paramXKeyEvent), 0); int k = XKeysym.getLegacyJavaKeycodeOnly(paramXKeyEvent); int m = (keysym2JavaKeycode.getJavaKeycode() == 0) ? primaryUnicode2JavaKeycode(j) : keysym2JavaKeycode.getJavaKeycode(); postKeyEvent(402, paramXKeyEvent.get_time(), bool ? m : k, (i == 0) ? 65535 : i, keysym2JavaKeycode.getKeyLocation(), paramXKeyEvent.get_state(), paramXKeyEvent.getPData(), XKeyEvent.getSize(), paramXKeyEvent.get_keycode(), j, m); } private boolean isDeadKey(long paramLong) { return (65104L <= paramLong && paramLong <= 65119L); } int getWMState() { if (this.stateChanged) { this.stateChanged = false; WindowPropertyGetter windowPropertyGetter = new WindowPropertyGetter(this.window, XWM.XA_WM_STATE, 0L, 1L, false, XWM.XA_WM_STATE); try { int i = windowPropertyGetter.execute(); if (i != 0 || windowPropertyGetter.getData() == 0L) return this.savedState = 0;  if (windowPropertyGetter.getActualType() != XWM.XA_WM_STATE.getAtom() && windowPropertyGetter.getActualFormat() != 32) return this.savedState = 0;  this.savedState = (int)Native.getCard32(windowPropertyGetter.getData()); } finally { windowPropertyGetter.dispose(); }  }  return this.savedState; } protected void stateChanged(long paramLong, int paramInt1, int paramInt2) {} public void handlePropertyNotify(XEvent paramXEvent) { super.handlePropertyNotify(paramXEvent); XPropertyEvent xPropertyEvent = paramXEvent.get_xproperty(); if (xPropertyEvent.get_atom() == XWM.XA_WM_STATE.getAtom()) { this.stateChanged = true; stateChanged(xPropertyEvent.get_time(), this.savedState, getWMState()); }  } public void reshape(Rectangle paramRectangle) { reshape(paramRectangle.x, paramRectangle.y, paramRectangle.width, paramRectangle.height); } public void reshape(int paramInt1, int paramInt2, int paramInt3, int paramInt4) { if (paramInt3 <= 0) paramInt3 = 1;  if (paramInt4 <= 0) paramInt4 = 1;  this.x = paramInt1; this.y = paramInt2; this.width = paramInt3; this.height = paramInt4; xSetBounds(paramInt1, paramInt2, paramInt3, paramInt4); validateSurface(); layout(); } public void layout() {} boolean isShowing() { return this.visible; } boolean isResizable() { return true; } boolean isLocationByPlatform() { return false; } void updateSizeHints() { updateSizeHints(this.x, this.y, this.width, this.height); } void updateSizeHints(int paramInt1, int paramInt2, int paramInt3, int paramInt4) { long l = 0x8L | (isLocationByPlatform() ? 0L : 5L); if (!isResizable()) { if (log.isLoggable(PlatformLogger.Level.FINER)) log.finer("Window {0} is not resizable", new Object[] { this });  l |= 0x30L; } else if (log.isLoggable(PlatformLogger.Level.FINER)) { log.finer("Window {0} is resizable", new Object[] { this }); }  setSizeHints(l, paramInt1, paramInt2, paramInt3, paramInt4); } void updateSizeHints(int paramInt1, int paramInt2) { long l = isLocationByPlatform() ? 0L : 5L; if (!isResizable()) { if (log.isLoggable(PlatformLogger.Level.FINER)) log.finer("Window {0} is not resizable", new Object[] { this });  l |= 0x38L; } else if (log.isLoggable(PlatformLogger.Level.FINER)) { log.finer("Window {0} is resizable", new Object[] { this }); }  setSizeHints(l, paramInt1, paramInt2, this.width, this.height); } void validateSurface() { if (this.width != this.oldWidth || this.height != this.oldHeight) { doValidateSurface(); this.oldWidth = this.width; this.oldHeight = this.height; }  } final void doValidateSurface() { SurfaceData surfaceData = this.surfaceData; if (surfaceData != null) { this.surfaceData = this.graphicsConfig.createSurfaceData(this); surfaceData.invalidate(); }  } public SurfaceData getSurfaceData() { return this.surfaceData; } public void dispose() { SurfaceData surfaceData = this.surfaceData; this.surfaceData = null; if (surfaceData != null) surfaceData.invalidate();  XToolkit.targetDisposedPeer(this.target, this); destroy(); } public Point getLocationOnScreen() { synchronized (this.target.getTreeLock()) { Component component = this.target; while (component != null && !(component instanceof java.awt.Window)) component = AWTAccessor.getComponentAccessor().getParent(component);  if (component == null || component instanceof sun.awt.EmbeddedFrame) return toGlobal(0, 0);  XToolkit.awtLock(); try { Object object = XToolkit.targetToPeer(component); if (object == null || !(object instanceof XDecoratedPeer) || ((XDecoratedPeer)object).configure_seen) return toGlobal(0, 0);  Point point = toOtherWindow(getContentWindow(), ((XDecoratedPeer)object).getContentWindow(), 0, 0); if (point == null) point = new Point(((XBaseWindow)object).getAbsoluteX(), ((XBaseWindow)object).getAbsoluteY());  point.x += component.getX(); point.y += component.getY(); return point; } finally { XToolkit.awtUnlock(); }  }  } static void setBData(KeyEvent paramKeyEvent, byte[] paramArrayOfbyte) { AWTAccessor.getAWTEventAccessor().setBData(paramKeyEvent, paramArrayOfbyte); } public void postKeyEvent(int paramInt1, long paramLong1, int paramInt2, int paramInt3, int paramInt4, int paramInt5, long paramLong2, int paramInt6, long paramLong3, int paramInt7, int paramInt8) { long l = XToolkit.nowMillisUTC_offset(paramLong1); int i = getModifiers(paramInt5, 0, paramInt2); KeyEvent keyEvent = new KeyEvent(getEventSource(), paramInt1, l, i, paramInt2, (char)paramInt3, paramInt4); if (paramLong2 != 0L) { byte[] arrayOfByte = Native.toBytes(paramLong2, paramInt6); setBData(keyEvent, arrayOfByte); }  AWTAccessor.KeyEventAccessor keyEventAccessor = AWTAccessor.getKeyEventAccessor(); keyEventAccessor.setRawCode(keyEvent, paramLong3); keyEventAccessor.setPrimaryLevelUnicode(keyEvent, paramInt7); keyEventAccessor.setExtendedKeyCode(keyEvent, paramInt8); postEventToEventQueue(keyEvent); }
/*      */   public PropMwmHints getMWMHints() { if (this.mwm_hints == null) { this.mwm_hints = new PropMwmHints(); if (!XWM.XA_MWM_HINTS.getAtomData(getWindow(), this.mwm_hints.pData, 5)) this.mwm_hints.zero();  }  return this.mwm_hints; }
/*      */   public void setMWMHints(PropMwmHints paramPropMwmHints) { this.mwm_hints = paramPropMwmHints; if (paramPropMwmHints != null) XWM.XA_MWM_HINTS.setAtomData(getWindow(), this.mwm_hints.pData, 5);  }
/*      */   protected final void initWMProtocols() { wm_protocols.setAtomListProperty(this, getWMProtocols()); }
/*      */   protected XAtomList getWMProtocols() { return new XAtomList(); }
/* 1499 */   public void setFullScreenExclusiveModeState(boolean paramBoolean) { synchronized (getStateLock()) {
/* 1500 */       this.fullScreenExclusiveModeState = paramBoolean;
/*      */     }  }
/*      */ 
/*      */   
/*      */   public final boolean isFullScreenExclusiveMode() {
/* 1505 */     synchronized (getStateLock()) {
/* 1506 */       return this.fullScreenExclusiveModeState;
/*      */     } 
/*      */   }
/*      */   
/*      */   native int getNativeColor(Color paramColor, GraphicsConfiguration paramGraphicsConfiguration);
/*      */   
/*      */   native void getWMInsets(long paramLong1, long paramLong2, long paramLong3, long paramLong4, long paramLong5, long paramLong6);
/*      */   
/*      */   native long getTopWindow(long paramLong1, long paramLong2);
/*      */   
/*      */   native void getWindowBounds(long paramLong1, long paramLong2, long paramLong3, long paramLong4, long paramLong5);
/*      */   
/*      */   private static native void initIDs();
/*      */   
/*      */   private native boolean x11inputMethodLookupString(long paramLong, long[] paramArrayOflong);
/*      */   
/*      */   private native boolean haveCurrentX11InputMethodInstance();
/*      */   
/*      */   static native int getAWTKeyCodeForKeySym(int paramInt);
/*      */   
/*      */   static native int getKeySymForAWTKeyCode(int paramInt);
/*      */ }


/* Location:              /Users/timmy/timmy/OSWE/oswe/openCRX/rt.jar!/sun/awt/X11/XWindow.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.1.3
 */